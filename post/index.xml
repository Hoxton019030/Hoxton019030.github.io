<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Hoxton</title><link>https://hoxtonhsu.com/post/</link><description>Recent content in Posts on Hoxton</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Sat, 01 Apr 2023 19:40:36 +0800</lastBuildDate><atom:link href="https://hoxtonhsu.com/post/index.xml" rel="self" type="application/rss+xml"/><item><title>手把手教你寫SprintBoot框架</title><link>https://hoxtonhsu.com/p/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%AF%ABsprintboot%E6%A1%86%E6%9E%B6/</link><pubDate>Sat, 01 Apr 2023 19:40:36 +0800</pubDate><guid>https://hoxtonhsu.com/p/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%AF%ABsprintboot%E6%A1%86%E6%9E%B6/</guid><description>&lt;img src="https://i.imgur.com/1G2G1o4.png" alt="Featured image of post 手把手教你寫SprintBoot框架" />&lt;h1 id="前言">前言&lt;/h1>
&lt;p>連假實在有點無聊，打算來手寫一個SprintBoot專案，來加深自己對這種IoC框架的理解，我打算把這個框架叫做&lt;strong>Winter&lt;/strong>，象徵我每況愈下的人生，唉&lt;/p>
&lt;h1 id="sprintboot-單例池">SprintBoot 單例池&lt;/h1>
&lt;p>本章所用到的程式碼存放在這&lt;/p>
&lt;p>&lt;a href="https://github.com/Hoxton019030/Winter/tree/bean-scan-and-beandefinition">https://github.com/Hoxton019030/Winter/tree/bean-scan-and-beandefinition&lt;/a>&lt;/p>
&lt;h2 id="一切開始的地方main">一切開始的地方，Main&lt;/h2>
&lt;p>啟動類的寫法如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Main&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">WinterApplicationContext&lt;/span> &lt;span class="n">applicationContext&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">WinterApplicationContext&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">AppConfig&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>這邊看到兩個陌生的Class，&lt;strong>WinterApplicationContext&lt;/strong>，以及&lt;strong>AppConfig&lt;/strong>。先講AppConfig是什麼，它是Winter的配置類，我們會在這邊去配置我們Winter Bean的位置在哪邊，所以我們要加上@ComponentScan這個註解，讓我們的Winter框架知道它要去什麼package底下找到Bean。這邊我們就先創這個Class就好，目前先不會寫到它。&lt;/p>
&lt;h2 id="appconfig">AppConfig&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Winter的配置文件
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@ComponentScan&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;org.hoxton.service&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">AppConfig&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="componentscan">@ComponentScan&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Retention&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RetentionPolicy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">RUNTIME&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Target&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ElementType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">TYPE&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nd">@interface&lt;/span> &lt;span class="n">ComponentScan&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="nf">value&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span> &lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>用來示意我們的Winter框架，要去哪邊找到我們的Bean，我們的Bean都會寫在org.hoxton.service這個路徑下面。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/nSgswbb.png"
loading="lazy"
alt="image-20230401195655052"
>&lt;/p>
&lt;h2 id="component">@Component&lt;/h2>
&lt;p>這個大家熟的吧，將當前類變成一個Spring Bean的註解&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Retention&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RetentionPolicy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">RUNTIME&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Target&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ElementType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">TYPE&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nd">@interface&lt;/span> &lt;span class="n">Component&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="nf">value&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="scope">@Scope&lt;/h2>
&lt;p>標示當前類所要創建的Bean是一個單例還是一個Prototype的Bean&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Retention&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RetentionPolicy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">RUNTIME&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Target&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ElementType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">TYPE&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nd">@interface&lt;/span> &lt;span class="n">Scope&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="nf">value&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="userservice">UserService&lt;/h2>
&lt;p>用來假設MVC架構中的Service層&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Component&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;userService&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Scope&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;singleton&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">UserService&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="winterapplicationcontext">WinterApplicationContext&lt;/h2>
&lt;p>這個類就是SpringBoot框架中的容器類，我們接下來要來手寫一個容器類，首先先創這個類出來，並且它要吃一個Class參數作為Constructor&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">WinterApplicationContext&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">Class&lt;/span> &lt;span class="n">configClass&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">WinterApplicationContext&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Class&lt;/span> &lt;span class="n">configClass&lt;/span>&lt;span class="o">){&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">configClass&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">configClass&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接下來我們寫一個方法，叫做Scan，這個Scan方法會去得到@ComponentScan這個註解的值，取得要掃描的Package路徑，取得路徑之後，會去掃描路徑底下有哪些類有被@Component這個註解所修飾，並且會去找尋@Scope這個註解，得知哪些Bean是Singleton，哪些Bean是prototype，將這些資訊放入&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">private&lt;/span> &lt;span class="n">ConcurrentHashMap&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BeanDefinition&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">beanDefinitionMap&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ConcurrentHashMap&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>這個ConcurrentHashMap中&lt;/p>
&lt;h2 id="步驟">步驟&lt;/h2>
&lt;ol>
&lt;li>從Config類中取得ComponentScan註解的值，其值即為路徑&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">private&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">scan&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Class&lt;/span> &lt;span class="n">configClass&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// 從Config類中取得ComponetScan註解的值，其值即為路徑
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">ComponentScan&lt;/span> &lt;span class="n">componentScanAnnotation&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">ComponentScan&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">configClass&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getAnnotation&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ComponentScan&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">path&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">componentScanAnnotation&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">value&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/br>
&lt;ol start="2">
&lt;li>使用類加載，讀出Class檔案的資訊&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">private&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">scan&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Class&lt;/span> &lt;span class="n">configClass&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// 從Config類中取得ComponentScan註解的值，其值即為路徑
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">ComponentScan&lt;/span> &lt;span class="n">componentScanAnnotation&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">ComponentScan&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">configClass&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getAnnotation&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ComponentScan&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">path&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">componentScanAnnotation&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">value&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">//掃描 org.hoxton.service
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 類加載器 (Class Loader)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// Java中有三種類加載器，以及對應的加載路徑
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// BootStrap ---&amp;gt; jre/lib
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// Ext ---&amp;gt; jre/ext/lib
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// App ---&amp;gt; classpath ---&amp;gt; &amp;#34;C:\Program Files\Java\jdk-11\bin\java.exe&amp;#34; &amp;#34;-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA 2022.2.2\lib\idea_rt.jar=5445:C:\Program Files\JetBrains\IntelliJ IDEA 2022.2.2\bin&amp;#34; -Dfile.encoding=UTF-8 -classpath C:\Users\hoxton\Desktop\Winter\target\classes org.hoxton.Test 編譯器顯示的資訊
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/br>
&lt;p>&lt;img src="https://i.imgur.com/olz0WaZ.png"
loading="lazy"
alt="image-20230401202057765"
>&lt;/p>
&lt;ol start="3">
&lt;li>BeanDefinition&lt;/li>
&lt;/ol>
&lt;p>我們先來討論一個東西叫做BeanDefinition，這個類用來描述一個Bean的資訊，我們目前讓這個類盡量簡單一點，我們只需要紀錄一個Bean它的類型以及它的作用範圍&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">BeanDefinition&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 當前Bean類型
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">Class&lt;/span> &lt;span class="n">clazz&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 當前Bean作用範圍
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">scope&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">BeanDefinition&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">BeanDefinition&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Class&lt;/span> &lt;span class="n">clazz&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">scope&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">clazz&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">clazz&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">scope&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">scope&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Class&lt;/span> &lt;span class="nf">getClazz&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">clazz&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">setClazz&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Class&lt;/span> &lt;span class="n">clazz&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">clazz&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">clazz&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">getScope&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">scope&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">setScope&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">scope&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">scope&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">scope&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="4">
&lt;li>使用類加載器，依照@ComponentScan的值，去掃描底下的Bean，&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">scan&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Class&lt;/span> &lt;span class="n">configClass&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ComponentScan&lt;/span> &lt;span class="n">componentScanAnnotation&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">ComponentScan&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">configClass&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getAnnotation&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ComponentScan&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">path&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">componentScanAnnotation&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">value&lt;/span>&lt;span class="o">();&lt;/span> &lt;span class="c1">//掃描路徑
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">//掃描 org.hoxton.service
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 類加載器 (Class Loader)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// Java中有三種類加載器，以及對應的加載路徑
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// BootStrap ---&amp;gt; jre/lib
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// Ext ---&amp;gt; jre/ext/lib
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// App ---&amp;gt; classpath ---&amp;gt; &amp;#34;C:\Program Files\Java\jdk-11\bin\java.exe&amp;#34; &amp;#34;-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA 2022.2.2\lib\idea_rt.jar=5445:C:\Program Files\JetBrains\IntelliJ IDEA 2022.2.2\bin&amp;#34; -Dfile.encoding=UTF-8 -classpath C:\Users\za546\Desktop\Winter\target\classes org.hoxton.Test 編譯器顯示的資訊
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="n">ClassLoader&lt;/span> &lt;span class="n">classLoader&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">WinterApplicationContext&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getClassLoader&lt;/span>&lt;span class="o">();&lt;/span> &lt;span class="c1">//app加載器
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">URL&lt;/span> &lt;span class="n">resource&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">classLoader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getResource&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;org/hoxton/service&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//使用類加載，掃苗檔案下的.class檔
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">File&lt;/span> &lt;span class="n">file&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">File&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">resource&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getFile&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">file&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isDirectory&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">File&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">files&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">listFiles&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">File&lt;/span> &lt;span class="n">f&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">files&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">fileName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getAbsolutePath&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">fileName&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">endsWith&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;.class&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">//若檔案以.class結尾即為.class檔，則進入流程判斷
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">className&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fileName&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">substring&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">fileName&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">indexOf&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;org&amp;#34;&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="n">fileName&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">indexOf&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;.class&amp;#34;&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="n">className&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">className&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">replace&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;\\&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;.&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">Class&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;&lt;/span> &lt;span class="n">clazz&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">clazz&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">classLoader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">loadClass&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">className&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">ClassNotFoundException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RuntimeException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">clazz&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isAnnotationPresent&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Component&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">//類上若有@Component註解，代表為一個Bean
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//表示這個類是個Bean
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// ...? Class -- &amp;gt; bean ?
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 解析類，判斷當前Bean是單例Bean還是Prototype的Bean，生成BeanDefinition
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="n">Component&lt;/span> &lt;span class="n">componentAnnotation&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">clazz&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDeclaredAnnotation&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Component&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">beanName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">componentAnnotation&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">value&lt;/span>&lt;span class="o">();&lt;/span> &lt;span class="c1">//取得@Component的值(bean名)
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">//BeanDefinition- Bean定義
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">BeanDefinition&lt;/span> &lt;span class="n">beanDefinition&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">BeanDefinition&lt;/span>&lt;span class="o">();&lt;/span> &lt;span class="c1">//取得一個BeanDefinition物件
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">beanDefinition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setClazz&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">clazz&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">clazz&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isAnnotationPresent&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Scope&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Scope&lt;/span> &lt;span class="n">scopeAnnotation&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">clazz&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDeclaredAnnotation&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Scope&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">beanDefinition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setScope&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">scopeAnnotation&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">value&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">beanDefinition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setScope&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SINGLETON&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//沒加Scope註解，預設為單例
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="n">beanDefinitionMap&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanName&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">beanDefinition&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">// 將beanDefinition放進ConcurrentHashMap中
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="5">
&lt;li>我們先來稍微預覽一下整個Class完成後會長什麼樣子，讓大家更有一個概念&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;span class="lnt">102
&lt;/span>&lt;span class="lnt">103
&lt;/span>&lt;span class="lnt">104
&lt;/span>&lt;span class="lnt">105
&lt;/span>&lt;span class="lnt">106
&lt;/span>&lt;span class="lnt">107
&lt;/span>&lt;span class="lnt">108
&lt;/span>&lt;span class="lnt">109
&lt;/span>&lt;span class="lnt">110
&lt;/span>&lt;span class="lnt">111
&lt;/span>&lt;span class="lnt">112
&lt;/span>&lt;span class="lnt">113
&lt;/span>&lt;span class="lnt">114
&lt;/span>&lt;span class="lnt">115
&lt;/span>&lt;span class="lnt">116
&lt;/span>&lt;span class="lnt">117
&lt;/span>&lt;span class="lnt">118
&lt;/span>&lt;span class="lnt">119
&lt;/span>&lt;span class="lnt">120
&lt;/span>&lt;span class="lnt">121
&lt;/span>&lt;span class="lnt">122
&lt;/span>&lt;span class="lnt">123
&lt;/span>&lt;span class="lnt">124
&lt;/span>&lt;span class="lnt">125
&lt;/span>&lt;span class="lnt">126
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">WinterApplicationContext&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">final&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">SINGLETON&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;singleton&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">Class&lt;/span> &lt;span class="n">configClass&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 一個單例池，存放Spring Bean
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">ConcurrentHashMap&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">singletonPool&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ConcurrentHashMap&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 存放所有Spring Bean的定義
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">ConcurrentHashMap&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BeanDefinition&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">beanDefinitionMap&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ConcurrentHashMap&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * @param configClass Winter的配置文件
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">WinterApplicationContext&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Class&lt;/span> &lt;span class="n">configClass&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">configClass&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">configClass&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">//解析配置類
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// ComponentScan註解解析 -&amp;gt; 掃描路徑 -&amp;gt; 掃描 ---&amp;gt; BeanDefinition ---&amp;gt; BeanDefinitionMap
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">scan&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">configClass&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">beanName&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">beanDefinitionMap&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">keySet&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">BeanDefinition&lt;/span> &lt;span class="n">beanDefinition&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">beanDefinitionMap&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanName&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//如果bean scope是單例，則放進單例池中
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanDefinition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getScope&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SINGLETON&lt;/span>&lt;span class="o">)){&lt;/span>
&lt;span class="n">Object&lt;/span> &lt;span class="n">bean&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">createBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanDefinition&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">singletonPool&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanName&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">bean&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="nf">createBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">BeanDefinition&lt;/span> &lt;span class="n">beanDefinition&lt;/span>&lt;span class="o">){&lt;/span>
&lt;span class="n">Class&lt;/span> &lt;span class="n">clazz&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">beanDefinition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getClazz&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Object&lt;/span> &lt;span class="n">instance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">clazz&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDeclaredConstructor&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">newInstance&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">InstantiationException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RuntimeException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">IllegalAccessException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RuntimeException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">InvocationTargetException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RuntimeException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">NoSuchMethodException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RuntimeException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">scan&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Class&lt;/span> &lt;span class="n">configClass&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ComponentScan&lt;/span> &lt;span class="n">componentScanAnnotation&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">ComponentScan&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">configClass&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getAnnotation&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ComponentScan&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">path&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">componentScanAnnotation&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">value&lt;/span>&lt;span class="o">();&lt;/span> &lt;span class="c1">//掃描路徑
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">//掃描 org.hoxton.service
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 類加載器 (Class Loader)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// Java中有三種類加載器，以及對應的加載路徑
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// BootStrap ---&amp;gt; jre/lib
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// Ext ---&amp;gt; jre/ext/lib
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// App ---&amp;gt; classpath ---&amp;gt; &amp;#34;C:\Program Files\Java\jdk-11\bin\java.exe&amp;#34; &amp;#34;-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA 2022.2.2\lib\idea_rt.jar=5445:C:\Program Files\JetBrains\IntelliJ IDEA 2022.2.2\bin&amp;#34; -Dfile.encoding=UTF-8 -classpath C:\Users\za546\Desktop\Winter\target\classes org.hoxton.Test 編譯器顯示的資訊
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="n">ClassLoader&lt;/span> &lt;span class="n">classLoader&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">WinterApplicationContext&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getClassLoader&lt;/span>&lt;span class="o">();&lt;/span> &lt;span class="c1">//app加載器
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">URL&lt;/span> &lt;span class="n">resource&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">classLoader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getResource&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;org/hoxton/service&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//使用類加載，掃苗檔案下的.class檔
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">File&lt;/span> &lt;span class="n">file&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">File&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">resource&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getFile&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">file&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isDirectory&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">File&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">files&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">listFiles&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">File&lt;/span> &lt;span class="n">f&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">files&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">fileName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getAbsolutePath&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">fileName&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">endsWith&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;.class&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">className&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fileName&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">substring&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">fileName&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">indexOf&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;org&amp;#34;&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="n">fileName&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">indexOf&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;.class&amp;#34;&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="n">className&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">className&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">replace&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;\\&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;.&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">Class&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;&lt;/span> &lt;span class="n">clazz&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">clazz&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">classLoader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">loadClass&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">className&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">ClassNotFoundException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RuntimeException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">clazz&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isAnnotationPresent&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Component&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//表示這個類是個Bean
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// ...? Class -- &amp;gt; bean ?
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 解析類，判斷當前Bean是單例Bean還是Prototype的Bean，生成BeanDefinition
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="n">Component&lt;/span> &lt;span class="n">componentAnnotation&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">clazz&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDeclaredAnnotation&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Component&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">beanName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">componentAnnotation&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">value&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">//BeanDefinition- Bean定義
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">BeanDefinition&lt;/span> &lt;span class="n">beanDefinition&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">BeanDefinition&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">beanDefinition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setClazz&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">clazz&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">clazz&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isAnnotationPresent&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Scope&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Scope&lt;/span> &lt;span class="n">scopeAnnotation&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">clazz&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDeclaredAnnotation&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Scope&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">beanDefinition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setScope&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">scopeAnnotation&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">value&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">beanDefinition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setScope&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SINGLETON&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">beanDefinitionMap&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanName&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">beanDefinition&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="nf">getBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">beanName&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// 依照beanName去判斷是單例Bean還是Prototype Bean
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">beanDefinitionMap&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">containsKey&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanName&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">BeanDefinition&lt;/span> &lt;span class="n">beanDefinition&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">beanDefinitionMap&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanName&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">beanDefinition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getScope&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SINGLETON&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Object&lt;/span> &lt;span class="n">bean&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">singletonPool&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanName&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">bean&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//創建bean對象嗎?
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="n">bean&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">createBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanDefinition&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">bean&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">NullPointerException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;沒有這個Bean&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="6">
&lt;li>接下來我們繼續回到WinterApplicationContext這個Constructor，我們已經把我們Package底下的Bean掃描完，放進beanDefinitionMap中，那我們接下來要依照這個Map，創建SINGLETON的bean，接著把SINGLETON的Bean放進singletonPool中，這個singletonPool也就是Spring中的&lt;strong>單例池&lt;/strong>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="nf">WinterApplicationContext&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Class&lt;/span> &lt;span class="n">configClass&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">configClass&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">configClass&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">//解析配置類
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// ComponentScan註解解析 -&amp;gt; 掃描路徑 -&amp;gt; 掃描 ---&amp;gt; BeanDefinition ---&amp;gt; BeanDefinitionMap
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">scan&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">configClass&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">beanName&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">beanDefinitionMap&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">keySet&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">//遍整個beanDefinitionMap，找出單例的Bean，放進singletonPool中
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">BeanDefinition&lt;/span> &lt;span class="n">beanDefinition&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">beanDefinitionMap&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanName&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//如果bean scope是單例，則放進單例池中
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanDefinition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getScope&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SINGLETON&lt;/span>&lt;span class="o">)){&lt;/span>
&lt;span class="n">Object&lt;/span> &lt;span class="n">bean&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">createBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanDefinition&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">singletonPool&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanName&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">bean&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="7">
&lt;li>撰寫createBean方法會吃一個BeanDefinition為參數，這個方法會用BeanDefinition的Clazz創建一個Class，接著調用class底下的&lt;code>getDeclaredConstructor()&lt;/code>取得建構子，並用&lt;code>newInstance()&lt;/code>方法創造出一個那個bean的物件出來&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="kd">public&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="nf">createBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">BeanDefinition&lt;/span> &lt;span class="n">beanDefinition&lt;/span>&lt;span class="o">){&lt;/span>
&lt;span class="n">Class&lt;/span> &lt;span class="n">clazz&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">beanDefinition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getClazz&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Object&lt;/span> &lt;span class="n">instance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">clazz&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDeclaredConstructor&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">newInstance&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">InstantiationException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RuntimeException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">IllegalAccessException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RuntimeException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">InvocationTargetException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RuntimeException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">NoSuchMethodException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RuntimeException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="8">
&lt;li>到Main中，使用getBean來取得singletonpool中的Bean&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Main&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">WinterApplicationContext&lt;/span> &lt;span class="n">applicationContext&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">WinterApplicationContext&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">AppConfig&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;可以看到這三個的值是一模一樣的，代表這幾個物件都是同一個&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">applicationContext&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;userService&amp;#34;&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">applicationContext&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;userService&amp;#34;&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">applicationContext&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;userService&amp;#34;&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/KfVnRwp.png"
loading="lazy"
alt="image-20230401205329971"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/5v3ykLV.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;p>這樣就是一個基礎的SprintBoot 單例池的創建&lt;/p>
&lt;h1 id="autowired之實現原理">Autowired之實現原理&lt;/h1>
&lt;p>To Be Continued &amp;hellip;&lt;/p></description></item><item><title>Java中回傳值前的泛型標識符是什麼意思呢</title><link>https://hoxtonhsu.com/p/java%E4%B8%AD%E5%9B%9E%E5%82%B3%E5%80%BC%E5%89%8D%E7%9A%84%E6%B3%9B%E5%9E%8B%E6%A8%99%E8%AD%98%E7%AC%A6%E6%98%AF%E4%BB%80%E9%BA%BC%E6%84%8F%E6%80%9D%E5%91%A2/</link><pubDate>Sat, 01 Apr 2023 00:03:03 +0800</pubDate><guid>https://hoxtonhsu.com/p/java%E4%B8%AD%E5%9B%9E%E5%82%B3%E5%80%BC%E5%89%8D%E7%9A%84%E6%B3%9B%E5%9E%8B%E6%A8%99%E8%AD%98%E7%AC%A6%E6%98%AF%E4%BB%80%E9%BA%BC%E6%84%8F%E6%80%9D%E5%91%A2/</guid><description>&lt;img src="https://i.imgur.com/Y9pLlYY.png" alt="Featured image of post Java中回傳值前的泛型標識符是什麼意思呢" />&lt;p>前一陣子在寫DiscordBot的時候，曾經在教學中看過這種寫法&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">GymBotConfiguration&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">Event&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">GatewayDiscordClient&lt;/span> &lt;span class="nf">gatewayDiscordClient&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kd">final&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">EventListener&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">eventListeners&lt;/span>&lt;span class="o">){&lt;/span>
&lt;span class="kd">final&lt;/span> &lt;span class="n">GatewayDiscordClient&lt;/span> &lt;span class="n">client&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">DiscordClientBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">create&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">token&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">login&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">block&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">EventListener&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">listener&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">eventListeners&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">client&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">on&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">listener&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getEventType&lt;/span>&lt;span class="o">())&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">flatMap&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">listener&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">execute&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">onErrorResume&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">listener&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">handleError&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">subscribe&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">client&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>對於其中&lt;T extends Event>的寫法感到非常困惑，不知道為什麼回傳值前還會有泛型符號，直到最近在研究一些OpenSource的框架時，才又更了解這件事情。&lt;/p>
&lt;h1 id="如何宣告泛型">如何宣告泛型&lt;/h1>
&lt;p>在講這件事情之前，要先有個基礎知識，就是關於Java是如何宣告一個泛型Class的，其實就是在Class後面加上&amp;lt;T&amp;gt;就可以了&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Link&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">E&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如此一來，就可以在其他地方創建一個泛型的Link類&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">Link&lt;/span> &lt;span class="n">link&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Link&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>現在我們在這個Link類裡新增一個方法&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Link&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">E&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">E&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">addToList&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">E&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">){&lt;/span>
&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">E&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">list&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="n">list&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">list&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>這個方法會把傳進來的值，包裝成一個ArrayList並回傳出去，而它參數的型別則是與Link的泛型一致，比如說&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">arg&lt;/span>&lt;span class="o">){&lt;/span>
&lt;span class="n">Link&lt;/span> &lt;span class="n">link&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Link&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;;&lt;/span>
&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">list&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">link&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;早安&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/cpeYA8T.png"
loading="lazy"
alt="image-20230401002712243"
>&lt;/p>
&lt;p>也就是說addToList這個&lt;strong>方法的型別和Link的泛型型別是綁定在一起&lt;/strong>的。&lt;/p>
&lt;h1 id="何謂回傳型別前的泛型">何謂回傳型別前的泛型&lt;/h1>
&lt;p>承上，因為方法的參數型別與類的泛型型別基本上綁定在一起，如果我宣告了一個Link&amp;lt;Integer&amp;gt;，我的addToList就只能吃Integer的參數，那為了要解決這種問題，就有了在回傳型別前的泛型的寫法，釋例如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Link&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">E&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">E&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">addToList&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">E&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">){&lt;/span>
&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">E&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">list&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="n">list&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">list&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">E&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">E&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">addToList2&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">E&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">){&lt;/span>
&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">E&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">list&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="n">list&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">list&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以看到addToList2這個方法的回傳值List&amp;lt;E&amp;gt;前，我加了一個&amp;lt;E&amp;gt;，先別管這個到底能做什麼，我們現在先使用這個方法看看&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/2kuQ8Ol.png"
loading="lazy"
alt="image-20230401003453849"
>&lt;/p>
&lt;p>這時候你發現了，addToList2能吃的參數變成Object類了，當我們輸入一個String&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/httYHD6.png"
loading="lazy"
alt="image-20230401003608198"
>&lt;/p>
&lt;p>輸入一個Double&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/1MrUXaL.png"
loading="lazy"
alt="image-20230401003718395"
>&lt;/p>
&lt;p>也可以輸入一個自定義的類&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/UV8qiDo.png"
loading="lazy"
alt="image-20230401013130560"
>&lt;/p>
&lt;p>可以感受到addToList跟addToList2的差異了嗎？沒錯，addToList2的泛型不受Link的影響，可以自己有自己的泛型&lt;/p>
&lt;h1 id="應用">應用&lt;/h1>
&lt;p>這樣的用法不只可以拿來用在泛型類裡的方法，也可以用在一個非泛型類，比如說&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Student&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Student&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">addPeopleList&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Student&lt;/span> &lt;span class="n">student&lt;/span>&lt;span class="o">){&lt;/span>
&lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Student&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">list&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="n">list&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">student&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">list&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>今天我們希望這個addPeopleList的方法可以吃任何型別的參數，我們如果這樣寫是會報錯的&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/2VxQDBU.png"
loading="lazy"
alt="image-20230401004844813"
>&lt;/p>
&lt;p>原因就在於我們並沒有一個地方告訴編譯器，什麼是T，因為我們的Student類並不是一個泛型類，但實務上，我們又不太可能去修改原有的類，避免破壞掉一些東西，所以我們修改addPeopleList，讓它變成這樣&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/vAcAm7y.png"
loading="lazy"
alt="image-20230401005044108"
>&lt;/p>
&lt;p>如此一來，addPeopleList就可以吃任何型別的參數了，以上就是所謂的泛型方法約束。&lt;/p></description></item><item><title>論@Value與Environment之優劣</title><link>https://hoxtonhsu.com/p/%E8%AB%96value%E8%88%87environment%E4%B9%8B%E5%84%AA%E5%8A%A3/</link><pubDate>Fri, 24 Mar 2023 01:41:57 +0000</pubDate><guid>https://hoxtonhsu.com/p/%E8%AB%96value%E8%88%87environment%E4%B9%8B%E5%84%AA%E5%8A%A3/</guid><description>&lt;img src="https://i.imgur.com/UDvSvgw.png" alt="Featured image of post 論@Value與Environment之優劣" />&lt;p>&lt;img src="https://i.imgur.com/JQHz275.png"
loading="lazy"
>&lt;/p>
&lt;p>SpringBoot中想要從Application.properties中取的值，有兩種常見的方式，其中一種是利用@Value的方式&lt;/p>
&lt;h1 id="value">@Value&lt;/h1>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Value&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="err">&amp;#34;&lt;/span>&lt;span class="n">$&lt;/span>&lt;span class="o">{&lt;/span>&lt;span class="n">app&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">version&lt;/span>&lt;span class="o">})&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">version&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="enviroment">Enviroment&lt;/h1>
&lt;p>另一種則是透過 Enviroment物件來取的&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Environment&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">getAppVersion&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">environment&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;app.version&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="以取值的表現形式來看">以取值的表現形式來看&lt;/h1>
&lt;p>在某些情形下，我們可能會從applicaiton.properties中取出一個陣列值，比如說&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">language=en,zh,jp
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>這時如果使用Enviroment來取，取出來的值會一個String，需要再透過轉換，將它變為一個String&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">Environment&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="nf">getMyArrayProperty&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">propertyValue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;my.array.property&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">propertyValue&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">propertyValue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">split&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;,&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">];&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>但如果用@Value的方式來取值，則可以在宣告變數時，聲明它是一個String或是一個String[]，避免後續的轉換&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Value&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;${language}&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">myArray&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="以單元測試角度來看">以單元測試角度來看&lt;/h1>
&lt;p>這兩個表現形式幾乎一模一樣，都可以取得想要的部分，但最大差別就在單元測試時，由於@Value這個取值方式有賴將整個SpringBoot專案啟動才可以注入，在單元測試的環境下並沒有辦法做到這件事情。但相反的，由於Environment本身屬於一個外部依賴，我們可以很好的替代掉他&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Service&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">VersionService&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Environment&lt;/span> &lt;span class="n">environment&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">VersionService&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Environment&lt;/span> &lt;span class="n">environment&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">environment&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">environment&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">getEunoExAppVersion&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">environment&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;eunoex.version&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@ExtendWith&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MockitoExtension&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">class&lt;/span> &lt;span class="nc">VersionServiceTest&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Mock&lt;/span>
&lt;span class="n">Environment&lt;/span> &lt;span class="n">environment&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@InjectMocks&lt;/span>
&lt;span class="n">VersionService&lt;/span> &lt;span class="n">versionService&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Test&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">getAppVersion_everythingFine_returnSuccessfully&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">given&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">environment&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">any&lt;/span>&lt;span class="o">())).&lt;/span>&lt;span class="na">willReturn&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;v1.2.0&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">ExAppVersion&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">versionService&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getAppVersion&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;AppVersion = &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">AppVersion&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>大概Guy4這樣&lt;/p></description></item><item><title>在window Terminal中使用Cmder</title><link>https://hoxtonhsu.com/p/%E5%9C%A8window-terminal%E4%B8%AD%E4%BD%BF%E7%94%A8cmder/</link><pubDate>Tue, 21 Mar 2023 10:40:57 +0800</pubDate><guid>https://hoxtonhsu.com/p/%E5%9C%A8window-terminal%E4%B8%AD%E4%BD%BF%E7%94%A8cmder/</guid><description>&lt;img src="https://i.imgur.com/l3t70N4.png" alt="Featured image of post 在window Terminal中使用Cmder" />&lt;h1 id="安裝window-terminal">安裝window terminal&lt;/h1>
&lt;p>至Microsoft Store安裝window terminal&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/QHkfcK2.png"
loading="lazy"
alt="image-20230321104350045"
>&lt;/p>
&lt;h1 id="安裝cmder">安裝Cmder&lt;/h1>
&lt;p>&lt;a class="link" href="https://cmder-app.translate.goog/?_x_tr_sl=en&amp;amp;_x_tr_tl=zh-TW&amp;amp;_x_tr_hl=zh-TW&amp;amp;_x_tr_pto=sc" target="_blank" rel="noopener"
>Cmder載點&lt;/a>&lt;/p>
&lt;p>並將它解壓縮後放置&lt;/p>
&lt;p>&lt;code>%USERPROFILE%/AppData/Roaming&lt;/code>&lt;/p>
&lt;p>中&lt;/p>
&lt;p>也就是&lt;/p>
&lt;p>&lt;code>C:\Users\you_userName\AppData\Roaming&lt;/code>&lt;/p>
&lt;h1 id="設定環境變數">設定環境變數&lt;/h1>
&lt;p>接著設定環境變數&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">變數名稱：CMDER_ROOT
變數值：C:\Users\You_userName\AppData\Roaming\cmder
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/evCanCt.png"
loading="lazy"
alt="image-20230321104927389"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">變數名稱：ConEmuDir
變數值：C:\Users\You_userName\AppData\Roaming\cmder\vendor\conemu-maximus5
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/v6v0WUg.png"
loading="lazy"
alt="image-20230321105111605"
>&lt;/p>
&lt;p>設定window Termianl&lt;/p>
&lt;p>打開設定&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/o7ga4o6.png"
loading="lazy"
alt="image-20230321105152420"
>&lt;/p>
&lt;p>按左下角的開啟JSON檔案&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/t0NQTF2.png"
loading="lazy"
alt="image-20230321105210480"
>&lt;/p>
&lt;p>將下列這段貼上至JSON檔中的這個位置&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-json" data-lang="json"> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;background&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;#2E3436&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;commandline&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;cmd.exe /k %CMDER_ROOT%\\vendor\\init.bat&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;font&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;face&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Cascadia Code&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;size&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">10.0&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;guid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;{6d953325-a939-475d-a151-940cbd0302fb}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;icon&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;%CMDER_ROOT%\\icons\\cmder.ico&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Cmder&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;padding&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;15&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;startingDirectory&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;%USERPROFILE%/Desktop&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>就像這樣子&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/jyFYrjK.png"
loading="lazy"
alt="image-20230321105524196"
>&lt;/p>
&lt;p>接著&lt;strong>重開&lt;/strong>window terminal就可以囉~&lt;/p></description></item><item><title>使用Docker在window會出現的File Not Found問題</title><link>https://hoxtonhsu.com/p/%E4%BD%BF%E7%94%A8docker%E5%9C%A8window%E6%9C%83%E5%87%BA%E7%8F%BE%E7%9A%84file-not-found%E5%95%8F%E9%A1%8C/</link><pubDate>Thu, 16 Mar 2023 06:41:23 +0000</pubDate><guid>https://hoxtonhsu.com/p/%E4%BD%BF%E7%94%A8docker%E5%9C%A8window%E6%9C%83%E5%87%BA%E7%8F%BE%E7%9A%84file-not-found%E5%95%8F%E9%A1%8C/</guid><description>&lt;img src="https://i.imgur.com/AP3wJLN.png" alt="Featured image of post 使用Docker在window會出現的File Not Found問題" />&lt;h1 id="前情提要">前情提要&lt;/h1>
&lt;p>最近在學習zabbix時，安裝在Linux系統下時，透過Postman是可以正常取得資料的&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/DX2FgEJ.png"
loading="lazy"
>&lt;/p>
&lt;p>但是當我用Docker把Zabbix架設在Window環境下時卻一直出現&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">File not found.
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>的錯誤&lt;/p>
&lt;h1 id="發現錯誤">發現錯誤&lt;/h1>
&lt;p>&lt;img src="https://i.imgur.com/GNtvhd5.png"
loading="lazy"
>&lt;/p>
&lt;p>兩邊的版本、設置、Server Port都一樣，完全不知道到底發生了什麼問題，後來是透過網頁的開發人員工具才發現一小處的不同&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/W3r8xcI.png"
loading="lazy"
>&lt;/p>
&lt;p>這是Linux環境下的API請求&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/Y2XdCFb.png"
loading="lazy"
>
這是Window下的API請求&lt;/p>
&lt;p>聰明的你一定發現了，&lt;strong>肏你媽的這兩個API請求的URL完全不一樣啊，幹你媽的&lt;/strong>&lt;/p>
&lt;h1 id="解決方法">解決方法&lt;/h1>
&lt;p>我個人猜應該是Docker在部屬的時候，不知道為什麼裡面檔案的結構層級直接跳過了\zabbix這一層，直接變成&lt;code>http://localhost/api_jsonrpc.php&lt;/code>的路徑。&lt;/p>
&lt;p>將URL改成正確地之後就能正常訪問了&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/1OlT37p.gif"
loading="lazy"
>&lt;/p></description></item><item><title>運用ArrayList與自動配置將Swich語法拆解</title><link>https://hoxtonhsu.com/p/%E9%81%8B%E7%94%A8arraylist%E8%88%87%E8%87%AA%E5%8B%95%E9%85%8D%E7%BD%AE%E5%B0%87swich%E8%AA%9E%E6%B3%95%E6%8B%86%E8%A7%A3/</link><pubDate>Tue, 14 Mar 2023 00:31:03 +0800</pubDate><guid>https://hoxtonhsu.com/p/%E9%81%8B%E7%94%A8arraylist%E8%88%87%E8%87%AA%E5%8B%95%E9%85%8D%E7%BD%AE%E5%B0%87swich%E8%AA%9E%E6%B3%95%E6%8B%86%E8%A7%A3/</guid><description>&lt;img src="https://i.imgur.com/rfkvgRO.png" alt="Featured image of post 運用ArrayList與自動配置將Swich語法拆解" />&lt;p>如果依照存在即合理的說法來看，Switch的存在確實是有解決一些問題，比如說一些要依照不同情況來回傳不同結果的Function，相較於用冗長的if-else，選擇用Switch確實是個不錯的解法。但當今天的Switch Case會增長的情況，在選擇使用它就會違反了OCP(開放擴充、封閉修改)的原則，亦即每次有新的情況出現，我們就得回頭去改Switch語法，新增不同的case，一來一往增加了維護的負擔，這邊分享一個我把switch語法拆解的方式，以供紀錄這樣子。&lt;/p>
&lt;h1 id="情境">情境&lt;/h1>
&lt;p>我在設計一款可以連結不同SQL Engine的程式，當用戶選擇了不同的SQL Engine，我能夠執行不同資料庫的語法來返回結果，圖示如下&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/h00lO8z.png"
loading="lazy"
alt="image-20230314004011166"
>&lt;/p>
&lt;h1 id="修改前">修改前&lt;/h1>
&lt;p>這是我的設計&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@RestController&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">DatasourceController&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">DatabaseService&lt;/span> &lt;span class="n">databaseService&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">DatasourceController&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">DatabaseService&lt;/span> &lt;span class="n">databaseService&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">databaseService&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">databaseService&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@GetMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/query&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">query&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nd">@RequestBody&lt;/span> &lt;span class="n">QueryRequest&lt;/span> &lt;span class="n">queryRequest&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">SQLException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">JsonProcessingException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ClassNotFoundException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">databaseService&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">query&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">queryRequest&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Service&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">DatabaseServiceImp&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">DatabaseService&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="n">DatabaseDao&lt;/span> &lt;span class="n">databaseDao&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">DatabaseServiceImp&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">DatabaseDao&lt;/span> &lt;span class="n">databaseDao&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">databaseDao&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">databaseDao&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">query&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">QueryRequest&lt;/span> &lt;span class="n">queryRequest&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">SQLException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">JsonProcessingException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ClassNotFoundException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">databaseName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">queryRequest&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDatabaseEngine&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">databaseDao&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getDatabaseDao&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">databaseName&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">databaseDao&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">connect&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">query&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">queryRequest&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getQuery&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">DatabaseDao&lt;/span> &lt;span class="nf">getDatabaseDao&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">databaseName&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">databaseName&lt;/span>&lt;span class="o">){&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s">&amp;#34;Postgres&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">PostgresDaoImpl&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s">&amp;#34;MsSql&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">MySQLDaoImpl&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="n">DatabaseNotFoundException&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">createDatabaseNotFoundException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Not this Database&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Repository&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">DatabaseDao&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">DatabaseDao&lt;/span> &lt;span class="nf">connect&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">SQLException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ClassNotFoundException&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">close&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">SQLException&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="nf">query&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">query&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">SQLException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">JsonProcessingException&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我在Service層的地方會有一個method&lt;code>getDatabaseDao&lt;/code>，來依照輸入的databaseName來將不同的Dao賦值進filed中，首先這有兩個問題&lt;/p>
&lt;ol>
&lt;li>當資料庫在擴充時，必須要回頭修改&lt;code>getDatabaseDao&lt;/code>，增加修改的成本&lt;/li>
&lt;li>無法利用SpringBean的IoC，每次有新的Request近來，都會創造一個Dao的Object存在於記憶體中，造成記憶體空間的浪費&lt;/li>
&lt;/ol>
&lt;h1 id="修改後">修改後&lt;/h1>
&lt;p>因此後來的修改必須得改善上面兩點，必須要符合OCP的規則，我只要新增新的Dao，而毋需修改就有的程式碼，並且還要使用SpringBean，以下是修改後的版本&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Service&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">DatabaseServiceImp&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">DatabaseService&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">DatabaseEngineDao&lt;/span> &lt;span class="n">databaseEngineDao&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">DatabaseEngineDao&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">databaseDaoList&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">DatabaseServiceImp&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">DatabaseEngineDao&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">databaseDaoList&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">databaseDaoList&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">databaseDaoList&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">query&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">QueryRequest&lt;/span> &lt;span class="n">queryRequest&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">SQLException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">JsonProcessingException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ClassNotFoundException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">databaseName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">queryRequest&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDatabaseEngine&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">databaseEngineDao&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getDatabaseDao&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">databaseName&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">databaseEngineDao&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">connect&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">query&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">queryRequest&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getQuery&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">DatabaseEngineDao&lt;/span> &lt;span class="nf">getDatabaseDao&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">databaseEngine&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">DatabaseEngineDao&lt;/span> &lt;span class="n">databaseDao&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">databaseDaoList&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">databaseEngine&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">databaseDao&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDatabaseEngineName&lt;/span>&lt;span class="o">()))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">databaseDao&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="n">DatabaseNotFoundException&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">createDatabaseNotFoundException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Not Found This DatabaseEngine，請檢查是否有相應的databaseEngineName在DAO中&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Repository&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">DatabaseEngineDao&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">DatabaseEngineDao&lt;/span> &lt;span class="nf">connect&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">SQLException&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">close&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">SQLException&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="nf">query&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">query&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">SQLException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">JsonProcessingException&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">getDatabaseEngineName&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>將原本的&lt;code>DatabaseDao databaseDao;&lt;/code>修改為，&lt;code>List&amp;lt;DatabaseEngineDao&amp;gt; databaseDaoList;&lt;/code>，在SpringBoot啟動時，將所有的DatabaseEngineDao類配置進databaseDaoList中，讓springBoot控制object的創建，並且將&lt;code>getDatabaseDao&lt;/code>改寫，改成去for-each databaseDaoList，尋找List中是否有名稱符合的SQL Engine。並在DatabaseEngineDao Interface處新增getDatabaseEngineName，讓每個實作它的Impl都必須去完成這個method，完成了OCP的原則。&lt;/p></description></item><item><title>Zabbix的一些筆記</title><link>https://hoxtonhsu.com/p/zabbix%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AD%86%E8%A8%98/</link><pubDate>Mon, 13 Mar 2023 05:40:02 +0000</pubDate><guid>https://hoxtonhsu.com/p/zabbix%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AD%86%E8%A8%98/</guid><description>&lt;img src="https://i.imgur.com/7g77ZiN.png" alt="Featured image of post Zabbix的一些筆記" />&lt;p>參考網址：&lt;a class="link" href="https://ithelp.ithome.com.tw/articles/10263907" target="_blank" rel="noopener"
>監控大挑戰 - 以 Zabbix 為例&lt;/a>&lt;/p>
&lt;h1 id="為什麼選擇zabbix">為什麼選擇Zabbix?&lt;/h1>
&lt;p>目前常見的監控軟體有三者&lt;/p>
&lt;ol>
&lt;li>Zabbix&lt;/li>
&lt;li>Cacti&lt;/li>
&lt;li>Nagios&lt;/li>
&lt;/ol>
&lt;h2 id="nagios的介面">NagiOs的介面&lt;/h2>
&lt;p>&lt;img src="https://i.imgur.com/MnINBY1.png"
loading="lazy"
alt="image-20230317110443666"
>&lt;/p>
&lt;h2 id="cacti的介面">Cacti的介面&lt;/h2>
&lt;p>&lt;img src="https://i.imgur.com/quFB2i9.jpg"
loading="lazy"
alt="image-20230317110544016"
>&lt;/p>
&lt;h2 id="zabbix的介面">Zabbix的介面&lt;/h2>
&lt;p>&lt;img src="https://i.imgur.com/KMZdZPE.png"
loading="lazy"
alt="image-20230317110906297"
>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>監控產品&lt;/th>
&lt;th>Zabbix&lt;/th>
&lt;th>Nagios&lt;/th>
&lt;th>Cacti&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>圖形介面&lt;/td>
&lt;td>好看&lt;/td>
&lt;td>不是特別好&lt;/td>
&lt;td>還行&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>監控性能&lt;/td>
&lt;td>併發監控，對CPU要求較高&lt;/td>
&lt;td>併發監控，對CPU要求較高&lt;/td>
&lt;td>輪詢監控，效能低&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>配置難度&lt;/td>
&lt;td>較低，有圖形化介面使用&lt;/td>
&lt;td>需使用CommandLine&lt;/td>
&lt;td>需使用CommandLine&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>自動發現&lt;/td>
&lt;td>支持&lt;/td>
&lt;td>不支持&lt;/td>
&lt;td>不支持&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>異常通知方式&lt;/td>
&lt;td>Email,簡訊,webhook,Line&amp;hellip;&lt;/td>
&lt;td>Email,簡訊,webhook,Line&amp;hellip;&lt;/td>
&lt;td>較弱，預設只支援Email&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="zabbix是什麼">Zabbix是什麼&lt;/h1>
&lt;p>Zabbix是一種開源的網絡監視和警報系統，用於監視各種網絡設備，包括服務器、網絡設備和應用程序等。Zabbix提供了一個可擴展的架構，可用於監視多個位置的數千個設備。&lt;/p>
&lt;p>Zabbix支持各種監視方式，包括SNMP、JMX、IPMI和VMware監視，還可以通過自定義監視腳本進行擴展。Zabbix還提供了一個強大的報警系統，可以通過電子郵件、SMS和其他方式發送警報，以便快速解決問題。&lt;/p>
&lt;p>Zabbix還提供了一個用戶友好的Web界面，可以輕鬆設置監視器和警報。Zabbix的開源設計使其成為一個非常有用的監視解決方案，可以滿足各種規模的企業和組織的需求&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/f9AxFB5.png"
loading="lazy"
alt="image-20230313142828806"
>&lt;/p>
&lt;h1 id="zabbix術語">Zabbix術語&lt;/h1>
&lt;p>Zabbix Server&lt;/p>
&lt;ul>
&lt;li>Zabbix server是agent程序報告系統可用性、系統完整性和統計數據的核心組件，是所有配置訊息、統計訊息和操作數據的核心儲存器&lt;/li>
&lt;/ul>
&lt;p>Zabbix資料庫存取&lt;/p>
&lt;ul>
&lt;li>所有配置訊息和Zabbix收集到的數據都被儲存在資料庫中&lt;/li>
&lt;/ul>
&lt;p>Zabbix Web介面&lt;/p>
&lt;ul>
&lt;li>為了從任何地方和任何平台都可以輕鬆地訪問Zabbix，我們提供基於Web的Zabbix介面，該介面是Zabbix Server的一部分，通常(但不一定)跟Zabbix Server運行在同一台物理主機上&lt;/li>
&lt;/ul>
&lt;p>Zabbix Proxy 代理服務器&lt;/p>
&lt;ul>
&lt;li>Zabbix Proxy可以替Zabbix Server收集性能和可用性數據。Proxy代理服務器是Zabbix軟體可選擇部屬的一部分，當然，Proxy代理服務器可以幫助單台Zabbix Server分擔負載壓力&lt;/li>
&lt;/ul>
&lt;p>Zabbix Agent 監控代理&lt;/p>
&lt;ul>
&lt;li>Zabbix agent 監控代理，部屬在監控目標上，能夠主動間空本地資源和應用程序，並將收集到的數據報告給Zabbix Server&lt;/li>
&lt;/ul>
&lt;p>Zabbix數據流&lt;/p>
&lt;ul>
&lt;li>監控方面，為了創造一個監控項(item)用於採集數據，必須先創建一個主機(host)&lt;/li>
&lt;li>告警方面，在監控項裡面創造觸發器(trigger)，通過觸發器(trigger)來觸發告警動作(action)。因此如果你想收到Server XCPU負載過高的告警，必須滿足&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>為Server X創建一個Host並關聯一個用對CPU進行監控的監控項(item)&lt;/li>
&lt;li>創建一個Trigger，設置成當CPU負載過高時會觸發&lt;/li>
&lt;li>Trigger被觸發，發送告警郵件&lt;/li>
&lt;/ol>
&lt;p>雖然看起來有很多步驟，但是使用模板的話操作起來其實非常簡單，Zabbix這樣的設計使得配置機制非常靈活易用&lt;/p>
&lt;p>主機(Host)&lt;/p>
&lt;ul>
&lt;li>一台你想監控的網路設備，用IP和域名表示&lt;/li>
&lt;/ul>
&lt;p>主機組(host Group)&lt;/p>
&lt;ul>
&lt;li>主機的邏輯組；包含了主機和模板。一個主機裡的主機和模板之間並沒有任何直接的關聯，通常在給不同用戶組的主機分配權限時，使用主機組&lt;/li>
&lt;/ul>
&lt;p>監控項(item)&lt;/p>
&lt;ul>
&lt;li>你想要接收的主機的特定數據，一個度量數據&lt;/li>
&lt;/ul>
&lt;p>觸發器(Trigger)&lt;/p>
&lt;ul>
&lt;li>一個被用於定義問題閾值和&amp;quot;評估&amp;quot;監控項接受到的數據的邏輯表達式，當接收到的數據高於閾值時，觸發器從OK變成Problem狀態。當接收到的數據低於閾值時，觸發器保留/返回一個OK的狀態&lt;/li>
&lt;/ul>
&lt;p>事件(Event)&lt;/p>
&lt;ul>
&lt;li>單次發生的需要注意的事情，例如觸發器狀態改變，或是發現有監控代理自動註冊&lt;/li>
&lt;/ul>
&lt;p>異常(Problem)&lt;/p>
&lt;ul>
&lt;li>一個處在&lt;strong>異常&lt;/strong>狀態的觸發器&lt;/li>
&lt;/ul>
&lt;p>動作(Action)&lt;/p>
&lt;ul>
&lt;li>一個對事件做出反應的預定義的操作&lt;/li>
&lt;li>一個動作由操作(例如發出通知)和條件(當時操作正在發生)組成&lt;/li>
&lt;/ul>
&lt;p>升級(Escalation)&lt;/p>
&lt;ul>
&lt;li>一個在動作內執行操作的自定義場景；發生通知／執行遠程命令的序列&lt;/li>
&lt;/ul>
&lt;p>媒介(Media)&lt;/p>
&lt;ul>
&lt;li>發送告警通知的手段；告警通知的途徑&lt;/li>
&lt;/ul>
&lt;p>通知(Notification)&lt;/p>
&lt;ul>
&lt;li>利用已選擇的媒體途徑把跟事件相關的訊息發送給用戶&lt;/li>
&lt;/ul>
&lt;p>遠程命令(remote command)&lt;/p>
&lt;ul>
&lt;li>一個預定義好的，滿足一些條件的情況下，可以在被監控主機上自動執行的命令&lt;/li>
&lt;/ul>
&lt;p>模板(template)&lt;/p>
&lt;ul>
&lt;li>一組可以被應用到一個或多個主機上的實體(監控項、觸發器、圖形、聚合圖形、應用、LLD、Web場景)的集合&lt;/li>
&lt;li>模板的任務就是加快對主機監控任務的實施；也可以使監控任務的批量修改更簡單。模板是直接關連到每台單獨的主機上&lt;/li>
&lt;/ul>
&lt;p>應用(Application)&lt;/p>
&lt;ul>
&lt;li>一組監控項組成的邏輯分組&lt;/li>
&lt;/ul>
&lt;p>Web場景(Web Scenario)&lt;/p>
&lt;ul>
&lt;li>利用一個或多個HTTP請求來檢查網站的可用性&lt;/li>
&lt;/ul>
&lt;p>前端(FrontEnd)&lt;/p>
&lt;ul>
&lt;li>Zabbix提供的Web介面&lt;/li>
&lt;/ul>
&lt;p>Zabbix API&lt;/p>
&lt;ul>
&lt;li>Zabbix API允許你使用JSON RPC協議(是一個無狀態且輕量級的遠程過程調用&lt;code>Remote Procedure Call &lt;/code>傳送協議，其傳遞內容透過JSON為主)來創建、更新和獲取Zabbix對象(如主機、監控項、圖形和其他)信息或者執行任何其他的字定義的任務&lt;/li>
&lt;/ul>
&lt;p>Zabbix Server&lt;/p>
&lt;ul>
&lt;li>Zabbix軟件實現監控的核心程序，主要功能是與Zabbix proxies和Agents進行交互、觸發器計算、發送告警通知、並將資料集中保存&lt;/li>
&lt;/ul>
&lt;p>Zabbix Agent&lt;/p>
&lt;ul>
&lt;li>一個部屬在監控對象上的，能夠主動監控本地資源和應用的程序&lt;/li>
&lt;li>Zabbix Agent部屬在監控的目標上，主動監測本地的資源和應用(硬體驅動、記憶體、處理器統計等等)&lt;/li>
&lt;li>Zabbix Agent收集本地的操作訊息並將資料報告給Zabbix Server用於進一步處理。一旦出現異常(比如硬碟空間已滿或者有崩潰的服務器Process)，Zabbix Server會主動警告管理員指定機器上的異常。Zabbix Agents的極端高校源於他可以利用本地系統調用來完成統計數據的收集&lt;/li>
&lt;/ul>
&lt;p>被動(Passive) 和 主動(Active)檢查&lt;/p>
&lt;ul>
&lt;li>Zabbix Agent可以執行被動和主動兩種檢查方式&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>被動檢查(Passive Check)模式中Agent應答數據請求，Zabbix Server(或者Proxy)詢問Agent資料，如CPU負仔狀況，然後Zabbix Agent回傳結果&lt;/li>
&lt;li>主動檢查(Active Checks) 處理過程將相對複雜。Agent必須首先從Zabbix server索取監控項列表以進行獨立處理，然後週期性的發送新的值給Server&lt;/li>
&lt;/ol>
&lt;p>執行被動或主動檢查是通過選擇相應的監測項目類型來配置的。Item Type. Zabbix Agent處理監控項類型有Zabbix agent和 Zabbix Agent(Active)&lt;/p>
&lt;p>Zabbix Proxy&lt;/p>
&lt;ul>
&lt;li>一個幫助Zabbix server收集數據，分擔Zabbix Server負擔的程式&lt;/li>
&lt;li>Zabbix Proxy是一個可以從一個或多個受監控設備收集監控數據，並將訊息結果發送到Zabbix Server的Process，基本上是代表Server工作的。所有收集的數據都在本地進行快取，然後傳送到Proxy所屬的Zabbix Server。&lt;/li>
&lt;li>部屬Proxy是可選的，但是可能會非常有益於分散單個Zabbix Sever的負載，如果只有Proxy收集數據，Server上的進程就會減少，CPU消耗和磁碟I/O負載&lt;/li>
&lt;li>Zabbix Proxy是完成遠端區域，分支機構，沒有本地管理員的網路集中監控的理想解決方案&lt;/li>
&lt;li>Zabbix Proxy需要使用獨立的資料庫&lt;/li>
&lt;/ul>
&lt;h1 id="使用docker安裝-zabbix">使用Docker安裝 Zabbix&lt;/h1>
&lt;p>首先先點到下列網站
&lt;a href="https://www.zabbix.com/documentation/5.0/en/manual/installation/containers">https://www.zabbix.com/documentation/5.0/en/manual/installation/containers&lt;/a>&lt;/p>
&lt;p>並在這邊選擇要使用的版本
&lt;img src="https://i.imgur.com/WNJujBy.png"
loading="lazy"
>&lt;/p>
&lt;p>這次是使用官網提供的，也就是用mysql當database的版本&lt;/p>
&lt;p>並按照下列的cmd指令輸入，下面的參數，若有需要變可以在自行修改&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">docker network create --subnet 172.20.0.0/16 --ip-range 172.20.240.0/20 zabbix-net
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/br>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">docker run --name postgres-server -t -e &lt;span class="nv">POSTGRES_USER&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;zabbix&amp;#34;&lt;/span> -e &lt;span class="nv">POSTGRES_PASSWORD&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;zabbix_pwd&amp;#34;&lt;/span> -e &lt;span class="nv">POSTGRES_DB&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;zabbix&amp;#34;&lt;/span> --network&lt;span class="o">=&lt;/span>zabbix-net --restart unless-stopped -d postgres:latest
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/br>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">docker run --name zabbix-snmptraps -t -v /zbx_instance/snmptraps:/var/lib/zabbix/snmptraps:rw -v /var/lib/zabbix/mibs:/usr/share/snmp/mibs:ro --network&lt;span class="o">=&lt;/span>zabbix-net -p 162:1162/udp --restart unless-stopped -d zabbix/zabbix-snmptraps:alpine-5.0-latest
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/br>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">docker run --name zabbix-server-pgsql -t -e &lt;span class="nv">DB_SERVER_HOST&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;postgres-server&amp;#34;&lt;/span> -e &lt;span class="nv">POSTGRES_USER&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;zabbix&amp;#34;&lt;/span> -e &lt;span class="nv">POSTGRES_PASSWORD&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;zabbix_pwd&amp;#34;&lt;/span> -e &lt;span class="nv">POSTGRES_DB&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;zabbix&amp;#34;&lt;/span> -e &lt;span class="nv">ZBX_ENABLE_SNMP_TRAPS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;true&amp;#34;&lt;/span> --network&lt;span class="o">=&lt;/span>zabbix-net -p 10051:10051 --volumes-from zabbix-snmptraps --restart unless-stopped -d zabbix/zabbix-server-pgsql:alpine-5.0-latest
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/br>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">docker run --name zabbix-web-nginx-pgsql -t -e &lt;span class="nv">ZBX_SERVER_HOST&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;zabbix-server-pgsql&amp;#34;&lt;/span> -e &lt;span class="nv">DB_SERVER_HOST&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;postgres-server&amp;#34;&lt;/span> -e &lt;span class="nv">POSTGRES_USER&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;zabbix&amp;#34;&lt;/span> -e &lt;span class="nv">POSTGRES_PASSWORD&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;zabbix_pwd&amp;#34;&lt;/span> -e &lt;span class="nv">POSTGRES_DB&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;zabbix&amp;#34;&lt;/span> --network&lt;span class="o">=&lt;/span>zabbix-net -p 443:8443 -p 80:8080 -v /etc/ssl/nginx:/etc/ssl/nginx:ro --restart unless-stopped -d zabbix/zabbix-web-nginx-pgsql:alpine-5.0-latest
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="透過termianl訪問container中的資料庫以psql為例">透過termianl訪問Container中的資料庫，以psql為例&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">docker &lt;span class="nb">exec&lt;/span> -it &lt;span class="o">[&lt;/span>containerId&lt;span class="o">]&lt;/span> bash
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/br>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">psql -U zabbix -h localhost zabbix
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/mVPKa6i.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;p>當全部都設置好後&lt;/p>
&lt;p>訪問 http://localohst/ 即可訪問Zabbix頁面&lt;/p>
&lt;p>帳號：Admin
密碼：zabbix&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/T8tGvQQ.png"
loading="lazy"
>&lt;/p>
&lt;h1 id="在window下安裝-zabbix-agent">在Window下安裝 Zabbix Agent&lt;/h1>
&lt;p>這邊待補啦，不過先講一下Zabbix的Server端要怎麼對應&lt;/p>
&lt;p>​ &lt;img src="https://i.imgur.com/5CXeOx4.png"
loading="lazy"
alt="image-20230317111417481"
>&lt;/p>
&lt;p>Host Name：要和當初設定Agent的Name一致&lt;/p>
&lt;p>Group：Templates/Operating systems&lt;/p>
&lt;p>Agent：當Agent的那一台主機的IP&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/Vre2glc.png"
loading="lazy"
alt="image-20230317111854438"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/LQ0R9rk.png"
loading="lazy"
alt="image-20230317111428373"
>&lt;/p>
&lt;p>Temlate：Template OS Windows by Zabbix agent&lt;/p>
&lt;h1 id="api的使用">API的使用&lt;/h1>
&lt;p>可以到下列的網站使用線上的Zabbix API Test&lt;/p>
&lt;p>&lt;a href="https://sbcode.net/zabbix/zabbix-api-test-form/">https://sbcode.net/zabbix/zabbix-api-test-form/&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/SNBs6Z9.png"
loading="lazy"
>&lt;/p>
&lt;p>url都是 http://localhost/api_jsonrpc.php，差別在於Body的內容&lt;/p>
&lt;h2 id="測試用api用以返回版本號">測試用API，用以返回版本號&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;jsonrpc&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;2.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;method&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;apiinfo.version&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;auth&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;params&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>返回的結果&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;jsonrpc&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;2.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;result&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;5.0.32&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="登入用的api用來取得token">登入用的API，用來取得Token&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;jsonrpc&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;2.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;method&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;user.login&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;params&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;user&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Admin&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;password&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;zabbix&amp;#34;&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;auth&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">null&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>返回的結果&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;jsonrpc&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;2.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;result&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1a6022b1a01b787b2129d011763c73e6&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>result就是Token值&lt;/p>
&lt;h2 id="返回目前存在的agent">返回目前存在的Agent&lt;/h2>
&lt;p>記得把Auth的值改成login返回的token&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;jsonrpc&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;2.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;method&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;host.get&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;params&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;output&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="s2">&amp;#34;hostid&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;host&amp;#34;&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;selectInterfaces&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="s2">&amp;#34;interfaceid&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;ip&amp;#34;&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;auth&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1a6022b1a01b787b2129d011763c73e6&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>返回的結果&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;jsonrpc&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;2.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;result&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;hostid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;10084&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;host&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Zabbix server&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;interfaces&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;interfaceid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;ip&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;127.0.0.1&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;hostid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;10438&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;host&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Ian&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;interfaces&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;interfaceid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;2&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;ip&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;192.168.100.51&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;hostid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;10440&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;host&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Bill&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;interfaces&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;interfaceid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;4&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;ip&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;192.168.100.57&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;hostid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;10439&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;host&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Jess&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;interfaces&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;interfaceid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;3&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;ip&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;192.168.100.51&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="zabbix-api介紹">Zabbix API介紹&lt;/h2>
&lt;p>&lt;a href="https://sbcode.net/zabbix/zabbix-api-test-form/">https://sbcode.net/zabbix/zabbix-api-test-form/&lt;/a>&lt;/p>
&lt;p>在很多的API Parameter中，會常常看到&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>&lt;span class="nt">&amp;#34;output&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;extend&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>這段。這句話的意思是這樣的
output代表你想要返回的value值有什麼&lt;code>下面會有詳細的介紹&lt;/code>
而extend則代表「請提供給我，更多的資訊」，詳細的差異如下&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/gMtkkhr.gif"
loading="lazy"
>&lt;/p>
&lt;p>我們假設
host.get的返回值為下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;jsonrpc&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;2.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;result&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;hostid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;10084&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;proxy_hostid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;host&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Zabbix server&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;status&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;disable_until&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1679972679&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;error&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Get value from agent failed: cannot connect to [[127.0.0.1]:10050]: [111] Connection refused&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;available&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;2&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;errors_from&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1679019319&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;lastaccess&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;ipmi_authtype&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;-1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;ipmi_privilege&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;2&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;ipmi_username&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;ipmi_password&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;ipmi_disable_until&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;ipmi_available&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;snmp_disable_until&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;snmp_available&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;maintenanceid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;maintenance_status&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;maintenance_type&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;maintenance_from&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;ipmi_errors_from&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;snmp_errors_from&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;ipmi_error&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;snmp_error&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;jmx_disable_until&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;jmx_available&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;jmx_errors_from&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;jmx_error&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Zabbix server&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;flags&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;templateid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;description&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;tls_connect&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;tls_accept&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;tls_issuer&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;tls_subject&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;tls_psk_identity&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;tls_psk&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;proxy_address&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;auto_compress&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;inventory_mode&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;-1&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>但我們並不想要那麼多資訊，我們可能只想要其中幾項，比如說proxy_hostid,status而已，那我們就可以把我們Parameters的參數修改成這樣&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>&lt;span class="nt">&amp;#34;output&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;hostid&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;proxy_hostid&amp;#34;&lt;/span>&lt;span class="p">]}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>回傳的結果就會變成這樣
&lt;img src="https://i.imgur.com/kbdlgvG.png"
loading="lazy"
>&lt;/p>
&lt;h2 id="使用zabbix來取得cpu-utilization-in-">使用Zabbix來取得CPU Utilization (in %)&lt;/h2>
&lt;ol>
&lt;li>先使用&lt;code>host.get&lt;/code>來取得所有host資訊&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;jsonrpc&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;2.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;method&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;host.get&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;params&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;output&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="s2">&amp;#34;hostid&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;host&amp;#34;&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;selectInterfaces&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="s2">&amp;#34;interfaceid&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;ip&amp;#34;&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;auth&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;7cdc68d62750b0ed7ae693d1d7a52466&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>返回的結果如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;jsonrpc&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;2.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;result&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;hostid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;10084&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;host&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Zabbix server&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;interfaces&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;interfaceid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;ip&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;127.0.0.1&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;hostid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;10438&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;host&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Ian&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;interfaces&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;interfaceid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;2&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;ip&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;192.168.100.51&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;hostid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;10440&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;host&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Bill&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;interfaces&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;interfaceid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;4&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;ip&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;192.168.100.57&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>透過item.get取得hostId的資料&lt;/li>
&lt;/ol>
&lt;p>假設我們現在要找到hostId=10440的資料，我們的API BODY要這樣送&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;jsonrpc&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;2.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;method&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;item.get&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;params&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;output&amp;#34;&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;description&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;lastvalue&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;filter&amp;#34;&lt;/span>&lt;span class="p">:{&lt;/span>
&lt;span class="nt">&amp;#34;hostid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;10440&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;auth&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;7cdc68d62750b0ed7ae693d1d7a52466&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中 output的值代表，只顯示name,description,lastvalue這幾個key的資料，filter則代表我只要key-value為hostid:10440的資料&lt;/p>
&lt;p>返回的結果很長，這邊講個大概就好&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;jsonrpc&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;2.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;result&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;itemid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;37631&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Interface Intel(R) Ethernet Connection (14) I219-V(乙太網路): Outbound packets with errors&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;description&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;The number of outgoing packets with errors on the network interface.&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;lastvalue&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0&amp;#34;&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;itemid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;37632&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Interface Intel(R) Ethernet Connection (14) I219-V(乙太網路): Inbound packets discarded&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;description&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;The number of incoming packets dropped on the network interface.&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;lastvalue&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0&amp;#34;&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;itemid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;37633&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Interface Intel(R) Ethernet Connection (14) I219-V(乙太網路): Inbound packets with errors&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;description&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;The number of incoming packets with errors on the network interface.&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;lastvalue&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0&amp;#34;&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;itemid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;37634&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Interface Intel(R) Ethernet Connection (14) I219-V(乙太網路): Bits received&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;description&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Incoming traffic on the network interface.&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;lastvalue&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;6431168&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="err">...&lt;/span>
&lt;span class="err">//以下略..&lt;/span>
&lt;span class="err">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>找到CPU Utilization的資訊&lt;/li>
&lt;/ol>
&lt;p>搜尋關鍵字 CPU&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/uP21l7n.png"
loading="lazy"
>&lt;/p>
&lt;p>這邊，那個lastValue其實就是最新的CPU使用率，這樣就成功取得CPU的使用率囉！&lt;/p>
&lt;ol start="4">
&lt;li>取得CPU Utilization的使用率&lt;/li>
&lt;/ol>
&lt;p>API Body如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;jsonrpc&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;2.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;method&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;history.get&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;params&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;history&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;itemids&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;37631&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;output&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;extend&amp;#34;&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;auth&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;7cdc68d62750b0ed7ae693d1d7a52466&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>返回的結果如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;jsonrpc&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;2.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;result&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;itemid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;37568&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;clock&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1679900528&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;value&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;5.186729&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;ns&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;297585693&amp;#34;&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;itemid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;37568&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;clock&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1679900648&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;value&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;6.917095&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;ns&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;233421931&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="err">//&lt;/span> &lt;span class="err">...&lt;/span> &lt;span class="err">略&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="使用docker安裝可能導致api路徑不正確">使用Docker安裝，可能導致API路徑不正確&lt;/h1>
&lt;p>最近在學習zabbix時，安裝在Linux系統下時，透過Postman是可以正常取得資料的&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/DX2FgEJ.png"
loading="lazy"
>&lt;/p>
&lt;p>但是當我用Docker把Zabbix架設在Window環境下時卻一直出現&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">File not found.
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>的錯誤&lt;/p>
&lt;h2 id="發現錯誤">發現錯誤&lt;/h2>
&lt;p>&lt;img src="https://i.imgur.com/GNtvhd5.png"
loading="lazy"
>&lt;/p>
&lt;p>兩邊的版本、設置、Server Port都一樣，完全不知道到底發生了什麼問題，後來是透過網頁的開發人員工具才發現一小處的不同&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/W3r8xcI.png"
loading="lazy"
>&lt;/p>
&lt;p>這是Linux環境下的API請求&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/Y2XdCFb.png"
loading="lazy"
>
這是Window下的API請求&lt;/p>
&lt;p>聰明的你一定發現了，肏你媽的這兩個API請求的URL完全不一樣啊，幹你媽的&lt;/p>
&lt;h2 id="解決方法">解決方法&lt;/h2>
&lt;p>我個人猜應該是Docker在部屬的時候，不知道為什麼裡面檔案的結構層級直接跳過了\zabbix這一層，直接變成&lt;code>http://localhost/api_jsonrpc.php&lt;/code>的路徑。&lt;/p>
&lt;p>將URL改成正確地之後就能正常訪問了&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/1OlT37p.gif"
loading="lazy"
>&lt;/p></description></item><item><title>只要按個鍵，圖片立刻上傳至雲端 PicGo介紹</title><link>https://hoxtonhsu.com/p/%E5%8F%AA%E8%A6%81%E6%8C%89%E5%80%8B%E9%8D%B5%E5%9C%96%E7%89%87%E7%AB%8B%E5%88%BB%E4%B8%8A%E5%82%B3%E8%87%B3%E9%9B%B2%E7%AB%AF-picgo%E4%BB%8B%E7%B4%B9/</link><pubDate>Wed, 08 Mar 2023 20:56:55 +0800</pubDate><guid>https://hoxtonhsu.com/p/%E5%8F%AA%E8%A6%81%E6%8C%89%E5%80%8B%E9%8D%B5%E5%9C%96%E7%89%87%E7%AB%8B%E5%88%BB%E4%B8%8A%E5%82%B3%E8%87%B3%E9%9B%B2%E7%AB%AF-picgo%E4%BB%8B%E7%B4%B9/</guid><description>&lt;img src="https://i.imgur.com/teYQFXk.png" alt="Featured image of post 只要按個鍵，圖片立刻上傳至雲端 PicGo介紹" />&lt;h1 id="介紹">介紹&lt;/h1>
&lt;p>PicGo是個開源的圖片上傳程式(並非平台)，由於設定快速，效果簡單而深受我的喜愛，決定寫一篇文章來介紹這東西該怎麼使用&lt;/p>
&lt;h1 id="安裝">安裝&lt;/h1>
&lt;p>我們使用Choco來安裝，Choco是一個Window系統的檔案下載工具，可以做類似npm的功能，以下是它的安裝方式。&lt;/p>
&lt;p>使用&lt;strong>系統管理員&lt;/strong>執行CMD，並輸入以下的指令&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">Set-ExecutionPolicy Bypass -Scope Process -Force&lt;span class="p">;&lt;/span> &lt;span class="o">[&lt;/span>System.Net.ServicePointManager&lt;span class="o">]&lt;/span>::SecurityProtocol &lt;span class="o">=&lt;/span> &lt;span class="o">[&lt;/span>System.Net.ServicePointManager&lt;span class="o">]&lt;/span>::SecurityProtocol -bor 3072&lt;span class="p">;&lt;/span> iex &lt;span class="o">((&lt;/span>New-Object System.Net.WebClient&lt;span class="o">)&lt;/span>.DownloadString&lt;span class="o">(&lt;/span>&lt;span class="s1">&amp;#39;https://community.chocolatey.org/install.ps1&amp;#39;&lt;/span>&lt;span class="o">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>即下載成功，若下載成功，可以輸入&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">choco --version
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>來查看是否安裝成功&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/StJyUnh.png"
loading="lazy"
alt="image-20230308210113018"
>&lt;/p>
&lt;p>若Choco安裝沒問題，則可以透過以下指令安裝picGo，若跳出什麼無法存取，則請記得要&lt;strong>使用系統管理員身分&lt;/strong>執行&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">choco install picgo
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/iZGJC8G.png"
loading="lazy"
alt="image-20230308210301760"
>&lt;/p>
&lt;h1 id="使用">使用&lt;/h1>
&lt;p>&lt;img src="https://i.imgur.com/Zb3DFev.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;p>我有點懶得打，就錄成Gif了，這邊其實就是去Imgur的&lt;/p>
&lt;p>&lt;a href="https://imgur.com/account/settings/apps">https://imgur.com/account/settings/apps&lt;/a>&lt;/p>
&lt;p>這邊，去設定你的一個ClinetId&lt;/p>
&lt;p>然後把它貼到&lt;code>設定ClinetId&lt;/code>那一欄就可以&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/IXOptVX.png"
loading="lazy"
alt="image-20230308210959190"
>&lt;/p>
&lt;p>並且我也會推薦將上傳的快捷鍵調成Ctrl+Alt+V&lt;/p>
&lt;p>這樣當你按下Win+Shift+S，截圖後，只要按下Ctrl+Alt+V，圖片就會自動幫你上傳至Imgur囉&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/UejcWoE.png"
loading="lazy"
alt="image-20230308211104660"
>&lt;/p></description></item><item><title>Git在第一次使用的credentialhelperselector該怎麼設定呢</title><link>https://hoxtonhsu.com/p/git%E5%9C%A8%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8%E7%9A%84credentialhelperselector%E8%A9%B2%E6%80%8E%E9%BA%BC%E8%A8%AD%E5%AE%9A%E5%91%A2/</link><pubDate>Wed, 08 Mar 2023 20:48:18 +0800</pubDate><guid>https://hoxtonhsu.com/p/git%E5%9C%A8%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8%E7%9A%84credentialhelperselector%E8%A9%B2%E6%80%8E%E9%BA%BC%E8%A8%AD%E5%AE%9A%E5%91%A2/</guid><description>&lt;img src="https://i.imgur.com/PFJUZO4.png" alt="Featured image of post Git在第一次使用的credentialhelperselector該怎麼設定呢" />&lt;h1 id="前言">前言&lt;/h1>
&lt;p>每次在新電腦上使用Git的時候都會跳這個東西出來，但一直不知道這是啥，這次來研究一下&lt;/p>
&lt;h1 id="總結">總結&lt;/h1>
&lt;p>這東西其實是因為如果要推東西上去或是拉Private專案下來的話，會需要做認證(Credential)的部分，而這個視窗其實就是在問你，你所提供的這些登入資訊想存在哪邊?&lt;/p>
&lt;p>會建議就用預設的&lt;code>manager-core&lt;/code>就好，如果想存在磁碟中的話就選&lt;code>store&lt;/code>，如果想存在Cache就選&lt;code>cache&lt;/code>
這樣就可以囉&lt;/p>
&lt;p>如果已經存了，那可以輸入以下的指令來調整&lt;/p>
&lt;ul>
&lt;li>查看目前的credential.helper 是什麼&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">git config credential.helper
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>將credential.helper 的設定改掉&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">git config --global credential.helper manager-core
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>設定帳號密碼&lt;/li>
&lt;/ul>
&lt;p>由於自2021年後，GitHub不在提供使用帳號密碼的認證方式，要使用Token進行認證，帳號輸入自己的Github帳號，而密碼則是輸入自己的Token，這樣就設定成功囉！&lt;/p></description></item><item><title>StoreProcedure跟PSQL的筆記</title><link>https://hoxtonhsu.com/p/storeprocedure%E8%B7%9Fpsql%E7%9A%84%E7%AD%86%E8%A8%98/</link><pubDate>Wed, 01 Mar 2023 09:45:17 +0800</pubDate><guid>https://hoxtonhsu.com/p/storeprocedure%E8%B7%9Fpsql%E7%9A%84%E7%AD%86%E8%A8%98/</guid><description>&lt;img src="https://i.imgur.com/1BTtOUL.png" alt="Featured image of post StoreProcedure跟PSQL的筆記" />&lt;p>&lt;a class="link" href="https://www.youtube.com/watch?v=yLR1w4tZ36I&amp;amp;ab_channel=techTFQ" target="_blank" rel="noopener"
>參考網站&lt;/a>&lt;/p>
&lt;p>&lt;strong>這篇文章是以Postgres SQL的語法為主，其他RDB的語法略有不同&lt;/strong>&lt;/p>
&lt;h1 id="什麼是store-procedure">什麼是Store Procedure&lt;/h1>
&lt;p>預存程序（Stored Procedure）是一種資料庫對象，它是一個預編譯的SQL程式碼，可以在資料庫中存儲並重複使用。它通常由一系列SQL語句和編程邏輯組成，可以接受輸入參數、返回輸出參數和結果集。存儲過程通常由數據庫管理員或開發人員編寫和維護，並且可以在數據庫中執行。&lt;/p>
&lt;p>存儲過程有以下幾個優點：&lt;/p>
&lt;ol>
&lt;li>提高了數據庫性能：存儲過程是預編譯的，一旦編譯就會存儲在數據庫中，執行速度快。此外，存儲過程可以減少客戶端與服務器之間的通信，從而降低網絡延遲，提高數據庫性能。&lt;/li>
&lt;li>提高了數據安全性：存儲過程可以在數據庫層面上實現安全控制，可以限制某些用戶或角色的操作權限，從而保證數據的安全性。&lt;/li>
&lt;li>代碼復用：存儲過程可以被多個應用程序或者腳本重複調用，從而實現代碼復用，減少重複編寫代碼的時間和工作量。&lt;/li>
&lt;li>事務處理：存儲過程可以封裝事務處理邏輯，當多個SQL語句需要在一個事務中執行時，可以使用存儲過程將它們封裝在一個事務中，從而保證了數據的一致性和完整性。&lt;/li>
&lt;li>簡化了複雜的操作：存儲過程可以將多個SQL語句組合成一個操作，從而簡化了複雜的操作，使得應用程序更易於開發和維護。&lt;/li>
&lt;/ol>
&lt;p>存儲過程可以實現很多功能，比如：&lt;/p>
&lt;ol>
&lt;li>數據庫的備份和還原&lt;/li>
&lt;li>數據庫的複製和同步&lt;/li>
&lt;li>數據庫的日誌記錄和監控&lt;/li>
&lt;li>數據庫的查詢優化&lt;/li>
&lt;li>數據庫的數據加密和解密&lt;/li>
&lt;li>數據庫的數據清洗和轉換&lt;/li>
&lt;li>數據庫的業務邏輯實現&lt;/li>
&lt;li>數據庫的存儲和檢索過程中的錯誤處理&lt;/li>
&lt;li>數據庫的報表生成和匯出等。&lt;/li>
&lt;/ol>
&lt;h1 id="procedure與function之差異">Procedure與Function之差異&lt;/h1>
&lt;p>&lt;img src="https://i.imgur.com/glkexq1.png"
loading="lazy"
alt="image-20230302110014148"
>&lt;/p>
&lt;p>在PostgreSQL中，function和procedure都是儲存運算邏輯的物件，它們在設計目的和使用方式上略有不同。&lt;/p>
&lt;p>Function主要是用於執行一個特定的計算或邏輯，返回一個單一的值或一個結果集，並且可以在SELECT語句、WHERE語句等中使用。Function可以返回一個或多個結果集，但只能返回一個值作為輸出，因此它被稱為有返回值的Function。&lt;/p>
&lt;p>Procedure主要用於執行一連串的操作，不返回結果集，通常是用來執行複雜的業務邏輯，如事務處理、資料庫管理等。Procedure可以執行INSERT、UPDATE、DELETE等數據操作，但是不能作為SELECT語句的一部分使用。Procedure不返回任何值或結果集，因此它被稱為無返回值的Procedure。&lt;/p>
&lt;p>在設計時，需要根據實際需求選擇使用哪種物件。如果需要執行一個特定的計算或邏輯，並返回一個結果集，則使用Function。如果需要執行一連串的操作並且不需要返回結果集，則使用Procedure。&lt;/p>
&lt;p>&lt;strong>更直接的不同是，Procedure並沒有定義它自身的回傳值，連Returns void都沒有，而Function是有回傳值的，即使是Returns Void也是有回傳值&lt;/strong>&lt;/p>
&lt;h2 id="創建procedure的語法">創建procedure的語法&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">create&lt;/span> &lt;span class="k">or&lt;/span> &lt;span class="k">replace&lt;/span> &lt;span class="k">function&lt;/span> &lt;span class="n">test&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">LANGUAGE&lt;/span> &lt;span class="n">plpgsql&lt;/span>
&lt;span class="k">AS&lt;/span> &lt;span class="err">$$&lt;/span>
&lt;span class="k">BEGIN&lt;/span>
&lt;span class="k">END&lt;/span>
&lt;span class="err">$$&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/SQvfGm9.png"
loading="lazy"
alt="image-20230303104439737"
>&lt;/p>
&lt;p>若加入RETURNS VOID則會回報錯誤&lt;/p>
&lt;h2 id="創建function的語法">創建Function的語法&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">create&lt;/span> &lt;span class="k">or&lt;/span> &lt;span class="k">replace&lt;/span> &lt;span class="k">function&lt;/span> &lt;span class="n">test&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">LANGUAGE&lt;/span> &lt;span class="n">plpgsql&lt;/span>
&lt;span class="k">AS&lt;/span> &lt;span class="err">$$&lt;/span>
&lt;span class="k">BEGIN&lt;/span>
&lt;span class="k">END&lt;/span>
&lt;span class="err">$$&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/dya5pND.png"
loading="lazy"
alt="image-20230303104821763"
>&lt;/p>
&lt;p>若不指定回傳值，則會報錯誤&lt;code>function result type must be specified&lt;/code>&lt;/p>
&lt;h1 id="定界符-delimiter">定界符$$ (delimiter)&lt;/h1>
&lt;p>在SQL中，兩個美元符號（$$）用來定義一個區塊或一個標識符（identifier）。&lt;/p>
&lt;p>例如，可以使用&lt;code>$$&lt;/code>來.定義一個存儲過程或函數的主體。在$$之間的所有內容都被視為存儲過程或函數的主體，可以包含SQL語句、流程控制語句等。&lt;/p>
&lt;p>另外，&lt;code>$$&lt;/code>還可以用來定義一個標識符，例如，可以使用&lt;code>$$&lt;/code>來定義一個變量或一個標識符的名稱。在&lt;code>$$&lt;/code>之間的所有內容都被視為標識符的名稱，可以包含字母、數字和下劃線等字符。使用&lt;code>$$&lt;/code>定義標識符時，可以幫助區分保留字和自定義的標識符，以及避免標識符中包含空格等特殊字符所帶來的問題。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">CREATE&lt;/span> &lt;span class="k">FUNCTION&lt;/span> &lt;span class="n">myfunc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="nb">INT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="nb">INT&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">RETURNS&lt;/span> &lt;span class="nb">INT&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="err">$$&lt;/span>
&lt;span class="k">BEGIN&lt;/span>
&lt;span class="k">RETURN&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">END&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="err">$$&lt;/span> &lt;span class="k">LANGUAGE&lt;/span> &lt;span class="n">plpgsql&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">-- 在這個例子中，$$ 用來定義函數的主體。CREATE FUNCTION 指令創建了一個名為 myfunc 的函數，它接受兩個整數參數 x 和 y，返回它們的和。 RETURN 指令用於返回函數的值。
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">-- 在這裡，$ 用作定界符，它定義了函數的主體。如果不使用定界符，則在函數主體中使用分號 ; 可能會導致錯誤。使用定界符可以幫助區分不同的 SQL 區塊，從而更好地組織和管理 SQL 代碼。
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="使用terminal操作postgres-sql">使用Terminal操作Postgres SQL&lt;/h1>
&lt;p>有兩種方式，一種是用psql的Shell，另一種則是用powershell&lt;/p>
&lt;h2 id="使用psql的shell">使用psql的Shell&lt;/h2>
&lt;p>打開psql&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/nK75Ei4.png"
loading="lazy"
alt="image-20230301141105566"
>&lt;/p>
&lt;p>輸入相應的資訊&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/7xAxqku.png"
loading="lazy"
alt="image-20230301141442266"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/VoFR6LZ.jpg"
loading="lazy"
alt="1677641123421"
>&lt;/p>
&lt;h2 id="使用powershell">使用powerShell&lt;/h2>
&lt;p>首先先下載Postgres SQL，接著在把環境變數加入至電腦中，路徑大概會如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-cmd" data-lang="cmd">C&lt;span class="p">:&lt;/span>&lt;span class="nl">\Program&lt;/span>&lt;span class="c1"> Files\PostgreSQL\14\bin&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/XGVwCjA.png"
loading="lazy"
alt="image-20230301112209470"
>&lt;/p>
&lt;p>即可在Termianl中操作postgres SQL&lt;/p>
&lt;p>如以下指令&lt;img src="https://i.imgur.com/TytSWR7.png"
loading="lazy"
alt="image-20230301151606030"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-cmd" data-lang="cmd">psql -h localhost -p 5432 -U postgres school
## psql -h localhost -p 5432 -U &lt;span class="p">&amp;lt;&lt;/span>your_username&lt;span class="p">&amp;gt;&lt;/span> &amp;lt;your_database&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/O1LOTxQ.png"
loading="lazy"
alt="image-20230301112342437"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/9XwWLMJ.jpg"
loading="lazy"
alt="1677641123421"
>&lt;/p>
&lt;p>(與之對應的Server設定)&lt;/p>
&lt;h2 id="連結成功後的畫面">連結成功後的畫面&lt;/h2>
&lt;p>&lt;img src="https://i.imgur.com/hws6MgV.png"
loading="lazy"
alt="image-20230301114731154"
>&lt;/p>
&lt;p>可以輸入&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-cmd" data-lang="cmd">\dt
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>來查看該database底下的table&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/LrRDSbm.png"
loading="lazy"
alt="image-20230301114853633"
>&lt;/p>
&lt;blockquote>
&lt;p>在 psql 中，&lt;code>\&lt;/code> 符號是一個特殊的字元，稱為 &amp;ldquo;psql 內部命令前綴&amp;rdquo;。當您在 psql 終端機中輸入以 &lt;code>\&lt;/code> 開頭的命令時，psql 將解釋這個命令，並執行對應的操作。&lt;/p>
&lt;p>以下是幾個常用的 psql 內部命令：&lt;/p>
&lt;ul>
&lt;li>&lt;code>\c&lt;/code>: 切換到另一個數據庫&lt;/li>
&lt;li>&lt;code>\dt&lt;/code>: 列出當前數據庫中的所有表格&lt;/li>
&lt;li>&lt;code>\d table_name&lt;/code>: 查看指定表格的結構&lt;/li>
&lt;li>&lt;code>\q&lt;/code>: 退出 psql 終端機&lt;/li>
&lt;li>&lt;code>\! clear&lt;/code>: 清空psql 終端機畫面&lt;/li>
&lt;/ul>
&lt;p>當您想要使用 psql 內部命令時，必須在命令前加上 &lt;code>\&lt;/code> 符號。例如，要列出當前數據庫中的所有表格，您可以輸入 &lt;code>\dt&lt;/code>。&lt;/p>
&lt;p>如果您想要輸入以 &lt;code>\&lt;/code> 開頭的普通文本，而不是 psql 內部命令，則必須在 &lt;code>\&lt;/code> 前面再加上一個 &lt;code>\&lt;/code> 符號。例如，如果您想要在 SQL 陳述句中使用反斜線（&lt;code>\&lt;/code>）字元，則必須將其寫成 &lt;code>\\&lt;/code>。&lt;/p>
&lt;p>請注意，在某些情況下，psql 內部命令前綴 &lt;code>\&lt;/code> 可能會和 SQL 語句的關鍵字混淆。例如，&lt;code>CREATE TABLE&lt;/code> 陳述句中的 &lt;code>TABLE&lt;/code> 關鍵字後面如果不加引號可能會被 psql 認為是一個內部命令。為避免這種情況，建議在使用關鍵字時加上引號，例如 &lt;code>&amp;quot;TABLE&amp;quot;&lt;/code>。\&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/6fu3Mmp.png"
loading="lazy"
alt="image-20230301114853633"
>&lt;/p>
&lt;/blockquote>
&lt;p>基本上這個terminal就是我們的Query Tool，所以是可以在這邊做CRUD的，如下&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/9rB6wxq.png"
loading="lazy"
alt="image-20230301115221834"
>&lt;/p>
&lt;h1 id="常用的psql-指令">常用的psql 指令&lt;/h1>
&lt;ol>
&lt;li>&lt;code>\q&lt;/code> - 退出 &lt;code>psql&lt;/code> 命令行界面。&lt;/li>
&lt;li>&lt;code>\c &amp;lt;database_name&amp;gt;&lt;/code> - 連接到指定的數據庫。&lt;/li>
&lt;li>&lt;code>\dt&lt;/code> - 列出當前數據庫中的所有表格。&lt;/li>
&lt;li>&lt;strong>&lt;code>\d &amp;lt;table_name&amp;gt;&lt;/code> - 列出指定表格的詳細信息，包括列名、類型和約束等。&lt;/strong>&lt;/li>
&lt;li>&lt;code>\du&lt;/code> - 列出所有用戶帳號的詳細信息，包括用戶名、權限和群組等。&lt;/li>
&lt;li>&lt;code>\dp&lt;/code> - 列出所有表格的權限設置。&lt;/li>
&lt;li>&lt;code>\timing&lt;/code> - 啟用或禁用查詢執行時間的顯示。&lt;/li>
&lt;li>&lt;code>\set&lt;/code> - 列出或設置 &lt;code>psql&lt;/code> 的配置選項。&lt;/li>
&lt;li>&lt;code>\i &amp;lt;file_path&amp;gt;&lt;/code> - 從指定的檔案載入 SQL 命令。&lt;/li>
&lt;li>&lt;code>\e&lt;/code> - 打開外部編輯器編輯當前緩衝區中的 SQL 命令。&lt;/li>
&lt;li>&lt;strong>&lt;code>\! clear&lt;/code>: 清空psql 終端機畫面&lt;/strong>&lt;/li>
&lt;li>&lt;code>\dt&lt;/code>: 查看所有表格&lt;/li>
&lt;li>&lt;code>\df&lt;/code>: 查看資料庫中的所有函數以及Stored Procedure&lt;/li>
&lt;li>&lt;code>\ef&lt;/code>: 編輯現有的函數，可能你寫錯了還是啥的 ☆修改完後，存檔退出記事本，進到terminal要加上 &lt;code>\g&lt;/code> 才會把這個修改&lt;code>go&lt;/code>出去，不然你怎麼改都是沒有用ㄉ，血與淚的教訓Q_Q&lt;/li>
&lt;li>&lt;code>\sf&lt;/code>: 查看更詳細的函數內容，s stand for show&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>dt, du, df的d代表Describe的縮寫，用以顯示資料庫的資料&lt;/strong>&lt;/p>
&lt;h1 id="stored-procedure的實戰">Stored Procedure的實戰&lt;/h1>
&lt;p>首先創造表格&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">CREATE&lt;/span> &lt;span class="k">TABLE&lt;/span> &lt;span class="n">users&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="n">id&lt;/span> &lt;span class="nb">SERIAL&lt;/span> &lt;span class="k">PRIMARY&lt;/span> &lt;span class="k">KEY&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">name&lt;/span> &lt;span class="nb">VARCHAR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">NOT&lt;/span> &lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">email&lt;/span> &lt;span class="nb">VARCHAR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">NOT&lt;/span> &lt;span class="k">NULL&lt;/span> &lt;span class="k">UNIQUE&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>插入資料&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">INSERT&lt;/span> &lt;span class="k">INTO&lt;/span> &lt;span class="n">users&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">email&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">VALUES&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;John Doe&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;john.doe@example.com&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Jane Doe&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;jane.doe@example.com&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Bob Smith&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;bob.smith@example.com&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="返回值為空的function">返回值為空的Function&lt;/h2>
&lt;p>先創建一個無關緊要的stored procedure來感受一下它的作用吧，我們創造一個function，用來返回今天的日期，語法如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">CREATE&lt;/span> &lt;span class="k">OR&lt;/span> &lt;span class="k">REPLACE&lt;/span> &lt;span class="k">FUNCTION&lt;/span> &lt;span class="c1">-- 創建stored procedure的起手式。
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">get_current_date&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">-- 函式名稱
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">RETURNS&lt;/span> &lt;span class="nb">DATE&lt;/span> &lt;span class="c1">-- 該函式的返回值，若未指定則為Return Null
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">AS&lt;/span> &lt;span class="c1">-- 用以分明函數聲明與函數體，AS上面的是函數聲明，AS下面的是函數體
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="err">$$&lt;/span> &lt;span class="c1">-- 定界符，參照上方說明
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">BEGIN&lt;/span>
&lt;span class="k">RETURN&lt;/span> &lt;span class="k">CURRENT_DATE&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">-- 函數體
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">END&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="err">$$&lt;/span> &lt;span class="c1">-- 定界符，參照上方說明
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">LANGUAGE&lt;/span> &lt;span class="n">plpgsql&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">-- 不加這個就是默認使用SQL語言，只能使用一些比較簡單的語法，加了這個之後就可以作流程控制、循環、異常處理等等...
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接著呼叫它&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">SELECT&lt;/span> &lt;span class="n">get_current_date&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/qoDZ9PN.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;h2 id="回傳特定資料的function">回傳特定資料的function&lt;/h2>
&lt;p>該function會返回參數值的使用者的相關資訊&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">CREATE&lt;/span> &lt;span class="k">OR&lt;/span> &lt;span class="k">REPLACE&lt;/span> &lt;span class="k">FUNCTION&lt;/span> &lt;span class="n">get_user_info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">user_id&lt;/span> &lt;span class="nb">INTEGER&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">RETURNS&lt;/span> &lt;span class="k">TABLE&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="nb">VARCHAR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">email&lt;/span> &lt;span class="nb">VARCHAR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="k">AS&lt;/span>
&lt;span class="err">$$&lt;/span>
&lt;span class="k">BEGIN&lt;/span>
&lt;span class="k">RETURN&lt;/span> &lt;span class="n">QUERY&lt;/span> &lt;span class="k">SELECT&lt;/span> &lt;span class="n">users&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">users&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">email&lt;/span> &lt;span class="k">FROM&lt;/span> &lt;span class="n">users&lt;/span> &lt;span class="k">WHERE&lt;/span> &lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">user_id&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">END&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="err">$$&lt;/span> &lt;span class="k">LANGUAGE&lt;/span> &lt;span class="n">plpgsql&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/MRdpixs.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;h2 id="更新資料的function">更新資料的function&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">CREATE&lt;/span> &lt;span class="k">OR&lt;/span> &lt;span class="k">REPLACE&lt;/span> &lt;span class="k">FUNCTION&lt;/span> &lt;span class="k">public&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">update_user_info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">user_id&lt;/span> &lt;span class="nb">integer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="nb">character&lt;/span> &lt;span class="nb">varying&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">email&lt;/span> &lt;span class="nb">character&lt;/span> &lt;span class="nb">varying&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">RETURNS&lt;/span> &lt;span class="n">void&lt;/span>
&lt;span class="k">LANGUAGE&lt;/span> &lt;span class="n">plpgsql&lt;/span>
&lt;span class="k">AS&lt;/span> &lt;span class="err">$$&lt;/span>
&lt;span class="k">BEGIN&lt;/span>
&lt;span class="k">UPDATE&lt;/span> &lt;span class="n">users&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">u&lt;/span> &lt;span class="k">SET&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">email&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="mi">3&lt;/span> &lt;span class="k">WHERE&lt;/span> &lt;span class="n">u&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">END&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="err">$$&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="變數宣告">變數宣告&lt;/h2>
&lt;p>&lt;code>:=&lt;/code>來進行變數宣告，&lt;code>=&lt;/code>在postgresSQL比較像是用來比較&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">CREATE&lt;/span> &lt;span class="k">OR&lt;/span> &lt;span class="k">REPLACE&lt;/span> &lt;span class="k">FUNCTION&lt;/span> &lt;span class="n">my_function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">param1&lt;/span> &lt;span class="nb">integer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">param2&lt;/span> &lt;span class="nb">integer&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">RETURNS&lt;/span> &lt;span class="nb">integer&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="err">$$&lt;/span>
&lt;span class="k">DECLARE&lt;/span>
&lt;span class="n">var1&lt;/span> &lt;span class="nb">integer&lt;/span> &lt;span class="p">:&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">var2&lt;/span> &lt;span class="nb">integer&lt;/span> &lt;span class="p">:&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">BEGIN&lt;/span>
&lt;span class="n">var1&lt;/span> &lt;span class="p">:&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">param1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">var2&lt;/span> &lt;span class="p">:&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">param2&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">RETURN&lt;/span> &lt;span class="n">var1&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">var2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">END&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="err">$$&lt;/span> &lt;span class="k">LANGUAGE&lt;/span> &lt;span class="n">plpgsql&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="while-語法">WHILE 語法&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">CREATE&lt;/span> &lt;span class="k">OR&lt;/span> &lt;span class="k">REPLACE&lt;/span> &lt;span class="k">PROCEDURE&lt;/span> &lt;span class="k">public&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">factorial&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">IN&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="nb">INT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">OUT&lt;/span> &lt;span class="k">result&lt;/span> &lt;span class="nb">BIGINT&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">LANGUAGE&lt;/span> &lt;span class="n">plpgsql&lt;/span>
&lt;span class="k">AS&lt;/span> &lt;span class="err">$$&lt;/span>
&lt;span class="k">DECLARE&lt;/span>
&lt;span class="n">i&lt;/span> &lt;span class="nb">INT&lt;/span> &lt;span class="p">:&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">BEGIN&lt;/span>
&lt;span class="k">result&lt;/span> &lt;span class="p">:&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">WHILE&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="n">LOOP&lt;/span>
&lt;span class="k">result&lt;/span> &lt;span class="p">:&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="k">result&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">i&lt;/span> &lt;span class="p">:&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">END&lt;/span> &lt;span class="n">LOOP&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">END&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="err">$$&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="if語法">IF語法&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">CREATE&lt;/span> &lt;span class="k">OR&lt;/span> &lt;span class="k">REPLACE&lt;/span> &lt;span class="k">PROCEDURE&lt;/span> &lt;span class="n">example_if_proc&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="nb">INT&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">AS&lt;/span>
&lt;span class="k">BEGIN&lt;/span>
&lt;span class="k">IF&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="k">THEN&lt;/span>
&lt;span class="n">DBMS_OUTPUT&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">PUT_LINE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;a is negative&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">ELSIF&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="k">THEN&lt;/span>
&lt;span class="n">DBMS_OUTPUT&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">PUT_LINE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;a is zero&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">ELSE&lt;/span>
&lt;span class="n">DBMS_OUTPUT&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">PUT_LINE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;a is positive&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">END&lt;/span> &lt;span class="k">IF&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">END&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="將select出來的值儲存在一變數中">將SELECT出來的值儲存在一變數中&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">CREATE&lt;/span> &lt;span class="k">OR&lt;/span> &lt;span class="k">REPLACE&lt;/span> &lt;span class="k">PROCEDURE&lt;/span> &lt;span class="k">public&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">get_customer_info&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="k">IN&lt;/span> &lt;span class="n">customer_id&lt;/span> &lt;span class="nb">INTEGER&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="k">OUT&lt;/span> &lt;span class="n">customer_name&lt;/span> &lt;span class="nb">VARCHAR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">50&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="k">OUT&lt;/span> &lt;span class="n">customer_email&lt;/span> &lt;span class="nb">VARCHAR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">50&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="k">LANGUAGE&lt;/span> &lt;span class="n">plpgsql&lt;/span>
&lt;span class="k">AS&lt;/span> &lt;span class="err">$$&lt;/span>
&lt;span class="k">BEGIN&lt;/span>
&lt;span class="k">SELECT&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">email&lt;/span> &lt;span class="k">INTO&lt;/span> &lt;span class="n">customer_name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">customer_email&lt;/span>
&lt;span class="k">FROM&lt;/span> &lt;span class="n">customers&lt;/span>
&lt;span class="k">WHERE&lt;/span> &lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">customer_id&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">IF&lt;/span> &lt;span class="k">NOT&lt;/span> &lt;span class="k">FOUND&lt;/span> &lt;span class="k">THEN&lt;/span>
&lt;span class="n">RAISE&lt;/span> &lt;span class="k">EXCEPTION&lt;/span> &lt;span class="s1">&amp;#39;Customer not found&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">END&lt;/span> &lt;span class="k">IF&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">END&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="err">$$&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="將資訊打印出來print">將資訊打印出來(print)&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">CREATE&lt;/span> &lt;span class="k">OR&lt;/span> &lt;span class="k">REPLACE&lt;/span> &lt;span class="k">procedure&lt;/span> &lt;span class="n">sayHello&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">RETURNS&lt;/span> &lt;span class="n">void&lt;/span>
&lt;span class="k">LANGUAGE&lt;/span> &lt;span class="n">plpgsql&lt;/span>
&lt;span class="k">AS&lt;/span> &lt;span class="err">$$&lt;/span>
&lt;span class="k">DECLARE&lt;/span>
&lt;span class="k">BEGIN&lt;/span>
&lt;span class="n">RAISE&lt;/span> &lt;span class="n">NOTICE&lt;/span> &lt;span class="s1">&amp;#39;hello word:&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">END&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="err">$$&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>GitLab-CI/CD筆記</title><link>https://hoxtonhsu.com/p/gitlab-ci/cd%E7%AD%86%E8%A8%98/</link><pubDate>Mon, 06 Feb 2023 19:50:08 +0800</pubDate><guid>https://hoxtonhsu.com/p/gitlab-ci/cd%E7%AD%86%E8%A8%98/</guid><description>&lt;img src="https://i.imgur.com/b9bWXWs.jpg" alt="Featured image of post GitLab-CI/CD筆記" />&lt;p>&lt;a class="link" href="https://youtu.be/-4XT8-znkuc?list=PLBd8JGCAcUAEwyH2kT1wW2BUmcSPQzGcu" target="_blank" rel="noopener"
>參考影片：為你自己學GitLab CICD&lt;/a>&lt;/p>
&lt;h1 id="為何選擇jenkins">為何選擇Jenkins？&lt;/h1>
&lt;p>目前市面上有三種CI/CD的工具，分別是&lt;/p>
&lt;ol>
&lt;li>Github Action&lt;/li>
&lt;li>GitLab CI/CD&lt;/li>
&lt;li>Jenkins&lt;/li>
&lt;/ol>
&lt;p>而他們各自的難易度如下：&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/2Z5xcnD.jpg"
loading="lazy"
alt="image-20230208032100440"
>&lt;/p>
&lt;h2 id="github-action-jenkins-gitlabcicd-三者之比較">Github Action Jenkins GitlabCICD 三者之比較&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Github Action&lt;/th>
&lt;th>GitLab CI/CD&lt;/th>
&lt;th>Jenkins&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>優點&lt;/td>
&lt;td>簡單易用，可以透過組合 Actions 來設定 CI/CD 流程。&lt;br/>集成與 GitHub 相當良好，方便地與其他 GitHub 工具整合。&lt;br/>&lt;/td>
&lt;td>功能齊全，涵蓋了版本控制、需求管理、測試、打包、部署等。&lt;br/>內建了測試覆蓋率分析、版本回溯、網路推送等工具。&lt;br/>支援更多的發佈平臺和語言，可以支援更多不同的開發團隊。&lt;/td>
&lt;td>功能強大，擁有豐富的插件系統，可以滿足多種 CI/CD 需求。&lt;br/>社區活躍，有大量社區插件可以使用。&lt;br/>可以自定義工作流程，靈活應對複雜需求。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>缺點&lt;/td>
&lt;td>設定複雜的流程可能會比較困難。&lt;br/>有些功能，比如說高級的權限管理，可能比較弱。&lt;/td>
&lt;td>較為複雜，可能會花費一些時間來學習和設定。&lt;br/>有些功能，例如高級的安全性，可能會有額外的費用。&lt;/td>
&lt;td>相對較難學習和使用，不如 GitHub Actions 和 GitLab CI/CD 簡單易用。&lt;br/>配置和管理相對複雜，需要一定的技術支持。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>為什麼CI/CD重要，它做了哪些事情？&lt;/p>
&lt;ul>
&lt;li>在還沒有CI/CD的流程之前，部屬一個web大概是這樣&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/Mvw7aN3.png"
loading="lazy"
alt="image-20230208033136666"
>&lt;/p>
&lt;ul>
&lt;li>CI/CD建立完成後，開發人員只需要專注在任務的完成，而不需要做重複的部屬工作&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/I5CQwCE.png"
loading="lazy"
alt="image-20230208033210513"
>&lt;/p>
&lt;h1 id="名詞解析">名詞解析&lt;/h1>
&lt;h2 id="pipeline">Pipeline&lt;/h2>
&lt;p>就是腳本(script)的意思，用來設計CICD的流程，一個常見的pipeline如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># 稱之為階段，可以為每個Job分配階段，常見的比如說有測試階段、打包階段、部屬階段等等，每個job都屬於一個階段&lt;/span>
stages:
- linter
- testing
- building
- deploy
&lt;span class="c1"># 工作流&lt;/span>
workflow:
rules:
- &lt;span class="k">if&lt;/span>: &lt;span class="nv">$CI_COMMIT_BRANCH&lt;/span> &lt;span class="o">==&lt;/span>&lt;span class="s2">&amp;#34;main&amp;#34;&lt;/span> &lt;span class="c1">#若發生什麼事&lt;/span>
when: always &lt;span class="c1">#則做什麼事&lt;/span>
- when: never &lt;span class="c1">#不然則做什麼&lt;/span>
&lt;span class="c1"># 變數，就是那個變數，可以寫在外層的就是全域變數，寫在Job裡面的就是Job變數&lt;/span>
variables:
host_name: &lt;span class="s2">&amp;#34;hoxton&amp;#34;&lt;/span>
&lt;span class="c1"># 稱之為Job&lt;/span>
Helloworld: &lt;span class="c1"># Job名稱&lt;/span>
image: ruby:3.1.2-alpine3.16 &lt;span class="c1">#指定要用什麼image來跑，等同於Executor&lt;/span>
variables: &lt;span class="c1"># Job變數&lt;/span>
my_name: &lt;span class="s2">&amp;#34;hello kitty&amp;#34;&lt;/span>
stage: linter &lt;span class="c1"># 這個Job是什麼階段的&lt;/span>
script: &lt;span class="c1"># 要執行什麼樣的腳本&lt;/span>
- &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;hello world, GitLab! &lt;/span>&lt;span class="nv">$my_name&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
- &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;hello world, GitLab! &lt;/span>&lt;span class="nv">$host_name&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
- chmod +x ./run.sh
- ./run.sh
run_unit_tests: &lt;span class="c1"># Job名稱&lt;/span>
stage: testing &lt;span class="c1"># 這個Job是什麼階段的&lt;/span>
needs: &lt;span class="c1"># 決定Job的順序&lt;/span>
- Helloworld &lt;span class="c1"># 在這些Job完成後才會去做run_unit_tests的Job&lt;/span>
script: &lt;span class="c1"># 要執行什麼樣的腳本&lt;/span>
- &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;執行單元測試&amp;#34;&lt;/span>
before_script: &lt;span class="c1">#在執行腳本之前需要執行什麼腳本&lt;/span>
- &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;安裝套件&amp;#34;&lt;/span>
- &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;設定資料庫連線&amp;#34;&lt;/span>
after_script :#在執行腳本之後需要執行什麼腳本
- &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;刪除不必要的檔案&amp;#34;&lt;/span>
bad_job: &lt;span class="c1"># Job名稱&lt;/span>
stage: testing &lt;span class="c1"># 這個Job是什麼階段的&lt;/span>
script: &lt;span class="c1"># 要執行什麼樣的腳本&lt;/span>
- &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;bad_job&amp;#34;&lt;/span>
build_docker_images: &lt;span class="c1"># Job名稱&lt;/span>
only: &lt;span class="c1"># 指定Job只會在什麼分支執行&lt;/span>
- main
stage: building &lt;span class="c1"># 這個Job是什麼階段的&lt;/span>
script: &lt;span class="c1"># 要執行什麼樣的腳本&lt;/span>
- &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;building docker images&amp;#34;&lt;/span>
deploy_to_production: &lt;span class="c1"># Job名稱&lt;/span>
except: &lt;span class="c1"># 指定Job不在什麼分支執行&lt;/span>
- dev &lt;span class="c1"># 分支名稱&lt;/span>
stage: deploy &lt;span class="c1"># # 這個Job是什麼階段的&lt;/span>
script: &lt;span class="c1"># 要執行什麼樣的腳本&lt;/span>
- &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;deploy to production&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="runner">Runner&lt;/h2>
&lt;p>大概等同於「要用哪台電腦來執行Pipeline」，以下可以證明&lt;/p>
&lt;p>欲執行的script&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">print-location:
tags:
- euno
script:
- &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$HOSTNAME&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/47bZfpT.png"
loading="lazy"
alt="image-20230208114831319"
>&lt;/p>
&lt;p>&lt;strong>若不指定要有用哪台電腦執行，則gitlab會提供，但這時候就是在使用gitlab所提供的服務，免費帳戶每月超過40小時即到達上限，因此需要去註冊一個Runner&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>如何註冊一個Runner&lt;/li>
&lt;/ul>
&lt;p>可以參考GitLab的官方文件
&lt;a href="https://docs.gitlab.com/runner/install/">https://docs.gitlab.com/runner/install/&lt;/a>&lt;/p>
&lt;p>在Ubuntu系統下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">curl -L &lt;span class="s2">&amp;#34;https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> sudo bash
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接著執行&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo apt-get install gitlab-runner
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/TZSQrpa.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/Kumst5b.png"
loading="lazy"
alt="image-20230208113900501"
>&lt;/p>
&lt;h2 id="executor">Executor&lt;/h2>
&lt;p>代表pipeline所運行的環境，可以是shell，也可以是Docker容器，端看目的而定，但千萬要記得，要執行指定的Executor，&lt;strong>也要看自己的電腦或VM有沒有這個環境&lt;/strong>，之前有遇到一個問題是，我在本地起了一個runner，但一直說找不到pwsd的指令，此時要到gitlab-runner安裝的資料夾去調整toml檔案，將shell改成用powershell運行，&lt;strong>因為window下沒有pwsd這個指定&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/z1cqmhL.png"
loading="lazy"
alt="image-20230208115618286"
>&lt;/p>
&lt;h1 id="如何使用gitlab的cicd工具">如何使用GitLab的CI/CD工具&lt;/h1>
&lt;p>在專案底下新增&lt;code>.gitlab-ci.yml&lt;/code>的檔案，裡面的格式長這樣&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/UYbhpbw.png"
loading="lazy"
alt="image-20230205220750491"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="c"># 稱之為狀態&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">stages&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">linter&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">testing&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">building&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">deploy &lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c"># 稱之為Job&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">Helloworld&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">stage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">linter&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">echo &amp;#34;hello world, GitLab!&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">run_unit_tests&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">stage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">testing&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">echo &amp;#34;執行單元測試&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">before_script&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">echo &amp;#34;安裝套件&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">echo &amp;#34;設定資料庫連線&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">after_script&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">echo &amp;#34;刪除不必要的檔案&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">bad_job&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">stage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">testing&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">epaewjdqwe&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">build_docker_images&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">stage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">building&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">echo &amp;#34;building docker images&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">deploy_to_production&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">stage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">deploy&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">echo &amp;#34;deploy to production&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="把image推上gitlab">把Image推上Gitlab&lt;/h1>
&lt;h1 id="問題彙整">問題彙整&lt;/h1>
&lt;h2 id="got-permission-denied-while-trying-to-connect-to-the-docker-daemon-socket-at-unix-">Got permission denied while trying to connect to the Docker daemon socket at unix:/// &amp;hellip;&lt;/h2>
&lt;p>&lt;img src="https://i.imgur.com/qnx1Plu.png"
loading="lazy"
alt="image-20230208005955002"
>&lt;/p>
&lt;p>解決方法：&lt;/p>
&lt;p>在vm中輸入&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">usermod -aG docker gitlab-runner
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&amp;ldquo;usermod -aG docker gitlab-runner&amp;rdquo; 這個指令是用來將 &amp;ldquo;gitlab-runner&amp;rdquo; 用戶加入 &amp;ldquo;docker&amp;rdquo; 群組。 &amp;ldquo;-a&amp;rdquo; 選項用於將用戶附加到指定的群組， &amp;ldquo;-G&amp;rdquo; 選項用於指定群組。&lt;/p>
&lt;p>這通常是為了允許 &amp;ldquo;gitlab-runner&amp;rdquo; 用戶在 GitLab Runner 管理的 CI/CD 流程中執行 Docker 容器。 通過將用戶加入 &amp;ldquo;docker&amp;rdquo; 群組，用戶可以在不需要權限升級的情況下運行 Docker 指令。&lt;/p>
&lt;p>請注意，&amp;ldquo;usermod&amp;rdquo; 指令的確切語法和行為可能因您使用的作業系統而異。 請查閱您的作業系統的文檔以獲取更多信息。&lt;/p>
&lt;h2 id="denied--requested-access-to-the-resource-is-denied">denied : requested access to the resource is denied.&lt;/h2>
&lt;p>八成是你的push沒有寫好，可以參考下面的樣子&lt;/p>
&lt;h2 id="runner會將target檔案刪掉導致dokcer-build不起來">runner會將target檔案刪掉，導致dokcer build不起來&lt;/h2>
&lt;p>GitLab CICD runner在執行每次作業時(Job)，為了保持互相的獨立性，會將Job所產生的檔案，切換至下個檔案時刪除，例如&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">mvn clean package
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>時會產生/target的資料夾，在下一個Job時就會被刪除，如下&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/iOKltzR.png"
loading="lazy"
alt="image-20230311105003882"
>&lt;/p>
&lt;p>此時可以在pipeline裡面加上這段&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/S8BFNTE.png"
loading="lazy"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash"> artifacts:
paths:
- temp/*.jar
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>這樣就代表在下一次Job時，這個目錄底下的東西並不會被刪除&lt;/p></description></item><item><title>使用SSH來連動GITSCM</title><link>https://hoxtonhsu.com/p/%E4%BD%BF%E7%94%A8ssh%E4%BE%86%E9%80%A3%E5%8B%95gitscm/</link><pubDate>Sun, 05 Feb 2023 21:06:21 +0800</pubDate><guid>https://hoxtonhsu.com/p/%E4%BD%BF%E7%94%A8ssh%E4%BE%86%E9%80%A3%E5%8B%95gitscm/</guid><description>&lt;img src="https://i.imgur.com/8ocM55M.png " alt="Featured image of post 使用SSH來連動GITSCM" />&lt;h1 id="步驟">步驟&lt;/h1>
&lt;h2 id="產生key的方式">產生key的方式&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">ssh-keygen
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="儲存key的位置">儲存Key的位置&lt;/h2>
&lt;p>&lt;img src="https://i.imgur.com/O7fBG6U.png"
loading="lazy"
alt="image-20230205211256218"
>&lt;/p>
&lt;p>要改就改，不改就是預設的&lt;/p>
&lt;h2 id="是否要針對privatekey設置密碼">是否要針對privateKey設置密碼&lt;/h2>
&lt;p>&lt;img src="https://i.imgur.com/6cq91cE.png"
loading="lazy"
alt="image-20230205211413921"
>&lt;/p>
&lt;p>使用這組Key時需不需要額外使用密碼，不輸入就是空白&lt;/p>
&lt;h2 id="查看產生的key">查看產生的key&lt;/h2>
&lt;p>&lt;img src="https://i.imgur.com/s4Zz9fr.png"
loading="lazy"
alt="image-20230205211703737"
>&lt;/p>
&lt;p>.pub後綴的就代表是pubKey&lt;/p>
&lt;h2 id="進入主機內將private-key加入">進入主機內，將private Key加入&lt;/h2>
&lt;p>在.ssh底下會有一個authorized_keys的檔案
將privateKey放入其中就好&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/xnGrZmN.png"
loading="lazy"
alt="image-20230307235351522"
>&lt;/p>
&lt;p>輸入&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">cat id_rsa.pub
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>來查看&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/eRFOrX4.png"
loading="lazy"
alt="image-20230205211814078"
>&lt;/p>
&lt;p>此時將這串複製下來，貼到GitHub的SSH Key設定&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/JuU3kev.png"
loading="lazy"
alt="image-20230205213904945"
>&lt;/p>
&lt;p>接著只要上傳是使用SSH方式上傳，就不需要再登入github了&lt;/p></description></item><item><title>Wednesday 星期三與她的暈船夥伴們</title><link>https://hoxtonhsu.com/p/wednesday-%E6%98%9F%E6%9C%9F%E4%B8%89%E8%88%87%E5%A5%B9%E7%9A%84%E6%9A%88%E8%88%B9%E5%A4%A5%E4%BC%B4%E5%80%91/</link><pubDate>Sun, 29 Jan 2023 17:20:08 +0800</pubDate><guid>https://hoxtonhsu.com/p/wednesday-%E6%98%9F%E6%9C%9F%E4%B8%89%E8%88%87%E5%A5%B9%E7%9A%84%E6%9A%88%E8%88%B9%E5%A4%A5%E4%BC%B4%E5%80%91/</guid><description>&lt;img src="https://i.imgur.com/C9FgAaF.jpg" alt="Featured image of post Wednesday 星期三與她的暈船夥伴們" />&lt;h1 id="緣起">緣起&lt;/h1>
&lt;p>年假實在太無聊了，有點廢到連書都讀不下去，就打開Netflix想看看有什麼好看的，原本想看初戀First Love的，但無奈我對於愛情類型的東西實在沒什麼太大的興趣，正好看到了wednesday出現在推薦名單上，稍微看了一下預告，覺得Wednesday這種厭世到極限的人設深得我心，再搭配上女配角伊妮形成的反差，兩邊的對比實在太過強烈，讓我忍不住好奇到底這部在演什麼，於是就點進去了。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/nYPidWy.jpg"
loading="lazy"
alt="image-20230129234015442"
>&lt;/p>
&lt;p>先講結論，我覺得整部人設滿分，劇情真的不行，後面劇情感覺沒一個人是用腦袋在做事的，看完只覺得我的智商被狠狠的強暴了一遍。&lt;/p>
&lt;p>前面四集算是蠻多記憶點的，比如說舞會、拉大提琴、雕像爆破等等，對於星期三的角色塑造也算豐滿(就是個怪胎)。但無奈到後面幾集感覺整部劇情的調性就開始脫離了Addams Family的那種黑色幽默。&lt;/p>
&lt;p>首先是第五集，這一集家庭探訪日，校長要求Addams一家去做心理諮商，我本以為可以看到她們一家人「與眾不同」的那面，比如說互相挖苦、愛彼此愛到要殺死對方的那一種關心方式，但沒想到話鋒一轉，她們一家人居然整整齊齊的認真在做一場諮商，當問到Gormoz年輕時是否真的殺過人，Morticia還牙起來，要Wedensday不要再繼續追問下去了。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/zxyMpNT.jpg"
loading="lazy"
alt="VideoScreenshot&amp;ndash;5-10’21”"
>&lt;/p>
&lt;p>當時心裡在想，這家人不是一群outcast嗎？怎麼突然間會這麼嚴肅地在講這件事情？整場諮商下來完全沒有任何Addams Family的感覺，跟一般家庭沒什麼不同的地方。直到後面謎題揭曉時，我還想說這麼嚴肅肯定是有什麼天大的事情所以才不能說，原來就只是爸爸幫媽媽背黑鍋而已，請問這件事情有必要瞞著Wednesday嗎？有必要故弄玄虛嗎？&lt;/p>
&lt;p>緊接著到第六集，莫名其妙的Xavier跟Tyler都對Wednesday暈船，而且暈船的不清，相繼說出什麼「舞會過後，我只想忘掉妳，卻都忘不掉」&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/H9Aab9M.jpg"
loading="lazy"
alt="VideoScreenshot&amp;ndash;6-17’14” (1)"
>「雖然可能是我的錯覺，星期三，但你明明不停對我明示暗示」，我的天，我以為點進來是黑色幽默的懸疑片，沒想到點進來的原來是三角戀修羅場連續劇，再回頭看看前面的劇情，實在不覺得星期三跟這兩人的互動有什麼地方會讓人暈船的，可能這兩人都是易暈體質吧，只能說Wednesday有海王天份，深諳各種小心機吧，有一幕好像是Xavier看到Wednesday跟Tyler去舞會還是啥的，再生悶氣，沒想到Wedensday居然問Xavier到底在不開心什麼，我當時心裡在想「你這不是很懂嗎？海王Wednesday」，只能說男人終究是抵抗不了神祕正妹的邀請，唉。&lt;/p>
&lt;p>到了後面進入主線，Wednesday騙Enid跟Tyler想要出去，結果實際上是去Gates家調查，結果調查不順遭到Hyde的攻擊，結尾時看到Enid生氣的對Wedensday說「你根本不在乎你身邊的人，你只在乎你自己」時，我心裡想說終於啊，有人終於講出實話了，結果下一集Enid又活蹦亂跳的來找Wednesday聊天，不只是這幕，其實之前也有很多類似的劇情&lt;/p>
&lt;p>Wednesday搞了些什麼讓大家很不爽，結果過沒幾集大家又主動來找Wednesday聊天，道歉。奇怪，到底為什麼要跟她道歉啊，難道人長得正就可以這樣子嗎。&lt;/p>
&lt;p>接著劇情在往下走，發現更加弱智，星期三指認Xavier就是兇手，結果實際上抓錯了，我個人認為沒問題，畢竟人總是有出錯的時候，而且確實很多證據都指向Xavier。但當Wednesaday說她抓錯，Tyler才是兇手時，她的快樂夥伴依然是無條件地相信Wednesday，甚至連證據都沒提供，她的快樂夥伴沒有絲毫的懷疑她講得到底是真是假，整個抓捕過程細絲極恐，我甚至覺得，假使Tyler不是兇手，Wednesday說Ajax是兇手，那群快樂夥伴也是會很樂意地把Ajax抓起來上供給Wednesday。也就是說其實星期三的行為根本是村霸的行為吧，說你有罪就有罪，抓犯人不靠腦袋而是靠拳頭，全程硬A，甚至最後抓犯人還是靠幻視才抓到的，0邏輯思考、解謎。&lt;/p>
&lt;p>到最後一集則是弱智情節大集合，知道主謀是Thornhill老師，校長用變形術變成Tyler的樣子去跟Wednesday包圍她，結果校長在Thornhill面前解除變形後，我本以為會有什麼刺激的對決畫面，結果Thornhill只是提起「手中」的針筒，就往校長的「脖子」刺下去，校長就死了，那到底為什麼要變形接近老師啊，不能躲在旁邊聽就好嗎？退一萬步來說，校長你真的不是在演嗎？你身高190，老師身高155，能不能反應一下啊，結果就這樣死了，完全沒有任何推進劇情的作用，校長在不在那個場景對於劇情影響都不大，真的就只是為了過來死而已。&lt;/p>
&lt;p>後來Crackstone復活，我本以為會有什麼超炫的技能，結果完全沒有，戰力值低落到我甚至認為Nevermore學生每個人都衝上去，他就會活活當場被打死在現場，就只有進Nevermore後放個火焰風暴後，接著就拿起法仗當一個進戰法師，跟Wednesday近身平A起來，不知道是不是腦袋還沒熱起來，忘記自己是一個法師，應該拉開距離，或是趁隙放個什麼魔法之類的，最後還被Bianca從後面背刺，當他轉過去打飛Bianca後，接著又被Wednesday背刺，看到這幕的時候我還以為在看周星馳的零零漆大戰金鎗客，這種古靈金怪槍的幽默沒想到也被洋人發揚光大去了。最後Thornhill老師拿了一把槍走出來時，我心裡在想「終於啊！大人，時代變了，該拿槍了」，結果拿槍抖了老半天，講了一堆話就是沒開下去，結果後面被蜜蜂叮的時候才開槍，真的不是當年腦子進水嗎？Crackerstone復活後不就叫你閉嘴，警告你話太多了嗎？結果最後還是沒把他的話聽進去，難怪不成大氣。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/H8Z2aaX.jpg"
loading="lazy"
alt="VideoScreenshot&amp;ndash;8-39’29”"
>&lt;/p>
&lt;p>最後快樂大結局，該發糖的發糖、該狼化的狼化，Xavier繼續暈船Wednesday，結尾還送了台Iphone給Wednesday，看到這幕時，我忽然想起知道為什麼Xavier一開始會懷疑自己被Bianca蠱惑，從劇情表現上看起來他確實是暈到神智不清，我也懷疑他最後真的被星期三蠱惑了，印證了那句「星期三虐我千百遍，我仍待她如初戀」，鋼鐵星期三粉實至名歸。&lt;/p>
&lt;h1 id="結尾">結尾&lt;/h1>
&lt;p>認真回想了一下，整部劇情最大該吐槽的點就是Wednesday身邊的人對她近乎盲目的包容，校長包容她、警長包容她、狼妹包容她、男配也包容她，Wednesday至始至終除了小手外，幾乎沒對任何人道過歉，也沒深刻的反省，但就是所有的人都會莫名其妙的原諒她，毫無邏輯與深度可言。第二季出的話我應該還是會看，畢竟人設實在太香了，希望第二季不要在虎頭蛇尾了。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/L1o4eCd.jpg"
loading="lazy"
alt="VideoScreenshot&amp;ndash;8-44’45”"
>&lt;/p></description></item><item><title>Oracle?SAP?鼎新?淺談這些ERP背後的是什麼-SQL資料庫</title><link>https://hoxtonhsu.com/p/oraclesap%E9%BC%8E%E6%96%B0%E6%B7%BA%E8%AB%87%E9%80%99%E4%BA%9Berp%E8%83%8C%E5%BE%8C%E7%9A%84%E6%98%AF%E4%BB%80%E9%BA%BC-sql%E8%B3%87%E6%96%99%E5%BA%AB/</link><pubDate>Thu, 26 Jan 2023 17:50:33 +0800</pubDate><guid>https://hoxtonhsu.com/p/oraclesap%E9%BC%8E%E6%96%B0%E6%B7%BA%E8%AB%87%E9%80%99%E4%BA%9Berp%E8%83%8C%E5%BE%8C%E7%9A%84%E6%98%AF%E4%BB%80%E9%BA%BC-sql%E8%B3%87%E6%96%99%E5%BA%AB/</guid><description>&lt;img src="https://i.imgur.com/6aiiDXi.png" alt="Featured image of post Oracle?SAP?鼎新?淺談這些ERP背後的是什麼-SQL資料庫" />&lt;h1 id="前言">前言&lt;/h1>
&lt;p>記得在某次外勤的時候，那時候好像是要做稅抽還是要查什麼東西，需要用客戶的電腦SAP裡面查一些資料，可是我按了老半天，一直出現錯誤，迷迷糊糊地從那些文字中拼湊出一些單詞，只記得有什麼SQL Error，當時把這件事情跟客戶的會計反應，他旋即請了工程師過來處理，弄了一下之後跟我說需要明天才會好，要我明天再去撈&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/23Rnl3H.png"
loading="lazy"
alt="image-20230126231514168"
>&lt;/p>
&lt;p>(範例，非當事錯誤)&lt;/p>
&lt;p>後來這幾年工作上常常接觸到資料庫的東西，最近又想起這件事來，也總算知道當時遇到的錯誤是什麼了&lt;code>我猜是IP連不到&lt;/code>。因此繼續趁著年假這個真的不知道做什麼事的時間點來科普一下ERP系統後面的東西，&lt;strong>SQL DataBase是什麼&lt;/strong>？&lt;/p>
&lt;h1 id="什麼是sql">什麼是SQL&lt;/h1>
&lt;p>首先要知道SQL怎麼發音，我都念SQL，但也有些人念SQL，SQL的念法是，&lt;code>C闊(Ess-cue-ell')&lt;/code>。SQL這個詞的由來有人說沒意義，就是叫SQL，也有人認為是有意義的，也就是Structured Query Language(結構化查詢語言)的縮寫。簡而言之SQL就是用來跟資料庫(Database)溝通的一種Syntax(語法)，SQL與資料庫的關係像魔法師與魔法書的關係，魔法師透過詠唱咒語(SQL語法)來使用魔法書(Database)的能力。&lt;/p>
&lt;p>第一次接觸到SQL是在大四大三的時候吧，那時候好像有個系必修是什麼資訊概論類似的課程，老師上課的時候有提到一個東西，他的介面是隻海豚，然後有很多奇怪的按鈕，&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/OCEIz1x.png"
loading="lazy"
alt="image-20230126232635060"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/UNAw0Ua.png"
loading="lazy"
alt="image-20230126232700834"
>&lt;/p>
&lt;p>當時的我完全不知道這些是啥，甚至連SQL是什麼都沒有半點頭緒，那門課我記得我只負責處理一些很瑣碎的事情，其他都靠我同學Carry過的XD。結果沒想到逃的了一時，逃不了一世，現在天天都會看到，感嘆命運多舛啊。&lt;/p>
&lt;p>話說回來，所以什麼是SQL呢？他是用來做什麼的？我們首先先來講一下什麼是&lt;strong>關聯式資料庫&lt;/strong>。大家應該有上過學吧，學校裡，有班級、有學生、有班導，有科任老師，這些東西都是互相有關聯的，比如說一個班導可以有很多學生，但每個學生只能有一個班導，一個科任老師也可以有很多學生，每個學生也可以有很多的科任老師。用來記錄這些資訊的資料庫就是所謂的關聯式資料庫&lt;code>注：有關聯式就會有非關聯式資料庫，但這部分我就不熟了&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/5SQaANf.png"
loading="lazy"
alt="image-20230126235342454"
>&lt;/p>
&lt;p>(注：我事後回來看，我覺得這樣設計有很多問題，其實可以在精簡一點的，大佬就別鞭太大力了）&lt;/p>
&lt;p>畫成關聯圖大概就是長這樣，原諒我畫的真的有點醜，不過大概看的出來它們彼此有哪些關係吧？學生跟班級、導師、科任老師有關聯、班級跟學生還有班導有關聯、班導跟科任老師沒有關聯(其實這邊設計的不太好，會違反資料正規化，但只是示範而已）。SQL Database我們每天都會碰到，比如說你每天上車逼的悠遊卡，你的卡號就被記在政府的悠遊卡SQL Database裡面，只要你遺失後，就會把你的那筆資料拉出來，標注已遺失。或是會計師考試報名時，會給你一組准考證號碼，所以考試院的SQL資料庫裏面，也會有這筆准考證的資料，這筆資料包含你的身分證、考試成績等等，只要涉及資料儲存的部分，其實背後都有資料庫的存在，也包含你的手機裡面的通訊錄等等，裡面都有小型的資料庫在裡面處理你的information。&lt;/p>
&lt;h1 id="sql的實作">SQL的實作&lt;/h1>
&lt;p>多說無益，我們就用線上版的SQL編輯器來看看SQL是怎麼運作的吧，建議這邊點開我上面的HackMd，我有用Gif的方式錄影下來。&lt;/p>
&lt;p>線上的SQL編輯器：https://sqliteonline.com/&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/7VRZOgp.png"
loading="lazy"
alt="image-20230127001046262"
>&lt;/p>
&lt;p>點進去後會看到裡面長這個樣子，時間寶貴，我把左邊的欄位講一下就好，其實左邊就是各是各樣的SQL Database，不同的Database都有一些特性&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/haqbgQm.png"
loading="lazy"
alt="image-20230127001150655"
>&lt;/p>
&lt;ul>
&lt;li>SQLite：輕量化的SQL資料庫，常用於手機端。&lt;/li>
&lt;li>MariaDB：MySQL的作者獨立出來開發的SQL資料庫&lt;/li>
&lt;li>PostgreSQL：也是SQL資料庫&lt;/li>
&lt;li>MSSQL：微軟開發的SQL資料庫，會有微軟的奧援&lt;/li>
&lt;/ul>
&lt;p>當然不只這些，像常聽到的Oracle，不只有做ERP系統，其實還有做SQL資料庫，當然Oracle做的不止這些。話說回來，這些語法都大同小異，但為了方便各位，我們這次就用SQLite做示範，因為這個頁面一點進來就是SQLite了。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/tshXLM8.png"
loading="lazy"
alt="image-20230127001853263"
>&lt;/p>
&lt;p>這個紅色框框的地方就是讓我們打SQL語法的部分，我們先來創一些資料吧！秉持著能交給別人做的事情絕對不自己來的原則，這部分我們請ChatGPT來幫我們就好：）&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/tJsfb2U.png"
loading="lazy"
alt="image-20230127002300239"
>&lt;/p>
&lt;p>ChatGPT產生的語法如上，這邊先講解一下會出現的名詞代表的意思，首先&lt;/p>
&lt;ul>
&lt;li>Table：近似於Excel裡面的活頁表，每個活頁表都拿來描述不同的東西，比如說學生這張Table就是拿來存放跟學生有關的資料，比如說姓名、學號之類的東西。&lt;/li>
&lt;li>DROP：近似於刪除&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">CREATE&lt;/span> &lt;span class="k">TABLE&lt;/span> &lt;span class="n">Student&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="n">Name&lt;/span> &lt;span class="nb">TEXT&lt;/span>&lt;span class="p">,&lt;/span>　
&lt;span class="n">ClassTeacherName&lt;/span> &lt;span class="nb">TEXT&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">StudentID&lt;/span> &lt;span class="nb">INTEGER&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">ClassroomID&lt;/span> &lt;span class="nb">INTEGER&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">Birthdate&lt;/span> &lt;span class="nb">DATE&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">Subjects&lt;/span> &lt;span class="nb">TEXT&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>這樣的語法代表創建一張名為Student的表格，裡面要有&lt;/p>
&lt;ul>
&lt;li>名為Name的欄位，資料型別是文字&lt;/li>
&lt;li>名為ClassTeacherName的欄位，資料型別是文字&lt;/li>
&lt;li>名為StudentID的欄位，資料型別是數字&lt;/li>
&lt;li>名為ClassroomID的欄位，資料型別是數字&lt;/li>
&lt;li>名為Birthdate的欄位，資料型別是DATE(日期，亦即只能存放日期格式的東西)&lt;/li>
&lt;li>名為Subjects的欄位，資料型別是文字&lt;/li>
&lt;/ul>
&lt;p>&lt;code>資料型別代表這個欄位只能存什麼東西，如果資料型別是數字，就代表只能存在羅馬數字，如果輸入 天氣 就會出錯&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="c1">-- 如果已經存在這些表就刪除，確保每次都是產生全新的Table
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">DROP&lt;/span> &lt;span class="k">TABLE&lt;/span> &lt;span class="k">IF&lt;/span> &lt;span class="k">EXISTS&lt;/span> &lt;span class="n">demo&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">DROP&lt;/span> &lt;span class="k">TABLE&lt;/span> &lt;span class="k">IF&lt;/span> &lt;span class="k">EXISTS&lt;/span> &lt;span class="n">Student&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">DROP&lt;/span> &lt;span class="k">TABLE&lt;/span> &lt;span class="k">IF&lt;/span> &lt;span class="k">EXISTS&lt;/span> &lt;span class="n">Teacher&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">DROP&lt;/span> &lt;span class="k">TABLE&lt;/span> &lt;span class="k">IF&lt;/span> &lt;span class="k">EXISTS&lt;/span> &lt;span class="n">Classroom&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">DROP&lt;/span> &lt;span class="k">TABLE&lt;/span> &lt;span class="k">IF&lt;/span> &lt;span class="k">EXISTS&lt;/span> &lt;span class="n">SubjectTeacher&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">-- Create Student table
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">CREATE&lt;/span> &lt;span class="k">TABLE&lt;/span> &lt;span class="n">Student&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="n">Name&lt;/span> &lt;span class="nb">TEXT&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">ClassTeacherName&lt;/span> &lt;span class="nb">TEXT&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">StudentID&lt;/span> &lt;span class="nb">INTEGER&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">ClassroomID&lt;/span> &lt;span class="nb">INTEGER&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">Birthdate&lt;/span> &lt;span class="nb">DATE&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">Subjects&lt;/span> &lt;span class="nb">TEXT&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;span class="c1">-- Create Teacher table
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">CREATE&lt;/span> &lt;span class="k">TABLE&lt;/span> &lt;span class="n">Teacher&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="n">Name&lt;/span> &lt;span class="nb">TEXT&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">TeacherID&lt;/span> &lt;span class="nb">INTEGER&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">ClassroomID&lt;/span> &lt;span class="nb">INTEGER&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;span class="c1">-- Create Classroom table
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">CREATE&lt;/span> &lt;span class="k">TABLE&lt;/span> &lt;span class="n">Classroom&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="n">ClassroomID&lt;/span> &lt;span class="nb">INTEGER&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">ClassID&lt;/span> &lt;span class="nb">INTEGER&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;span class="c1">-- Create SubjectTeacher table
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">CREATE&lt;/span> &lt;span class="k">TABLE&lt;/span> &lt;span class="n">SubjectTeacher&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="n">Name&lt;/span> &lt;span class="nb">TEXT&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">TeacherID&lt;/span> &lt;span class="nb">INTEGER&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">Subject&lt;/span> &lt;span class="nb">TEXT&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/IFDjvKq.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;p>完成後我們可以看到我們的左邊就出現很多的東西，就代表我們成功創建了Table喔！&lt;/p>
&lt;p>但此時Table裡面的東西都是空的，我們試著塞一些資料進去Table裡面吧，這邊再次邀請我們的勞模ChatGPT&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/qa8OxpY.png"
loading="lazy"
alt="image-20230127003349573"
>&lt;/p>
&lt;p>這邊的INSERT其實就是新增資料進去的意思。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="c1">-- Insert data into the Teacher table
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">INSERT&lt;/span> &lt;span class="k">INTO&lt;/span> &lt;span class="n">Teacher&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TeacherID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassroomID&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">VALUES&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;John Smith&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">101&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">INSERT&lt;/span> &lt;span class="k">INTO&lt;/span> &lt;span class="n">Teacher&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TeacherID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassroomID&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">VALUES&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Jane Doe&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">102&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">INSERT&lt;/span> &lt;span class="k">INTO&lt;/span> &lt;span class="n">Teacher&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TeacherID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassroomID&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">VALUES&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Bob Johnson&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">103&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">-- Insert data into the Classroom table
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">INSERT&lt;/span> &lt;span class="k">INTO&lt;/span> &lt;span class="n">Classroom&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ClassroomID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassID&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">VALUES&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">101&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">INSERT&lt;/span> &lt;span class="k">INTO&lt;/span> &lt;span class="n">Classroom&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ClassroomID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassID&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">VALUES&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">102&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">INSERT&lt;/span> &lt;span class="k">INTO&lt;/span> &lt;span class="n">Classroom&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ClassroomID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassID&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">VALUES&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">103&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">-- Insert data into the SubjectTeacher table
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">INSERT&lt;/span> &lt;span class="k">INTO&lt;/span> &lt;span class="n">SubjectTeacher&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TeacherID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Subject&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">VALUES&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;John Smith&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Math&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">INSERT&lt;/span> &lt;span class="k">INTO&lt;/span> &lt;span class="n">SubjectTeacher&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TeacherID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Subject&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">VALUES&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Jane Doe&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Science&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">INSERT&lt;/span> &lt;span class="k">INTO&lt;/span> &lt;span class="n">SubjectTeacher&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TeacherID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Subject&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">VALUES&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Bob Johnson&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;English&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">INSERT&lt;/span> &lt;span class="k">INTO&lt;/span> &lt;span class="n">SubjectTeacher&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TeacherID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Subject&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">VALUES&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Bob Johnson&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;History&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">-- Insert data into the Student table
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">INSERT&lt;/span> &lt;span class="k">INTO&lt;/span> &lt;span class="n">Student&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassTeacherName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">StudentID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassroomID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Birthdate&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Subjects&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">VALUES&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Alice Smith&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;John Smith&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">101&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;2000-01-01&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Math, Science&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">INSERT&lt;/span> &lt;span class="k">INTO&lt;/span> &lt;span class="n">Student&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassTeacherName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">StudentID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassroomID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Birthdate&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Subjects&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">VALUES&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Bob Brown&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;John Smith&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">101&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;2001-01-01&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Math, English&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">INSERT&lt;/span> &lt;span class="k">INTO&lt;/span> &lt;span class="n">Student&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassTeacherName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">StudentID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassroomID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Birthdate&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Subjects&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">VALUES&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Charlie Johnson&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Jane Doe&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">102&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;2002-01-01&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Science, History&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">INSERT&lt;/span> &lt;span class="k">INTO&lt;/span> &lt;span class="n">Student&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassTeacherName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">StudentID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassroomID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Birthdate&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Subjects&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">VALUES&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;David Wilson&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Jane Doe&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">102&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;2003-01-01&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Science, English&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">INSERT&lt;/span> &lt;span class="k">INTO&lt;/span> &lt;span class="n">Student&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassTeacherName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">StudentID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassroomID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Birthdate&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Subjects&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">VALUES&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Eve Davis&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Bob Johnson&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">103&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;2004-01-01&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;English, History&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">INSERT&lt;/span> &lt;span class="k">INTO&lt;/span> &lt;span class="n">Student&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassTeacherName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">StudentID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassroomID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Birthdate&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Subjects&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">VALUES&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Frank Miller&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;John Smith&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">101&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;2005-01-01&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Math&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">INSERT&lt;/span> &lt;span class="k">INTO&lt;/span> &lt;span class="n">Student&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassTeacherName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">StudentID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassroomID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Birthdate&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Subjects&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">VALUES&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Gary Moore&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Jane Doe&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">102&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;2006-01-01&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Science&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">INSERT&lt;/span> &lt;span class="k">INTO&lt;/span> &lt;span class="n">Student&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassTeacherName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">StudentID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassroomID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Birthdate&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Subjects&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">VALUES&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Helen Anderson&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Bob Johnson&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">103&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;2007-01-01&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;English, History&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">INSERT&lt;/span> &lt;span class="k">INTO&lt;/span> &lt;span class="n">Student&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassTeacherName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">StudentID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassroomID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Birthdate&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Subjects&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">VALUES&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Irene Thomas&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;John Smith&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">101&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;2008-01-01&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Math, Science&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">INSERT&lt;/span> &lt;span class="k">INTO&lt;/span> &lt;span class="n">Student&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassTeacherName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">StudentID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassroomID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Birthdate&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Subjects&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">VALUES&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;James Hernandez&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Jane Doe&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">102&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;2009-01-01&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Science, English&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/MQUkQKO.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;p>完成後，在Table上面點選右鍵，選擇SELECT即可這張表的所有屬性喔 ！&lt;/p>
&lt;ul>
&lt;li>教室Table&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/GcMuljK.png"
loading="lazy"
alt="image-20230127004124644"
>&lt;/p>
&lt;ul>
&lt;li>學生Table &lt;code>這邊也違反資料庫正規化，一個應該只塞一筆資料的原則，我的subject塞了複數筆資料，但單純Demo而已，有點懶得改了&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/VcUjfIc.png"
loading="lazy"
alt="image-20230127004142876"
>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>科任老師Table&lt;img src="https://i.imgur.com/c4JRzJa.png"
loading="lazy"
alt="image-20230127004158587"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>老師Table&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/K9jpTXv.png"
loading="lazy"
alt="image-20230127004517825"
>&lt;/p>
&lt;h1 id="sql語法的介紹">SQL語法的介紹&lt;/h1>
&lt;p>我們一樣在框框裡面操作&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">SELECT&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="k">FROM&lt;/span> &lt;span class="n">Teacher&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/vUOj64t.png"
loading="lazy"
alt="image-20230127004832304"
>&lt;/p>
&lt;p>這個語法的意思就是 SELECT&lt;code>選擇&lt;/code> *&lt;code>全部欄位&lt;/code> FROM&lt;code>來自&lt;/code> Teacher&lt;code>這張表&lt;/code>，翻成白話文的意思就是，幫我選出Teacher這張表的全部內容，當然我們也可以再複雜一點，比如說&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">SELECT&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="k">FROM&lt;/span> &lt;span class="n">Teacher&lt;/span> &lt;span class="k">WHERE&lt;/span> &lt;span class="n">teacherid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/z9vNNK2.png"
loading="lazy"
alt="image-20230127005357191"
>&lt;/p>
&lt;p>也就是從Teacher這張表裡面選出TeacherId為2的欄位&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">SELECT&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="k">FROM&lt;/span> &lt;span class="n">Student&lt;/span> &lt;span class="k">WHERE&lt;/span> &lt;span class="n">subjects&lt;/span> &lt;span class="k">LIKE&lt;/span> &lt;span class="s1">&amp;#39;%Math%&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/Ea8nwnc.png"
loading="lazy"
alt="image-20230127011847946"
>&lt;/p>
&lt;p>當然我們再複雜一點點，這個語法會找出所有在Student這張Table裡面subjects欄位裡有Math的學生，聽起來有點繞口對吧XD，接著我們就把這些語法組合起來，試著找看看&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">SELECT&lt;/span> &lt;span class="n">Student&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="o">*&lt;/span>
&lt;span class="k">FROM&lt;/span> &lt;span class="n">Student&lt;/span>
&lt;span class="k">JOIN&lt;/span> &lt;span class="n">SubjectTeacher&lt;/span> &lt;span class="k">ON&lt;/span> &lt;span class="n">Student&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ClassTeacherName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SubjectTeacher&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Name&lt;/span>
&lt;span class="k">WHERE&lt;/span> &lt;span class="n">Birthdate&lt;/span> &lt;span class="k">BETWEEN&lt;/span> &lt;span class="s1">&amp;#39;2001-01-01&amp;#39;&lt;/span> &lt;span class="k">AND&lt;/span> &lt;span class="s1">&amp;#39;2005-12-31&amp;#39;&lt;/span> &lt;span class="k">AND&lt;/span> &lt;span class="n">SubjectTeacher&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Subject&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;Math&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/P1RI9MH.png"
loading="lazy"
alt="image-20230127011903188"
>&lt;/p>
&lt;p>我們再複雜一點點點點，我們想找出所有在2001年至2005年出生，並且有修Math的學生，看到這邊這個語法大家是不是有點感覺了，是不是很像我們去撈資料常常用到的，要撈發生在本年度的100018應付帳款全部資料XD。其實背後的SQL語法就像這樣子。&lt;/p>
&lt;p>當然實際上的情況SQL語法還會更複雜一點，因為這些這是關聯式資料庫，彼此間可能可以關聯到很遠很遠的Table，只是為了做科普而已就不弄得那麼複雜了。另外SQL Syntax(語法)也不只SELECT，常見的還有UPDATA, DELETE, CREATE等等，只是這些審計人員一般不會碰到。&lt;/p>
&lt;h1 id="結語">結語&lt;/h1>
&lt;p>其實沒啥想講的，只是覺得很閒而已，想說趁年假時後把想寫的東西寫一寫，順便也當科普一樣，感覺會計這個圈子好像很少人在寫科普或是知識介紹的東西，就花個一兩個小時的時間寫一下，如果對SQL有興趣的話，可以去載來玩看看&lt;/p>
&lt;ul>
&lt;li>MySQL：全英介面，一開始可能不太友好，但網路上資源最多&lt;/li>
&lt;li>MSSQL：微軟的SQL，有中文介面，但網路上資源相對較少，其實SQL的語法都大同小異，但其實還是有一些不同處&lt;/li>
&lt;li>PostgreSQL：通常不會用這個入門，我個人覺得它GUI的介面很爛，我用這個的話通常都是用Terminal&lt;/li>
&lt;li>SQLite：不太推薦，因為這算是輕量化版的，有很多資料型別是特規的。&lt;/li>
&lt;/ul>
&lt;p>我文章常提到的資料庫正規化介紹如下&lt;/p>
&lt;p>&lt;a href="https://ithelp.ithome.com.tw/articles/10229472">https://ithelp.ithome.com.tw/articles/10229472&lt;/a>&lt;/p>
&lt;p>忙季加油！債見&lt;/p></description></item><item><title>淺談一些實用的快捷鍵</title><link>https://hoxtonhsu.com/p/%E6%B7%BA%E8%AB%87%E4%B8%80%E4%BA%9B%E5%AF%A6%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%8D%B5/</link><pubDate>Thu, 26 Jan 2023 00:31:43 +0800</pubDate><guid>https://hoxtonhsu.com/p/%E6%B7%BA%E8%AB%87%E4%B8%80%E4%BA%9B%E5%AF%A6%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%8D%B5/</guid><description>&lt;img src="https://i.imgur.com/Ln2xqzT.png" alt="Featured image of post 淺談一些實用的快捷鍵" />&lt;p>想講一些實用的，但卻很少人知道的一些電腦使用的功能，知道這些對做底稿、翻憑證不會有太大的幫助，但會用的話我個人覺得可以節省很多時間，供大家參考。&lt;/p>
&lt;h1 id="快速關機">快速關機&lt;/h1>
&lt;p>window+D：回到桌面&lt;/p>
&lt;p>在桌面Alt+F4即可跳出關機選項&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/A0TkM9G.png"
loading="lazy"
alt="image-20230126004515683"
>&lt;/p>
&lt;p>記得當初在外勤的時候，只要組長說撤的時候我就會用最快的速度關機XD，那時候同事都問我怎麼用的，這就是訣竅，當然也可以選擇重新啟動或休眠，看自己喜好決定。&lt;/p>
&lt;h1 id="截圖">截圖&lt;/h1>
&lt;p>window+shift+s&lt;/p>
&lt;p>這個應該最基本，在Window10以上的系統可以透過這個shortcut來打開截圖視窗，就拿來貼圖片給組長，跟組長說我哪邊不會QQ&lt;/p>
&lt;h1 id="快速打開excel-word-記事本-小畫家計算機">快速打開Excel, Word, 記事本, 小畫家,計算機&amp;hellip;&lt;/h1>
&lt;p>Window+R：跳出執行選項&lt;/p>
&lt;p>在裡面輸入以下的內容已打開不同的Application&lt;/p>
&lt;p>mspaint：打開小畫家&lt;/p>
&lt;p>notepad：記事本&lt;/p>
&lt;p>winword：word&lt;/p>
&lt;p>excel：excel&lt;/p>
&lt;p>計算機：calc&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/BQZCVyH.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;h1 id="快速打開工作列的應用程式">快速打開工作列的應用程式&lt;/h1>
&lt;p>window+1&lt;/p>
&lt;p>可以打開工作列的第一個應用&lt;/p>
&lt;p>window+2&lt;/p>
&lt;p>可以打開工作列的第二個應用，以此類推&amp;hellip;&lt;/p>
&lt;p>這個指令我大部分都是用來開Chrome，或是Excel之類的東西&lt;/p>
&lt;h1 id="瀏覽器快速選擇搜尋列">瀏覽器快速選擇搜尋列&lt;/h1>
&lt;p>打開Chrorm後，打alt+D就可以定位到搜尋列，並且在這邊按Ctrl+1,2,3&amp;hellip;即可切換至不同的頁面，通常是我拿來打混摸魚的時候用的，Ctrl+T則可以打開新的分頁，所以兩個和再一起就是，開啟一個新分頁並搜尋，如果旁邊有人過來就立刻Ctrl+w關閉當前頁面，避免摸魚被抓包。&lt;/p></description></item><item><title>如何製作會計的電子筆記？Markdown的介紹</title><link>https://hoxtonhsu.com/p/%E5%A6%82%E4%BD%95%E8%A3%BD%E4%BD%9C%E6%9C%83%E8%A8%88%E7%9A%84%E9%9B%BB%E5%AD%90%E7%AD%86%E8%A8%98markdown%E7%9A%84%E4%BB%8B%E7%B4%B9/</link><pubDate>Sun, 22 Jan 2023 23:15:25 +0800</pubDate><guid>https://hoxtonhsu.com/p/%E5%A6%82%E4%BD%95%E8%A3%BD%E4%BD%9C%E6%9C%83%E8%A8%88%E7%9A%84%E9%9B%BB%E5%AD%90%E7%AD%86%E8%A8%98markdown%E7%9A%84%E4%BB%8B%E7%B4%B9/</guid><description>&lt;img src="https://i.imgur.com/c968Ywa.png" alt="Featured image of post 如何製作會計的電子筆記？Markdown的介紹" />&lt;h1 id="前言">前言&lt;/h1>
&lt;p>年假回老家實在是太無聊了，想把這幾年學到的東西分享一下，希望可以幫助一些莘莘學子，能用更有效率的方式來整理筆記。&lt;/p>
&lt;p>記得大二或是大三的時候很沉迷於作筆記這件事情，最喜歡做的事情，就是用一兩個下午把那個禮拜所上的成會或是中會整理成筆記，以利後面的複習。不得不說當時這樣做的回饋還不錯，當時中會跟成會的成績都還算不錯。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/CFebBUe.png"
loading="lazy"
alt="image-20230122232625364"
>&lt;/p>
&lt;p>（當時很認真的筆記）&lt;/p>
&lt;h1 id="紙本筆記的缺點">紙本筆記的缺點&lt;/h1>
&lt;p>這樣的筆記在當時應付期中考期末考還行，因為這些筆記可能都是一兩個月寫的，都還算有印象，但是當我準備研究所的時候就發現幾個問題了，首先&lt;/p>
&lt;ol>
&lt;li>難以搜尋：面對海量的資料，我很難在第一時間找到我需要的資訊，比如說我想要找一個利息資本化的定義，以及它的細項，我除非前一陣子剛寫，或是我版面真的寫得很好，不然我不能第一時間的找到我想要的資訊。比如說稅法的部分就分成很多塊，比如說遺產稅贈與稅等等的，數量真的太多，且稅率也類似，常常找不到自己想要的地方。&lt;/li>
&lt;li>難以擴充：紙質的筆記一旦寫下去之後就難以修改，無法滿足我越來越多的知識積累，比如說大家都知道的金融資產那一個章節，可能光一個範例就可以寫個2,30個也不為過，每個範例可能都有一些細節要抄進筆記裡面，這樣日積月累下去，那一頁的筆記越記越多、越寫越亂不易閱讀。&lt;/li>
&lt;li>耗時：耗時是最大的問題，一頁的筆記我可能需要寫個半小時，雖然說寫的當下其實就記得很清楚了，但是卻非常的消耗時間，往往做完這些筆記我的假日就這樣沒了，實在是不太行，且手寫筆記非常吃手寫的品質，如果心一旦亂起來，亂寫一通，那這筆記基本上閱讀不能，只是寫給當時的自己看的，不利日後準備研究所或是會計師考試。&lt;/li>
&lt;/ol>
&lt;p>雖然1、2的問題都可以透過Ipad的手寫筆記來解決一些問題，但最大的問題就是第3點，當時有嘗試過很多方式，比如說用excel來記筆記(但儲存格不方便修改與擴充)，或是用word來寫，但word真的非常不適合拿來寫筆記，首先，work本身是不支援你打出類似分錄格式的東西的，就算可以，那個代價我記得也很大，其次，光是格式的部分可能就要設定個老半天，再加上在寫筆記的途中還需要移動滑鼠去調整現在想要的是&lt;/p>
&lt;ol>
&lt;li>&lt;/li>
&lt;/ol>
&lt;ol start="2">
&lt;li>&lt;/li>
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>或是&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;p>這樣的格式真的有點打斷思緒。&lt;/p>
&lt;p>因此我的需求是這樣&lt;/p>
&lt;ol>
&lt;li>方便撰寫，希望不需要去切什麼格式&lt;/li>
&lt;li>支援圖片上傳，可以讓我傳圖片上去，可能有些範例或是老師在黑板上畫的東西，需要做成筆記來看&lt;/li>
&lt;li>要可以讓我打類似分錄的東西&lt;/li>
&lt;/ol>
&lt;p>後來出社會工作後，接觸到Markdown這個東西真的驚為天人，並且是有一點相見恨晚，如果在學期間知道這個東西的話做筆記應該會更高效快速一點。首先先來介紹一下Markdown是什麼吧&lt;/p>
&lt;h1 id="markdown介紹">Markdown介紹&lt;/h1>
&lt;p>Markdown 是目前非常普遍用來撰寫文檔的語言，一開始的目標就是使用「易讀易寫的純文字格式編寫文件」，此初衷讓使用者可以專注在文字的本身，而不需要透過其它工具來切換格式。以 Word 撰寫文檔來說，就必須透過上方的工具列來切換&lt;strong>標題、列表、粗體、斜體&lt;/strong>等等；而 Markdown 並沒有這樣的工具列，完全都是&lt;strong>使用標示符號來完成這些需求&lt;/strong>。&lt;/p>
&lt;p>Markdown是一種輕量級標記式語言，創始人為約翰·格魯伯。它允許人們使用易讀易寫的純文字格式編寫文件&lt;/p>
&lt;p>由於Markdown的輕量化、易讀易寫特性，並且對於圖片，圖表、數學式都有支援，目前許多網站都廣泛使用Markdown來撰寫說明文件或是用於論壇上發表訊息。如GitHub、Reddit、Discord、Diaspora、Stack Exchange、OpenStreetMap 、SourceForge、簡書等，甚至還能被用來撰寫電子書。&lt;/p>
&lt;p>參考自維基百科以及https://www.casper.tw/development/2019/11/23/ten-mins-learn-markdown/&lt;/p>
&lt;p>先來看看如果我把會計的筆記轉成Markdown的話看起來會是怎麼樣吧，因為Dcard不支援markdown，可以點這邊預覽看看&lt;/p>
&lt;p>&lt;a href="https://hackmd.io/@Celeast/ryyXXyosi">https://hackmd.io/@Celeast/ryyXXyosi&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/NFRD8Ko.png"
loading="lazy"
alt="image-20230123005704082"
>&lt;/p>
&lt;h1 id="第七章-彈性預算直接成本與管理會計">第七章 彈性預算、直接成本與管理會計&lt;/h1>
&lt;p>本章學習重點&lt;/p>
&lt;ol>
&lt;li>了解各差異的差異&lt;/li>
&lt;li>基於差異分析所做的決策判斷&lt;/li>
&lt;/ol>
&lt;p>名詞定義&lt;/p>
&lt;ul>
&lt;li>靜態預算(Static Budget)：在預算期間開始時，&lt;strong>基於預計產出水準所做的預算&lt;/strong>所做的預算&lt;/li>
&lt;li>靜態預算差異：在靜態預算中，實際結果與預期數之間的差異&lt;/li>
&lt;li>彈性預算(Flexible Budget)：預算期間內按&lt;strong>實際產出&lt;/strong>水準計算出預算收入與預算成本之預算&lt;/li>
&lt;/ul>
&lt;p>．&lt;/p>
&lt;p>．&lt;/p>
&lt;p>．&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">flowchart LR
B[實際投入數量x實際價格] &amp;lt;--價格差異--&amp;gt; 實際投入數量x預算價格 &amp;lt;--效率差異--&amp;gt; C[實際產出下所允許之預算投入x預算價格]
B &amp;lt;--彈性預算差異--&amp;gt;C
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>變動&lt;/th>
&lt;th>歸納&lt;/th>
&lt;th>評論&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>固定制造成本可以做為存貨成本嗎?&lt;/td>
&lt;td>不可&lt;/td>
&lt;td>可以&lt;/td>
&lt;td>基本問題&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>有生產數量差異嗎?&lt;/td>
&lt;td>沒有&lt;/td>
&lt;td>有&lt;/td>
&lt;td>對基準產能水準的選擇，只在歸納成本法下影響營業利益的衡量&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>分錄&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>原料 10,000&lt;/p>
&lt;p>​ 應付帳款 10,000&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>在製品 30,000&lt;/p>
&lt;p>製造費用 1,000&lt;/p>
&lt;p>​ 原料 31,000&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>產成品 50,000&lt;/p>
&lt;p>​ 在製品 50,000&lt;/p>
&lt;/blockquote>
&lt;p>課堂範例：&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/bhWOaT5.png"
loading="lazy"
alt="image-20230123000736761"
>&lt;/p>
&lt;h1 id="ｍarkdown語法介紹">Ｍarkdown語法介紹&lt;/h1>
&lt;p>上面是我把我的會計筆記轉成Markdown格式，可以看到Markdown支援了幾點&lt;/p>
&lt;ol>
&lt;li>列表式的清單&lt;/li>
&lt;li>用來舉例的黑點&lt;/li>
&lt;li>重點的醒目提示&lt;/li>
&lt;li>分層式的標題，標出章節重點&lt;/li>
&lt;li>支援表格(注：markdown的表格語法非常反智，通常我都是用快捷鍵生成)&lt;/li>
&lt;li>支援流程圖的繪製&lt;/li>
&lt;li>支援數學式(這邊沒有示範到，不過Markdown是有支援高等數學的運算式的)&lt;/li>
&lt;li>支援圖片上傳，可以讓我把版書或是題目直接貼上去&lt;/li>
&lt;/ol>
&lt;p>接下來帶大家認識一下Markdown的一些語法&lt;/p>
&lt;p>首先是標題的語法，輸入#再加上一個空格會產生標題，就像現在這樣&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/xzUg32o.png"
loading="lazy"
alt="image-20230123001409936"
>&lt;/p>
&lt;p>在文字前加上1. 2. 3. 則會變成列表&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/xbpaCZs.png"
loading="lazy"
alt="image-20230123001454121"
>&lt;/p>
&lt;p>文字之間加上**則可重點醒目&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/vceq8VB.png"
loading="lazy"
alt="image-20230123001905373"
>&lt;/p>
&lt;p>在文字前加上+則會變成黑點&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/RrdcAai.png"
loading="lazy"
alt="image-20230123001516022"
>&lt;/p>
&lt;p>在文字前加上&amp;gt;則可做為補充說明，我就是用這個語法來寫分錄的&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/xaq48Ty.png"
loading="lazy"
alt="image-20230123001618553"
>&lt;/p>
&lt;p>顯示圖片的語法則是這樣&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/Yg0rfCW.png"
loading="lazy"
alt="image-20230123001709056"
>&lt;/p>
&lt;p>裡面的內容填上自己的圖片連結就可以了，如何把圖片上傳上去我後面會說。&lt;/p>
&lt;p>Markdown的語法還有很多很多，不只有我上面提到的這些，有興趣的同學可以參考這邊&lt;/p>
&lt;p>&lt;a href="https://www.casper.tw/development/2019/11/23/ten-mins-learn-markdown/">https://www.casper.tw/development/2019/11/23/ten-mins-learn-markdown/&lt;/a>&lt;/p>
&lt;h1 id="我該怎麼寫markdown呢">我該怎麼寫Markdown呢？&lt;/h1>
&lt;p>markdown是工程師蠻常會接觸到一個標籤式語言，如果你開心的話用記事本也是可以寫Markdown的喔，但是效果會不太好閱讀而已，目前markdown我自己認為比較常見的有幾種&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Vscode&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/zCtwWvH.png"
loading="lazy"
alt="image-20230123002813123"
>&lt;/p>
&lt;p>這是我最初拿來寫markdown的工具，但它本身不是專門拿來寫markdown的，不支援一些熱鍵以及圖片上傳，後面就被我拋棄了&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/To64OPG.png"
loading="lazy"
alt="image-20230123003226114"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>HackMd&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/XQD4g2U.png"
loading="lazy"
alt="image-20230123010834897"
>&lt;/p>
&lt;p>HackMd是一個網頁版的markdown編輯器，簡單來講就是你寫上去後，東西就是直接存在雲端，且圖片複製貼上就會自動幫你上傳到網路上了，非常的便捷以及快速，好像是台灣人開發的，最重要的是它免費，也是最常見的方式。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/yPY9NIk.png"
loading="lazy"
alt="image-20230123003322000"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Typora&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/AJVAHof.png"
loading="lazy"
alt="image-20230123003346195"
>&lt;/p>
&lt;p>這是我目前主力所使用的Markdown編輯器，跟HackMd最大的不同就是它是一個所見及所得的編輯器，上述兩款其實都是把畫面分成兩邊，左邊是Markdown語法，右邊則是渲染後的結果，而typora則是在你輸入完後直接幫你渲染好，也就是&lt;strong>所寫及所見&lt;/strong>，是它最大的特色。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/04NdYQW.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;p>但相比之下它就有幾個缺點&lt;/p>
&lt;ol>
&lt;li>要錢，最直觀的問題就是它是一個付費的程式，屬於買斷制一次500，支援三台設備同時使用&lt;/li>
&lt;li>本身不支援圖片上傳，想要用它來做圖片上傳需要懂一些控制台指令以及Json格式的&lt;/li>
&lt;li>本身的檔案都在local端，需要自己手動丟上雲端(我個人是丟到github上面，然後用bat檔自動上傳)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>還可以提供一點，我會把一些真的沒辦法用文字或是Markdown語法表示的東西寫在平板的GoodNote上面，在把連結分享出來，然後截圖下來貼上去，看起來就像這樣&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/SdiDiSv.png"
loading="lazy"
alt="image-20230123004611873"
>&lt;/p>
&lt;h1 id="結語">結語&lt;/h1>
&lt;p>當然還有不只這些，我沒記錯的話Notion本身也有支援(但我不熟)以及obsidian也是一個寫Markdown的工具，我之所以會選Typora只是因為我喜歡有更大的空間，不喜歡畫面被分成左右兩邊而已。&lt;/p>
&lt;p>作筆記的方法有很多，不做的、用紙寫的、用平板寫的，都可以，沒有誰優誰劣，Markdown也有它的限制在，比如說它就&lt;strong>不能寫資產負債表、也不能寫T字帳&lt;/strong>，沒有一個方法是最佳解的，只要找到自己喜歡的方式都可以，這篇文章只是拋磚引玉，希望提供自己的一些想法供大家參考，也歡迎各位一起討論，祝大家新年快樂，忙季加油！&lt;/p></description></item><item><title>Docker_Desktop_Starting問題解決</title><link>https://hoxtonhsu.com/p/docker_desktop_starting%E5%95%8F%E9%A1%8C%E8%A7%A3%E6%B1%BA/</link><pubDate>Sat, 21 Jan 2023 00:52:36 +0800</pubDate><guid>https://hoxtonhsu.com/p/docker_desktop_starting%E5%95%8F%E9%A1%8C%E8%A7%A3%E6%B1%BA/</guid><description>&lt;img src="https://i.imgur.com/xgUpP8O.png)" alt="Featured image of post Docker_Desktop_Starting問題解決" />&lt;p>最近在新電腦上安裝了Docker結果發現一直卡在這個畫面&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/cw9mdiw.png"
loading="lazy"
alt="image-20230121005427135"
>&lt;/p>
&lt;p>後來研究了一下發現應該是wsl沒有裝好的原因，後來安裝好之後，在把Window Update要我Update的東西全部更新一次，就可以執行成功了，推測應該是window版本沒更新，導致不支援wsl的關係。&lt;/p></description></item><item><title>Docker學習筆記</title><link>https://hoxtonhsu.com/p/docker%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/</link><pubDate>Wed, 18 Jan 2023 21:47:50 +0800</pubDate><guid>https://hoxtonhsu.com/p/docker%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/</guid><description>&lt;img src="https://i.imgur.com/JdDwgHn.png " alt="Featured image of post Docker學習筆記" />&lt;h1 id="名詞解釋">名詞解釋&lt;/h1>
&lt;h2 id="container">Container&lt;/h2>
&lt;p>Docker Container 是一種軟體容器，它可以在其中運行應用程式和其他服務。它使用操作系統級別的虛擬化，可以在單一的物理主機上運行多個容器，並且每個容器都有自己的運行環境和資源。&lt;/p>
&lt;p>Docker Container 是一種軟體容器，它可以在其中運行應用程式和其他服務。容器具有輕量級、可移植性和隔離性等特點。容器是通過在操作系統內核中運行的容器引擎來實現的。&lt;/p>
&lt;p>Docker容器主要是使用了Linux 的 Namespaces 和 Control groups（cgroups） 技術來實現隔離，這兩種技術可以將一個實體主機上的資源限制給每個容器，而容器內部則是共用一個kernel，因此容器比虛擬機器輕量且速度較快。&lt;/p>
&lt;p>Docker容器是基於鏡像(Image)來建立與運行的，一個鏡像可以是一個基礎鏡像或是由其他鏡像所建立而來。當執行docker run 指令時，會從鏡像建立一個容器，並在容器內執行指定的應用程式或服務。&lt;/p>
&lt;p>不僅如此，Docker容器還支援網路、儲存卷的映射，使得容器可以與外部通訊，也可以存取本地端的資料。&lt;/p>
&lt;p>透過Docker容器,我們可以將應用程式、服務和其所需的環境打包在一起，並且可以在不同的環境中運行，提高了應用程式的可移植性和彈性。&lt;/p>
&lt;h2 id="image">Image&lt;/h2>
&lt;p>Docker Image 是 Docker 容器的基礎，它是一個只讀的模板，包含了容器運行所需的所有檔案、設定和程式。當執行 &lt;code>docker run&lt;/code> 指令時，Docker 會從 Image 建立一個新的容器並在其中執行指定的應用程式或服務。&lt;/p>
&lt;p>Docker Image 可以通過構建或下載的方式創建，構建的方式可以使用 Dockerfile 來描述如何構建一個 Image。而下載的方式則可以從 Docker Hub 或其他的 registry 下載。&lt;/p>
&lt;h2 id="volume">Volume&lt;/h2>
&lt;p>Docker Volume 是 Docker 的一種功能，用於管理容器中的數據。容器本身是輕量級的，數據是不能永久存在的，而 Volume 則是可以永久存在的。&lt;/p>
&lt;p>Docker Volume 可以被掛載到容器上，並且可以在容器內部存儲數據。當容器停止運行或者被刪除時，Volume 中的數據仍然可以保留下來。這樣就可以在重啟容器或建立新容器時，繼續使用之前存儲的數據。&lt;/p>
&lt;p>並且Volume裡面的資料是可以和Host分享的，兩邊的資料呈現鏡像的雙向對應，在Host新增的東西會在Container出現，Container新增的資料也會在Host裡面出現&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/pw664cD.png"
loading="lazy"
alt="image-20230121163302976"
>&lt;/p>
&lt;h1 id="常用指令">常用指令&lt;/h1>
&lt;h2 id="搜尋image">搜尋Image&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker search postgres
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/D4Bl6SJ.png"
loading="lazy"
alt="image-20230124042123305"
>&lt;/p>
&lt;h2 id="查看目前的image">查看目前的image&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker image ls
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>或是&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker images
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="執行docker-image">執行docker image&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker run &lt;span class="o">[&lt;/span>imageName&lt;span class="o">][&lt;/span>:tag&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/s140pSv.png"
loading="lazy"
alt="image-20230121123518172"
>&lt;/p>
&lt;p>後面的:latest是版本號，可加可不加，沒加的話預設就是latest&lt;/p>
&lt;h2 id="刪除images">刪除images&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker rmi &lt;span class="o">[&lt;/span>imageId&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="在detached-mode下執行">在Detached mode下執行&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker run -d nginx
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>所謂的Detached mode亦即&lt;strong>啟動後會不會占用你的terminal&lt;/strong>，可以看一下下面的git，可以比較兩者間的差異&lt;/p>
&lt;ul>
&lt;li>沒有-d&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/ehYrPax.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;ul>
&lt;li>有-d&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/kRVrhXQ.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;h2 id="打包成docker-image">打包成docker image&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker build -t drink-more-water:latest .
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>-t 是 tag的縮寫，hello-docker是這個tag的名稱，.代表dockerfile在當前的目錄下，如果Dockerfile不在當前目錄，則這邊要改變。latest則是版本號，可加可不加，不加的話預設是latest&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/c5XdkHr.png"
loading="lazy"
alt="image-20230118215347469"
>&lt;/p>
&lt;h2 id="查看目前運行的container">查看目前運行的Container&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker ps
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>ps是process status的意思&lt;/code>&lt;/p>
&lt;p>或是&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker container ls
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>​ &lt;img src="https://i.imgur.com/WCJdgXl.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;h2 id="查看目前運作中running的container">查看目前運作中(running)的Container&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker ps
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/C1jS3jN.png"
loading="lazy"
alt="image-20230118222647084"
>&lt;/p>
&lt;p>或是&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker ps -a
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>查看底下全部的Container不論啟動與否&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/sIt29w1.png"
loading="lazy"
alt="image-20230118222751647"
>&lt;/p>
&lt;h2 id="進入container與之互動">進入Container與之互動&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sh" data-lang="sh">docker &lt;span class="nb">exec&lt;/span> -it &lt;span class="o">[&lt;/span>ConatinerId&lt;span class="o">]]&lt;/span> bash
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>bash有可能沒有，有可能是sh，要自己到/bin裡面看&lt;/p>
&lt;h2 id="停止container">停止Container&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker stop &lt;span class="o">[&lt;/span>ContainerId&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/dziz1MR.png"
loading="lazy"
alt="image-20230121125714796"
>&lt;/p>
&lt;p>​&lt;/p>
&lt;p>啟動停止的Container&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker start &lt;span class="o">[&lt;/span>ContainerId&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="刪除container">刪除Container&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker rm &lt;span class="o">[&lt;/span>ContainerId&lt;span class="o">]&lt;/span>or&lt;span class="o">[&lt;/span>NAMEs&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/RrMc8BN.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;p>也可以輸入很多個Id，一次刪個爽&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/rL9pJaN.png"
loading="lazy"
alt="image-20230121155539947"
>&lt;/p>
&lt;p>還有更猛的&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docekr rm -f &lt;span class="k">$(&lt;/span>docker ps -aq&lt;span class="k">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>直接用參數的方式全刪。&lt;/p>
&lt;h2 id="暴露port">暴露port&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker run -p 5432:5432 posgres
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>前面的5432是你自定義的localhost:5432，而後面的5432則是容器裡面的port號&lt;/p>
&lt;h2 id="暴露已經runningstopping-的container的port">暴露已經Running,Stopping 的Container的Port&lt;/h2>
&lt;p>沒有這個方法，只有&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker run postgres
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>的這個時候你才可以把port暴露出來&lt;/p>
&lt;h2 id="一次性查看container的log紀錄">一次性查看Container的Log紀錄&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker logs &lt;span class="o">[&lt;/span>ContainerId&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/ux9s2GH.png"
loading="lazy"
alt="image-20230124052203569"
>&lt;/p>
&lt;p>這條指令只會顯示過去的紀錄，後續的logs不會更新&lt;/p>
&lt;h2 id="持續查看container的log紀錄">持續查看Container的Log紀錄&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker logs -f &lt;span class="o">[&lt;/span>ContainerId&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>這條不只會顯示過去的，還會動態更新現在的log&lt;/p>
&lt;h2 id="執行docker-compose">執行Docker-compose&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker compose up -d
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>-d 代表是否背景執行，不佔用terminal&lt;/p>
&lt;h2 id="停止並刪除docker-compose的container">停止並刪除Docker-compose的Container&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker compose down
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="在docker啟動ubuntu">在Docker啟動Ubuntu&lt;/h1>
&lt;ol>
&lt;li>
&lt;p>下載 ubuntu 的image&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker pull ubuntu
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>或是可以&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker run ubuntu
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>就會自動從docker hub載下來了，但這樣只是把ubuntu的image拉到我們的docker裡面，它本身是沒有啟動的&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/MMDiSRt.png"
loading="lazy"
alt="image-20230118222929032"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在docker中運行ubuntu&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker run -it ubuntu
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/IMZCVGx.gif"
loading="lazy"
alt=" "
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用apt(advanced package tool)安裝nano(Linux text editor)&lt;/p>
&lt;p>用apt載任何東西前都建議先update&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">apt update
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">apt install nano
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;h1 id="exposing-port">Exposing Port&lt;/h1>
&lt;p>輸入&lt;code>docker ps&lt;/code>可以看到以下資訊&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/jkFwePC.png"
loading="lazy"
alt="image-20230121144512601"
>&lt;/p>
&lt;p>其中的PORTS 80/tcp的意思，容器對外公開的網路端口是 80/tcp，表示這個容器對外公開的網路端口是80，並且是基於TCP協議的。這意味著當外部網路瀏覽器連接到&lt;a class="link" href="http://xn--localhosthttp-cs9z//" target="_blank" rel="noopener"
>http://localhost或http://&lt;/a>&lt;IP address>時，將會連接到容器內部的 Nginx Web 伺服器。想要讓容器的端口對外開放，就需要exposing它，否則直接打localhost:80是沒有用的。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/ZD37kgp.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;p>我們可以使用以下的方式將8080 連接到80/TCP&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/6NmgZGj.png"
loading="lazy"
alt="image-20230121144820173"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker run -d -p 8080:80 nginx
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中的8080:80的意思是指將主機的 8080 端口映射到容器的 80 端口。也就是說，當外部網路瀏覽器連接到 &lt;a class="link" href="http://localhost:8080/" target="_blank" rel="noopener"
>http://localhost:8080&lt;/a> 時，將會連接到容器內部的 Nginx Web 伺服器。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/uv9msjJ.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/qRzMKUP.png"
loading="lazy"
alt="image-20230121152744371"
>&lt;/p>
&lt;p>你也可以不只Exposing一個Port，可以Exposing多個port給80&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/udQnP6Q.png"
loading="lazy"
alt="image-20230121153052811"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker run -d -p 8080:80 -p 3000:80 nginx
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/RAElKnV.png"
loading="lazy"
alt="image-20230121153324975"
>&lt;/p>
&lt;h1 id="container的管理">Container的管理&lt;/h1>
&lt;p>當我們啟動、並Stop一個Container，實際上如果依照我們剛剛的作法，我們是不斷的創造新的Container，輸入docker ps -a 即可看到目前存在的Container(不論running or Stopping)，或是在Desktop docker裡面也都可以看到&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/y6X5rl3.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/myW3tLy.png"
loading="lazy"
alt="image-20230121154505315"
>&lt;/p>
&lt;p>我們可以透過&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker rm &lt;span class="o">[&lt;/span>ContainerId&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>來真正意義上的移除Container，而不是停止它&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/RrMc8BN.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;p>&lt;code>可以使用docker ps -aq ，這個指令只會秀出ContainerId，可以刪更爽，直接複製貼上就好&lt;/code>&lt;/p>
&lt;p>還有更爽的方式，用$(docker ps -aq)的方式 傳遞參數&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/6awXQYd.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;h1 id="為container命名">為Container命名&lt;/h1>
&lt;p>建議命名一下，比較好找，只支援英文，不支援中文&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker run --name hoxtonPractice -d -p 8080:80 nginx
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/ibwUXZi.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/ivVF2QW.png"
loading="lazy"
alt="image-20230121161417305"
>&lt;/p>
&lt;h1 id="volume的使用">Volume的使用&lt;/h1>
&lt;p>讓資訊可以在host與Container共享的一個功能&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/gFztGx2.png"
loading="lazy"
alt="image-20230121171102777"
>&lt;/p>
&lt;p>範例：&lt;/p>
&lt;p>首先在桌面上創建一個名為website的資料夾，裡面有個index.html，內容如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>hello docker and volume&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/E9IOBy2.png"
loading="lazy"
alt="image-20230121172021418"
>&lt;/p>
&lt;p>接著將terminal切至/website底下，然後輸入&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker run --name website -v &lt;span class="si">${&lt;/span>&lt;span class="nv">PWD&lt;/span>&lt;span class="si">}&lt;/span>:/usr/share/nginx/html:ro -d -p 8080:80 nginx
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>-v是 Docker 中的 volume 指令，它用於將主機上的目錄或檔案掛載到容器中。配合後面的${PWD}:/usr/share/nginx/html，意思就是將當前目錄的內容掛載(Mount)到容器中的 /usr/share/nginx/html 目錄下。這樣設定後，當主機上的目錄內容變更時，容器中的 /usr/share/nginx/html 目錄內的內容也會隨之更新。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>:ro 是指將主機上的目錄或檔案掛載到容器中的目錄或檔案，並設定為只讀模式。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>​ 這意味著在容器中將無法寫入或修改掛載的目錄或檔案，只能讀取。這可以避免對主機上的檔案造成損壞或不 必要的變更。&lt;/p>
&lt;ul>
&lt;li>/usr/share/nginx/html 是 Nginx 預設的網站根目錄。&lt;/li>
&lt;/ul>
&lt;p>結果如下：&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/JWE1ngP.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;p>也因為Volume是鏡像對應，因此修改host的檔案，container的內容物也會同步更新&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/xr4Ps97.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;p>我們可以用以下的指令來訪問看看Nginx的檔案&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker &lt;span class="nb">exec&lt;/span> -it website bash
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>docker exec 是 Docker 的命令行工具，用於在運行中的容器內執行命令。&lt;/li>
&lt;li>-it 這兩個選項表示要互動式地執行命令，並且讓輸入和輸出保持連接。&lt;/li>
&lt;li>website 是容器的名稱或 ID。&lt;/li>
&lt;li>bash 是要在容器內執行的命令，這裡是啟動 Bash shell。也可以改成ls，就變成ls了，玩法很多，自行摸索&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/vfD46ft.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;p>在Nginx裡面新增檔案，移除檔案，會發現host的資料夾檔案也同步更新&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/CxISdYl.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;h2 id="不同的container使用相同的volume">不同的Container使用相同的Volume&lt;/h2>
&lt;p>&lt;img src="https://i.imgur.com/sF6Jpws.png"
loading="lazy"
alt="image-20230122000944184"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/M0VVEdM.png"
loading="lazy"
alt="image-20230122000515311"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker run --name website-copy --volumes-from website -d -p 8081:80 nginx
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&amp;ndash;volumes-from [ContainerName]：將這次要啟動的Container使用和website一樣的Volume&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/138uiD1.png"
loading="lazy"
alt="image-20230122000709771"
>&lt;/p>
&lt;h1 id="dockerfile">Dockerfile&lt;/h1>
&lt;p>Dockerfile是一個文本文件，它包含了創建Docker image所需的指令。這些指令可以包括例如：&lt;/p>
&lt;ul>
&lt;li>從哪個基礎鏡像建立新鏡像&lt;/li>
&lt;li>安裝需要的軟體&lt;/li>
&lt;li>設置環境變量&lt;/li>
&lt;li>添加應用程序文件&lt;/li>
&lt;li>定義容器啟動時執行的命令&lt;/li>
&lt;/ul>
&lt;p>透過Dockerfile, 可以自動化的建立一個環境，方便在不同的環境上部署，使用者可以更方便的管理環境，以及減少部署錯誤的機會。&lt;/p>
&lt;p>例如，如果你有一個Java應用程序需要在多個不同的服務器上運行，你可以使用Dockerfile創建一個包含Java執行時環境的镜像，然後在每個服務器上執行這個镜像，這樣就能保證每個服務器上都有相同的環境。&lt;/p>
&lt;p>試著把剛剛寫的volume打包成一個image，首先在/website的資料夾裡面新增一個名稱一定要是dockerfile的檔案&lt;/p>
&lt;p>裡面的檔案結構長的像這樣子&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span class="k">FROM&lt;/span>&lt;span class="s"> nginx:latest&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">ADD&lt;/span> . /usr/share/nginx/html&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>FROM：指定了基礎Image是nginx，後面的latest是指版本號。Dockerfile中必須要有FROM指令，它是一切的根本，它指定了基礎Image環境。舉例來說，這邊指定用最新版的nginx，那麼我們的鏡像會基於這個最新版的nginx環境運行&lt;/li>
&lt;li>ADD：將本地目錄中的文件複製到鏡像中的指定目錄。在這個例子中是將本地目錄中的所有文件複製到鏡像中的/usr/share/nginx/html目錄。它的功能跟COPY有點像，但是COPY用法比較單純，只能複製本地文件和目錄到鏡像中，而ADD指令還可以解壓縮tar文件並將其中的文件複製到鏡像中。&lt;/li>
&lt;/ul>
&lt;p>​ 值得注意的是&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span class="k">ADD&lt;/span> . /usr/share/nginx/html&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>這行指的是，將當前目錄的所有東西(以一個.表示)加入至Container中的/usr/share/nginx/html目錄中。在這個例子中就是將&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/xhF8sgi.png"
loading="lazy"
alt="image-20230122005758339"
>&lt;/p>
&lt;p>這些東西ADD進/usr/share/nginx/html裡面。&lt;/p>
&lt;p>當Dockerfile寫好後，要開始bulid它，步驟如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">docker build -t website:latest .&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>這個命令是在使用 Docker 建立一個新的鏡像檔，並標記為 &amp;ldquo;website:latest&amp;rdquo;。 &amp;ldquo;.&amp;rdquo; 表示當前目錄下的 Dockerfile 檔案將會被用來建立映像檔。這個命令將會建立一個名為 &amp;ldquo;website&amp;rdquo; 並且標記為 &amp;ldquo;latest&amp;rdquo; 的鏡像檔。&lt;/li>
&lt;/ul>
&lt;p>Build完後就會出現一個image了，輸入&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker images
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>就可以查看目前擁有的images&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/fjUHVh9.png"
loading="lazy"
alt="image-20230122023400655"
>&lt;/p>
&lt;p>並且可以這個image可以運行我們剛剛對index的設定，輸入&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker run --name website -p 8080:80 -d website:latest
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意：這邊不需要再為website設置volume，因為我們已經將需要的東西打包進image裡面了。&lt;/p>
&lt;p>輸入完後，在URL的地方輸入localhost:8080就可以看到我們剛剛設置的東西了。&lt;/p>
&lt;p>gif如下&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/XvOfKcm.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;p>​&lt;/p>
&lt;h1 id="實際演練-nodejs">實際演練 NodeJs&lt;/h1>
&lt;h2 id="前置作業">前置作業&lt;/h2>
&lt;p>安裝Node.js，這邊安裝為了快速，就直接用Choco來裝了，Choco的安裝如下&lt;/p>
&lt;ol>
&lt;li>
&lt;p>在Terminal中輸入，記得要以系統管理員身分輸入&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">Set-ExecutionPolicy Bypass -Scope Process -Force&lt;span class="p">;&lt;/span> &lt;span class="o">[&lt;/span>System.Net.ServicePointManager&lt;span class="o">]&lt;/span>::SecurityProtocol &lt;span class="o">=&lt;/span> &lt;span class="o">[&lt;/span>System.Net.ServicePointManager&lt;span class="o">]&lt;/span>::SecurityProtocol -bor 3072&lt;span class="p">;&lt;/span> iex &lt;span class="o">((&lt;/span>New-Object System.Net.WebClient&lt;span class="o">)&lt;/span>.DownloadString&lt;span class="o">(&lt;/span>&lt;span class="s1">&amp;#39;https://community.chocolatey.org/install.ps1&amp;#39;&lt;/span>&lt;span class="o">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>安裝完後安裝nodeJs&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">choco install nodejs
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>安裝完後隨便創一個資料夾，這邊命名叫做user-service-api&lt;/p>
&lt;/li>
&lt;li>
&lt;p>切換到該資料夾底下，並且npm init它&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">npm init
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>接著安裝express&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">npm install --save express
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>用好後檔案結構長這樣&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/UfcpwaY.png"
loading="lazy"
alt="image-20230122032825912"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在該目錄底下新增一個index.js的檔案，內容如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kr">const&lt;/span> &lt;span class="nx">express&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;express&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">app&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">express&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">port&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3000&lt;/span>
&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">json&lt;/span>&lt;span class="p">([{&lt;/span>
&lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Bod&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">email&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;bob@gmail.com&amp;#39;&lt;/span>
&lt;span class="p">}])&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">listen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">port&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`Example app listening on port &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">port&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>使用nodejs運行&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">node index.js
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>成功後進入localhost:3000即可看到下列畫面&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/dRynWn4.png"
loading="lazy"
alt="image-20230122033843917"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>如此一來前置作業就完成了&lt;/p>
&lt;h2 id="製作dockerfile">製作DockerFile&lt;/h2>
&lt;p>在目錄底下新增dockerfile，內容如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span class="k">FROM&lt;/span>&lt;span class="s"> node:latest&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">WORKDIR&lt;/span>&lt;span class="s"> /app&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">ADD&lt;/span> . .&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> npm install&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">CMD&lt;/span> node index.js&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>WORKDIR：若Container有/app這個資料夾，則使用它，若沒有，則創造它。&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>ADD . .： 将当前目录中的文件复制到镜像中的 /app 目录。&lt;/li>
&lt;li>RUN npm install： 在鏡像中运行 npm install 命令，安装应用程序所需的依赖项。&lt;/li>
&lt;li>CMD node index.js：设置镜像启动时运行的命令，这里是运行 node index.js。&lt;/li>
&lt;/ul>
&lt;p>為什麼要分成RUN跟CMD呢？有幾個原因，首先RUN跟CMD的用途本身就不一樣，RUN主要是在創建image中執行命令，並將結果保存在image中，它主要用來安裝依賴、配置應用程式或其他操作。則是用來說明Image創建完成後要執行的動作。&lt;strong>簡而言之，RUN是在創建Image中過程所執行的，而CMD則是在Image創建完成後所執行的&lt;/strong>。&lt;/p>
&lt;p>並且，一個DockerFile可以有很多RUN指令，但只能有一個CMD指令，因為Container只能運行一個CMD指令&lt;/p>
&lt;h2 id="使用image">使用Image&lt;/h2>
&lt;p>接著創建鏡像&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker build --tag user-service-api:latest .
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>創建完之後啟動鏡像&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker run --name user-api -d -p 8080:3000 user-service-api:latest
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>這邊的&lt;code>8080:3000&lt;/code>是指，將我們容器裡面原本配置的3000端口暴露出來，以8080來接收。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/VSKx5y3.png"
loading="lazy"
alt="image-20230122041621171"
>&lt;/p>
&lt;p>因為3000是指在Container裡面的端口，host想要讀到它，必須將Container的端口暴露出來。因此localhost:3000會找不到東西，只有打localhost:8080才會有我們要的內容&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/vUVU65T.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;h2 id="dockerignore">DockerIgnore&lt;/h2>
&lt;p>做完上面這些操作後，我們的檔案結構長這樣&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/zx4lldH.png"
loading="lazy"
alt="image-20230122042649897"
>&lt;/p>
&lt;p>然後我們的Dockerfile長這樣&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span class="k">FROM&lt;/span>&lt;span class="s"> node:latest&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">WORKDIR&lt;/span>&lt;span class="s"> /app&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">ADD&lt;/span> . .&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> npm install&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">CMD&lt;/span> node index.js&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>比較之後發現一件事情，RUN npm install會創建node_modules資料夾，但我們在ADD時已經把node_modules加入進去，等於說我們&lt;strong>重複創建&lt;/strong>了兩次node_modules，這種情況就類似gitIgnore，需要排除掉重複的資料夾&lt;/p>
&lt;p>dockerIgnore的寫法&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">node_modules&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>dockerfile&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>.git&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/cw6wiqo.png"
loading="lazy"
alt="image-20230122043320515"
>&lt;/p>
&lt;p>這樣就可以把這些檔案排除在外了&lt;/p>
&lt;h1 id="caching--layers">Caching &amp;amp; Layers&lt;/h1>
&lt;p>DockerFile裡面的每一個CML都是一個Layer，每個Layer都用來Caching`&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span class="k">FROM&lt;/span>&lt;span class="s"> node:latest&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">WORKDIR&lt;/span>&lt;span class="s"> /app&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">ADD&lt;/span> . .&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> npm install&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">CMD&lt;/span> node index.js&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/qOnozTP.png"
loading="lazy"
alt="image-20230124033035860"
>&lt;/p>
&lt;p>可以看到這邊的Step1, Step2都對應著CML的指令&amp;hellip;&lt;/p>
&lt;p>而Cache的點就在於，其實除了ADD . . 以外(原始碼每次打包時都會有更動)，其實WORKDIR, RUN npm install這些指令其實都是重複的，我們每次打包都需要再重複執行一次，這樣很沒**效率 **&lt;/p>
&lt;p>於是Dokcer就會把這些重複的事情Caching起來，只要沒有改變就不會重複再做，就會看到上面的Using Cache了&lt;/p>
&lt;h1 id="alpine">ALPINE&lt;/h1>
&lt;p>&lt;code>翻譯的意思是高山&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/lHZT25E.png"
loading="lazy"
alt="image-20230124040633982"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/vROHoya.png"
loading="lazy"
alt="image-20230124040527548"
>&lt;/p>
&lt;p>我剛剛打包的Image檔案已經快逼近一個G了，很明顯我們其實不需要那麼多的東西，Alpine版本的就是一個非常小的鏡像。&lt;/p>
&lt;h2 id="實際安裝alpine">實際安裝ALPINE&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker pull node:lts-alpine
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/sOvYX9X.png"
loading="lazy"
alt="image-20230124041533774"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/WiRUr17.png"
loading="lazy"
alt="image-20230124041614756"
>&lt;/p>
&lt;p>兩者的Size差了快十倍&lt;/p>
&lt;h1 id="docker-compose-將後端與資料庫一起包一包">Docker Compose 將後端與資料庫一起包一包&lt;/h1>
&lt;p>一個Project不可能只由一個後端組成，肯定是要由後端、前端、以及資料庫三者組合，甚至更甚者可能會有10,20個的部件需要去組合，那麼一個一個run container這件事情就變得相當缺乏效率。為了處理這件事情，於是有了&lt;strong>Docker-Compose&lt;/strong>的概念出現。&lt;/p>
&lt;p>Docker-Compose大概就像這樣，&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;3.7&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">services&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">db&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">container_name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">postgres-for-dockerpractice&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">postgres&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">POSTGRES_PASSWORD&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">root&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">POSTGRES_USER&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">root&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">POSTGRES_DB&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">root&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">./pgdata:/var/lib/postgresql/data&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s1">&amp;#39;5432:5432&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">backend&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">container_name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">backend-for-dockerpractice&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">shop&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">depends_on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">db&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s1">&amp;#39;8080:8080&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>和dockerfile一樣存在於專案根目錄中&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/UpKhAur.png"
loading="lazy"
alt="image-20230130235149649"
>&lt;/p>
&lt;p>他類似於一個&lt;strong>配置檔&lt;/strong>，用以告訴Docker要啟動哪些Container，以及它們之間的交互關係，以上面的Docker-compose.yml來說明&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;3.7&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">//要使用的dokcer-compose版本，有分很多版，比如說1.0,2.0，但目前主流是3.0，所以照著寫就好&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">services&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">//每一個起起來的Container有一個特殊的名字，叫做service，這個yaml檔就有兩個service，分別叫db跟backend&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">db&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">//可自定義的service名稱，高興叫啥就叫啥，但這個名字會與你在application.properties裡描述的名稱有對應關係，可以看看下面的附圖，第四行的url:jdbc:postgresql://db:5432/shop，其中的db就是service的名稱&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">container_name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">postgres-for-dockerpractice //自定義的名稱，想叫啥就叫啥，這名稱會是你的Container名稱&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">postgres //要使用哪個image作為基底&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">POSTGRES_PASSWORD&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">45002502&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">POSTGRES_USER&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">postgres&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">POSTGRES_DB&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">shop&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">./pgdata:/var/lib/postgresql/data&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s1">&amp;#39;5432:5432&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">//要暴露出來的端口&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">backend&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">//可自定義的service名稱，高興叫啥就叫啥，但這個名字會與你在application.properties裡描述的名稱有對應關係。&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">container_name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">backend-for-dockerpractice //自定義的名稱，想叫啥就叫啥，這名稱會是你的Container名稱&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">shop //要使用哪個image作為基底，這個是我自己docker build -t shop:latest . 所創建出來的image&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">depends_on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">db //這意味著，你這邊的service會等到db這個service完成後才會進行部屬。&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s1">&amp;#39;8080:8080&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">// 暴露出來的端口&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/AMN0bz6.png"
loading="lazy"
alt="image-20230130235821812"
>&lt;/p>
&lt;p>▲第四行的db與services的名稱有對應。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/ksv3RFX.png"
loading="lazy"
alt="image-20230131000230558"
>&lt;/p>
&lt;p>▲上述的docker-compose啟動後顯示的樣子。&lt;/p>
&lt;p>常用的指令&lt;/p>
&lt;p>啟動當前目錄的docker-compose&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker compose up
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>關閉當前目錄的docker-compose&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker compose down
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>你知道嗎?現在Github上也可以使用Vscode喔！</title><link>https://hoxtonhsu.com/p/%E4%BD%A0%E7%9F%A5%E9%81%93%E5%97%8E%E7%8F%BE%E5%9C%A8github%E4%B8%8A%E4%B9%9F%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8vscode%E5%96%94/</link><pubDate>Wed, 11 Jan 2023 23:27:27 +0800</pubDate><guid>https://hoxtonhsu.com/p/%E4%BD%A0%E7%9F%A5%E9%81%93%E5%97%8E%E7%8F%BE%E5%9C%A8github%E4%B8%8A%E4%B9%9F%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8vscode%E5%96%94/</guid><description>&lt;img src="https://i.imgur.com/Gckim1N.png" alt="Featured image of post 你知道嗎?現在Github上也可以使用Vscode喔！" />&lt;p>前陣子在網路上找看看有沒有什麼實用的Git指令，無意間看到這個功能。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/NltXKuw.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;p>只要在Github的頁面按下 &amp;gt; ，就可以開啟網頁版的Vscode囉，不過有個小缺點就是，Vscode開啟時介面語言是依據你瀏覽器的語言所決定，所以如果想要使用英文版的Vscode就要把Chrome的語言設定成英文喔。&lt;/p>
&lt;p>這樣開啟後最直觀的好處就是可以直接在Github上以Vscode編輯程式碼，做快速的修改，瀏覽起來也比較快，不然原本網頁在看的話速度非常的慢！並且也可以在上面做衝突的處理。&lt;/p></description></item><item><title>實用的Git指令</title><link>https://hoxtonhsu.com/p/%E5%AF%A6%E7%94%A8%E7%9A%84git%E6%8C%87%E4%BB%A4/</link><pubDate>Fri, 06 Jan 2023 14:15:51 +0800</pubDate><guid>https://hoxtonhsu.com/p/%E5%AF%A6%E7%94%A8%E7%9A%84git%E6%8C%87%E4%BB%A4/</guid><description>&lt;img src="https://i.imgur.com/nCGDuUc.png " alt="Featured image of post 實用的Git指令" />&lt;h1 id="前言">前言&lt;/h1>
&lt;p>整理一下工作上有用過，並覺得實用、比較少人提過的一些Git指令。&lt;/p>
&lt;h1 id="git指令">Git指令&lt;/h1>
&lt;ol>
&lt;li>退回到上一個Commit，數字可以更改，1就是上一次，改成三的話就是三次前的Commit&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">git checkout HEAD~1
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/MNnAwmx.gif"
loading="lazy"
alt="demo2"
>&lt;/p>
&lt;ol start="2">
&lt;li>退回上一次的Commit，重複輸入的話會往復循環&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">git checkout -
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/GpQAK2L.gif"
loading="lazy"
alt="demo2"
>&lt;/p>
&lt;ol start="3">
&lt;li>將本次修改合併至上次Commit，如果有漏掉的提交會常用這個指令&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">git commit --amend --no-edit
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Java中的throw,throws,try...catch，受檢例外與非受檢例外</title><link>https://hoxtonhsu.com/p/java%E4%B8%AD%E7%9A%84throwthrowstry...catch%E5%8F%97%E6%AA%A2%E4%BE%8B%E5%A4%96%E8%88%87%E9%9D%9E%E5%8F%97%E6%AA%A2%E4%BE%8B%E5%A4%96/</link><pubDate>Tue, 27 Dec 2022 15:12:58 +0800</pubDate><guid>https://hoxtonhsu.com/p/java%E4%B8%AD%E7%9A%84throwthrowstry...catch%E5%8F%97%E6%AA%A2%E4%BE%8B%E5%A4%96%E8%88%87%E9%9D%9E%E5%8F%97%E6%AA%A2%E4%BE%8B%E5%A4%96/</guid><description>&lt;img src="https://i.imgur.com/dwbYvaF.png" alt="Featured image of post Java中的throw,throws,try...catch，受檢例外與非受檢例外" />&lt;h1 id="開頭">開頭&lt;/h1>
&lt;p>Java中的例外分為受檢例外與非受檢例外(RuntimeExcetption)兩大類，可以先看到這張圖。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/apUx0mu.png"
loading="lazy"
alt="image-20221227160151705"
>&lt;/p>
&lt;p>所謂的&lt;strong>非受檢例外就是指繼承了RuntimeException的Exception&lt;/strong>，這類的Exception發生，而非受檢例外就是指沒有繼承RuntimeException的Exception。可以看下列的圖片&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/FdZYptn.png"
loading="lazy"
alt="image-20221227161807341"
>&lt;/p>
&lt;h1 id="何謂受檢例外與非受檢例外">何謂受檢例外與非受檢例外&lt;/h1>
&lt;p>受檢例外之所以叫受檢例外，就在於這些例外是工程師必須明確檢查並處理的例外，例如讀取檔案時發生的FileNotFoundException，這類的Exception，JVM沒有辦法進行處理，因此需要工程師去做處理。而RumtimeException則是指那些工程師不需要去明確處理的Exception，比如說NullPointerException, ArrayIndexOutOfBoundsException，這類的例外都是繼承自RuntimeException，可以由JVM進行處理，當然要處理也是可以的，比如說這樣&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/9drhRUY.png"
loading="lazy"
alt="image-20221227164624742"
>&lt;/p>
&lt;p>(可以看到左邊第13行的方法，沒有被try..catch包住也沒事，因為該方法拋出的例外是NumberFormatException，這個例外繼承了RuntimeException，因此不用try&amp;hellip;catch處理也沒關係，JVM會自動幫我們處理，如果要放到try&amp;hellip;catch的話，則是在catch段裡去catch NumberFormatException)&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/xsozyoG.png"
loading="lazy"
alt="image-20221227164726651"
>&lt;/p>
&lt;p>將方法放入try&amp;hellip;catch之後，因為catch是抓RuntimeException，所以被抓到後會print出catch error。&lt;/p>
&lt;p>另外比較實務上的說法即是，受檢例外(checked Exception)是可被修復的例外，可以試看看retry，而不可修復的例外就是非受檢例外(RunTimeException)，這種時候就代表程式出了問題，有bug，需要工程師下來進行處理，把問題處理掉&lt;/p>
&lt;p>來源：&lt;a class="link" href="https://medium.com/kuma%E8%80%81%E5%B8%AB%E7%9A%84%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E6%95%99%E5%AE%A4/2021-it-%E9%90%B5%E4%BA%BA-day-09-%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6%E8%88%87%E4%BE%8B%E5%A4%96%E8%99%95%E7%90%86-f571f577f72" target="_blank" rel="noopener"
>2021 IT 鐵人 Day 09 單元測試與例外處理&lt;/a>&lt;/p>
&lt;p>那如果一個method會拋出受檢例外，而在該method中又沒有做處理，則會需要呼叫它的那一個method進行處理。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/mLLBczf.png"
loading="lazy"
alt="image-20221227165544804"
>&lt;/p>
&lt;p>右邊的方法實際上不會拋出IOException，所以會顯示為灰色的，這邊只是作為Demo先寫上去。可以看到畫面左邊的地方，此時IDE跟我們報錯，說這個方法會拋出一個IOException，要我們進行處理，&lt;strong>因為IOException是一個受檢例外&lt;/strong>，JVM本身沒有能力可以進行處理。&lt;/p>
&lt;p>大概先這樣，其他想到後補。&lt;/p></description></item><item><title>淺談測試驅動開發</title><link>https://hoxtonhsu.com/p/%E6%B7%BA%E8%AB%87%E6%B8%AC%E8%A9%A6%E9%A9%85%E5%8B%95%E9%96%8B%E7%99%BC/</link><pubDate>Sun, 04 Dec 2022 22:22:06 +0800</pubDate><guid>https://hoxtonhsu.com/p/%E6%B7%BA%E8%AB%87%E6%B8%AC%E8%A9%A6%E9%A9%85%E5%8B%95%E9%96%8B%E7%99%BC/</guid><description>&lt;img src="https://i.imgur.com/2xteh3C.png" alt="Featured image of post 淺談測試驅動開發" />&lt;h1 id="序言">序言&lt;/h1>
&lt;p>參考資料：&lt;/p>
&lt;p>&lt;a class="link" href="https://youtu.be/t4D6GW2c8G8?list=LL" target="_blank" rel="noopener"
>Agile Hsinchu 2022.11 - 〈你就是不寫測試，才會沒時間〉線上導讀&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://youtu.be/wTpsxjP0t7M" target="_blank" rel="noopener"
>測試有時間再寫？你就是不寫才會沒時間！&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://ithelp.ithome.com.tw/users/20107429/ironman/3897" target="_blank" rel="noopener"
>你就是都不寫測試才會沒時間：Kuma 的 30 天 Unit Test 手把手教學，從理論到實戰 （Java 篇）&lt;/a>&lt;/p>
&lt;p>TDD(Test-Driven Development)是一個軟體開發的模式，它的概念很簡單，就是&lt;strong>先寫測試在寫程式&lt;/strong>，&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/LgOetJJ.png"
loading="lazy"
alt="image-20221205004202805"
>&lt;/p>
&lt;p>這樣的事情會讓我們覺得不可思議，因為我們一直以來寫程式的方式都是先寫程式，而測試則是有時間才再補的東西。那改成先寫測試會有什麼好處呢？這部分我們等等再來談，我們先討論TDD最核心的部分—&lt;strong>單元測試(Unit Test)&lt;/strong>。&lt;/p>
&lt;h1 id="單元測試在tdd的作用是什麼">單元測試在TDD的作用是什麼&lt;/h1>
&lt;p>​ 一開始在認識單元測試的時候，許多人的想法都會認為說，單元測試可以避免Bug，可以提升程式碼的品質。確實這些都是Unit Test的好處，但卻不是最核心的關鍵，單元測試最重要的點在於幫助我們&lt;strong>重構現有的程式架構&lt;/strong>。&lt;/p>
&lt;p>​ 我們在經手一個項目的時候，第二個月的理解一定會比第一個月的理解更深，第三個月的理解也一定會比第二個月的理解更加深刻，可能三個月前所使用的架構，在三個月後，隨著業務規模的擴展、需求的增加，而需要去新增新的程式，或是改變原有的設計，因而漸漸不敷使用，在這樣的情形下，若沒有單元測試的保護支持我們重構，讓我們確保每一步的Design都沒有破壞原有程式的設計，工程師會變得去害怕修改舊有的程式碼，因而導致不敷使用的架構繼續生長下去。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/RUQ0j6E.png"
loading="lazy"
alt="image-20221205010938974"
>&lt;/p>
&lt;p>(▲ 程式能跑，但還能在更好）&lt;/p>
&lt;p>​ 如果只是這樣子還沒什麼問題，畢竟就只是把東西一個接著一個地疊上去，頂多就是不好維護而已。但實際上的開發中，是很常出現改Ａ壞Ｂ這種情況的，在沒有單元測試的保護下，工程師在開發中是不會知道自己更新的這段程式碼會對某些程式造成影響，往往要等到合併後才能出現問題，所以會出現一種情況就是前期開發的都很順利，而越到後面Dead Line，效率就越發下降，&lt;strong>因為工程師在開發的當下不知道自己新增的功能到底會不會對別人造成影響&lt;/strong>。而有了測試的保護，我們可以在寫程式的時候就知道現在程式的運行狀況，今天這樣子的修改會不會導致其他程式跑不起來，如果跑不起來那單元測試就不會過，這樣的回饋是&lt;strong>立即性&lt;/strong>的回應，而不需要等到合併後大家才知道。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/4EMwAcp.png"
loading="lazy"
alt="image-20221205010534318"
>&lt;/p>
&lt;p>(▲ 隨著開發時間的增加，TDD的優勢會更凸顯出來）&lt;/p>
&lt;h1 id="agile與tdd">Agile與TDD&lt;/h1>
&lt;blockquote>
&lt;p>講到Agile就會講到瀑布式開發(WaterFall)，但你知道嗎？其實從來都沒有瀑布式開發這種事情喔。&lt;/p>
&lt;/blockquote>
&lt;p>瀑布式開發是來自於Winston Royce在1970所提出的論文Managing the Development of Larger Software Systems被提出，但事實上這個開發模式在這篇論文的下一行就被Winston Royce否決了。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/6dBbaHc.png"
loading="lazy"
alt="image-20221205012708984"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/61MwhoA.png"
loading="lazy"
alt="image-20221205012720794"
>&lt;/p>
&lt;blockquote>
&lt;p>I believe in this concept, but the implementation described above is risky and inivites failure. The problem is illustrated in Figure 4 .&lt;/p>
&lt;p>我相信這個概念，但照著這上面的流程做的話是高風險且易導致錯誤的，原因就如第四張圖所示&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://i.imgur.com/73usP4Z.png"
loading="lazy"
alt="image-20221205012847815"
>&lt;/p>
&lt;p>​ (▲Figure 4)&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>The testing phase which occurs at the end of the development cycle&lt;/strong> is the first event for which timing, stotage, input/output transfers, etc, are experienced as distinguished from analyzed. These phenomena are not precisely analyzable. There phenomena are not precisely analyzable. They are not the solutions or the satndard partial differential quations of mathematical physics for instatnce. Yet if there phenomena fail to satisfy the various external constraints, then invariablt a major redesign is required . A simple octal patch or redo of some isolated code will not fix there kinds of difficulties. The required design changes are likely to be so disruptive that the software requiremnets upon which the design is based and which provides the rationale for everything are violated. &lt;strong>Either the requirements must be modified, or a substantial change in the design is required.&lt;/strong> &lt;strong>In effect the development process has returned to the origin and one can expect up to a 100-percent overrun in schedule and/or costs&lt;/strong>&lt;/p>
&lt;p>在開發流程的最後一個階段-測試，第一個遇到的事情就是時序、儲存，輸出輸入，這些現象情況無法準確的分析，這些不像數學物理的解答，或是標準偏微方程，然而，如果存在不能滿足各種外部約束的現象，則不可避免地需要進行重大的重新設計，一個簡單的八進制補丁或一些孤立代碼的重做不會解決這些困難，所需的設計更改可能會造成破壞，以至於違反了設計所基於的以及為所有事情提供基本原理的軟件要求。 要么必須修改要求，要么需要對設計進行實質性更改。 實際上，開發過程已經回到原點，預計進度和/或成本會超支 100%。&lt;/p>
&lt;/blockquote>
&lt;p>Winston Royce在瀑布模型提出的當下其實就否認了它的意義，但後續被一些人拿來當作開發的窠臼，也導致了這種開發模式往往會在完工時出現重大的危害。Winston Royce認為，&lt;strong>在最後的測試階段是充滿著未知與不確定性&lt;/strong>，到最後會反覆著在&lt;strong>測試、程式修改、確認需求&lt;/strong>這三個階段來回擺盪，這樣三個階段的來回擺盪是不是有點似曾相似呢？沒錯，就是TDD的概念&lt;/p>
&lt;h1 id="什麼是tdd">什麼是TDD&lt;/h1>
&lt;p>&lt;img src="https://i.imgur.com/Iwmr8mT.png"
loading="lazy"
alt="image-20221207000519492"
>&lt;/p>
&lt;p>TDD&lt;strong>是一個開發模式&lt;/strong>而不是測試模式，TDD的測試模式是由&lt;/p>
&lt;ul>
&lt;li>寫一個會錯的測試&lt;/li>
&lt;li>寫一個剛好會過的程式&lt;/li>
&lt;li>重構&lt;/li>
&lt;/ul>
&lt;p>​ 這三者循環，對應Winston Royce對瀑布模型提出的弊端，也就是&lt;strong>測試、修改程式、確認需求&lt;/strong>，也因此TDD是一個可以讓&lt;strong>問題早期浮上水面的開發方式&lt;/strong>，為什麼？因為這樣的開發方式要求我們對業務邏輯的需求有充分的了解，這樣我們才可以寫測試，一旦需求明確了，那麼寫出程式就只是時間的問題了。&lt;/p>
&lt;p>​ 另一方面，也是因為TDD的開發模式，我們每一個Code都有單元測試的保護，我們可以&lt;strong>隨時重構&lt;/strong>我們的程式碼而毋須擔心程式被我們改錯，是的，沒錯，TDD的一個核心概念就在於&lt;strong>任何時候都可以重構我們的程式碼&lt;/strong>，因為人對於系統的了解，會隨著開發時間的增加而了解的越深刻，半年前的Code到了現在可能越看越不順眼，另一方面，隨著業務規模的提升，我們早期的設計可能也會越不敷使用，若沒有單元測試的保護，我們重構的成本會隨著產品的規模的提升而提升，而發展到一定規模的情況下，&lt;strong>重構變成遙不可及的夢想&lt;/strong>。&lt;/p>
&lt;p>​ 也是因為有單元測試的保護，我們才可以&lt;strong>真正的去設計我們的程式&lt;/strong>，常見的S.O.L.I.D，以及23種設計模式的使用，如何根據不同的情境套用不同的設計模式，這就是工程師有價值的地方，可以說單元測試的撰寫完整了整個物件導向的程式設計。&lt;/p></description></item><item><title>如何將Junit的測試粒度控制在最小單元</title><link>https://hoxtonhsu.com/p/%E5%A6%82%E4%BD%95%E5%B0%87junit%E7%9A%84%E6%B8%AC%E8%A9%A6%E7%B2%92%E5%BA%A6%E6%8E%A7%E5%88%B6%E5%9C%A8%E6%9C%80%E5%B0%8F%E5%96%AE%E5%85%83/</link><pubDate>Wed, 30 Nov 2022 13:30:27 +0800</pubDate><guid>https://hoxtonhsu.com/p/%E5%A6%82%E4%BD%95%E5%B0%87junit%E7%9A%84%E6%B8%AC%E8%A9%A6%E7%B2%92%E5%BA%A6%E6%8E%A7%E5%88%B6%E5%9C%A8%E6%9C%80%E5%B0%8F%E5%96%AE%E5%85%83/</guid><description>&lt;img src="https://i.imgur.com/4qePz5L.png " alt="Featured image of post 如何將Junit的測試粒度控制在最小單元" />&lt;p>在Junit5中，有對一些Junit的測試的註解進行調整&lt;/p>
&lt;p>比如說&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Junit4&lt;/th>
&lt;th>Junit5&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>測試用框架的選擇&lt;/td>
&lt;td>@RunWith(MockitoJUnitRunner.class)&lt;/td>
&lt;td>@ExtendWith(MockitoExtension.class)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>當測試會使用到SprintBoot框架時，應該要使用@ExtendWith(SpringExtension.class)，@MockBean來調用&lt;/p>
&lt;p>若測試不想涉及SprintBoot的時候@ExtendWith(MockitoExtension.class)，以及@Mock, @InjectMocks，並且使用MockMvcBuilders.standaloneSetup來設置獨立測試，以下是Code的示範&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.junit.jupiter.api.BeforeEach&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.junit.jupiter.api.extension.ExtendWith&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.mockito.InjectMocks&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.mockito.Mock&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.mockito.junit.jupiter.MockitoExtension&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.test.web.servlet.MockMvc&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.test.web.servlet.setup.MockMvcBuilders&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * @author Hoxton on 2022/11/30
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@ExtendWith&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MockitoExtension&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">UserControllerTest&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Mock&lt;/span> &lt;span class="c1">//Controller調用的Service
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">UserService&lt;/span> &lt;span class="n">userService&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@InjectMocks&lt;/span> &lt;span class="c1">//要測試的Cotroller
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">UserController&lt;/span> &lt;span class="n">userController&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">MockMvc&lt;/span> &lt;span class="n">mockMvc&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">//模擬Mvc
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="nd">@BeforeEach&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">setMockMvc&lt;/span>&lt;span class="o">(){&lt;/span>
&lt;span class="n">MockMvcBuilders&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">standaloneSetup&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">userController&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Test&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">testMethod_situation_returnWhat&lt;/span>&lt;span class="o">(){&lt;/span>
&lt;span class="n">given&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">someObject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">someMethod&lt;/span>&lt;span class="o">()).&lt;/span>&lt;span class="na">willReturn&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;someting&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// ... 設置
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="n">MockHttpServletResponse&lt;/span> &lt;span class="n">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mvc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">perform&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;someUrl&amp;#34;&lt;/span>&lt;span class="o">)).&lt;/span>&lt;span class="na">andReturn&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getResponse&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">assertThat&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;something&amp;#34;&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">isEqualTo&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;thatThing&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>IDEA的介紹</title><link>https://hoxtonhsu.com/p/idea%E7%9A%84%E4%BB%8B%E7%B4%B9/</link><pubDate>Thu, 10 Nov 2022 23:52:33 +0800</pubDate><guid>https://hoxtonhsu.com/p/idea%E7%9A%84%E4%BB%8B%E7%B4%B9/</guid><description>&lt;img src="https://i.imgur.com/zyn4XVp.png" alt="Featured image of post IDEA的介紹" />&lt;p>最近業配公司，讓公司老闆買了IDEA讓我們後端工程師來使用，因此技術分享做了一次IDEA的主題，在這邊把技術分享的一些內容做成文章，分享一下&lt;/p>
&lt;h2 id="推薦的plugin">推薦的Plugin&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Plugin名稱&lt;/th>
&lt;th>截圖&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>One Dark Theme&lt;br />&lt;img src="https://i.imgur.com/RDwmNyk.png"
loading="lazy"
alt="image-20221109011709066"
>佈景主題&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/rokbaGu.png"
loading="lazy"
alt="image-20221109011724288"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;br />&lt;img src="https://i.imgur.com/DXd3gwi.png"
loading="lazy"
alt="image-20221109011844072"
>按鍵提示&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/tHGPxbO.gif"
loading="lazy"
alt="ShortCutHit"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Rainbow Brackets&lt;br />&lt;img src="https://i.imgur.com/U1YiDG0.png"
loading="lazy"
alt="image-20221109012245196"
>&lt;br />括弧顏色顯示&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/hX6ghuf.png"
loading="lazy"
alt="image-20221109012300415"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Nyan Progress Bar&lt;img src="https://i.imgur.com/puz6Ast.png"
loading="lazy"
alt="image-20221109012330374"
>&lt;br />讀取條改變&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/DwOQ9TA.gif"
loading="lazy"
alt="bar"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>WakaTime&lt;br />&lt;img src="https://i.imgur.com/6O8LC4R.png"
loading="lazy"
alt="image-20221109102735841"
>&lt;br />工作的紀錄&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/ZRNZg1L.png"
loading="lazy"
alt="image-20221109102655685"
>&lt;br />&lt;img src="https://i.imgur.com/IxXMFOb.png"
loading="lazy"
alt="image-20221109102855824"
>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="要改的設定">要改的設定&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Code Completion&lt;br /> Alt+.&lt;br />&lt;br /> &lt;img src="https://i.imgur.com/DNzcjhh.png"
loading="lazy"
alt="image-20221109012657212"
>&lt;/th>
&lt;th>&lt;img src="https://i.imgur.com/QDvdM96.gif"
loading="lazy"
alt="code"
>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Second Basic &lt;br />Alt+/&lt;br />&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/1nIbigD.gif"
loading="lazy"
alt="comple"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Type-Match-Completion&lt;br />Alt+;&lt;br />&lt;img src="https://i.imgur.com/RRbt5Rs.png"
loading="lazy"
alt="image-20221109125316338"
>&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/yL0OS2f.gif"
loading="lazy"
alt="demo"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Run F10&lt;br />&lt;img src="https://i.imgur.com/GRWVIQD.png"
loading="lazy"
alt="image-20221109013451000"
>&lt;/td>
&lt;td>就Run&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Terminal Alt+`&lt;br />&lt;img src="https://i.imgur.com/mULyQep.png"
loading="lazy"
alt="image-20221109013544910"
> | &lt;img src="https://i.imgur.com/xpIwXjH.gif"
loading="lazy"
> |&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>更改Terminal Bash CMD or Window terminal&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/pfBEHEU.png"
loading="lazy"
alt="image-20221109013734173"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>更改TODO 模板&lt;br />&lt;img src="https://i.imgur.com/fxIxqq0.png"
loading="lazy"
alt="image-20221109013905433"
>&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/omEwjLh.gif"
loading="lazy"
alt="demo"
>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="實用的快捷鍵">&lt;strong>實用的快捷鍵&lt;/strong>&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>功能&lt;/strong>&lt;/th>
&lt;th>&lt;strong>預覽&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>sout,souv&lt;br />快速印出&lt;/strong>&lt;/td>
&lt;td>&lt;strong>&lt;img src="https://i.imgur.com/PtTc6IK.gif"
loading="lazy"
alt="demo"
>&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>搜尋 &lt;br />Shift+shift&lt;/strong>&lt;/td>
&lt;td>&lt;strong>&lt;img src="https://i.imgur.com/VeRXfgk.gif"
loading="lazy"
alt="search2"
>&lt;br />快速列出所有可能，快速定位&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>切換分頁&lt;br /> Ctrl+E&lt;/strong>&lt;/td>
&lt;td>&lt;strong>&lt;img src="https://i.imgur.com/T48Dr58.gif"
loading="lazy"
alt="switch2"
>&lt;br />預設快捷鍵，會列出最近開啟的分頁&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>選擇檔案&lt;br /> Alt+F1然後按1&lt;br />若不想選擇按Esc退回Editor&lt;/strong>&lt;/td>
&lt;td>&lt;strong>&lt;img src="https://i.imgur.com/o7J2P5D.gif"
loading="lazy"
alt="demo"
>&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>快速選取區塊&lt;br />Ctrl+W&lt;/strong>&lt;/td>
&lt;td>&lt;strong>&lt;img src="https://i.imgur.com/sP0SaBd.gif"
loading="lazy"
alt="selectWord"
>&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>快速選取方法&lt;br />Alt+↑&lt;/strong>&lt;/td>
&lt;td>&lt;strong>&lt;img src="https://i.imgur.com/4WVURXZ.gif"
loading="lazy"
alt="SelectMethod"
>&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>查看根源&lt;br />Ctrl+B&lt;/strong>&lt;/td>
&lt;td>&lt;strong>&lt;img src="https://i.imgur.com/rZoSSTU.gif"
loading="lazy"
alt="demo"
>&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>快速定位錯誤&lt;br />F2&lt;/strong>&lt;/td>
&lt;td>&lt;strong>&lt;img src="https://hoxtonhsu.com/C:%5cUsers%5cHoxton%5cDesktop%5cgif%5cdemo.gif"
loading="lazy"
alt="demo"
>&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>查看變數提示&lt;br />Ctrl+P&lt;/strong>&lt;/td>
&lt;td>&lt;strong>&lt;img src="https://i.imgur.com/yqKVxk3.gif"
loading="lazy"
alt="demo"
>&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>修改&lt;br />Shift+F6&lt;/strong>&lt;/td>
&lt;td>&lt;strong>&lt;img src="https://i.imgur.com/q83spMr.gif"
loading="lazy"
alt="demo"
>&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>內建GitBlame功能&lt;br />對行數右鍵選擇gitBlame&lt;/strong>&lt;/td>
&lt;td>&lt;strong>&lt;img src="https://i.imgur.com/kvtETsi.gif"
loading="lazy"
alt="GitBlame"
>&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>萬能鍵Context Action&lt;br />&lt;br />引入變數、錯誤修正&amp;hellip;&lt;/strong>&lt;/td>
&lt;td>&lt;strong>&lt;img src="https://i.imgur.com/DfhLgtn.gif"
loading="lazy"
alt="demo"
>&lt;/strong>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>IntelliJ與Eclipse的比較</title><link>https://hoxtonhsu.com/p/intellij%E8%88%87eclipse%E7%9A%84%E6%AF%94%E8%BC%83/</link><pubDate>Sun, 23 Oct 2022 20:40:49 +0800</pubDate><guid>https://hoxtonhsu.com/p/intellij%E8%88%87eclipse%E7%9A%84%E6%AF%94%E8%BC%83/</guid><description>&lt;img src="https://i.imgur.com/Fx9nanx.png" alt="Featured image of post IntelliJ與Eclipse的比較" />&lt;h2 id="推薦的plugin">推薦的Plugin&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Plugin名稱&lt;/th>
&lt;th>截圖&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>One Dark Theme&lt;br />&lt;img src="https://i.imgur.com/RDwmNyk.png"
loading="lazy"
alt="image-20221109011709066"
>佈景主題&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/rokbaGu.png"
loading="lazy"
alt="image-20221109011724288"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;br />&lt;img src="https://i.imgur.com/DXd3gwi.png"
loading="lazy"
alt="image-20221109011844072"
>按鍵提示&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/tHGPxbO.gif"
loading="lazy"
alt="ShortCutHit"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Rainbow Brackets&lt;br />&lt;img src="https://i.imgur.com/U1YiDG0.png"
loading="lazy"
alt="image-20221109012245196"
>&lt;br />括弧顏色顯示&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/hX6ghuf.png"
loading="lazy"
alt="image-20221109012300415"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Nyan Progress Bar&lt;img src="https://i.imgur.com/puz6Ast.png"
loading="lazy"
alt="image-20221109012330374"
>&lt;br />讀取條改變&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/DwOQ9TA.gif"
loading="lazy"
alt="bar"
>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="要改的設定">要改的設定&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Code Completion Alt+.&lt;br />&lt;br /> &lt;img src="https://i.imgur.com/wI4OJLb.png"
loading="lazy"
alt="image-20221109012657212"
>&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/QDvdM96.gif"
loading="lazy"
alt="code"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Second Basic Alt+/&lt;br /> &lt;img src="https://i.imgur.com/UQP8q4F.png"
loading="lazy"
alt="image-20221109013135689"
>&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/1nIbigD.gif"
loading="lazy"
alt="comple"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Run F10&lt;br />&lt;img src="https://i.imgur.com/GRWVIQD.png"
loading="lazy"
alt="image-20221109013451000"
>&lt;/td>
&lt;td>就Run&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Terminal Alt+`&lt;br />&lt;img src="https://i.imgur.com/mULyQep.png"
loading="lazy"
alt="image-20221109013544910"
> | &lt;img src="https://i.imgur.com/xpIwXjH.gif"
loading="lazy"
> |&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>更改Terminal Bash CMD or Window terminal&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/pfBEHEU.png"
loading="lazy"
alt="image-20221109013734173"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>更改TODO 模板&lt;br />&lt;img src="https://i.imgur.com/fxIxqq0.png"
loading="lazy"
alt="image-20221109013905433"
>&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/omEwjLh.gif"
loading="lazy"
alt="demo"
>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="實用的快捷鍵">實用的快捷鍵&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>功能&lt;/th>
&lt;th>預覽&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>搜尋 &lt;br />Shift+shift&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/VeRXfgk.gif"
loading="lazy"
alt="search2"
>&lt;br />快速列出所有可能，快速定位&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>切換分頁&lt;br /> Ctrl+E&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/T48Dr58.gif"
loading="lazy"
alt="switch2"
>&lt;br />預設快捷鍵，會列出最近開啟的分頁&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>選擇檔案&lt;br /> Alt+F1然後按1&lt;br />若不想選擇按Esc退回Editor&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/o7J2P5D.gif"
loading="lazy"
alt="demo"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>快速選取區塊&lt;br />Ctrl+W&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/sP0SaBd.gif"
loading="lazy"
alt="selectWord"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>快速選取方法&lt;br />Alt+↑&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/4WVURXZ.gif"
loading="lazy"
alt="SelectMethod"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>內建GitBlame功能&lt;br />對行數右鍵選擇gitBlame&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/kvtETsi.gif"
loading="lazy"
alt="GitBlame"
>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>CLion的MutilMain</title><link>https://hoxtonhsu.com/p/clion%E7%9A%84mutilmain/</link><pubDate>Mon, 17 Oct 2022 18:09:43 +0800</pubDate><guid>https://hoxtonhsu.com/p/clion%E7%9A%84mutilmain/</guid><description>&lt;img src="https://i.imgur.com/aGwtINt.png" alt="Featured image of post CLion的MutilMain" />&lt;p>最近在研究C++，但發現我的CLion不知道為什麼只能有一個Main方法，後來網路上查了一下之後發現好像是因為CMake的關係。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/F5hZpXH.png"
loading="lazy"
alt="image-20221017181210022"
>&lt;/p>
&lt;blockquote>
&lt;p>錯誤訊息&lt;/p>
&lt;/blockquote>
&lt;p>後來研究了一下，發現只要在Project底下的CMakeList.txt加上這段就可以了&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">file (GLOB files *.cpp)
foreach (file ${files})
string(REGEX REPLACE &amp;#34;.+/(.+)\\..*&amp;#34; &amp;#34;\\1&amp;#34; exe ${file})
add_executable (${exe} ${file})
message (\ \ \ \ --\ src/${exe}.cpp\ will\ be\ compiled\ to\ bin/${exe})
endforeach ()
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/qKhhlaq.png"
loading="lazy"
alt="image-20221017181342487"
>&lt;/p>
&lt;blockquote>
&lt;p>完整的圖片如上&lt;/p>
&lt;/blockquote>
&lt;p>加入之後記得要Reload CMake Project&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/DrQHwR8.png"
loading="lazy"
alt="image-20221017181404785"
>&lt;/p></description></item><item><title>十大經典魔獸小遊戲地圖</title><link>https://hoxtonhsu.com/p/%E5%8D%81%E5%A4%A7%E7%B6%93%E5%85%B8%E9%AD%94%E7%8D%B8%E5%B0%8F%E9%81%8A%E6%88%B2%E5%9C%B0%E5%9C%96/</link><pubDate>Sat, 08 Oct 2022 03:13:34 +0800</pubDate><guid>https://hoxtonhsu.com/p/%E5%8D%81%E5%A4%A7%E7%B6%93%E5%85%B8%E9%AD%94%E7%8D%B8%E5%B0%8F%E9%81%8A%E6%88%B2%E5%9C%B0%E5%9C%96/</guid><description>&lt;img src="https://i.imgur.com/RALUdJZ.png " alt="Featured image of post 十大經典魔獸小遊戲地圖" />&lt;h1 id="前言">前言&lt;/h1>
&lt;p>&lt;img src="https://i.imgur.com/3iTZrU2.jpg"
loading="lazy"
alt="image-20221008031758424"
>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>蓋塔生兵&lt;/p>
&lt;p>用蓋塔生兵這個詞彙有點不太準確，比較正確的說法是自動產兵型遊戲，這種類型的地圖一開始會給你一塊地，然後這塊地會隨著時間自動產兵，比如說兩秒產一隻士兵這樣，並且能用殺敵獲得的黃金來升級自己的士兵，不論是單純的加血加甲，或是升級成更高單位的士兵，而這類遊戲最大的樂趣就在於取消了部隊上限，能夠像是全面戰爭那樣，操控50~100多隻的士兵上場殺敵，代表的遊戲類型有：城堡大戰、刺蛇大戰，前者是玩家們分成兩個陣營，有點類似現在的DOTA，有路線有野怪，也有系統自動產生的兵線。後者則是最原汁原味的玩法，有些地圖會是刺蛇或是小狗，看地圖而定。 　　這個類型的遊戲不算熱門，但是非常好消磨時間，單機的情形下最後造出一堆高階兵種，比如說寒霜翼龍或是狼騎兵輾壓戰場，看著所有士兵車過去的感覺特別爽。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/FF0mN8m.jpg"
loading="lazy"
alt="img"
>&lt;/p>
&lt;ol start="2">
&lt;li>
&lt;p>鬼抓人（吸血鬼復蘇、巨魔與精靈）&lt;/p>
&lt;p>　　用鬼抓人這個詞彙也不太準確，正確來說比較接近現在的非對稱式生存遊戲。遊戲的玩法是有數名玩家擔任農民，少數玩家扮成鬼，一開始農民先行動，在地圖上找尋合適的地點，開始建立城牆、防衛塔、瞭望塔之類的防禦型設施，防範鬼的入侵。而鬼的玩法則是進攻人類的住所，扛著防衛塔的傷害努力打破城牆，進去殺死人類。以上是比較基本的規則，但隨著遊戲的更新也會增加越來越多功能，比如說鬼也能遠距離攻擊，隔著城牆殺死農民，或是農民死掉後會變成鬼，增加玩家留存率，代表的遊戲有：鬼抓人、樹人與炎魔、巨魔與精靈，這三者都各有特色，但後兩者我忘記具體有什麼差別。這種類型的遊戲也出現過很多變體，比如說貓抓老鼠之類的，但已經是比較後期的事情了。 　　這應該是我第一次接觸到的魔獸爭霸小遊戲地圖吧，也是我認為最經典的，放到現在看也不過時，非對稱式的遊戲方式與生存、建造的融合，讓這類型的遊戲一直都有人在開發，有件有趣的事情是，當時我記得我可能小二小三吧，那時候在網咖裡面加進去一個房間，地圖就叫做性愛鬼抓人，結果進遊戲之後發現只要有人被抓，畫面就會變成無碼色情圖，然後還會有超大聲的淫叫聲，當時的我也不知道那到底是什麼，玩了一下之後就跳出去了。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/I5hIsbF.jpg"
loading="lazy"
alt="image-20221008031942558"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>金字塔大逃亡&lt;/p>
&lt;p>　　個人不知道這是不是台灣人做的地圖，但是應該算是目前還會被提到的魔獸小遊戲吧，知名實況主紹安就是在實況上玩這款遊戲的魔改版《性愛金字塔》，而被圖奇永Ban，從 此之後只要有實況主被ban臺就會被稱作「進金字塔」。 　金字塔大逃亡本身是一個小遊戲總集，遊戲的主線就是玩家進場後可以從約30幾種小遊戲裡面選擇約8~10種小遊戲，全部完成後就可以通關這個金字塔。而這些小遊戲包刮但不限於 殺敵生存-玩家們重生在一個小競技場裡，會有各個波次的敵人依序產生，目標就 是活到最後。 機智問答-有點像是視力測驗的小遊戲，畫面上會有各種不同顏色的怪物數隻，隨機地走動 ，當時間結束後，會問你說「請問橘色的食屍鬼有幾隻?」「藍色的鬼魂有幾隻?」。 計步遊戲-一開始玩家會出現在一個類似棋盤的地圖上，接著會有一位系統npc在棋盤式的地圖上位移，而玩家的目標就是記住它是怎麼走的，必須要讓自己的步伐和npc吻合，不然就輸了 　　這遊戲我玩了很多次，但沒有一次有過關的。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/1BBZTYS.jpg"
loading="lazy"
alt="img"
>&lt;/p>
&lt;ol start="4">
&lt;li>
&lt;p>跳跳球&lt;/p>
&lt;p>　　「手殘復健專用」。遊戲的視角從魔獸的3D視角變成垂直90度的視角，畫面上看起來就是一款2D遊戲，實際遊玩方式很接近現在的CELESTE，都是在2D的地圖上用跳躍、蹬牆跳 之類的方式到達指定的地點。 　雖然說這遊戲的玩法看起來不是特別有創意，但它是一款多人類型的地圖，遊戲裡面死掉後除了等全滅之後的復活外，還可以讓隊友碰觸到你的屍體來復活，我覺得這一點是很有創意的一點，但不知道為什麼沒看到有遊戲發行商做過類似的獨立小品。跳跳球的難體現在三點上，1.遊戲後期會有那種只要沒跳掉，就不會再出現的平台，除非等到所有人重生。2.遊戲會隨著時間，操作越來越延遲。3.手殘&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/FmYq3uE.jpg"
loading="lazy"
alt="img"
>&lt;/p>
&lt;ol start="5">
&lt;li>
&lt;p>大屌大戰&lt;/p>
&lt;p>　　這款我很確定是臺灣玩家的地圖，因為從隊伍選擇裡面就可以看出作者的惡趣味， 藍方「來自東方的大屌」紅方「來自西方的洋屌」。而遊戲方式則是所有人重生在一個 開闊的鬥技場，對戰方式則是以指向技的方式丟擲槌子（遊戲裡叫大屌），如果累積足夠的經驗還可以放大招，丟出一個更巨大的槌子（遊戲裡叫笑傲飛屌）。遊戲裡面也可以購買各種不同的技能，比如說跳斬、大絕之類的，也有現在流行的「配件改變技能」系統，可以購買各種道具，讓自己的大屌解鎖不同的功能，比如說爆炸屌、時空屌、激流屌之類的技能。時不時出現在場上的隨機效果也會令人會心一笑，比如說中樂透（獲得大筆金錢）、動物園動物逃竄（地圖上出現許多動物經過，會有傷害）或是撿到鋼彈（遊戲裡面會有一台鋼彈讓你操作），我覺得最好笑的應該就是固樂沙敏，這個效果觸發後，會有一名玩家跑速變快，而背景音樂也會改成固樂沙敏的廣告「ㄎㄨˊ落，爬起來」。 　　當初在高中的時候邀身邊的同學一起玩，討論的內容都是「今天要不要玩大屌大戰」「我的屌超準」「我才不要玩，每次都被你的大屌噴死」之類的對話，不知道當時身邊的女同學都在想些什麼呢。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/i8V6Bug.jpg"
loading="lazy"
alt="img"
>&lt;/p>
&lt;ol start="6">
&lt;li>
&lt;p>神奇寶貝防衛戰&lt;/p>
&lt;p>　　這應該這幾年大家最熟悉的遊戲，Dota自走棋、LoL自走棋、爐石戰場之類的遊戲，都 是源自這款遊戲(應該啦，我也不確定)，遊戲方式就是從許多神奇寶貝裡面選出幾種，然後它們就會自動打怪，我們要做的事情就是升級神奇寶貝、選擇神奇寶貝而已，遊戲裡面的許多神奇寶貝都有獨立建模，印象最深的大概就是鯉魚王吧，因為它每個階段後面都是鯉魚王LV0(警告，這個單位很廢)鯉魚王LV30(警告，這個單位仍然很廢)，直到將它升級成暴鯉龍之後才不會顯示後面的詞綴，強度也是正常的。 　　神奇寶貝防衛戰當時還很簡陋，大概就像我上面介紹的那樣子，並且在加入一些屬性相剋的系統，後代的一些遊戲比如說爐石會有搭配系統，而神奇寶貝防衛戰就我所知應該是沒有的，使得遊戲一開始很新鮮，但玩久之後就缺乏深度，但是真的很好玩，我記得當初我有個朋友看到名稱叫做「神奇寶貝防衛戰」還萬般排斥，但玩了之後卻直喊真香。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/MH1qTgN.jpg"
loading="lazy"
alt="img"
>&lt;/p>
&lt;ol start="7">
&lt;li>
&lt;p>越獄&lt;/p>
&lt;p>　　這個遊戲其實算是鬼抓人的變體，但它改了太多的東西。遊戲方式是分成警察組 （兩人）與小偷組（八人），在一個城鎮裡面警察抓小偷，警察一開始擁有遠高小偷的火力，而小偷則是要在整個城市中逃竄，努力壯大自己，比如說去遠方的島嶼學習仙人術，或是進到城鎮底層變成血高傷痛的狂人最後攻進警察總部裡面殺死警察。遊戲裡面的地圖真的做的很棒，公園區、銀行區、森林區、市集區，比較常見的開局就是所有人進場分成搶劫組與修練組，搶劫組一開場就先去搶銀行，然後把金錢分給修練組的玩家，修練組的玩家在趕緊花錢購買裝備、拜師學藝，後面在反殺警察。而我最常的玩法就是偷偷地躲進森林區，利用物件把自己卡進森林裡面，在裡面蓋一個小型市集，當仲介商，負責造錢給其他玩家或是幫忙買東西。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/LolsGrV.jpg"
loading="lazy"
alt="img"
>&lt;/p>
&lt;ol start="8">
&lt;li>水之TD、守城遊戲&lt;/li>
&lt;/ol>
&lt;p>　　TD遊戲自從魔獸三沒落後，好長一段時間都沒有什麼類似的遊戲，雖然市場上陸陸續續都有在更新類似的遊戲，但總給人不溫不火的感覺。但在當時，TD類型的遊戲可謂是魔獸的大宗，舉凡元素TD、守望女神TD、害人守塔之類的TD遊戲佔據了小遊戲圖的半邊天。這類型的遊戲就是在固定的路線上製作防禦設施，目標就是在敵軍抵達終點前消滅它們。 　　而其中我最喜歡的TD守城就是水之TD，單純就只是這款特別簡單而已，而且操作也不複雜，而有其中一小關，我不確定是不是第64關，敵方是一群坦克，每次玩到這關的時候我都會在語音裡面大喊天安門事件。 　　守城遊戲則是占據了魔獸小遊戲圖的另外半邊天，這種遊戲類型會讓玩家扮演一名英雄，可能是魔獸爭霸裡面的，或者是某些動漫作品裡面，接著敵方會依照波次派遣軍隊過來攻擊我們的主堡，而我們的目標就是守住，地圖上會有商店、野怪、練功區之類的地方，讓玩家可以快速升級刷錢代表類型有：火影忍者的羈絆、神之墓地、守護女神之類的。 　　說起來好笑，這類型遊戲我覺得最大的樂趣就是無腦，遊戲裡面的角色初期大概就可以學一堆技能，舉凡分身術、劍刃風暴、大玉螺旋丸之類的大範圍高傷害技能，且攻速都快的離譜，每隻角色看起來都像本多開大一樣，所以常常看到自己的角色在練功場刷怪，只要怪一重生就立刻被秒掉，頗有現在免洗手遊的味道在裡面。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/lLmXYGc.jpg"
loading="lazy"
alt="img"
>&lt;/p>
&lt;ol start="9">
&lt;li>
&lt;p>術士大戰&lt;/p>
&lt;p>​ 這應該是這個表單裡面最冷門的一款吧，因為這款出的時候差不多2012，當時GGC的魔 獸房已經不用黃金會員就能擠進去了，玩魔獸的人銳減，使得這款遊戲並沒有獲得太多人的注意。遊戲玩法講簡單一點就是推人出去，地圖會越來越小，只要被推出去就會扣血，而玩家可以用許多技能讓攻擊對手，比如說火球術，被丟中就會後退，或是滾石術，擲出一個巨大的滾石，被擊中後就會被滾石的模組推著往外滾，也有一些技能比如說鎖鏈，可以勾住敵人並且扣血，或是勾住場上的物件讓自己勾回場上，而我發明的一種方式就是用滾石術配上鎖鏈，這樣子敵人一方面被滾石往外推，另一方面又被鎖鏈牽扯住受到持續傷害，四字「高手境界」。 　　而遊戲裡面還有更多更多的技能與道具可以使用，只可惜玩的人並不多而已。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/alyoxTr.jpg"
loading="lazy"
alt="img"
>&lt;/p>
&lt;ol start="10">
&lt;li>
&lt;p>侏儸紀公園&lt;/p>
&lt;p>　　這張地圖也是我之所以想寫這篇文章的原因，這張圖我認為是小遊戲之王也不為過。遊戲方式是一群人降落在一個叢林裡，然後找尋一個適合自己的地方，築起電網、電牆，蓋起機槍哨塔之類的防禦設施，然後發展各種學院，比如說物理學院、機械學院、生物學院之類的，升級成激光哨塔、火箭炮塔、核子電牆之類的，甚至還能養恐龍，或是學習武術技巧與成年雷克斯暴龍PK。我會覺得這張地圖很好玩的原因，是因為這不像是鬼抓人那種類型遊戲，會給妳很多看起來就很適合蓋的地點，在侏儸紀公園裡面，很多時候你蓋的地方可能只有幾棵樹木當成天然屏障，很容易就會有小恐龍穿進縫隙進到你的家園，或是大型恐龍倒地後會使得樹木倒塌，門戶洞開。且遊戲裡面的氛圍營造的很好，大型恐龍在附近的時候會聽到許多恐龍的低吼聲，靠近的時候整個畫面會震動，我記得我小時候玩的時候覺得超恐怖的。而遊戲發展到後期，救援直升機就會抵達叢林，這時候我們就需要用我們之前研究的科技，比如說車輛或是機械部隊，殺出一條血路，搭上直昇機逃離這個侏儸紀公園。 　　綜合來說，侏儸紀公園是一張結合了生存、發展、營造、合作、探索的超強遊戲，簡陋的畫面仍然無法遮掩它極佳的遊戲性，缺點也是有的，首先成長期實在太久，雖然遊戲的時間可以選擇要30、60還是90分鐘，但過低的遊戲時數基本上沒辦法撐過最後一波的恐龍大進攻，使得玩家通常都是選擇60分鐘為一局，且遊戲裡面的物理學院實在太強，各種高科技設施和防禦工程，使得其他學院的技術就有點娛樂性質，但整體來說絕對是魔獸爭霸小遊戲的王者當之無愧。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/mh13cQV.jpg"
loading="lazy"
alt="img"
>&lt;/p>
&lt;ol start="11">
&lt;li>
&lt;p>東京甩狗&lt;/p>
&lt;p>​ 太多人說要加東京甩狗了，趁有空的時候打一打。東京甩狗這遊戲有點複雜，其實很像團康遊戲的氣球爆在誰手上。地圖是一個空曠的場地，約有八名玩家，會有其中一名玩家持有球，而地圖上會有一隻「狗」去抓拿球的人，被追到就死了。 而這遊戲叫做東京甩狗的原因就是因為狗的運動方式不是直線，而是有點像甩尾一樣的方式靠近持球者，持球者「甩狗」的時間越久，則接下來把球丟給下一個人的時候，狗的速度就會變超快的衝向下一個人，而且背景也會有龜派氣功的集氣聲，配合上背景音樂的Linkin park -faint ，讓場面充滿緊張刺激的氣氛！&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h1 id="後語">後語：&lt;/h1>
&lt;p>這十大遊戲是我心目中的排名，不一定符合大多數人的看法 　　大概兩年前自走棋剛出來暴紅的時候讓我蠻震驚的，因為我好像十幾年前就玩過類 似的遊戲，當時就覺得怎麼一群人還在玩我小時候玩的遊戲還不亦樂乎？後來回顧了一下許多魔獸爭霸的小遊戲，其實都頗具潛力，比如說跳跳球就可以做成像Fall guys的同樂遊戲，越獄改一改其實也是另一種型態的非對稱競技、蓋塔生兵其實也可以做成像是全戰那種類型的RTS、侏儸紀公園如果用現在的技術重製的話應該也能掀起一波恐龍生存熱潮? 全部看完下來其實還有很多遊戲想要列上去，比如說臺灣人自己開發的EoU(End of Upotia)，也算大作，只可惜最後沒在更新，當時我還有記下我的登入碼。還有各種動漫人物大亂鬥、藍綠大戰、小兵的故事、卡牌大戰、勾肥大戰、亡者之夜、狼與羊、還有最白癡的誰是智障、強者大戰、海綿寶寶溜冰、歐洲大戰、坦克大戰、東京甩狗、神鬼戰士、你畫我猜、達爾文進化島、船難求生、森林大逃亡之類的，每款遊戲放到現在都是遊戲性很高的作品，當初淬鍊重生出來時，我以為會再掀起一波魔獸熱潮，結果淬鍊重生整個大爆死，最後不了了知。 想來寫一下這篇文章，原本是預計做成影片的形式的，但無奈很多地圖我都 已經找不到載點，BattleNet上面也都沒有活人、GGC老早也把連機房停掉了，現在要連的話好像也只能透過中國的平台連，無奈我有點懶得去理解要怎麼註冊，也怕註冊後根本沒人玩這些小遊戲，後來前陣子PTT開放註冊，就決定還是用寫文章的方式紀念一下這個陪伴 我國高中生活的遊戲。&lt;/p></description></item><item><title>Bioshock3心得</title><link>https://hoxtonhsu.com/p/bioshock3%E5%BF%83%E5%BE%97/</link><pubDate>Sat, 08 Oct 2022 03:02:43 +0800</pubDate><guid>https://hoxtonhsu.com/p/bioshock3%E5%BF%83%E5%BE%97/</guid><description>&lt;img src="https://i.imgur.com/h13vjaO.png" alt="Featured image of post Bioshock3心得" />&lt;h1 id="無雷心得">無雷心得： 　&lt;/h1>
&lt;p>2013年的作品了，最近特價才把它買回來玩，如果要講無雷心得的話，我會建議遊戲直接開最低難度就好，然後留聲機(遊戲裡面的文本訊息)多收集，沒有字幕，但是點進去會有逐字稿，強烈建議看一下，不要像我一樣什麼都沒看，會有蠻多地方不太清楚的，無雷心得我就講到這邊，因為這遊戲的劇情只要稍微提一下就會有暴雷的成分，遊戲時長約為10小時，算是很短了，推薦嗎？推薦，因為超多人都說劇情很神，300元當作看一場電影也不虧，適合你周末時買來玩。&lt;/p>
&lt;h1 id="有雷心得">有雷心得：&lt;/h1>
&lt;p>​ 其實原本是想打魂類遊戲心得的，但寫一寫發現怎麼寫都不喜歡，就決定來寫生化奇兵無限的心得，我劇情放在最後講，先講遊戲性的部分。 　&lt;/p>
&lt;p>生化奇兵的遊戲性如果要我給個分數的話，我應該會給40~50分吧，不及格的原因是因爲我在玩的時候沒有一瞬間是覺得戰鬥是有趣的，會覺得不好玩的原因有以下幾點&lt;/p>
&lt;ol>
&lt;li>
&lt;p>遊戲能攜帶的槍枝種類只有兩種&lt;/p>
&lt;p>雖然說大部分的FPS遊戲，能攜帶兩種槍枝算是基本設定，但由於我全程都是以最高難度的過程中，把子彈打空是家常便飯的事情，但遊戲裡面的特殊單位，比如說機甲華盛頓、大猩猩機器人等等，沒什麼難的，就只是血特別多，雖然說機甲華盛頓背後好像有啥弱點可以打的，但敵方目標全程都是鎖定在玩家身上，能繞背的場景真的太少，有時候打一打就沒子彈了，就必須得全場一直撿子彈，但這遊戲也沒有現在遊戲常見的滑鏟或是奔跑等要素，總是會覺得移動起來不夠俐落，很容易就變成靶子被敵人亂槍掃射，這也是為什麼 我會建議遊戲用簡單模式玩就好，痛苦太多，收穫太少，能簡單大家都不想複雜。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>遊戲的魔法都沒啥用&lt;/p>
&lt;p>我不確定這是不是我個人的感覺，但我感覺這遊戲的魔法有用的真的沒幾個，我最常用的應該就是把敵人吹起來的，還有把敵人吹走的，剩下什麼控制心靈、火球術之類的，在魔力條有限的情形下，不如控場住對面然後瞄頭射擊來的更有效率，魔法這個系統，以我自己的觀點來看，雖然沒有到「刪了也沒差」的程度，但確實沒有給我帶來太多顯著性的幫助，我期望的魔法，雖不像Dishonored那樣無所不行，但至少應該也要做到像隻狼的忍具那樣，不用不會怎樣，但用了會很不一樣，有看過人家抱怨，說是這代把魔法系統閹割掉太多，前幾代魔法很有用之類的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>遊戲的敵方設計不夠有趣&lt;/p>
&lt;p>我破完這遊戲大概快兩個月了，我憑印象想到的敵人，就是普通士兵、機甲華盛頓、猩猩機器人，這三個的差別就是，會開槍；會開槍然後血很厚；會開槍然後血很厚還會衝過來扁你，其實差別並不大，所以我在玩高難度的時候腦袋基本上是放空狀態的，我不太需要知道我眼前的敵人有什麼弱點，或是要怎麼應對，我需要的就是不停開槍而已，講白話一點就是，我在打我的，敵人在打他的，我跟敵人沒有什麼太多互動的機會，我會希望我跟敵人之間更有互動，比如說可以打掉華盛頓的手臂，它的槍砲會掉落，然後會轉身去撿，我可以順便射背後，諸如此類的設計，讓戰鬥過程有點動腦的感覺。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>　　另外我常常在心得裡面看到有人說，伊莉莎白是他所見過，最栩栩如生的同伴，說她不止會丟補丟槍丟丟銅仔，還會針對場景中的物品互動。有可能是因為我玩的是最高難度，因此伊莉莎白大部分對我的幫助都還好，沒有真正意義上的幫助到我，更多時候她就開場丟了一個補之後就躲在掩體後面，然後掛機看我輸出。我會更希望伊莉莎白能做一些更積極性的行為，讓我感覺到她有在跟我冒險的感覺，說白了一點就是希望她可以像龍族教義的pawn一樣，能輸出能壓制能開戰，或者是像COD一樣會跟著玩家一起站在前線，我「個人」會更喜歡伊莉莎白一點，當然也許伊莉莎白不敢弄髒自己的雙手，只敢把子彈丟給布克叫他開槍，降低自己的罪惡感。&lt;/p>
&lt;p>　　最後要講的是劇情，我就先講了，我不太滿意，這原因可能有兩個，一個是因為我懶，遊戲裡面，不能說有大量的，但確實是有一定數量的留聲機散落在地圖各處，這些留聲機有的重要，有的又不太重要，在播放的時候也沒中文字幕，只能點進去留聲機裡面才能看到 歷史文本，我「個人」，再次強調我「個人」不太喜歡這種把劇情放進收集要素裡面的系統，因為這種系統一來是很麻煩，沒有提示我又要去找，又可能是反過來，我根本不知道有這個留聲機的存在，變成我每次撿到的留聲機都是隨緣的，他們可能是對於某個歷史事件、或是某個人物的介紹，但因為我漏掉了某個留聲機，我就不能知道這件事情、這個人到底從頭到尾發生了什麼事，比如說遊戲裡面的兄妹的背景故事有很大一部分就是藏在留聲機裡面，也是留聲機揭露出了他們不是兄妹，而是兩個平行時空的同一個人，只是性別不同罷了。&lt;/p>
&lt;p>　　有些人可能會很喜歡這種自己收集物品來拼湊故事的敘事方式，但我真的很抱歉我不是那麼優秀的人類，我會更希望隨著劇情，他會把那些文本直接丟給我。&lt;/p>
&lt;p>　　接下來要講結局，誠如我上面說的，我對於劇情，其實應該是說結局不太滿意，我會講一下我認為的好結局（魔女之家以及我個人認為的伏筆應該要怎麼樣會比較好（屍人莊殺人事件），如果有人沒有玩過魔女之家、沒有看過屍人莊殺人事件的朋友也可以先迴避一下。&lt;/p>
&lt;p>　　平心而論，生化奇兵３的前面鋪成是很好的，至少它解釋了伊莉莎白的能力起源，以及布克夢中的神祕敲門客時，我確實是有感覺到一點東西的，然後當最後伊莉莎白的限制器被解除，剎那間她超脫世界上所有一切，僅用轉瞬之間就洞悉了宇宙的光陰，過去發生的 ，現在存在的，未來注定的一切，全知全能的伊莉莎白。她帶著布克走進了燈塔，然後燈塔裡有更多的布克與伊莉莎白交錯來回走在不同的燈塔裡，「所有的一切都在不停地發生，但每次都會有些許不同」，伊莉莎白帶著布克回顧了故事開始的源頭．．．當布克了解一切後，要求伊莉莎白讓他殺死康斯姆托克，終結這一切，伊莉莎白眼裡閃過一絲猶豫，但最後還是打開了一扇新的大門，回到布克接受洗禮的那一天，布克不解，轉過身後發現有無數個伊莉莎白站在背後「所有的一切都在不停地發生，但每次都有些許的不同，現在的你，當時拒絕了洗禮，選擇背負自己的罪生活下去。但另一個時空的你，選擇忘記這一切，以康斯姆托克之名重生」，接著伊莉莎白們抓住了布克，在初始洗禮池之處淹死了布克，接著就結局。&lt;/p>
&lt;p>　　我會不滿這個結局的原因是因為，這個結局太快了，幾乎是在講完布克就是康斯姆托克，如果能帶一些畫面，說明康斯姆托克就是布克的一些伏筆會更好。比如說魔女之家的真結局，雖然不是100%相似，但都是在結局最後有一個大爆點，而這個大爆點可以貫穿整個遊戲，解釋所有的一切，當薇奧拉轉頭踢了魔女一腳，並說出「你煩不煩阿，這副身體已 經是我的了」的瞬間，在配合上後面的對白「雖然換了身體，但這棟房子還是知道誰才是真正的主人」，剎那間玩家就會回憶起所有在房子裡看見的「身體轉移祕法」「毒啞人的方法」到底是做什麼用的。但生化奇兵3的結局我並沒有這樣的感覺，遊戲過程中，我感覺不太到康斯姆托克與布克的關聯性在哪裡，他們語氣不同，外貌也不相似，也沒有一些共有的小習慣之類的，換言之，康斯姆托克跟布克的關聯性根本不高，這也有可能是因為遊戲中時不時在暗示你康斯姆托克不僅僅是康斯姆托克，比如說他預言了偽牧羊人、知道伊莉莎白的指頭，使得玩家很容易對他的背景有些預設立場，就有點像是看魔術時，大家的焦點都會注意在那杯被魔術師蓋起來的杯子一樣。我認為的一個好的伏筆，是屍人庄殺人事件，在故事的開頭主角戲水時把身上帶著的懷錶放在涼亭處，並要同學看好它，這件事情就只是一個很日常的描寫而已，但在故事的最後，在抓殺人嫌犯時，大家的報時都是1點32分、2點57分這樣精準的時間時，只有男主是說1點半左右，原因無它，因為旅館房間的時鐘都是電子式的，而當時男主根本不在房間裡，只能透過指針式的懷表查看時間，才會說出1點半這個模糊的答案。&lt;/p>
&lt;p>　　以上的內容濃縮起來就是，康斯姆托克的身份的伏筆不太好，結局也太快進結局，沒有適當的鋪陳告訴玩家為什麼康斯姆托克要是，且必須是布克。&lt;/p>
&lt;p>　 回顧整個遊戲，其實最讓我覺得很棒的伏筆是遊戲一開始進入哥倫比亞時，兄妹倆人 會要你猜人頭還是字，當你做出選擇後，哥哥會拿出一個早已畫上許多記號的記分板再加上新的一筆，但當你破完後再回頭看這段，會發現那些計分板上的痕跡，就是許多平行世界的布克都曾經猜過硬幣，都曾經在這計分板上畫上過一筆。 　　&lt;/p>
&lt;p>最後講一下結論，心得這種東西因人而異，我講的也只是我的看法而已，大家生長環境的解讀有出入是很正常的事情，我知道很多人都說生化奇兵3的劇情很神之類的，但我玩過之後真的覺得還好，我盡量把我覺得不滿意的地方寫出來，讓大家知道我不滿意的地方 在哪裡，僅代表個人意見而已。很多人覺得很爛的FF15我卻覺得結局很不錯，大家狂推的槍彈辯駁2我也覺得真的很神，綜上所述，如果還是有人對我有意見的話，我只想說「很抱歉，我就是爛，玩魔物獵人、惡魔獵人這種不用動腦的遊戲就好，不應該玩這種劇情遊戲」&lt;/p></description></item><item><title>作業系統筆記</title><link>https://hoxtonhsu.com/p/%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1%E7%AD%86%E8%A8%98/</link><pubDate>Sat, 08 Oct 2022 03:02:43 +0800</pubDate><guid>https://hoxtonhsu.com/p/%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1%E7%AD%86%E8%A8%98/</guid><description>&lt;img src="https://i.imgur.com/HJLk11O.png" alt="Featured image of post 作業系統筆記" />&lt;p>[TOC]&lt;/p>
&lt;h1 id="chapter1-intruduction">Chapter1 Intruduction&lt;/h1>
&lt;p>管理硬體的軟體就是作業系統，硬體包含CPU，Memory，I/O設備等等…作業系統就是負責管理這些硬體的系統。一個電腦系統可以被粗略的劃分成下面四個組件：&lt;/p>
&lt;ul>
&lt;li>硬體(hardware)&lt;/li>
&lt;li>作業系統(operating system)&lt;/li>
&lt;li>應用程式(application programs)&lt;/li>
&lt;li>使用者(user)&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/PZiePn0.png"
loading="lazy"
alt="image-20220918222340597"
>&lt;/p>
&lt;h2 id="hardware">Hardware&lt;/h2>
&lt;p>包括CPU(Central Processing Unit)，記憶體(Memory)，Input/output設備…提供給系統基本的計算資源&lt;/p>
&lt;h2 id="operating-system">Operating System&lt;/h2>
&lt;p>負責協調硬體與應用程式，給不同的使用者&lt;/p>
&lt;h2 id="application-programs">Application Programs&lt;/h2>
&lt;p>例如Word，Excel，Chrome之類的應用程式，來處理使用者的計算問題(Computing Problems)&lt;/p>
&lt;p>補充：&lt;/p>
&lt;ol>
&lt;li>Bare Machine(裸機): 純粹只有硬體組成，沒有OS及System Programs&lt;/li>
&lt;li>Extended Machine: Bare Machine加上OS/system programs&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/inlIZJo.png"
loading="lazy"
alt="image-20221029143145761"
>&lt;/p>
&lt;ul>
&lt;li>In Memory
&lt;ul>
&lt;li>Command Interpreter(命令解譯器)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="multiprogramming-system">Multiprogramming System&lt;/h2>
&lt;ol>
&lt;li>定義：系統允許多個Jobs(Process)同時執行，即是Multiprogramming&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>主要目的：提高CPU Utilization&lt;/li>
&lt;li>作法：透過Job Scheduling or CPU Scheduling技術達成&lt;/li>
&lt;/ul>
&lt;p>example：當執行中的process waiting for I/O completed, 則OS可將CPU切換給另一個process執行，避免CPU idle 。&lt;/p>
&lt;p>即只要系統內有夠多的工作存在，則CPU IDLE的機會就下降&lt;/p>
&lt;ol start="2">
&lt;li>Mulitiprogramming Degree之定義&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>系統內的Process的數目：一般而言，Degree越高，CPU利用率就越高。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>(Note：Virtual Memory Thrashing狀況除外)&lt;/strong>&lt;/p>
&lt;ol start="3">
&lt;li>
&lt;p>多個Process的定義、以及如何執行&lt;/p>
&lt;ol>
&lt;li>Concurrent execution(並行)：一顆CPU，大家一起輪番使用&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/JUSKW04.png"
loading="lazy"
alt="image-20221102220045970"
>&lt;/p>
&lt;ol>
&lt;li>Parallel execution(平行)：多顆CPU或是Multi-core(多核)，各自執行&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/CELncNq.png"
loading="lazy"
alt="image-20221102220202298"
>&lt;/p>
&lt;h2 id="time-sharing-system">Time-Sharing System&lt;/h2>
&lt;p>分時系統&lt;/p>
&lt;p>定義：又叫Multitasking[恐龍本如是說]&lt;/p>
&lt;blockquote>
&lt;p>It&amp;rsquo;s a logical extension of Multiprogeamming system&lt;/p>
&lt;/blockquote>
&lt;p>與Multiprogramming的最大差異：&lt;strong>CPU的切換頻率極高&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Time-Sharing System features&lt;/p>
&lt;ul>
&lt;li>強調對&lt;strong>User Response的時間&lt;/strong>要&lt;strong>短&lt;/strong>(&amp;lt;1秒)&lt;/li>
&lt;li>適用於user interactive的Computing/ Environment&lt;/li>
&lt;li>對每一個process都公平&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Main Frame(主機)&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/dHbi3Pr.png"
loading="lazy"
alt="image-20221102223550343"
>&lt;/p>
&lt;ul>
&lt;li>CPU Scheduling採取RR的排班法則(第四章會介紹)&lt;/li>
&lt;li>使用Virtual Memory的技術，擴展Logical Memory Space&lt;/li>
&lt;li>使用Spooling的技術(不太會考)實現I/O Device的共用，類似現代的Buffering技術，讓每個user，皆以為自己有專屬的的Computer&lt;/li>
&lt;/ul>
&lt;h2 id="multiprocessors-system">Multiprocessors System&lt;/h2>
&lt;p>定義：又叫Multiprocessing or Paraller or Tightly-coupled system(緊密耦合系統)&lt;/p>
&lt;p>faeture：&lt;/p>
&lt;ol>
&lt;li>一個機器(or MotherBoard)內，有多個Processors(or CPUs)&lt;/li>
&lt;li>這些CPUs彼此共享此機器的Memory,Bus,I/O-Device, power-supplier etc&amp;hellip;&lt;/li>
&lt;li>通常受同一Clock之時脈控制&lt;/li>
&lt;li>由同一個OS管理&lt;/li>
&lt;li>processors之間的溝通大都採shared Memory方式&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/hvugyDq.png"
loading="lazy"
alt="image-20221106193948248"
>&lt;/p>
&lt;p>Benefits(好處)：&lt;/p>
&lt;ol>
&lt;li>Increased Throughput：產能增加&lt;/li>
&lt;li>Increased Reliability：可靠度的提升&lt;/li>
&lt;li>Economy Of Scale：運算能力的擴充比較好&lt;/li>
&lt;/ol>
&lt;p>　分析如下：&lt;/p>
&lt;p>&lt;strong>Increased Throughput：&lt;/strong>&lt;/p>
&lt;p>可支持多個工作在不同CPU上平行執行(paraller Computing)，&lt;strong>注意，N顆CPU之產能絕對小於1顆CPU產能xN倍&lt;/strong>，意即CPU數量的提升與產能的提升並非線性成長。原因是因為&lt;/p>
&lt;ol>
&lt;li>Resource Contetion(資源的競爭)&lt;/li>
&lt;li>Processors間的Communication會抵消產能&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Increased Reliability:&lt;/strong>&lt;/p>
&lt;p>某一顆CPU壞了，則System不會因此而停頓，因為其他CPU仍可運作&lt;/p>
&lt;ol>
&lt;li>Graceful degradation(漸進式的滅亡)&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>System不至因為某些Hardward/Software之元件故障而停頓，仍然保有持續運作的能力，這性質就稱為fail-soft&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>
&lt;p>Fault-Tolerant system(容錯系統)&lt;strong>考試不太會考&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>具有graceful degradation性質之系統就叫做Fault-Tolerant system，想要達成容錯的技術需要有兩件事情的支援&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>要有backup的系統，切換也要流暢&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Economy of Scale:&lt;/strong>&lt;/p>
&lt;p>運算能力擴充符合經濟效益&lt;/p>
&lt;ul>
&lt;li>∵N顆CPU在一部機器內，與N部機器相比，成本較便宜∵這些CPUs共享同一機器之Memory, Bus, I/O-Device, etc&lt;/li>
&lt;/ul>
&lt;h3 id="two-subtype-in-multiprocessors-system">Two SubType in Multiprocessors System&lt;/h3>
&lt;ol>
&lt;li>SMP(Symmetric MultiProcessors) 對稱的&lt;/li>
&lt;li>ASMP(Asymmetric MultiProcessors) 非對稱的&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>SMP&lt;/strong>&lt;/p>
&lt;p>定義：每個Processor的工作能力是相同的(Identical)，且每個CPU都有對等、平等的權利來存取資源&lt;/p>
&lt;p>優點：&lt;/p>
&lt;ol>
&lt;li>可靠度較ASMP高，因工作能力相同，即使其中一個cpu掛了也可以被立刻取代&lt;/li>
&lt;li>效能較高&lt;/li>
&lt;/ol>
&lt;p>缺點：&lt;/p>
&lt;ol>
&lt;li>SMP的OS設計開發較為複雜(互斥存取的機制設計,資源的競爭)&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>ASMP&lt;/strong>&lt;/p>
&lt;p>定義：每個Processor之工作能力&lt;strong>不盡相同&lt;/strong>，通常是採取&lt;strong>Master-Slave&lt;/strong>的架構(恐龍本有時候會寫成Boss-Employee&lt;/p>
&lt;p>Master-Processor負責工作分派及資源分配，監督Slaves等管理工作&lt;/p>
&lt;p>Slave Processors負責執行工作&lt;/p>
&lt;p>優點：ASMP的OS設計開發較為Simple，∵與Simple-Cpu Os版類似&lt;/p>
&lt;p>缺點：&lt;/p>
&lt;ol>
&lt;li>可靠度低，Master CPU如果壞了，就會停擺，直到另一顆CPU被Train接手&lt;/li>
&lt;li>效能較低∵Master CPU是瓶頸&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/wo1RhWy.png"
loading="lazy"
alt="image-20221108212149764"
>&lt;/p>
&lt;h3 id="multiprocessors-system-vs-multicores-cpu">Multiprocessors System VS MultiCores CPU&lt;/h3>
&lt;p>從作業系統來看差異不大，主要差異是&lt;strong>硬體的差異(主要)&lt;/strong>，以OS來看，你裝了一顆兩核的CPU，OS會視作兩顆CPU；裝四核的視作四顆CPU&lt;/p>
&lt;ol>
&lt;li>MultiProcessors&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/BhjZbvk.png"
loading="lazy"
alt="image-20221108214627937"
>&lt;/p>
&lt;ol start="2">
&lt;li>MultiCores CPU&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/HNuJgLM.png"
loading="lazy"
alt="image-20221108214639509"
>&lt;/p>
&lt;p>優點&lt;/p>
&lt;ol>
&lt;li>Power Saving：相較MultiProcessor，在一個CPU上提供兩個Core的能源耗損會比在一張板子上提供兩顆CPU的能源耗損還來得低。&lt;/li>
&lt;li>Speed比較快(∵處在同一個晶片內資料傳輸速度較快)&lt;/li>
&lt;/ol>
&lt;h2 id="distribute-system">Distribute System&lt;/h2>
&lt;p>定義：又叫Loosely-Coupled system(鬆散耦合系統)，主要的Feature如下&lt;/p>
&lt;ol>
&lt;li>
&lt;p>多部機器彼此透過Network(or Bus)相互串連&lt;/p>
&lt;/li>
&lt;li>
&lt;p>每部機器之CPU有各自私有的Memory, Bus, I/O-Device, etc 並非共享&lt;/p>
&lt;/li>
&lt;li>
&lt;p>各CPU之Clock時脈控制不一定相同&lt;/p>
&lt;/li>
&lt;li>
&lt;p>各CPU上之OS也不一定相同&lt;/p>
&lt;/li>
&lt;li>
&lt;p>各Processors之間的溝通大都採**&amp;ldquo;Message Passing&amp;rdquo;**方式&lt;/p>
&lt;blockquote>
&lt;p>Message Passing (類似講電話)&lt;/p>
&lt;p>Step&lt;/p>
&lt;ol>
&lt;li>建立Communication Link&lt;/li>
&lt;li>Message 相互傳輸&lt;/li>
&lt;li>釋放Link&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/6gSkGlg.png"
loading="lazy"
alt="image-20221110232152377"
>&lt;/p>
&lt;h3 id="advantage-of-distribute-system">Advantage of Distribute-System&lt;/h3>
&lt;ol>
&lt;li>Increased Throughput(支持Paraller Computing)&lt;/li>
&lt;li>Increased Reliability(一個掛掉，還有其他可以擋)&lt;/li>
&lt;li>Resource Sharing(資源共享因此成本降低)&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>支持&amp;quot;Client-Server&amp;quot; Computing Model之實施&lt;/p>
&lt;ol>
&lt;li>Server(伺服器)：提供某些服務的機器 example: mail server, file server ,DNS,printer server, computing server &amp;hellip;&lt;/li>
&lt;li>Client：本身不提供服務，且它需要某些服務時，則發請求至Server, Server服務完再將結果回傳Client&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Note&lt;/p>
&lt;p>Peer-to-Peer model：peer意指同時具有server及Client的角色，英文意思是同等的、對等的&lt;/p>
&lt;/blockquote>
&lt;ol start="4">
&lt;li>Remote sites Communication的需求被滿足 example：email, FTP via Internet&lt;/li>
&lt;/ol>
&lt;h2 id="real-time-system">Real-Time System&lt;/h2>
&lt;p>(即時系統)&lt;/p>
&lt;p>分成兩種&lt;/p>
&lt;ol>
&lt;li>Hard real-time System&lt;/li>
&lt;li>Soft real-time System&lt;/li>
&lt;/ol>
&lt;h3 id="hard-real-time-system">Hard real-time system&lt;/h3>
&lt;p>定義：This system must ensure the critical tasks complete on time，即工作必須在規定的時間限制內完成，否則即算失敗&lt;/p>
&lt;p>舉例：軍事防衛系統、核能安控系統、工廠自動化生產&amp;hellip;&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/cPuSbro.png"
loading="lazy"
alt="image-20221114224122357"
>&lt;/p>
&lt;p>設計考量：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>所有時間延遲之因素皆須納入考量&lt;/strong> eg：sensor data 傳輸速度、運算速度、Signal的傳輸 etc，確保這些時間的加總能夠滿足時間deadline的要求&lt;/li>
&lt;li>所有會造成處理時間過久或無法預測之設備或機制，盡量少採用或不用 eg：&lt;strong>Disk&lt;/strong>不用或少用、&lt;strong>Virtual Memory 絕對不採用&lt;/strong>&lt;/li>
&lt;li>就CPU Scheduling設計(Ch4)而言，需先考量Schedulable與否，再進行排程(eg rate-monotonic, EDF scheduling)，確定CPU能負荷再進行排程&lt;/li>
&lt;li>&lt;strong>Time Sharing system 無法與之並存(Time sharing是屬於Multitasking，可以同時執行多個程序，並透過一些風勢去優先執行某些程序，而Hard real-time比較像單運算系統，要求在指定時間內完成，因此更專注於單一程序的執行，由於這兩個系統有這樣的差異，因此無法共榮)&lt;/strong>&lt;/li>
&lt;li>OS所造成的Dispatch latency etc. 宜降低(interrupt的處理, system call的請求)，一般實務上，hard-real-time system，鮮少有OS的存在(幾乎不存在)，尤其是embedded real-time system，因需要&lt;strong>及時的響應&lt;/strong>&lt;/li>
&lt;li>現行的商用OS&lt;u>不支援&lt;/u>Hard real-time features 通常都是客製化的特殊設計eg : Linux, Unix, Window, Apple Os, Solaris etc&lt;/li>
&lt;/ul>
&lt;p>​&lt;/p>
&lt;h3 id="soft-real-time-system">Soft real-time system&lt;/h3>
&lt;p>定義：&lt;strong>This system must ensure the real-time process get the hightest priority than the others and retain(維持) this priority level unit it completed&lt;/strong>&lt;/p>
&lt;p>舉例：Multimedia System, Simulation system, VR system, etc&lt;/p>
&lt;p>設計考量：&lt;/p>
&lt;ul>
&lt;li>就 CPU Scheduling 設計(ch4)而言，
&lt;ol>
&lt;li>必須支持preemptive priority scheduling&lt;/li>
&lt;li>&lt;strong>不可提供Aging技術&lt;/strong>(活得越久，priority越高)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>盡量降低kernel的Dispatch latency time&lt;/li>
&lt;li>可支援virtual memory 並存，但前提是real-time-process的全部pages必須皆待在memory中，直到完工，高優先權的Process不要使用virtual memory&lt;/li>
&lt;li>與Time-sharing system 可以並存，eg：solaris&lt;/li>
&lt;li>一般商用OS都支援Soft-real-time system&lt;/li>
&lt;/ul>
&lt;h3 id="batch-system">Batch System&lt;/h3>
&lt;p>定義：將一些較不緊急，定期性、非交談互動性的Job，累積成堆，再分批次，送入系統處理&lt;/p>
&lt;p>舉例：庫存系統、報稅系統、掃毒、磁碟重組、清算系統&amp;hellip;&lt;/p>
&lt;p>主要目的：提高resource utilization，&lt;strong>尤其是在冷門時段&lt;/strong>，不適合用在real-time-system, user-interactive application eg：電腦遊戲&lt;/p>
&lt;h3 id="hand-held--system">Hand Held system&lt;/h3>
&lt;p>定義：單手可掌握操作的系統&lt;/p>
&lt;ul>
&lt;li>Hardware 天生之限制，帶來software必須配合之處&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Hardware天生限制&lt;/th>
&lt;th>Software必須配合之設計&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;u>Slower&lt;/u> processor&lt;br />(背後之限制)&lt;br />1. power 供應的問題，電供不足&lt;br />2. 散熱系統的設計&lt;/td>
&lt;td>運算不能太複雜，要簡單&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Memory空間有限&lt;/td>
&lt;td>程式的Size要小，不用的記憶體要立刻釋放&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DisplayMonitor很小&lt;/td>
&lt;td>顯示的內容要有所刪減&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="chapter2-computer-system-architecture">Chapter2 Computer System Architecture&lt;/h1>
&lt;h2 id="io-operating-and-hardware-resources-protection">I/O Operating And Hardware Resources Protection&lt;/h2>
&lt;ul>
&lt;li>學習路線&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>I/O運作方式&lt;/p>
&lt;blockquote>
&lt;p>Polling I/O&lt;/p>
&lt;p>Interrupted I/O&lt;/p>
&lt;p>DMA&lt;/p>
&lt;/blockquote>
&lt;p>Interrupt機制處理與種類&lt;/p>
&lt;p>HW Resource Protection&lt;/p>
&lt;blockquote>
&lt;p>基礎建設&lt;/p>
&lt;blockquote>
&lt;p>Dual Model Operation&lt;/p>
&lt;p>Privileged Instruction&lt;/p>
&lt;/blockquote>
&lt;p>I/O&lt;/p>
&lt;p>Memory Protection&lt;/p>
&lt;p>CPU&lt;/p>
&lt;/blockquote>
&lt;/blockquote>
&lt;h2 id="io-operating">I/O Operating&lt;/h2>
&lt;h3 id="polling-io-io">Polling I/O I/O&lt;/h3>
&lt;p>Polling(輪巡,詢問式) I/O&lt;/p>
&lt;p>定義：又叫Busy_waiting I/O or Programmed I/O&lt;/p>
&lt;p>步驟如下&lt;/p>
&lt;ol>
&lt;li>I/O Request 給 OS (執行中的Process不會自己做I/O)&lt;/li>
&lt;li>OS收到請求後，(可能)會暫停此Process執行，並執行對應的System Calls.&lt;/li>
&lt;li>Kernel 的 &lt;u>I/O-subsystem&lt;/u>(專門用來處理I/O的請求，只是個過水而已)會Pass此請求給&lt;u>Device driver&lt;/u>&lt;/li>
&lt;li>Divice Driver 依此請求，設定對應的I/O Commands參數給&lt;u>Device Controller&lt;/u>&lt;/li>
&lt;li>Device Controller 啟動監督I/O-Device之I/O運作進行&lt;/li>
&lt;li>在這段時間內，OS(可能)將CPU切給另一個process執行&lt;/li>
&lt;li>&lt;strong>然而，沒人主動去告訴CPU I/O的執行狀況，因此CPU在執行process工作過程中，卻要不斷去Polling Device Controller，已確定I/O運作是否完成或有I/O error&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/PrvPBLP.png"
loading="lazy"
alt="image-20221116231017998"
>&lt;/p>
&lt;p>缺點：&lt;/p>
&lt;ul>
&lt;li>CPU耗費大量時間用於polling I/O Device Controller上，並未全用於process execute上，故&lt;u>CPU utilization低&lt;/u>、&lt;u>throughput不高&lt;/u>&lt;/li>
&lt;/ul>
&lt;h3 id="interrupted-io">Interrupted I/O&lt;/h3>
&lt;p>Interrupted (中斷,中斷式)I/O I/O&lt;/p>
&lt;p>定義：&lt;/p>
&lt;p>步驟如下：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>I/O Request 給 OS (執行中的Process不會自己做I/O)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>OS收到請求後，(可能)會暫停此Process執行，並執行對應的System Calls.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Kernel 的 &lt;u>I/O-subsystem&lt;/u>(專門用來處理I/O的請求，只是個過水而已)會Pass此請求給&lt;u>Device driver&lt;/u>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Divice Driver 依此請求，設定對應的I/O Commands參數給&lt;u>Device Controller&lt;/u>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Device Controller 啟動監督I/O-Device之I/O運作進行&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在這段時間內，OS(可能)將CPU切給另一個process執行&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>當I/O運作完成，Device Controller 會發出 I/O-Completed Interrupt 通知OS(CPU)&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>OS收到中斷後(可能)會暫停目前Process的執行(因有些Interrupt優先權可能很低，可以先暫時不處理)&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>OS必須查詢 &lt;u>Interrupt Vector&lt;/u>，確認何種中斷發生，同時也要找到該中斷的服務處理程式(ISR：Interrupt Service Routine)的位址(每一個中斷都有一個對應的中斷處理服務程式&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Jump to ISR位址 執行ISR&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ISR完成後，return control to &lt;u>kernel&lt;/u>，kernel也許做一些通知工作&lt;/p>
&lt;/li>
&lt;li>
&lt;p>恢復(resume)原先中斷前的工作執行或交由CPU Scheduler決定&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>優點：CPU&lt;u>不須&lt;/u>耗費時間用於Polling I/O-Device，而是可以用於Process execute上，CPU utilization提升，throughout提高，improve the system performance&lt;/p>
&lt;p>缺點：&lt;/p>
&lt;ol>
&lt;li>Interrupt之處理仍需耗費CPU time，如果 I/O運作時間 &lt;strong>小於&lt;/strong> Interrupt處理時間，則使用Interrupt I/O就不划算，不如使用polling I/O&lt;/li>
&lt;li>若&lt;strong>中斷的頻率過高&lt;/strong>，則大量的中斷處理會占用幾乎全部的CPU Time，則&lt;strong>系統效能會很差&lt;/strong>&lt;/li>
&lt;li>CPU仍需耗費一些時間用於監督I/O-Divice與Memory之間的Data Transfer過程&lt;/li>
&lt;/ol>
&lt;h3 id="dma-direct-memory-access-io">DMA (Direct Memory Access) I/O&lt;/h3>
&lt;ul>
&lt;li>定義：DMA Controller 負責 I/O-Device(設備)與Memory 之間的Data transfer(傳輸)工作，&lt;strong>過程中不需CPU之參與監督，因此CPU有更多時間用於Process execute上&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>優點：&lt;/p>
&lt;ol>
&lt;li>CPU Utilization更高&lt;/li>
&lt;li>適合用在&lt;strong>Block-Transfer oriented &lt;strong>I/O-Device上(代表中斷發生的頻率不致於過高 eg:Disk, 磁碟的控制器會和DMA的控制器兩個會相互合作，磁碟控制器會去指揮磁碟的運作，讀出來的資料會通知DMA的控制器，DMA會把資料輸進Memory裡) 不是用於&lt;/strong>Byte-transger oriented I/O-Device&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>缺點：&lt;/p>
&lt;ol>
&lt;li>引進DMA Controller會增加HW設計複雜度(Complicated the HW design)&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>原因：DMA的Controller會跟CPU競爭爭奪Memory(記憶體)、Bus(匯流排)的使用權，若DMC Controller 占用了memory , Bus 時，CPU要被迫等待&lt;/p>
&lt;p>補充：DMA Controller通常採用&amp;quot;Cycle Stealing&amp;quot;技術 (or Interleaving)與CPU 輪番(交替)使用memory跟Bus，如果CPU與DMA Controller發生conflict(同時要用Memory 與 bus)，則會&lt;strong>給DMA較高的的優先權&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;ol start="2">
&lt;li>
&lt;p>通常系統會給予「對該資源需求量、頻率等較&lt;strong>小&lt;/strong>」的對象有較高的優先權，這樣會獲得&lt;/p>
&lt;ol>
&lt;li>平均等待時間較小&lt;/li>
&lt;li>平均產能較高&lt;/li>
&lt;/ol>
&lt;p>的好處&lt;/p>
&lt;/li>
&lt;li>
&lt;p>機器指令的Stages (CPU執行的幾個階段)&lt;/p>
&lt;/li>
&lt;/ol>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>IF&lt;/th>
&lt;th>DE&lt;/th>
&lt;th>FO&lt;/th>
&lt;th>EX&lt;/th>
&lt;th>WM&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;/table>
&lt;ol>
&lt;li>IF：Instruction Fetch &lt;code>抓指令：根據Programming Counter的值，到記憶體去把指令抓出來 &lt;/code>&lt;/li>
&lt;li>DE：Decode &lt;code>解碼：知道這條指令到底做什麼事情&lt;/code>&lt;/li>
&lt;li>FO：Fetch Operands &lt;code>抓取運算元：運算元可能來自記憶體、也可能來自暫存器&lt;/code>&lt;/li>
&lt;li>Ex：Execution　&lt;code>執行&lt;/code>&lt;/li>
&lt;li>WM：Write Result to Memory　&lt;code>將結果寫入記憶體&lt;/code>&lt;/li>
&lt;/ol>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>CPU會不會Memory Access（到記憶體抓東西）&lt;/th>
&lt;th>DMA要用Memory&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>IF&lt;/td>
&lt;td>會&lt;/td>
&lt;td>衝突(Conflict)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DE&lt;/td>
&lt;td>不會（指令已經拿出來放到IR&lt;code>instructor registor&lt;/code>)&lt;/td>
&lt;td>OK，歡迎&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>FO&lt;/td>
&lt;td>可能 (運算元有可能在Registor，也有可能放在Memory)&lt;/td>
&lt;td>OK，或有衝突&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>EX&lt;/td>
&lt;td>不會 (ALU去做了)&lt;/td>
&lt;td>OK，歡迎&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>WM&lt;/td>
&lt;td>可能 (結果有可能寫回Memory也有可能是暫存器)&lt;/td>
&lt;td>OK，或有衝突&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Cycle Stealing：當CPU會使用或不會使用Memory Access時，DMA都會去爭奪Memory的使用權，亦為Stealing(偷)，因為DMA擁有最高使用權。&lt;/p>
&lt;h3 id="dma-six-steps">DMA Six Steps&lt;/h3>
&lt;p>&lt;code>(早:中央、清華、交大)&lt;/code>&lt;/p>
&lt;ol>
&lt;li>Device Driver &lt;code>User Process 告訴 I/O subsystem(kernel)告訴 Device Driver&lt;/code>is told to transfer Disk data to Buffer address X&lt;/li>
&lt;li>Device Driver tells disk controller to transfer C bytes from disk to Buffer at address X&lt;code>從磁碟讀C byte的量，分配到記憶體位址X的地方&lt;/code>&lt;/li>
&lt;li>Disk controller initiates DMA Transfer&lt;/li>
&lt;li>Disk controller sends each byte to DMA controller&lt;/li>
&lt;li>DMA transfer bytes to Buffer X in creasing memory address and decreasing Counter utill Counter =0&lt;/li>
&lt;li>When C=0, DMA interrupts CPU to signal transfer compeletion&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/0T7eX0t.png"
loading="lazy"
alt="image-20221119122438718"
>&lt;/p>
&lt;h3 id="life-cycle-of-io-request-via-interrupted-io">Life cycle of I/O-request via Interrupted I/O&lt;/h3>
&lt;p>&lt;img src="https://i.imgur.com/nDEmUKK.png"
loading="lazy"
alt="image-20221119161000584"
>&lt;/p>
&lt;h3 id="blocking-and-non-blocking-io">Blocking and Non-Blocking I/O&lt;/h3>
&lt;p>Blocking(會暫停的) and Non-Blocking(不會暫停的)I/O&lt;/p>
&lt;blockquote>
&lt;p>所謂的Blocking的意思是，當User process發出I/O請求之後，接下來這個prcess就會suspend，直到這個I/O被完成&lt;/p>
&lt;/blockquote>
&lt;h4 id="blocking-io">Blocking-I/O:&lt;/h4>
&lt;p>(等於Synchronous)：Process suspended until I/O completeed&lt;/p>
&lt;ul>
&lt;li>優：Easy to use and understand, process在waiting的時候，可以把CPU放出去給其他process做使用&lt;/li>
&lt;li>缺：Insufficient for some needs&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/WXgFJ0f.png"
loading="lazy"
alt="image-20221119221052160"
>&lt;/p>
&lt;h4 id="non-blocking-io">Non-Blocking I/O：&lt;/h4>
&lt;p>I/O calls returns as much as available &lt;strong>I/O請求發出去後，控制權立刻返回給user process&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>example：user interface, data copy&lt;/li>
&lt;li>Implemented via multi-threading&lt;/li>
&lt;li>&lt;strong>Returns quickly with count of Bytes read or written&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h4 id="asynchronous-io">Asynchronous-I/O:&lt;/h4>
&lt;p>(屬於Non-blocking)：Process runs while, I/O executes&lt;/p>
&lt;ul>
&lt;li>Difficult to use&lt;/li>
&lt;li>I/O subsystem signals process when I/O-completed&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/Z3p4rBK.png"
loading="lazy"
alt="image-20221119221104281"
>&lt;/p>
&lt;h4 id="asynchronous與non-blocking的小差異">Asynchronous與Non-Blocking的小差異&lt;/h4>
&lt;p>Asynchronous I/O：整個I/O完成，才通知Process&lt;/p>
&lt;p>Non-Blocking I/O：I/O完成Data return as much as possible (能回傳就回傳， 少量即可回傳)&lt;/p>
&lt;p>舉例說明：userProcess發出100 byte的I/O請求&lt;/p>
&lt;ul>
&lt;li>Asynchronous的方式，會將100byte的I/O做完後，才告訴Process做完了&lt;/li>
&lt;li>Non-Blocking的方式，每讀25Byte就通知一次， 逐步回報給Process，會發出比較多次的Interrupt&lt;/li>
&lt;/ul>
&lt;h2 id="interrupt-policy-and">Interrupt Policy and&lt;/h2>
&lt;ol>
&lt;li>當Interrupt發生，OS之處理Steps如下：
&lt;ol>
&lt;li>OS收到中斷後(若此中斷要被立即處理，則OS會暫停目前Process之執行，且保存其Status and Registers Contents)&lt;/li>
&lt;li>OS會依照Interrupt ID(No.)查詢Interrupt Vector中斷向量表，確認何種Interrupt發生，且找出其ISR的位址&lt;/li>
&lt;li>Jump to ISR 位址，執行ISR&lt;/li>
&lt;li>ISR完成後，控制權返回Kernel&lt;/li>
&lt;li>OS會恢復(resume)中斷之前Process之執行&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/fWGVXob.png"
loading="lazy"
alt="image-20221121000410540"
>&lt;/p>
&lt;ol start="2">
&lt;li>
&lt;p>Interrupt種類&lt;/p>
&lt;ol>
&lt;li>
&lt;p>早期恐龍分為三種&lt;/p>
&lt;ol>
&lt;li>External Interrupt：CPU以外的周邊設備、控制卡、etc，所發出的中斷&lt;/li>
&lt;/ol>
&lt;p>例：I/O-Completed, I/O-error, Machine-check,&lt;/p>
&lt;ol start="2">
&lt;li>Internal Interrupt：CPU在執行Process過程中，遭遇重大錯誤而引發&lt;/li>
&lt;/ol>
&lt;p>例：Divide-by-zero除以零、執行非法的特權指令、etc&lt;/p>
&lt;ol start="3">
&lt;li>Software Interrupt：user process 在執行中，若須要OS提供服務時，發出此類型的中斷，目的是&lt;strong>通知作業系統&lt;/strong>，請它執行對應的服務請求&lt;/li>
&lt;/ol>
&lt;p>例：I/O-request &lt;code>好比是KTV的服務鈕，按下去就會有人過來問你要幹嘛&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>現在恐龍分為兩種&lt;/p>
&lt;ol>
&lt;li>Interrupt：硬體所產生就叫Interrupt&lt;/li>
&lt;li>Trap：軟體所產生的就叫Trap&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/Gw1lwWA.png"
loading="lazy"
alt="image-20221121003713007"
>&lt;/p>
&lt;p>例：設備發出I/O-Completed,I/O-Error,Machine-check,etc及Time-out by Timer&lt;/p>
&lt;p>用途主要有二&lt;/p>
&lt;ul>
&lt;li>Catch the arithematic error&lt;/li>
&lt;/ul>
&lt;p>例：Divide-by-zero, 執行非法特權指令, illegal memory access&lt;/p>
&lt;ul>
&lt;li>user process 執行需要OS提供服務時，也會發trap通知OS&lt;/li>
&lt;/ul>
&lt;p>例：I/O　Request&lt;/p>
&lt;ol start="3">
&lt;li>分成兩類&lt;code>背後哲學：中斷之間也有優先權高低之分&lt;/code>
&lt;ol>
&lt;li>Maskable Interrupt遮罩：此類中斷發生後，可被Ignored或&lt;strong>延後處理不一定要馬上處理&lt;/strong>
&lt;ul>
&lt;li>例如：Software-interrupt&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Non-Maskable不可遮罩：此類中斷必須立刻處理
&lt;ul>
&lt;li>Internal interrupt(重大error), I/O-error,etc&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h2 id="hardware-resources-protection">Hardware Resources Protection&lt;/h2>
&lt;ul>
&lt;li>基礎建設
&lt;ul>
&lt;li>Dual-modes operation(雙重模式)&lt;/li>
&lt;li>Privilege instructions&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="dual-modes-operation">Dual-modes operation&lt;/h3>
&lt;p>定義：System之運作模式&lt;strong>至少&lt;/strong>(可再往下分，依照系統設計的必要性)可被區分為2種modes&lt;/p>
&lt;ol>
&lt;li>kernel mode&lt;/li>
&lt;li>user mode&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>kernel mode&lt;/strong>&lt;/p>
&lt;p>又叫做system mode, supervisor mode, privileged mode, monitor mode(早期有，現移除)，代表此刻是kernel取得系統控制(取得CPU執行權)，&lt;strong>允許&lt;/strong>privilege instructions(特權指令)在此mode下執行&lt;/p>
&lt;p>&lt;strong>user mode&lt;/strong>&lt;/p>
&lt;p>代表user process取得CPU執行，在此mode,&lt;strong>不允許&lt;/strong>執行privilege instructions(特權指令)，若執行則會發生trap的重大錯誤&lt;/p>
&lt;p>此外，&lt;strong>Dual-modes必須要有HW的支持&lt;/strong>，才可實現&lt;/p>
&lt;p>例如：CPU內會有Mode Bit，用以區分現在是哪個mode&lt;code>當CPU在執行機器指令時，IF、DE...之類的階段，若解碼完發現是個特權指令，這時候Control unit就要檢查目前的mode bit，判斷是否可不可以執行，若不行就丟出一個interrupt，不允許執行&lt;/code>&lt;/p>
&lt;h3 id="priveleged-instruction特權指令">Priveleged instruction(特權指令)&lt;/h3>
&lt;p>定義：任何可能會造成系統重大危害的指令，可設為特權指令(端看工程師如何設計)，&lt;strong>只可以&lt;/strong>在Kernel Mode去執行，不可以再User mode下執行，一旦在User Mode下執行，會發&lt;strong>Trap&lt;/strong>通知OS，將此user process terminates.&lt;/p>
&lt;p>&lt;code>如果把所有的指令設為特權指令，好處就只有超級安全，因為這些指令都只有OS可以做，如果user想做就只能委託OS執行，但這樣performance會很差，因為所有事情都要給OS處理&lt;/code>&lt;/p>
&lt;p>例如：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Turn-off(Disable) interrupt, clear memory, I/O instruction(for I/O protection),Timer值 set/change (for CPU protect)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Base/Limit register 修改/set (for memory protection)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Change mode from user mode to kernel mode&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-markdown" data-lang="markdown">1). Set value of Timer
2). Read the clock
3). Claer memory
4). Turn-off interrupt
5). Switch from user to monitor mode
哪些是特權指令?
1,3,4,5
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">1. Change to user mode
2. Change to monitor mode
3. Read from monitor memory
4. Write into monitor memory
5. Fetch an instruction from memory
6. Turn on timer interrupt
7. Turn off timer interrupt
哪些是特權指令?
2,4,7
詳解：
6. 本身就是打開的，因為要做CPU的保護
7. 但關掉不是
有爭議的部分
3. user process去讀kernel process的資料，恐龍認為是，因為kernel裡面掌管所有Process的information，而process間不應該各個process的狀態
5. 從Monitor memory(Kernel)裡面去讀指令出來，恐龍認為不是，因為就算抓了，但你的mode不是Privilege instruction就會把你擋掉
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="為什麼dual-mode跟privilege-isntruction可以構成保護基礎">為什麼Dual-mode跟Privilege Isntruction可以構成保護基礎&lt;/h3>
&lt;p>所有會危害OS的操作都是在Kernel 發生，因此不可以放任user可以直接操作Kernel&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/ouBgLdK.png"
loading="lazy"
alt="image-20221122221832833"
>&lt;/p>
&lt;h3 id="io-protection">I/O-Protection&lt;/h3>
&lt;p>目的：由於I/O運作較為繁瑣複雜，為了&lt;strong>降低user processes 操控I/O之複雜度&lt;/strong>`，讓user processes去處理應用的問題，I/O則交由OS去處理；及避免user process對I/O-Devices之不當操作，胡搞瞎搞，因此才有I/O protection。簡單來講就是不要讓user processes去操作I/O&lt;/p>
&lt;p>作法：把所有I/O指令皆設為privileged instruction配合Dual-modes, 一律讓user process委託 kernel執行I/O運作&lt;/p>
&lt;h3 id="memory-protection">Memory Protection&lt;/h3>
&lt;p>目的：防止user process 存取其他user processes 之 memory area 及 kernel memory area&lt;/p>
&lt;p>作法：(以 contiguous Memory Allocatation 為例) 針對每個Process, kernel會提供一套Registers：叫base/limit register, 其中&lt;/p>
&lt;ul>
&lt;li>Base register紀錄Process之&lt;strong>起始位址&lt;/strong>&lt;/li>
&lt;li>Limit register紀錄Process之&lt;strong>大小&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>將來Process執行，會進行下列的Checking&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/Ys8xRSh.png"
loading="lazy"
alt="image-20221122234041249"
>&lt;/p>
&lt;blockquote>
&lt;p>為什麼Address的判斷是由Hardware來做而不是OS來做呢？&lt;/p>
&lt;p>因為交給OS來做就會產生中斷interrupt，又因程式在執行的時候對記憶體的存取是很頻繁的，兩個影響之下會導致你的CPU一直被interrupt打擾，因此交給Hardware來做會比較符合成本一點。&lt;/p>
&lt;/blockquote>
&lt;p>並且，還要將 Base與Limit register 值之set/change須設為&amp;quot;Privilege Code(特權指令)&amp;quot;，避免user Process把Base跟Limit的位址直接改成無限，這樣就完成了Memory的&lt;strong>Protection&lt;/strong>&lt;/p>
&lt;h3 id="cpu-protection">CPU Protection&lt;/h3>
&lt;p>目的：防止user process無限期/長期佔用CPU而不釋放&lt;/p>
&lt;p>作法：利用&lt;strong>Timer&lt;/strong>實施，同時OS會規定Process使用CPU time之最大配額值(MAX. Time Quantum)&lt;/p>
&lt;p>當process 取得CPU後，Timer初值即設為Max Time Qauntum值，隨著Process執行 time增加, &lt;strong>Timer值會逐步遞減&lt;/strong>，直到Timer值為0, Timer會發出 &lt;strong>Time-out&lt;/strong>的interrupt通知OS，OS便可強迫此process放掉CPU，此外，Timer值之set/change 也須設為特權指令&lt;/p>
&lt;h2 id="os-structure-operating-system">OS Structure Operating-System&lt;/h2>
&lt;blockquote>
&lt;p>OS之Development&lt;/p>
&lt;blockquote>
&lt;p>OS應提供的服務項目&lt;/p>
&lt;p>OS之&lt;strong>服務元件&lt;/strong>種類&lt;/p>
&lt;p>&lt;strong>System Calls之介紹&lt;/strong>(使用者程式跟OS之間溝通的介面)&lt;/p>
&lt;p>OS之Structure種類&lt;/p>
&lt;blockquote>
&lt;p>Simple&lt;/p>
&lt;p>More Complex than simple&lt;/p>
&lt;p>Layered Approach&lt;/p>
&lt;p>&lt;strong>Microkernel&lt;/strong>&lt;/p>
&lt;p>Module&lt;/p>
&lt;p>Hybrid(混合?)&lt;/p>
&lt;/blockquote>
&lt;p>設計原則：Policy與Mechanism &lt;code>policy管行為,比較常變，例如數值的變動; mechanism負責處理how,比較不會變,例如邏輯的判斷 &lt;/code>&lt;/p>
&lt;p>Virtual Machine介紹&lt;/p>
&lt;/blockquote>
&lt;/blockquote>
&lt;h3 id="system-call">System Call&lt;/h3>
&lt;p>定義：作為執行中user process與kernel之間的溝通界面，當user process需要OS提供某種服務時，會先trap通知OS，並帶入&lt;strong>System call&lt;/strong> ID(No)及&lt;strong>所需參數&lt;/strong>，然後OS執行對應的System call&lt;/p>
&lt;blockquote>
&lt;p>It&amp;rsquo;s a programming Interface to the services privided by the OS&lt;/p>
&lt;/blockquote>
&lt;p>用舉例來講的話&lt;/p>
&lt;ul>
&lt;li>Trap = 服務紐&lt;/li>
&lt;li>System call = 服務項目&lt;/li>
&lt;/ul>
&lt;p>System Call的種類(中央考過類似的題目)&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>Process Control eg：建立、終止、暫停、恢復執行process, set/read attribute&lt;/li>
&lt;li>File Management eg：建立、read, write, open, close, delete &amp;hellip;&lt;/li>
&lt;li>Device Management eg：建立、read, write, open, close, delete &amp;hellip;&lt;/li>
&lt;li>Information of Maintenance eg：取得系統日期/時間、取得Process屬性 etc&lt;/li>
&lt;li>Communications eg: Processes之間的通訊而且只針對Message Processing方式提供服務&lt;/li>
&lt;li>Protection　eg: Hw resources protection, File access contorller, etc&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>&lt;img src="https://i.imgur.com/VvdLNs0.png"
loading="lazy"
alt="image-20221124224120796"
>&lt;/p>
&lt;p>System Call的參數(Parameters)傳遞方式：3種方式&lt;/p>
&lt;ol>
&lt;li>利用暫存器(&lt;strong>Registers&lt;/strong>)保存參數
&lt;ul>
&lt;li>優點：
&lt;ol>
&lt;li>最簡單&lt;/li>
&lt;li>存取速度最快( without memory access)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>缺點:
&lt;ol>
&lt;li>不適用於大量參數之情況&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>利用&lt;strong>Memory&lt;/strong>，以一個Block(Table)儲存這些參數，並將這些表格的起始位址置於1個Register中，Pass給OS
&lt;ul>
&lt;li>優點:
&lt;ol>
&lt;li>適用於大量參數&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>缺點:
&lt;ol>
&lt;li>存取速度較慢，且操作較為麻煩&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>利用&lt;strong>Stack&lt;/strong>將參數push入此Stack, OS再pop from stack, 以取得參數
&lt;ul>
&lt;li>優點:
&lt;ol>
&lt;li>適用於大量參數之情況&lt;/li>
&lt;li>也很簡單&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>缺點:
&lt;ol>
&lt;li>Stack的空間須要預先準備，避免stackoverflow&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="os之系統架構分類">OS之系統架構分類&lt;/h3>
&lt;p>OS之Structure種類&lt;/p>
&lt;blockquote>
&lt;p>Simple: MS-DOS系統&lt;/p>
&lt;p>More Complex than simple: UNIX系統&lt;/p>
&lt;ul>
&lt;li>Limited by Hardware functionality&lt;/li>
&lt;li>The original UNIX had limited structuring&lt;/li>
&lt;li>The UNIX 包含兩個Separate parts
&lt;ol>
&lt;li>System Programs&lt;/li>
&lt;li>The Kernel&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/luyuYF4.png"
loading="lazy"
alt="image-20221125013311284"
>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Beyond simple but not fully layered&lt;/strong>(分層)&lt;/li>
&lt;/ul>
&lt;p>Layered Approach&lt;/p>
&lt;ul>
&lt;li>
&lt;p>定義：採取&lt;strong>Top-Down&lt;/strong>方式，切割系統功能/元件，以降低複雜度。元件/模組之間呼叫關係分層&lt;/p>
&lt;p>即&lt;strong>上層可以使用下層的功能，但下層不可以使用上層的功能&lt;/strong>。完成後要使用&lt;strong>Bottom-up&lt;/strong>方式進行測試，debugging(由底層一路往外測)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>層次的劃分沒有明確規定&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/dkCQyVV.png"
loading="lazy"
alt="image-20221125014733544"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>優點：&lt;/p>
&lt;ul>
&lt;li>降低設計複雜度&lt;/li>
&lt;li>有助於分工&lt;/li>
&lt;li>測試、除錯、維護容易&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>缺點：&lt;/p>
&lt;ul>
&lt;li>很難做到精準的分層劃分&lt;/li>
&lt;li>若Layer數太多，則System performance is very poor( 切到四層剛好、五層太多，極限中的極限是七層)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Microkernel&lt;/strong>(微核心)：由CMU(卡內基-美隆大學)率先提出，代表產品：&lt;strong>Mach o.s&lt;/strong>。它們認為UNIX的服務項目太多、太龐大，不利移植&lt;/p>
&lt;ul>
&lt;li>定義：將Kernel中一些Non-essential services&lt;code>(比較不是那麼基本、重要、必要)&lt;/code>，自Kernel當中移除，改成在User Mode(Site)提供這些服務，以System programs方式存在，如此一來，可以得到一個比較小的kernel，稱之為microkernel, 一般而言，Microkernel提供下列三個minimum service：&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>Porcess Controll&lt;/li>
&lt;li>Memory Management(不包括Virtual memory)&lt;/li>
&lt;li>Process Communications(提供message Processing服務而已)&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/R7XWIb1.png"
loading="lazy"
alt="image-20221126165547853"
>&lt;/p>
&lt;ul>
&lt;li>Benefits(好處)&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>Easier to extend a microkernel
&lt;ul>
&lt;li>服務的增加/刪除是容易的，&lt;strong>因為這些服務是在user site執行&lt;/strong>，所以服務的增、刪不需要牽扯到Kernel也要變更，即使要，也是少量&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Easier to port the OS to new architectures
&lt;ul>
&lt;li>因為Kernel很小，所以移植到新的硬體平台之更改幅度不大(因為只有三個服務run在kernel)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>More Reliable
&lt;ul>
&lt;li>萬一某一個服務在執行中掛掉了，充其量只是相當於一個user process死掉而已，所以對HW, kernel, 其他user process沒有不良影響，因為把大部分的服務移到user mode去做了，因此更加安全、可靠&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>More secure
&lt;ul>
&lt;li>萬一某一個服務在執行中掛掉了，充其量只是相當於一個user process死掉而已，所以對HW, kernel, 其他user process沒有不良影響，因為把大部分的服務移到user mode去做了，因此更加安全、可靠&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>缺點&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>Performance overhead of user space to kernel space communication(效能較差)，因為process Communication充斥大量訊息傳遞&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>Note：microkernel的&lt;strong>相反詞&lt;/strong>：&lt;strong>Monolithic kernel&lt;/strong>&lt;/p>
&lt;p>定義：所有的Services皆須Run in kernel mode，大部分的商用OS幾乎都是Monolithic kernel，因為如果把所有的service移到user site去做，那它的控制就會很低。當這個控制力很低的時候，user或program就可以自己去Inhence一些東西，影響OS&lt;/p>
&lt;p>優點、缺點：和microkernel相反&lt;/p>
&lt;/blockquote>
&lt;p>Module&lt;/p>
&lt;ul>
&lt;li>Many OS implement &lt;strong>loadable&lt;/strong>(有需要才載入) kernel modules&lt;/li>
&lt;li>use Object-oriented approach&lt;/li>
&lt;li>Each core component is &lt;strong>separate&lt;/strong>&lt;/li>
&lt;li>Each talks to the others over known interface&lt;/li>
&lt;li>Each is loadable as heeded within the Kernel&lt;/li>
&lt;li>簡而言之：similar to Layers but with &lt;strong>more flexible, 效能更好&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/epQ0WDz.png"
loading="lazy"
alt="image-20221126173047816"
>&lt;/p>
&lt;p>例如：Linux, solaris, etc &amp;hellip;&lt;/p>
&lt;p>Hybrid(混合?)：現在作業系統很難純粹歸屬於某一型&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Linux&lt;/strong>(中央考過) and Solaris 是 Monolithic (所有東西都run在kernel mode)，且也是&lt;strong>Modular for dynamic loading&lt;/strong>&lt;/li>
&lt;li>例：windows mostly monolithic，有時針對不同客戶需求，會再加上microkernel for subsystem&lt;/li>
&lt;li>例：Apple Mac Os 也是混合的&lt;/li>
&lt;/ul>
&lt;p>kernel 包含&lt;/p>
&lt;blockquote>
&lt;p>Mach microkernel&lt;/p>
&lt;p>部分的BSD UNIX&lt;/p>
&lt;p>I/O Kit&lt;/p>
&lt;p>&lt;strong>dynamic Loadable module(叫做 kernel extension)&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://i.imgur.com/5JwG18g.png"
loading="lazy"
alt="image-20221126175630716"
>&lt;/p>
&lt;/blockquote>
&lt;h3 id="virtual-machine">Virtual Machine&lt;/h3>
&lt;p>定義：利用sofeware技術模擬出一份與底層HW一模一樣的功能介面之抽象代理器(abstract machine)，稱之Virtual Machine&lt;code>模擬的方式類似於CPU schdueling &lt;/code>&lt;/p>
&lt;p>名詞解析：&lt;/p>
&lt;p>&lt;strong>Host&lt;/strong>：undelying hardware system, os&lt;/p>
&lt;p>&lt;strong>VMM(Virtual Machine Manage)或Hypervisor&lt;/strong>：creates and managing/ runs virtual machines&lt;/p>
&lt;p>&lt;strong>Guest&lt;/strong>：process provided with virtual copy of the host&lt;/p>
&lt;blockquote>
&lt;p>恐龍本之其他英文&lt;/p>
&lt;ul>
&lt;li>Abstract hardware of a single computer into several different execution environments&lt;/li>
&lt;li>Similar to layered approach, But layer crates virtual machine(VM)&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>優點&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>作為測試開發中的OS，提供一個良好的負載平台，具有下列好處：&lt;/p>
&lt;ol>
&lt;li>其他user, user processes工作，仍可持續運作，不須暫停&lt;/li>
&lt;li>萬一測試中的OS不穩定、掛掉/失敗了，也不會影響host Hw, OS, 其他user processes 之工作，因為只是相當於一個user process fails而已，不會對system有重大危害&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/cxdDMTi.png"
loading="lazy"
alt="image-20221126221141028"
>&lt;/p>
&lt;ol start="3">
&lt;li>
&lt;p>同一部Host Hardware上可以執行多個OS running on 多個virtual machines，&lt;strong>這樣可以節省成本&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Consolidation(合併)&lt;/strong>：在 Cloud computing environment，我們會用&lt;strong>有限的&lt;/strong>機器，建立為數注眾多的virtual machines，我們可以依VM上的Applications之執行負擔輕重，&lt;strong>調用Host machines資源，做因應的支援&lt;/strong>，有需要就在加開，沒需要就關掉，做資源的合併與調度&lt;/p>
&lt;/li>
&lt;li>
&lt;p>VM較為安全(如果VM被病毒入侵，不致擴散，因為各VM之間是相互獨立的)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可以Freeze, suspend, running VM, 及Clone(複製) VM&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/wQovoui.png"
loading="lazy"
alt="image-20221126223550540"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>VMM的Implementation&lt;/strong>&lt;/p>
&lt;p>&lt;code>Hypervisor : 虛擬機管理程式&lt;/code>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Type0 Hypervisor(硬體層次)：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Hardware&lt;/strong>-based solutions via firmware
&lt;ul>
&lt;li>例如：IBM LPARS and Oracle LDOMs&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Type1 Hypervisor(Kernel Mode層次)&lt;/p>
&lt;ol>
&lt;li>
&lt;p>OS-like software&lt;/p>
&lt;ul>
&lt;li>例：&lt;strong>VMware ESX&lt;/strong>, Joyent SmartOS, Crtrix XenServer&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>general purpose OS that provide VMM functions (services)&lt;/p>
&lt;ul>
&lt;li>例如Microsoft Window Server with HyperV, Redhat Linux with KVM&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Type2 Hypervisor(user mode層次)：&lt;/p>
&lt;ol start="3">
&lt;li>
&lt;p>&lt;strong>Applications&lt;/strong> level provides VMM functionality&lt;/p>
&lt;p>eg. &lt;strong>Paraller&lt;/strong> &lt;strong>Desktop&lt;/strong>, Oracle VirtualBox&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>還有一些其他的&lt;strong>變形&lt;/strong>&lt;code>上面那三類都是要創造跟底層硬體(Host HW)一樣的Virtual Machine，但下面這些卻不是&lt;/code>&lt;/p>
&lt;ol start="4">
&lt;li>
&lt;p>&lt;strong>Paravirtualization☆考試重點&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>The guest OS need modify to work in cooperation with VMM to optimize performance&lt;/li>
&lt;li>&lt;strong>presents guest(run 在virtual Machine上的都叫guest) with similar but Not identical to Host Hardware&lt;/strong>&lt;/li>
&lt;li>Guest &lt;strong>must be modified(必須要被修改才可以用)&lt;/strong> to Run ON Paravirtualization virtual hardware&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Programming-environment virtualization&lt;/p>
&lt;ul>
&lt;li>
&lt;p>VMMs do not virtualize, HW but instead &lt;strong>create on optimized virtual system .&lt;/strong>(創造全新的Virtual Machine)&lt;/p>
&lt;p>eg. Java virtual machine(JVM), Microsoft .NET&lt;/p>
&lt;p>&lt;strong>JVM is a SPECification(規格), not an implementation&lt;/strong>&lt;/p>
&lt;p>規範&lt;/p>
&lt;ol>
&lt;li>Class Loader(把bype code load下來)&lt;/li>
&lt;li>Class verifier(驗證器，驗證byte Code安不安全，比如是否包含pointer)&lt;/li>
&lt;li>Java interpreter(執行byte code)&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/gZivz4w.png"
loading="lazy"
alt="image-20221128233907844"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Emulators&lt;/strong>：Allow application written for one HW to run on a very different HW such as different type of CPU。例：PS4模擬器、3DS模擬器&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Application containment (底層沒有Virtual Machine，而是 創造執行環境，而不是模擬)&lt;/strong>&lt;/p>
&lt;p>eg. Oracle Solaris Zones BSD Jails, IBM AIX WPARs application&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/EVk8fjP.png"
loading="lazy"
alt="image-20221127130242062"
>&lt;/p>
&lt;p>&lt;strong>Policy(政策、策略 ) 與 Mechanism&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Policy定義&lt;/p>
&lt;ol>
&lt;li>&lt;strong>&amp;ldquo;What&amp;rdquo; to be proovided&lt;/strong>&lt;/li>
&lt;li>&lt;strong>經常改變、朝令夕改&lt;/strong>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Mechanism定義&lt;/p>
&lt;ol>
&lt;li>&lt;strong>How to do that&lt;/strong>&lt;/li>
&lt;li>The underlying(基本的) mechanism甚少改變或不變&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>設計原則：&lt;/p>
&lt;p>Policy與Mechanism宜separate，以增進system flexibility&lt;/p>
&lt;/li>
&lt;li>
&lt;p>舉例&lt;/p>
&lt;ol>
&lt;li>&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>運用Timer作為CPU protection &amp;gt; Mechanism&lt;/li>
&lt;li>Max.Time Quantum大小制定 &amp;gt; Policy&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>CPU排版採Priority Scheduling 排班 &amp;gt; Mechanism&lt;/li>
&lt;li>Priority大小之定義 &amp;gt; Policy&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h1 id="chapter-3-system-structure">Chapter 3 System Structure&lt;/h1>
&lt;p>這個部分和第二章寫在一起了&lt;/p>
&lt;h1 id="chapter4--process-management-and-thread-management">Chapter4 Process Management And Thread Management&lt;/h1>
&lt;blockquote>
&lt;p>Process 定義與Progeam比較&lt;/p>
&lt;p>&lt;strong>PCB內容 考試重點&lt;/strong>&lt;/p>
&lt;p>&lt;strong>Process State Transition Diagram (S.T.D)考試重點&lt;/strong>&lt;/p>
&lt;p>Scheduler的種類(解釋名詞)&lt;/p>
&lt;blockquote>
&lt;p>長期&lt;/p>
&lt;p>短期&lt;/p>
&lt;p>中期&lt;/p>
&lt;/blockquote>
&lt;p>Context Switching (解釋名詞)&lt;/p>
&lt;p>Dispatcher, Dispatch latency(較少考)&lt;/p>
&lt;p>&lt;strong>Process Controller Operations(UNIX, System Call為主的程式追蹤) 考試重點&lt;/strong>&lt;/p>
&lt;p>&lt;strong>評估CPU Scheduling 效能的好或不好的5個Criteria(清大喜歡考)&lt;/strong>&lt;/p>
&lt;p>&lt;strong>各種CPU 排班法則(7個)介紹及相關名詞(Starvation,Aging,Preemptive,Non-preemptive,Convoy effect) 考試重點&lt;/strong>&lt;/p>
&lt;p>特定System的排班設計&lt;/p>
&lt;blockquote>
&lt;p>MultiProcessors System&lt;/p>
&lt;p>Real-time System&lt;/p>
&lt;blockquote>
&lt;p>Soft (考申論題)&lt;/p>
&lt;p>Hard(考計算題)&lt;/p>
&lt;/blockquote>
&lt;/blockquote>
&lt;p>Thread Management&lt;/p>
&lt;/blockquote>
&lt;h2 id="process-definition">Process Definition&lt;/h2>
&lt;p>定義：A program in execution[恐]&lt;/p>
&lt;ul>
&lt;li>Process 建立後，其主要組成有：
&lt;ul>
&lt;li>&lt;strong>Process No(ID)&lt;/strong>: Process被生成出來時，會有一個Process Id，作為識別&lt;/li>
&lt;li>Process State&lt;/li>
&lt;li>Code Section, Data Section：Process占用的 Memory Space&lt;/li>
&lt;li>Programming Counter(PC)：程式計數器，告訴我們現在這個Process執行到哪裡，裡面放下一條指令的位址&lt;/li>
&lt;li>Stack&lt;/li>
&lt;li>CPU Register value&lt;/li>
&lt;li>是OS 分配 **Resource(CPU,I/O-Divice, Memory) **之對象單位：跟Thread的差別&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>與Program(程式)的比較&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Process&lt;/th>
&lt;th>Program&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>執行中的程式&lt;/td>
&lt;td>Just a &lt;strong>File&lt;/strong> stored in storage device&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;ldquo;Active&amp;rdquo; entity(活動中、執行中)&lt;/td>
&lt;td>&amp;ldquo;Passive&amp;rdquo; entity(沒有活動的)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="process-control-block">Process Control Block&lt;/h2>
&lt;p>(PCB內容)&lt;/p>
&lt;p>定義：OS為了管理所有Processes，會在Kernel memory中，替每個Process，各自準備一個Block(Table, 表格)，用來記錄Process之所有相關資訊&lt;/p>
&lt;p>&lt;strong>PCB的主要內容有(要背，考選擇)：&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Process No(ID)：是Unique(唯一的)&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Process state：eg. ready, running, wait, etc&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Programming Counter：內放 the next instruction&amp;rsquo;s address&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>**CPU Registers：eg. 紀錄使用到的暫存器的值 eq. Accumulator, PSW(Process Status Word), Stack Top ,etc **&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>CPU Scheduling Info：eg. Process 的優先權，First-In First-Out(FIFO)&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Memory Management Info(隨OS的記憶體管理方法不同，紀錄不同資訊)：eg. Base/Limit register或 Page Table 或 Segment Table&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Accounting Info：eg. Process已使用了多少CPU Time, 哪些資源, 還剩多少資源,多少CPU Time可以用&lt;/strong>
Note：目的&lt;/p>
&lt;blockquote>
&lt;p>計算使用量，記帳、收＄&lt;/p>
&lt;p>Administrator 調教Performance的依據&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>I/O Status Info：eg. process已經發出多少I/O-Request, 完成 狀況如何，占用那些I/O Resource(目前還沒釋放的)&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="process-state-transition-diagram">Process State Transition Diagram&lt;/h2>
&lt;p>狀態轉換圖(S.T.D)&lt;/p>
&lt;p>目的：描述Process之Life Cycle，用來記錄Process建立，到它被終止之間，所發生的事&lt;/p>
&lt;p>各個版本的STD定義都不太一樣&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>[恐] 5個State的STD&lt;/li>
&lt;li>[Stalling]7個State STD (比恐龍多兩個狀態)&lt;/li>
&lt;li>[Stalling] UNIX的STD&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;h3 id="5-steps-of-state-transition-diagram">5 Steps of State Transition Diagram&lt;/h3>
&lt;p>要會畫，會說明，超基礎，考出來是送分題&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/WlbrMCp.png"
loading="lazy"
alt="image-20221204010203958"
>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>State&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>New(Create)&lt;/td>
&lt;td>Process被建立，已分得PCB的空間，&lt;strong>尚未載入記憶體、未取得記憶體資源&lt;/strong>，因應Batch的系統&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Ready&lt;/td>
&lt;td>Process在記憶體了，且OS已經把它&lt;strong>放到Ready Queue內，且具有資格爭奪CPU&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Running&lt;/td>
&lt;td>Process取得CPU 執行中&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Wait(Block)&lt;/td>
&lt;td>表示Process待在waiting Queue中，Waiting For I/O-Completed or event occurs, &lt;strong>不會與其他Processes 競爭CPU&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Exit(Terminate)(Zombie)(Abort)&lt;/td>
&lt;td>Process完成工作，&lt;strong>正常結束&lt;/strong>或&lt;strong>異常終止&lt;/strong>，可能其PCB尚未回收，因為要等其&lt;strong>父親(Parent Process)Collect 該子process之成果後&lt;/strong>，才會回收PCB Space其他資源(Memory, CPU, I/O-Devices)已回收&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Transition&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1.&lt;/td>
&lt;td>也叫Admit，當Memory Space足夠時，可由&lt;strong>Long-term Scheduler(in Batch System，因為放在Job Queue裡頭)，決定將此Job載入到Memory中&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2.&lt;/td>
&lt;td>也叫&lt;strong>Dispatch&lt;/strong>,由short-term scheduler(CPU Scheduler)決定，讓高優先權的Process取得CPU控制權&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3.&lt;/td>
&lt;td>也叫&lt;strong>Time-Out/Interrupt&lt;/strong>，執行中的Process會因某些事件發生而&lt;strong>被迫放棄(不是自願的)CPU，回去Ready Queue, eg. Time-Out, Interrupt發生,更高優先權的Process到達，插隊&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4.&lt;/td>
&lt;td>叫wait for I/O-Completed or event occurs(自願放棄CPU)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5.&lt;/td>
&lt;td>I/O-Completed 或 Event occurs&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>6.&lt;/td>
&lt;td>Process完工或異常終止 (自願放棄CPU)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="7-steps-of-state-transition-diagramstalling">7 Steps of State Transition Diagram[Stalling]&lt;/h3>
&lt;p>&lt;code>補上Middel Term Scheduler&lt;/code>&lt;/p>
&lt;p>為了解決一個問題&lt;/p>
&lt;p>&lt;code>當記憶體被占滿了，有一個更高優先權的Process近來，該如何處理？&lt;/code>&lt;/p>
&lt;p>把wait狀態的process踢出去，放到磁碟去保存&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/3fqSWLb.png"
loading="lazy"
alt="image-20221204120509402"
>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>State&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Blocked/Suspend&lt;/td>
&lt;td>Process被Swap Out到 Disk中暫存，即Blocked(asleep) in Disk&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Ready/Suspend&lt;/td>
&lt;td>event occurs or I/O-Completed, &lt;strong>READY IN DISK&lt;/strong>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Transition&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Suspend(Swap Out)&lt;/td>
&lt;td>當Memory空間不足，又有其他高優先度的Process需更多Memory空間時，會由Medium-Term Scheduler決定將Blocked Process或低優先權的Process Swap out到Disk，以空出Memory Space&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Activate(Swap In)&lt;/td>
&lt;td>當Memory space有空，Medium-term scheduler可將它們Swap In回memory中，Ready for execution&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Suspend(Swap Out)&lt;/td>
&lt;td>支持此Transition之理由有二&lt;br />1.所有Blocked Processes皆Swap out後，Memory Space仍不足時&lt;br />2. 所有Blocked State Processes之優先權，皆高於Ready State Process時&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;img src="https://i.imgur.com/t6Albzn.png"
loading="lazy"
alt="image-20221204120421430"
>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Transition&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>把從在磁碟睡覺的process拉到記憶體裡面睡覺，&lt;code>This is a poor design，但仍可支持，理由如下：若所有&lt;/code>Blocked/suspend` state之Processes優先權皆高於ready/ suspend processes, 且OS believes them will become ready soon |&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>It&amp;rsquo;s also a poor design 但可支持之理由如下：若有一個高優先權的process從blocked/suspend變成ready/suspend時，則OS可以強迫低優先權但已執行的process放棄CPU的使用以及Memory的空間，供高優先權使用&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="unix-stdstalling">UNIX STD[Stalling]&lt;/h3>
&lt;p>&lt;img src="https://i.imgur.com/OWW8dof.png"
loading="lazy"
alt="image-20221204131334041"
>&lt;/p>
&lt;h2 id="scheduler-typeimportant">Scheduler Type(Important)&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>
&lt;p>Long-term Scheduler&lt;/p>
&lt;ul>
&lt;li>定義：又叫Job Scheduler，目的是從Job Queue中挑選一些Jobs載入到Memory中&lt;/li>
&lt;li>特色：
&lt;ol>
&lt;li>執行頻率最低，所以才叫長期&lt;/li>
&lt;li>可以調控Multiprogramming Degree&lt;/li>
&lt;li>可以調控 I/O-Bound Job與CPU-Bound Job之混合比例(下面有解釋)&lt;/li>
&lt;li>Batch System採用，但是real-time system以及time-sharing不會採用這種機制。因為real-time系統處理的process都是比較緊急的，因此就需要直接丟進memory去執行。而time-sharing系統要求對每一個user公平，沒有優先度需要處理，如果memory不夠則調用virtual memory，因此time-sharing系統只存在medium-term以及short-term&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Short-term Scheduler：&lt;/p>
&lt;ul>
&lt;li>定義：又叫&lt;strong>CPU Schduler&lt;/strong>或&lt;strong>Process Scheduler&lt;/strong>，目的是從&lt;strong>Ready Queue&lt;/strong>中挑出一個高優先權的process，分派CPU，給CPU執行&lt;/li>
&lt;li>特色：
&lt;ol>
&lt;li>執行速度是三者裡面最高的&lt;/li>
&lt;li>&lt;strong>無法調控Multiprogramming Degree，因為它不是負責將程式load進memory與Swap out出去的人&lt;/strong>&lt;/li>
&lt;li>&lt;strong>無法調控I/O-Bound Job與CPU-Bound Job之混合比例，頂多決定誰要先做，不能決定比例&lt;/strong>&lt;/li>
&lt;li>&lt;strong>所有的 System採用&lt;/strong>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Medium-term Scheduler(最常被考)：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>定義：&lt;strong>Time-Sharing System採用&lt;/strong>，當&lt;strong>Memory空間不足&lt;/strong>，且&lt;strong>又有其他高優先權Processes需要Memory Space時&lt;/strong>，此Scheduler會啟動，它會挑選一些Processes(eg. Blocked Process, 低優先Process) 將其Swap Out到Disk中，保存，以空出Memory Space，供其他Process使用，將來等到有足夠的Memory Space released後，此Scheduler可再將它們Swap In 回Memory, ready for execution&lt;/p>
&lt;/li>
&lt;li>
&lt;p>特色：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>執行速度是三者裡面居中的&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>可以調控Multiprogramming Degree，因為它不是負責將程式load進memory與Swap out出去的人&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>可以法調控I/O-Bound Job與CPU-Bound Job之混合比例，頂多決定誰要先做，不能決定比例&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Time-Sharing System採用&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>&lt;code>Multiprogramming Degree：系統內的Process的數目：一般而言，Degree越高，CPU利用率就越高。&lt;/code>&lt;/p>
&lt;h3 id="io-bound-job與cpu-bound-job">I/O-Bound Job與CPU-Bound Job&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>I/O-Bound(受限) Job&lt;/p>
&lt;p>定義：此類型工作大都是需要大量的I/O operation(resource)，但對於CPU Time(Computation)需求很少，&lt;strong>因為其工作效能受限於I/O-Device之速度，稱之I/O-Bound&lt;/strong>，對CPU有最高優先權，因為它占用CPU的時間最短&lt;/p>
&lt;p>例如：Data Base Management, 財報的處理列印&lt;/p>
&lt;/li>
&lt;li>
&lt;p>CPU-Bound(受限) Job&lt;/p>
&lt;p>定義：需要大量的CPU計算，產生數筆資料，對I/O有最高優先權，因為它占用CPU的時間最短&lt;/p>
&lt;p>例如：氣象預估、科學模擬&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>如果OS發現I/O-Bound過多，則會透過Schduler來調控兩者之間的比例&lt;/strong>&lt;/p>
&lt;h2 id="context-switching">Context Switching&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>定義：當CPU要從Running Process切給另一個Process使用之前，Kernel必須**保存(Store) Running Process的目前狀態資訊(eg. Programming Counter的值，Stack的值，CPU Register的值，etc)，即存回此Process之PCB **。且要載入(restore)另一個Process之狀態資訊from此Process PCB，&lt;strong>這樣的行為就叫做Context Switching&lt;/strong>，Context Switch本身是一個額外的負擔，因為需要花CPU的時間去做切換，不能用在Process的執行上，因此時間大多取決於硬體的因素居多(eg. Register的數量夠不夠，Memory存取指令速度&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如何將低Context Switching負擔&lt;/p>
&lt;ol>
&lt;li>如果Register的數量足夠多，則可以讓每一個Process皆有自己的(Private) Register Set，OS只要切換Point指向另一個process之Register Set 即可完成Context Swtitching without memory store/restore ，因為速度夠快。但這個方法不太切實際，因為Register的成本關係&lt;/li>
&lt;li>使用&lt;strong>Multithreading&lt;/strong>機制。&lt;/li>
&lt;li>讓System process及User Process各自擁有自己的Register set，如此兩者之切換只要Registers Set的Pointer即可&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h2 id="dispatcher-and-dispatch-latency">Dispatcher And Dispatch Latency&lt;/h2>
&lt;p>&lt;code>分派器與分派延遲&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>定義：Dispatcher，此一模組的目的是要將CPU控制權授予經由CPU Scheduler依據CPU排班法則所選出之Process，選好後CPU Scheduler會將工作交給CPU Dispatcher，主要的工作項有下列三項&lt;/p>
&lt;ol>
&lt;li>Context Switching&lt;/li>
&lt;li>Change Mode from to Kernel mode to User Mode&lt;/li>
&lt;li>Jump to the execution entry of that selected proces&lt;/li>
&lt;/ol>
&lt;p>上述這三個工作所耗費的時間總和就是&lt;strong>Dispatch Latency&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>希望&lt;strong>Dispatch Latency越短越好&lt;/strong>，這些Process可以盡早開工&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="process-control-operations">Process Control Operations☆☆☆☆☆&lt;/h2>
&lt;h3 id="lession-1-theory">Lession 1 Theory&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>定義：Process建立、終止、暫停、恢復執行、設定／修改／讀取 Process Attributes值 etc.&lt;/p>
&lt;p>&lt;strong>上述這些皆是OS應該提供的服務(i.e System Call)&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Procss是可以建立自己的Process(Child Process)，&lt;strong>目的是要Child Process做工作&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Child Process所做的工作，可以分為2類：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>與Parent 相同的工作(子承父業)&lt;/strong>&lt;/li>
&lt;li>特定工作(與Parent不同)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Parent與Child之間的互動關係為：&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>Concurrent execution(交錯使用，通常是執行第一類的工作(子承父業))&lt;/li>
&lt;li>Parent waits for Child until child terminated(等著收割Child的成果)&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>Child Process 所須的資源由何處取得?&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>&lt;strong>OS供應&lt;/strong>(這種情況OS會去限制每個process最大可產生多少個Child Process)&lt;/li>
&lt;li>Parent供應(整個家族Process的資源都是共享，Parent Process的Sharing Time有一小時，那麼整個家族的Sharing Time 就是一個小時&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>Parent 若終止，則Child Process會如何處理?&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>一併終止(最常被使用)&lt;/strong> ：稱之為Cascading(層疊的) termination&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Parent Process死了，但Child Process存活，那Child的資源由以下兩者提供&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>
&lt;p>向OS取得資源&lt;/p>
&lt;/li>
&lt;li>
&lt;p>向祖先Process取得資源&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;h3 id="lession-2-example---unix-system-call">Lession 2 Example - UNIX System Call&lt;/h3>
&lt;ul>
&lt;li>fork()：此System call. 用以建立 Child Process，而fork()之傳回結果，對象如下&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>失敗：因為資源不足&lt;code>(記憶體不夠，PCB也不夠)&lt;/code>，無法建立，&lt;strong>會傳回負值(-1)給OS, then Pass to parent process&lt;/strong>，通常失敗的話，OS也會順便把Parent process砍死&lt;/p>
&lt;p>成功：OS會傳回一個值，用以區分child or parent：&lt;/p>
&lt;blockquote>
&lt;p>0值：給child process&lt;/p>
&lt;p>.&amp;gt; 0值：給Parent，且此值為Child Process ID&lt;/p>
&lt;/blockquote>
&lt;/blockquote>
&lt;p>&lt;img src="https://i.imgur.com/Hkeq0GX.png"
loading="lazy"
alt="image-20221205225943369"
>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>wait()：此System Call用以&lt;strong>暫停&lt;/strong>Process execute, 直到某個事件發生，eg. 父等子直到子終止 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>exit()：此System Call用以終止Process的執行，回收其資源&lt;code>但PCB的空間可能還留著，直到父把子的結果回收回來才回收&lt;/code>通常exit(0)表示正常終止，&lt;strong>exit(-1)表示異常終止&lt;/strong>。&lt;strong>子Process做完工作後，子Process要自己發出一個exit的System Call，讓OS來殺掉子Process。&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>execlp()&lt;code>或exec(), execve()&lt;/code>：此system call用於請OS載入特定的binary code(可執行的檔案)，來執行。這個System call可以交由子process執行，讓子process執行特定的工作，&lt;strong>去執行之後就不會再回來執行原程式下面的指令了，因為已經去執行特定的工作了&lt;/strong>&lt;/p>
&lt;p>eg. execlp(&amp;ldquo;目錄名稱&amp;rdquo;,&amp;ldquo;檔名&amp;rdquo;,參數)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>getpid()：此System Call用以取得Prcess的Id&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>​ 說明：&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/73BPWL6.png"
loading="lazy"
alt="image-20221205232325242"
>&lt;/p>
&lt;p>​ OS會配置child process memory space, 此空間是占用不同的記憶體空間，且子process的Data section 及 code section內容均來自父process的copy, initially。&lt;/p>
&lt;p>​ &lt;strong>若子process所作之工作與父process相同，則fork()完，就已經達成目的。&lt;/strong>&lt;/p>
&lt;p>​ &lt;strong>若子process要做特定工作(與父process不同)，則子process必須執行execlp()這個system call&lt;/strong>&lt;/p>
&lt;p>​ &lt;img src="https://i.imgur.com/FVrCZfE.png"
loading="lazy"
alt="image-20221205233942669"
>&lt;/p>
&lt;h3 id="lession3-programming">Lession3 Programming&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="c1">//例題1；建立Child process執行ls命令檔，且父等子完成後才列印Child completed
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">pid&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="n">pid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;fork fails &lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//爸爸自己自殺
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>&lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span> &lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="c1">//兒子要做的事情
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">execlp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/bin/ls&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s">&amp;#34;ls&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">null&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">exit&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">//這段code不會執行，原因是因為execlp()會把process指向/bin/ls的binary code，接著就是去執行那段binary code了，就不會回來執行這個exit();
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>&lt;span class="k">else&lt;/span> &lt;span class="c1">//pid &amp;gt;0{
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//爸爸要做的事情
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">wait&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">//父Process子Process直到子Process終止 子Process做完工作後，子Process要自己發出一個exit的System Call，讓OS來殺掉子Process。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;child Completed&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">exit&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="c1">//不管怎樣都會執行的地方
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/lNzxZM0.png"
loading="lazy"
alt="image-20221206002505232"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="c1">//例題2 假設Parent, child 之process ID為2600, 2603 求line A, B, C, D 印出值
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="n">pid&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">t&lt;/span> &lt;span class="n">pid&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pid1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//pid-t: 一個名為pid 的type，就是整數，是C語言的寫法
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">pid&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">//pid 放的是子process的ID， pid1放的是自己process的ID
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">pid1&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">getpid&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//A 0
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pid1&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//B 2603
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>&lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span> &lt;span class="o">&amp;gt;&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">pid1&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">getpid&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//C 2603
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pid1&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//D 2600
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/3vEaYqb.png"
loading="lazy"
alt="image-20221212233944674"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-C" data-lang="C">&lt;span class="c1">//例題3 問A的值value是多少
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="n">pid&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">t&lt;/span> &lt;span class="n">pid&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">pid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span> &lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">value&lt;/span> &lt;span class="o">+=&lt;/span>&lt;span class="mi">15&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>&lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span> &lt;span class="o">&amp;gt;&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">null&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//A=5 就算是global的變數，也是只能在自己的process作用
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="c1">//例題4 求列印結果
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">1.&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="n">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">pid&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">pid&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;A&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>&lt;span class="k">else&lt;/span> &lt;span class="c1">//pid &amp;gt;0{
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;B&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nl">Ans&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="err">父與子是並行的，因為父&lt;/span>&lt;span class="n">process沒有wait&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="err">因此答案可能是&lt;/span>&lt;span class="n">AB或BA&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="mf">2.&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="n">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">pid&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">pid&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;A&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>&lt;span class="k">else&lt;/span> &lt;span class="c1">//pid &amp;gt;0{
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;B&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">wait&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;C&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nl">Ans&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">ACBC&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">ABCC&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">BACC&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="c1">//例題5 假設Count，是一個父與子Process的共享變數 ，初值為5
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">1.&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="n">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">pid&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">pid&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">count&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>&lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span> &lt;span class="o">&amp;gt;&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">wait&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">count&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">Ans&lt;/span>&lt;span class="mf">.6&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="mf">2.&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">//父與子並行
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="n">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">pid&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">pid&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">count&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>&lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span> &lt;span class="o">&amp;gt;&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">count&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">Ans&lt;/span>&lt;span class="p">.&lt;/span> &lt;span class="mi">45&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">54&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">55&lt;/span> &lt;span class="c1">//這是基本情況
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">//以高階程式語言的角度來看，count++實際上是兩條code
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//count+1跟count=count+1
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//先加然後再附值
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//如果以組合語言的角度來看，就是三行code
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//LOAD R1, Count
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//INC R1, 1;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//STORE Count,R1
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//但Process沒有辦法保證這三條Code會連續做完，有可能做到一半就被另一個Process搶走了
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//所以還有一種情況是+1完之後，還來不及Assign，CPU就被另一個Process搶走了
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="n">Ans&lt;/span>&lt;span class="mf">.66&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">44&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">46&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">64&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/PScmSWQ.png"
loading="lazy"
alt="image-20221213223929951"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-C" data-lang="C">&lt;span class="c1">//例題6
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">1.&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">How&lt;/span> &lt;span class="n">mant&lt;/span> &lt;span class="n">processes&lt;/span> &lt;span class="n">are&lt;/span> &lt;span class="n">created&lt;/span>&lt;span class="o">?&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">include&lt;/span> &lt;span class="n">main&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="n">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">Ans&lt;/span>&lt;span class="mf">.8&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="mf">2.&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="n">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fork&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span> &lt;span class="c1">//等同於 pid=fork(); if(pid ==0) ....
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">Ans&lt;/span>&lt;span class="mf">.10&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="mf">3.&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="n">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fork&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>&lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fork&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">Ans&lt;/span>&lt;span class="mf">.14&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="mf">4.&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="n">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fork&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">Ans&lt;/span>&lt;span class="mf">.729&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="mf">5.&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="n">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fork&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>&lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fork&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fork&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="mf">6.&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="n">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">a&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fork&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">a&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="n">a&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">.)&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">共做了幾次&lt;/span>&lt;span class="o">?&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="n">ii&lt;/span>&lt;span class="p">.)&lt;/span>&lt;span class="err">印出&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="err">的有幾次&lt;/span>&lt;span class="o">?&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="n">iii&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">印出&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="err">的有幾次&lt;/span>&lt;span class="o">?&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="n">iiii&lt;/span>&lt;span class="p">.)&lt;/span>&lt;span class="err">印出&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="err">的有幾次&lt;/span>&lt;span class="o">?&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>例題1&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/P7KPC3a.png"
loading="lazy"
alt="image-20221213224958887"
>&lt;/p>
&lt;p>例題2&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/sxHVION.png"
loading="lazy"
alt="image-20221213230321504"
>&lt;/p>
&lt;p>例題3&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/928uNym.png"
loading="lazy"
alt="image-20221213231138167"
>&lt;/p>
&lt;p>例題4&lt;/p>
&lt;p>parse1&lt;img src="https://i.imgur.com/B8YeFxw.jpg"
loading="lazy"
alt="image-20221213233229409"
>&lt;/p>
&lt;p>parse2&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/z5Udxxt.jpg"
loading="lazy"
alt="image-20221213233442414"
>&lt;/p>
&lt;p>parse3&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/jBQDnnR.png"
loading="lazy"
alt="image-20221213233645680"
>&lt;/p>
&lt;p>例題5&lt;/p>
&lt;p>parse1&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/QNOoXgC.png"
loading="lazy"
alt="image-20221213235008337"
>&lt;/p>
&lt;p>parse2,3&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/VLdy9Wu.png"
loading="lazy"
alt="image-20221213235124681"
>&lt;/p>
&lt;p>例題6&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/vNkpGIt.jpg"
loading="lazy"
alt="image-20221214001735125"
>&lt;/p>
&lt;h2 id="evalue-cpu-scheduling-performance-5-criteria">Evalue CPU Scheduling Performance 5 criteria&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>
&lt;p>CPU utilization：cpu花在Process exec time / CPU &lt;strong>total time(process exec time + context switching time+ idle time)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>舉例：Process平均花5ms在exec上 ,context switching = 1ms,則CPU utilization = 5/5+1 =5/6&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Throughput(產能)：單位時間內完成的Job數目&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Waiting Time(等待時間，考試重點)&lt;/strong>：process花在ready queue中等待獲得CPU之等待時間加總&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/owdeLYf.png"
loading="lazy"
alt="image-20221214224920098"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Turnaround Time(完成時間)：從Process進入(到達)到它工作完成的這段時間差值&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/1F9T30z.png"
loading="lazy"
alt="image-20221214225625777"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Response Time(回應時間)：自user(user process) input 命令/Data 給系統到系統產生&lt;strong>第一個回應&lt;/strong>的時間差，沒有一個特定的量法去量它，稱之Time-sharing system, user-mteractive, &lt;strong>application特別重視這一塊&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>由上述得知，排班的目標必是，**利用度越高、產能越高，時間相關的東西越短越好 **&lt;/p>
&lt;h2 id="cpu排班法則行為介紹">CPU排班法則行為介紹&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>FIFO&lt;/li>
&lt;li>SJF&lt;/li>
&lt;li>SRTF&lt;/li>
&lt;li>Priority&lt;/li>
&lt;li>RR&lt;/li>
&lt;li>Multilevel Queues&lt;/li>
&lt;li>Multilevel Feedback Queues (MFQs)&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;h3 id="fifo法則">FIFO法則&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>定義：到達時間最小的process，優先取得CPU&lt;/p>
&lt;/li>
&lt;li>
&lt;p>例如：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Process&lt;/th>
&lt;th>CPU(burst) Time 要花的CPU time&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>P1&lt;/td>
&lt;td>24&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P2&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P3&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>到達時間皆為0(從一開始就到了)&lt;/p>
&lt;p>到達順序為：P1, P2, P3(擺到ready queue的順序)&lt;/p>
&lt;p>Question&lt;/p>
&lt;ol>
&lt;li>畫出Gantt Chart&lt;/li>
&lt;li>求Avg. waiting time&lt;/li>
&lt;li>求Avg. Turnaround Time&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/5S4T8z9.png"
loading="lazy"
alt="image-20221214235730530"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>分析&lt;/p>
&lt;ol>
&lt;li>
&lt;p>排班效能最差，即&lt;strong>Waiting time &amp;amp; Turnaround time 最長&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可能會有**Convoy Effect(護衛效應：許多Processes 均在等待一個需要很長CPU time之process 完成工作，才能取得CPU，造成Avg waiting time 很長之不良效應) **&lt;/p>
&lt;/li>
&lt;li>
&lt;p>公平&lt;/p>
&lt;/li>
&lt;li>
&lt;p>No Starvation&lt;/p>
&lt;ul>
&lt;li>(沒有&lt;strong>飢餓現象：Process因為長期無法取得完工所需各式資源，導致它遲遲無法完工，形成Indefinite Blocking 現象，稱之Starvation，容易發生在不公平對待之環境，若再加上Preemptive機制，則更是容易發生，補償方案：&amp;ldquo;Aging(老化)&amp;ldquo;技術，隨著Process待在System內的時間逐漸增加，我們也逐步提高此process的優先權，故可取得Process Resources完工，因為不會Starvation&lt;/strong>。注意：Soft real-time System不採用Aging，因為Soft real-time system是為了確保real-time process取得最高優先權，如果加入Aging機制，就有可能有process的priority高於real time process)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Non-preemptive(不可插隊；不可搶奪)法則&lt;/p>
&lt;ul>
&lt;li>
&lt;p>版本1(白話文)&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Non-preemptive法則&lt;/p>
&lt;ul>
&lt;li>定義：除非執行中的process&lt;strong>自願放掉CPU&lt;/strong>，其他Process才會有機會取得CPU，否則就只能wait，不可逕自搶奪CPU&lt;/li>
&lt;li>例如：完成工作、Wait for I/O-completed after issue I/O-request&lt;/li>
&lt;li>優點：
&lt;ol>
&lt;li>Context Switching的次數比較少，因為不可插隊，所以Switching的頻率小很多&lt;/li>
&lt;li>process之完工時間點較可預期(Predictable)，因為不可插隊&lt;/li>
&lt;li>比較不會有Race Condition Problem&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>缺點：
&lt;ol>
&lt;li>排班的效能較差，因為可能有Convoy effect&lt;/li>
&lt;li>不適合用在Time-sharing System, Real time System，因為這兩個都需要插隊的機制&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Preemptive法則&lt;/p>
&lt;ul>
&lt;li>定義：執行中的Process有可能&lt;strong>被迫放棄CPU&lt;/strong>，回到ready Queue，將CPU切給別人使用，eg. Time-out, interrupt etc&lt;/li>
&lt;li>優點：
&lt;ol>
&lt;li>排班效益較佳，平均waiting/ turnound Time較小，可以把耗時較長的Process Preemptive掉&lt;/li>
&lt;li>適用於Real-time sysem(要能夠把real time 的process插入進去) 及Time-Sharing System&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>缺點：
&lt;ol>
&lt;li>完工時間較不可預期&lt;/li>
&lt;li>Context Switching次數多，負擔較重&lt;/li>
&lt;li>須注意Race Condition之發生&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>版本2：從CPU排班決策(啟動)之時機點來做區分(可以參考 State Transition，以下是五種情況做解說)&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>Running &amp;mdash;&amp;gt; Block eg: wait for I/O completed [自願放棄]&lt;/li>
&lt;li>Running &amp;mdash;&amp;gt; Ready eg: time-out [被迫放棄]&lt;/li>
&lt;li>Wait &amp;mdash;&amp;gt; Ready eg: I/O-completed [尊爵不凡的process醒來了，所以要啟動CPU scheduling，獲得CPU，低優先權的process被迫放棄CPU]&lt;/li>
&lt;li>Running &amp;mdash;&amp;gt; Exit eg:完成工作 [自願放棄]&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>所以若排班決策之啟動點只包含1,4，未包含2,4，則為Non-preemptive,否則preempt。&lt;/p>
&lt;p>Note：凡是 xxx &amp;mdash;&amp;gt; ready 皆列入preemptive元素(選項)，所以&lt;/p>
&lt;p>ready/suspend &amp;mdash;&amp;gt; ready&lt;/p>
&lt;p>New &amp;mdash;&amp;gt; Ready&lt;/p>
&lt;p>皆列入preemptive&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h3 id="sjfshortest-job-first法則">SJF(Shortest Job First)法則&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>定義：具有最小的CPU TIME之Process，優先取得CPU，若都一樣小，則採FIFO。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>例如：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Process&lt;/th>
&lt;th>CPU Time&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>P1&lt;/td>
&lt;td>6&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P2&lt;/td>
&lt;td>8&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P3&lt;/td>
&lt;td>7&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P4&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Process到達時間皆為0，求Avg waiting time&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/VKxulnL.png"
loading="lazy"
alt="image-20221217132504544"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>分析：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>排班效益最佳(optimal)，即Avg waiting/ turnaround time最小&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>說明：Why optimal?&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/tZPVenF.png"
loading="lazy"
alt="image-20221217133256469"
>&lt;/p>
&lt;p>因為Short Job所減少的等待時間必定&amp;gt;= Long-Job所增加的等待時間，因為平均等待時間會最小&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>不公平，偏好short Job&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>可能會Starvation(for long Job)&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可以分成&lt;/p>
&lt;blockquote>
&lt;p>Non-preemptive &amp;mdash;&amp;gt; SJF做代表&lt;/p>
&lt;p>Preemptive &amp;mdash;&amp;gt; 另外&lt;strong>叫做SRTF法則&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>較不適合用在Short-term scheduler(比較不恰當啦，但你要用也是可，因為Short-term scheduler執行頻率太高，所以很難在極短的時間間隔內去預估出精確的CPU Burst time for each process 且排出最小值，不易真正呈現出SJF之行為，反倒是&lt;strong>適合用long-term scheduler&lt;/strong>&lt;/p>
&lt;p>&lt;code>Short time scheduler是指專門負責處理短暫的工作的計劃程序。這些工作通常會在短短的時間內完成，並且有許多工作要求同時進行。在這種情況下，使用short job first（SJF）法則來處理工作可能不是最佳選擇。這是因為SJF法則是基於工作預計完成時間的，並假設工作的預計完成時間是可以預先知道的。但是，在short time scheduler中，大多數工作的預計完成時間都是未知的，因此無法準確地應用SJF法則。另一個原因是，SJF法則會將短工作放在優先執行的位置，因此會把許多短工作排在一起。在short time scheduler中，這可能會導致許多短工作之間的競爭，從而導致效率降低。總的來說，short time scheduler更適合使用其他計劃策略，例如基於先進先出（FIFO）或基於最短剩餘時間（SRT）的策略，來處理短暫的工作。)&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>如何評估process之the next cpu burst time?&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>公式(加權指數平均公式)&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/oysceoz.png"
loading="lazy"
alt="image-20221217153209006"
>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>t0&lt;/th>
&lt;th>t1&lt;/th>
&lt;th>t2&lt;/th>
&lt;th>t3&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>實際值&lt;/td>
&lt;td>20&lt;/td>
&lt;td>10&lt;/td>
&lt;td>40&lt;/td>
&lt;td>20&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>預估值&lt;/td>
&lt;td>&lt;strong>20&lt;/strong>(一開始還沒預估，所以都是抓t0的值)&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>?&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>T0&lt;/td>
&lt;td>T1&lt;/td>
&lt;td>T2&lt;/td>
&lt;td>T3&lt;/td>
&lt;td>T4&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;img src="https://i.imgur.com/8wvBUc8.png"
loading="lazy"
alt="image-20221217154217150"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>意義:　&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/Gx7aClO.png"
loading="lazy"
alt="image-20221217160852665"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h3 id="srtfsrjfsrtn-shortest-remaining-time-job-firstnext">SRTF,SRJF,SRTN( Shortest Remaining-Time Job First(Next))&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>定義：&lt;strong>即為Preemptive-SJF法則&lt;/strong>，即剩餘CPU Burst Time(CPU完成一次短時間工作所需的時間)最小的 Process，取得CPU。也就是若新到達的Process其CPU Burst TIme 小於目前執行中process剩下的CPU time, 則新到達之Process可以**插隊(preemption)**執行。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>舉例：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Process&lt;/th>
&lt;th>到達時間&lt;/th>
&lt;th>CPU Time&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>P1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>8&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P2&lt;/td>
&lt;td>1&lt;/td>
&lt;td>4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P3&lt;/td>
&lt;td>2&lt;/td>
&lt;td>9&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P4&lt;/td>
&lt;td>3&lt;/td>
&lt;td>5&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>求Avg waiting Time for&lt;/p>
&lt;ol>
&lt;li>
&lt;p>SRTF&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/enr3uhw.png"
loading="lazy"
alt="image-20221217234802588"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>SJF(不可插隊)&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/mMRP8xo.png"
loading="lazy"
alt="image-20221217235757038"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>FIFO&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/rVUHVGE.png"
loading="lazy"
alt="image-20221217235808248"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>分析：&lt;/p>
&lt;ol>
&lt;li>與SJF相比，SRTF之平均waiting/Turnaround time會比較小(SRTF是SJF的一個子類，因為SRTF&lt;strong>可插隊&lt;/strong>，所以會有最小的waiting time, 但是付出較大的Context Switching的overhead(負擔)&lt;/li>
&lt;li>不公平，偏好Short remaining-time Job&lt;/li>
&lt;li>會有Starvation的問題&lt;/li>
&lt;li>Preemptive法則&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h3 id="priority法則">Priority法則&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>定義：&lt;strong>可參數化的法則&lt;/strong>，具有Highest Priority之Process，優先取得CPU，若多個Process權值相同，則以&lt;strong>FIFO&lt;/strong>為準，也有分成Non-preemptive, Preemptive的差異。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>舉例：不可插隊&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Process&lt;/th>
&lt;th>CPU time&lt;/th>
&lt;th>Priority No.&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>P1&lt;/td>
&lt;td>10&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P2&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P3&lt;/td>
&lt;td>2&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P4&lt;/td>
&lt;td>1&lt;/td>
&lt;td>4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P5&lt;/td>
&lt;td>5&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>且，Priority No越小，優先權越大The Smaller Priority No. Implies the higher priority。求Avg waiting Time&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>分析：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>是一個具參數化的法則，即給予不同的priority高低定義，可展現出不同的排班行為。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Priority定義&lt;/th>
&lt;th>行為&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>抵達時間越早，優先權更高&lt;/td>
&lt;td>FIFO&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CPU　Time越小，優先權越高&lt;/td>
&lt;td>SJF&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>剩餘時間越小，優先權越高&lt;/td>
&lt;td>SRTF&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>因此FIFO, SJF, SRTF都是屬於Priority的一種&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不公平&lt;/p>
&lt;/li>
&lt;li>
&lt;p>會有Starvation (可用Aging去解決)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>分為Non-preemptive, preemptive兩種&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h3 id="rrround-robin法則考試重點">RR(Round Robin)法則(考試重點)&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>定義：&lt;strong>Time-Sharing System採用&lt;/strong>，OS會規定一個CPU time Quantun(or Slice)，當Process取得CPU執行後，若未能在此Quantum內完成工作，則Timer會發出&amp;quot;Time-out&amp;rdquo; interrupt通知OS，OS會&lt;strong>強迫&lt;/strong>此process放掉CPU，且回到ready queue中，等待下一輪再取得CPU執行，每一輪之中，process是以FIFO排隊方式取得CPU&lt;/p>
&lt;/li>
&lt;li>
&lt;p>舉例1：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Process&lt;/th>
&lt;th>Cpu time&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>P1&lt;/td>
&lt;td>8&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P2&lt;/td>
&lt;td>4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P3&lt;/td>
&lt;td>9&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P4&lt;/td>
&lt;td>5&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>到達時間皆為0，順序是P1~P4, 使用RR(Quantum=4), 求Avg waiting time&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/RLPckKA.png"
loading="lazy"
alt="image-20221218124859568"
>&lt;/p>
&lt;p>舉例2:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Process&lt;/th>
&lt;th>Arrival Time&lt;/th>
&lt;th>Cpu Time&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>P1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>10&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P2&lt;/td>
&lt;td>2&lt;/td>
&lt;td>5&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P3&lt;/td>
&lt;td>7&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P4&lt;/td>
&lt;td>13&lt;/td>
&lt;td>8&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;img src="https://i.imgur.com/enClm5v.png"
loading="lazy"
alt="image-20221218130748491"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>舉例3:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Process&lt;/th>
&lt;th>Arrival time&lt;/th>
&lt;th>行為&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>P1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>5CPU+6I/O+4CPU&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P2&lt;/td>
&lt;td>3&lt;/td>
&lt;td>15CPU&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P3&lt;/td>
&lt;td>8&lt;/td>
&lt;td>3CPU+10I/O+9CPU&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P4&lt;/td>
&lt;td>14&lt;/td>
&lt;td>8CPU&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Quantum= 5，問turnaound time ? waiting time ?&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/l8iAsbF.png"
loading="lazy"
alt="image-20221218200907489"
>&lt;/p>
&lt;ul>
&lt;li>注意：有些題目是&lt;strong>有爭議的&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>​ eg.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Process&lt;/th>
&lt;th>到達&lt;/th>
&lt;th>CPU time&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>P1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>6&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P2&lt;/td>
&lt;td>4&lt;/td>
&lt;td>9&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P3&lt;/td>
&lt;td>8&lt;/td>
&lt;td>6&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>​ 採RR(Q=4)&lt;/p>
&lt;p>​ &lt;img src="https://i.imgur.com/n0mJ6DI.png"
loading="lazy"
alt="image-20221218201710742"
>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>分析：&lt;/p>
&lt;ol>
&lt;li>Time-sharing System 採用&lt;/li>
&lt;li>也是一個可參數化的法則(ie. Quantum)&lt;/li>
&lt;li>公平&lt;/li>
&lt;li>No starvation&lt;/li>
&lt;li>preemptive法則(Real-Time, Time-Sharing適用，RR超過Quantum time後會&lt;strong>被迫&lt;/strong>回到ready&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>舉例2&lt;/p>
&lt;p>Quantum=∞&lt;/p>
&lt;p>則RR會變成&lt;strong>FIFO&lt;/strong>法則&amp;mdash;&amp;gt; 排班效能很差&lt;/p>
&lt;p>注意：也因此，FIFO屬於RR的一種&lt;/p>
&lt;/li>
&lt;li>
&lt;p>舉例3&lt;/p>
&lt;p>Quantum =極小值&lt;/p>
&lt;p>則Context Switching太頻繁，CPU Utilization會很低&lt;/p>
&lt;p>依經驗法則，若Quantum值能讓**80%**的Job在Quantum內完成，效能較佳。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>補充：RR雖然是公平的，但也可支持差異化(優先權差異)之實現，How do you achieve this?&lt;/p>
&lt;p>Ans.&lt;/p>
&lt;ol>
&lt;li>針對高優先權Process在ready Queue中&lt;strong>置入多個PCB pointer 指向此Process&lt;/strong>，使得每一輪當中，它有多次取得CPU之機會&lt;/li>
&lt;li>針對&lt;strong>高優先權Process給予較大的Time Quantum&lt;/strong>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h3 id="multilevel-queues多層佇列法則">MultiLevel Queues(多層佇列)法則&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>定義：&lt;/p>
&lt;ol>
&lt;li>將原本單一一條ready queue變成多條ready queues且高、低優先權不同&lt;/li>
&lt;li>Queues之間的排班法則，通常採取&lt;strong>Preemptive and Priority&lt;/strong>法則&lt;/li>
&lt;li>每個Queue 可以有自己的排班法則 eg. RR&lt;/li>
&lt;li>Process一旦被置入於某個Queue中，&lt;strong>就不可(不允許)在不同ready queues之間移動&lt;/strong>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>舉例：I/O-Bound與CPU-Bound Job你會置於哪個Queue中?&lt;/p>
&lt;p>Ans：&lt;strong>I/O-Bound Job &amp;mdash;&amp;gt;Q1&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>​ 　　　&lt;strong>CPU-Bound Job &amp;mdash;&amp;gt;Q3&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>分析：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>可參數化的項目眾多&lt;/strong>&lt;code>1. Queue的數目 2. Queue之間的排班法則 3. 每個Queue自己的排班法則 4. Process被放入哪個Queue之Criteria &lt;/code>，有助於排班設計及效能調校之Flexibility&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>不公平&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>有&lt;strong>Starvation(被放在Q3 的Process永世不得翻身，因為Process一旦被置入於某個Queue中，就不可(不允許)在不同ready queues之間移動☆☆☆☆☆&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Preemptive&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h3 id="multilevel-feedback-queuesmfqs多層回饋佇列">MultiLevel Feedback Queues(MFQs)(多層回饋佇列)&lt;/h3>
&lt;ul>
&lt;li>定義：與MultiLevel Queue相似，&lt;strong>差別：允許Process 在不同Queues 之間移動，可採取類似Aging技術&lt;/strong>，甚至可以搭配降級的做法，來&lt;strong>避免Starvation&lt;/strong>&lt;/li>
&lt;li>分析：
&lt;ol>
&lt;li>&lt;strong>可參數化的項目眾多&lt;/strong>&lt;code>1. Queue的數目 2. Queue之間的排班法則 3. 每個Queue自己的排班法則 4. Process被放入哪個Queue之Criteria 5.Process在不同佇列之間移動的規則&lt;/code>，有助於排班設計及效能調校之Flexibility&lt;/li>
&lt;li>&lt;strong>不公平&lt;/strong>&lt;/li>
&lt;li>不會有&lt;strong>Starvation(被放在Q3 的Process永世不得翻身，因為Process一旦被置入於某個Queue中，就不可(不允許)在不同ready queues之間移動☆☆☆☆☆&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Preemptive&lt;/strong>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h3 id="小結">小結&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>哪些是Non-preemptive法則&lt;/p>
&lt;p>Ans. FIFO,SJF,SRTF, Non-preemptive priority&lt;/p>
&lt;/li>
&lt;li>
&lt;p>哪些是No Starvation&lt;/p>
&lt;p>Ans. FIFO, RR, MFQs&lt;/p>
&lt;/li>
&lt;li>
&lt;p>哪些包含於(∊)關係是錯的&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>​ A. FIFO ∊ Priority&lt;/p>
&lt;p>​ B. SJF ∊ Priority&lt;/p>
&lt;p>​ C. FIFO ∊ RR&lt;/p>
&lt;p>​ D. SJF ∊ RR&lt;/p>
&lt;p>​ E. RR ∊ MFQs &lt;code>是喔，MFQs的參數可以設定成一條Queue&lt;/code>&lt;/p>
&lt;p>​ Ans. (D)&lt;/p>
&lt;h3 id="補充-cpu-utilization計算">補充 CPU Utilization計算&lt;/h3>
&lt;p>例1.&lt;/p>
&lt;p>假設採RR排班&lt;/p>
&lt;p>Time Quantum值= &lt;strong>Q&lt;/strong>&lt;/p>
&lt;p>Context Switch Time = S&lt;/p>
&lt;p>Process 平均執行每隔&lt;strong>T&lt;/strong>時間會發出I/O-request, 求下列Case之CPU Utilization&lt;code>(cpu花在Process exec time / CPU **total time(process exec time + context switching time+ idle time)** )&lt;/code>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>0 &amp;lt; S &amp;lt; T &amp;laquo;Q&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/mGdVm6a.png"
loading="lazy"
alt="image-20221219205831174"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>0&amp;lt;S&amp;lt;Q&amp;laquo;T&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>​ &lt;img src="https://i.imgur.com/QyGgbtd.png"
loading="lazy"
alt="image-20221219210325226"
>&lt;/p>
&lt;ol start="3">
&lt;li>
&lt;p>0&amp;lt;S=Q &amp;laquo;T&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/9ZIQrps.png"
loading="lazy"
alt="image-20221219211653789"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Q非常小&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/vmguH7P.png"
loading="lazy"
alt="image-20221219211707198"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>例2. [恐] (看不懂)&lt;/p>
&lt;p>10個I/O-Bound Tasks(很花I/O)&lt;/p>
&lt;p>1 個CPU-Bound Tasks(很花CPU)&lt;/p>
&lt;p>I/O-Bound task執行每隔1ms 發出 I/O-request，每個I/O-運作花10ms&lt;/p>
&lt;p>Context Switching Time = 0.1 ms, 求CPU utilization, 採&lt;strong>RR&lt;/strong>法則&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Quantum = 1ms&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/DW7jDRF.png"
loading="lazy"
alt="image-20221219215757814"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Quantum = 10ms&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/qr7YiH4.png"
loading="lazy"
alt="image-20221219220609086"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>​ 寫完之後會發現有個info沒有用到「每個I/O-運作花10ms 」，因為有CPU-Bound的存在，所以不存在idle Time，如果不存在CPU-Bound，則可能存在idle的情形，就需要考慮這種情形&lt;/p>
&lt;h2 id="特殊系統之排班設計考量">特殊系統之排班設計考量&lt;/h2>
&lt;h3 id="multiprocessors-system-1">Multiprocessors System&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>Multiprocessors分為&lt;/p>
&lt;ol>
&lt;li>
&lt;p>ASMP(非對稱的，Master-slave架構) &amp;mdash;&amp;gt; 沒有什麼特殊設計，嘻嘻，因為只有Master這個CPU去看ready queue以及job的assign，所以其實沒啥特殊設計&lt;/p>
&lt;/li>
&lt;li>
&lt;p>SMP(對稱式) &amp;mdash;&amp;gt;&lt;/p>
&lt;ol>
&lt;li>
&lt;p>每個CPU&lt;strong>共享&lt;/strong>同一條Ready Queue，當CPU完成某Process後，就去存取ready Queue，取走一個Process執行。&lt;strong>設計重點：必須提供ready queue的互斥存取機制，若未提供，則可能發生Process重複執行或Process被ignored(無人執行)之錯誤&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/DSHiQrv.png"
loading="lazy"
alt="image-20221220225037817"
>&lt;/p>
&lt;p>例如：CPU去取得Process之工作如下&lt;/p>
&lt;ol>
&lt;li>取得(read) Ready Queue, Frond End的process之PCB Pointer&lt;/li>
&lt;li>刪除此Process Pointer from Queue&lt;/li>
&lt;/ol>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>CPU1&lt;/th>
&lt;th>CPU2&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>T1: step1: 取得P1 PCB pointer&lt;/td>
&lt;td>T2:step1取得P1 PCB pointer&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>T3: Dequeue執行&lt;/td>
&lt;td>T4: Dequeue執行&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>設計重點：&lt;/p>
&lt;ol>
&lt;li>必須提供ready Queue的互斥存取機制&lt;/li>
&lt;li>不須考量Load Balancing&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>每個CPU有&lt;strong>自己&lt;/strong>的Ready Queue&lt;/p>
&lt;p>每個CPU只會檢查自己的ready Queue, 有工作就執行，無工作就idle&lt;/p>
&lt;p>設計重點：&lt;/p>
&lt;ol>
&lt;li>不須有互斥存取的考量，一旦發生idle，則把其他CPU的queue調整過來&lt;/li>
&lt;li>需考量Load Balancing，避免有CPU沒事，有CPU很忙。通常使用兩種機制來調整CPU Loading
&lt;ol>
&lt;li>Push migration(移轉)&lt;/li>
&lt;li>Pull migration(移轉)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h3 id="processor-affinity">Processor affinity&lt;/h3>
&lt;ul>
&lt;li>定義：在multiprocessors system中，當process已決定某CPU上執行，則在他執行過程當中，盡&lt;strong>量不要將之移轉到其他CPU上執行&lt;/strong>(除非有其必要，eg. processor BAD, load Balancing, etc)避免CPU內之cache等內容要複製，且刪除，影響到效能表現，可以有
&lt;ol>
&lt;li>Hard affinity：規定process不可移轉&lt;/li>
&lt;li>Soft affinity：盡可能不轉，但不強制限制，若有需要還是可以轉&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h2 id="real-time-system排班設計考量">Real-Time System排班設計考量&lt;/h2>
&lt;h3 id="hard-real-time-system-1">Hard real-time system&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>排班設計考量&lt;/p>
&lt;p>Step&lt;/p>
&lt;ol>
&lt;li>
&lt;p>先確定這些工作是否schedulable(可排程化，CPU可以負荷的了)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>確定可schedulable後，然後在考慮是否可以滿足各工作的DeadLine&lt;/p>
&lt;p>兩個排班法則&lt;/p>
&lt;ol>
&lt;li>Rate-Montonic scheduling&lt;/li>
&lt;li>EDF(Earliest Deadline First)法則&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Schedulable與否之判斷公式：&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/YGIRHX0.png"
loading="lazy"
alt="image-20221221220452472"
>&lt;/p>
&lt;p>例：有下列4個Real-time event. 其CPU burst time,Period Time 分別是：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>CPU Burst Time&lt;/th>
&lt;th>Period Time&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>20ms&lt;/td>
&lt;td>80ms&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>50ms&lt;/td>
&lt;td>100ms&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>30ms&lt;/td>
&lt;td>30ms&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Xms&lt;/td>
&lt;td>1Sec&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>，則在Schedulable要求下，x不可超過?ms&lt;/p>
&lt;p>Ans&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/Uz4llsU.png"
loading="lazy"
alt="image-20221221222752875"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>怎麼排程以滿足個工作DeadLine after Schedulable?&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Rate-Monotonic法則&lt;/p>
&lt;ol>
&lt;li>
&lt;p>採取Static priority(一旦process的優先權高低順序訂定了，就不會再改變) 且 preemptive 法則&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Period Time愈小，優先權越高&lt;/p>
&lt;/li>
&lt;li>
&lt;p>舉例&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Process&lt;/th>
&lt;th>Period Time&lt;/th>
&lt;th>CPU time&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>P1&lt;/td>
&lt;td>50&lt;/td>
&lt;td>20&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P2&lt;/td>
&lt;td>100&lt;/td>
&lt;td>35&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Q1. schedulable與否?&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/b4Hvzog.png"
loading="lazy"
alt="image-20221221233303344"
>&lt;/p>
&lt;p>Q2. 若規定P2的優先高，且preemptive, 這樣是否滿足DeadLine?&lt;code>這題感覺怪怪的，不懂&lt;/code>&lt;/p>
&lt;p>​ &lt;img src="https://i.imgur.com/kspYKY2.png"
loading="lazy"
alt="image-20221222001538807"
>&lt;/p>
&lt;p>Q3. 採用Rate-Monotonic, 是否滿足Deadline?&lt;/p>
&lt;p>​ &lt;img src="https://i.imgur.com/W1WG2Gm.png"
loading="lazy"
alt="image-20221222001627140"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>分析：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>並不保證可以滿足DeadLine&lt;/strong>&lt;/li>
&lt;li>&lt;strong>在Static priority要求下，它是Optimal(若它無法滿足DeadLine,其他Static priority 法則也是無法滿足&lt;/strong>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>EDF(Earliest Deadline First)&lt;/p>
&lt;ul>
&lt;li>
&lt;p>定義：採用Dynamic priority 且Preemptive&lt;/p>
&lt;/li>
&lt;li>
&lt;p>規定：DeadLine越小(早)優先權越高&lt;/p>
&lt;/li>
&lt;li>
&lt;p>舉例：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Process&lt;/th>
&lt;th>Period&lt;/th>
&lt;th>CPU Time&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>P1&lt;/td>
&lt;td>50&lt;/td>
&lt;td>25&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P2&lt;/td>
&lt;td>80&lt;/td>
&lt;td>35&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>是否滿足Deadline?&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Rate-Monotonic&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/37nWeoT.png"
loading="lazy"
alt="image-20221222222736843"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>EDF&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/RMT98Qy.png"
loading="lazy"
alt="image-20221222231738347"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>分析：&lt;/p>
&lt;ol>
&lt;li>EDF保證是optimal in the schedulable case(任何工作都可以滿足 DeadLine)&lt;/li>
&lt;li>理論上，CPU utilization 可達100%，&lt;strong>但實際上不可能&lt;/strong>，因為有Context switching, interrupt handling 等額外負擔&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="soft-real-time-system-1">Soft real-time system&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>定義：這個系統要確保real-time的process取得最高優先權，同時，這個real-time的process priority不能做衰減&lt;/p>
&lt;/li>
&lt;li>
&lt;p>就CPU Scheduling Design 而言，必須&lt;/p>
&lt;ol>
&lt;li>支援preemptive-priority&lt;/li>
&lt;li>不支援Aging技術&lt;/li>
&lt;li>盡可能降低Kernel Dispatch latency time, 使得real-time process可以及早開工&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>降低kernel Dispatch latency&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>困難度(緣由) ：&lt;strong>大部分的OS，皆不允許當kernel正在執行System Call or 其他System processes時，被user process任意插隊(preemption)，目的是為了確保kernel Data Structures的正確性(即不要有Race Condition)，然而此種做法，對於Soft real-time system極為不利&lt;/strong>&lt;/p>
&lt;p>eg. 假設目前kernel 正在執行一個Long-time system call(eg. I/O operation)，而此時real-time process到達/fork(),它必須等到kernel完成此long-time system call後，才能取得CPU，&lt;strong>所以&lt;/strong>&lt;/p>
&lt;p>&lt;strong>Dispache latency太長，要解決此一問題，原則是: 必須插隊kernel 且要保障kernel Data Structure之正確性&lt;/strong>&lt;/p>
&lt;p>方法&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Preemption Point：&lt;/p>
&lt;ul>
&lt;li>定義：在此System calls code中，加入一些Preemption Point(在此時點插隊時，Kernel是安全的)將來，&lt;strong>System call執行時若遇到Preemption Point ，System call會先暫停，Kernel會檢查此時是否還有real-time process存在/到達，若有，則Kernel system call暫停執行，CPU分派給real-time Process使用&lt;/strong>，若無，則System Call繼續執行，直到遇見下一個Preemption Point&lt;/li>
&lt;li>缺點：System Call中可以加入的Preemption Point數目不夠多，因為Dispatch Latency仍然很長。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Kernel可隨時被real-time process插隊，但要對於Kernel的共享Data Structure/resoruce提供嚴謹的互斥存取(Synchronization 機制)，以確保資料之正確性(當P1對某個Data進行操作，執行到一半時被real-time process給搶走，此時會把該Data給Lock住，不讓real-time process操作該Data，以保護資料)&lt;/p>
&lt;ul>
&lt;li>
&lt;p>缺點：可能造成Priority Inversion問題(優先權反轉)，高優先權的Process所須的共享Data/resources恰好被一些低優先權的Process&lt;u>把持&lt;/u>，無法存取(所以互斥存取控制之故)，造成高優先權等待低優先權Process之情況(即高process要等低process釋放這些共享Data/resource)&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/tJ80NeW.png"
loading="lazy"
alt="image-20221225000043643"
>&lt;/p>
&lt;p>當高優先權的Process因為遲遲等不到Lock解除，會因為time-out的關係而放棄CPU，此時可能有其他中優先權的Process取得CPU的使用權，因此低優先權的Process完成不了，進而完成對共享Data/resources之使用進而Release, 所以高優先權process被迫要等一段很久的時間&lt;/p>
&lt;/li>
&lt;li>
&lt;p>解決方法：Priority Inheritance&lt;/p>
&lt;ul>
&lt;li>定義：讓低優先權的Process暫時&lt;strong>繼承&lt;/strong>高優先權之權值，使得低優先權Process可以很快取得CPU完成對共享Data/Resouce之使用，並release them. 同時，也立刻恢復其原本的低權值&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h3 id="real-time-system之dispatch-latency-組成">Real-time system之Dispatch Latency 組成&lt;/h3>
&lt;p>&lt;img src="https://hoxtonhsu.com/C:%5cUsers%5cza546%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20221225005405637.png"
loading="lazy"
alt="image-20221225005405637"
>&lt;/p>
&lt;p>Dispatch Latency有兩個phase組成&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Conflict Phase：&lt;/strong>
&lt;ol>
&lt;li>&lt;strong>Preempts kernel&lt;/strong>&lt;/li>
&lt;li>&lt;strong>低優先權realse高優先權所需之Data/resource&lt;/strong>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;strong>Dispatch Phase&lt;/strong>
&lt;ol>
&lt;li>&lt;strong>Context Switching&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Change mode to user Mode&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Jump&lt;/strong>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h2 id="thread-management貝多芬">Thread Management(貝多芬)&lt;/h2>
&lt;blockquote>
&lt;p>Thread( or Multithreading)定義、優點&lt;/p>
&lt;p>Process(Single-Threaded) vs Thread (Multithreading)&lt;/p>
&lt;p>user-level thread 與 kernel-level thread&lt;/p>
&lt;p>Multithreading Model(3種)&lt;/p>
&lt;p>Multithreading issue&lt;/p>
&lt;blockquote>
&lt;p>fork()&lt;/p>
&lt;p>signal delivery&lt;/p>
&lt;p>Threads pool&lt;/p>
&lt;/blockquote>
&lt;p>程式追蹤(PThread library)&lt;/p>
&lt;/blockquote>
&lt;h3 id="thread">Thread&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>定義：又叫lightweight-process(傳統的process就叫heavyweight process)，是OS&lt;strong>分配CPU time&lt;/strong> 之對象單位**(恐：It&amp;rsquo;s a basic unit of CPU Library)**&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Thread 建立後，其私有的(private)內容組成包含有(都是與執行相關的)&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Programming Counter&lt;/strong>&lt;/li>
&lt;li>&lt;strong>CPU registers value&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Stack&lt;/strong>&lt;/li>
&lt;li>Thread ID, State, etc &amp;hellip;(Note: record in TCB[Thread Control Block])此外，同一個Process內不同之Threads彼此共享此Process的
&lt;ol>
&lt;li>&lt;strong>Code Section(合稱Memory space, address space)&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Data Section(合稱Memory space, address space)&lt;/strong>&lt;/li>
&lt;li>&lt;strong>other OS resources eg. open files, I/O resources ,singal, etc &amp;hellip;&lt;/strong>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>圖示&lt;/p>
&lt;ol>
&lt;li>
&lt;p>MultiThreading Model&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/bJe15zy.png"
loading="lazy"
alt="image-20221225124253929"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Process = Single-Threaded Model&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/gXamqw8.png"
loading="lazy"
alt="image-20221225125053668"
>&lt;/p>
&lt;p>Note: 類比&lt;/p>
&lt;p>Process &amp;mdash;&amp;gt; 汽車&lt;/p>
&lt;p>Thread &amp;mdash;&amp;gt; 引擎&lt;/p>
&lt;p>汽車會有一個引擎，也可以有很多，MutliThread就像是一部車子有多個引擎，然後共享車子有的配件(儀表板、方向盤等等)。CPU Time是以Thread為對象在畫分&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>優點(Benefits)&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Responsiveness&lt;/strong>：當Process內執行中的Thread被Blocked，則CPU可以切給此Process內其他available Threads 執行，&lt;strong>故整個Process不會被Blocked&lt;/strong>，仍持續Going, 所以Multithreading用在user-interactive application, 可增加對User 之回應程度&lt;/li>
&lt;li>&lt;strong>Resource Sharing&lt;/strong>：因為Process內之多條Threads 共享此Process code section，所以在同一個Memory space上可有多個工作同時執行&lt;/li>
&lt;li>&lt;strong>Economy&lt;/strong>：因為同一個Process內之不同Threads彼此共享此Process的memory 及 other OS resources, 因為&lt;strong>Thread 之 私有成分量&lt;/strong>少，故&lt;strong>Thread之Creation, Context Switching fast, Thread management cost is cheap&lt;/strong>(fork一個Process的成本遠大於複製一個Thread)&lt;/li>
&lt;li>&lt;strong>Scalability(Utilization of Multiprocessors Architecture)&lt;/strong>：可以做到同一個Process內之不同Threads可以在不同CPUs上平行執行，所以可以增加對Multiprocessors System之效益(平行程度)提升&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h3 id="process-vs-thread">Process Vs Thread&lt;/h3>
&lt;blockquote>
&lt;p>其實是在比Singal Thread and MultiThread&lt;/p>
&lt;/blockquote>
&lt;p>Thread的的優點&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Process&lt;/th>
&lt;th>Thread&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Heavyweight process&lt;/td>
&lt;td>Lightweight process&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Single-Threaded Model&lt;/td>
&lt;td>MultiThreading Model&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>是OS分配Resource之對象單位&lt;/td>
&lt;td>是OS分配CPU Time之對象單位&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>不同的Process不會有共享的Memory及Other Resources (除了Shared Memory溝通之外)&lt;/td>
&lt;td>同一個Process內之Threads彼此共享此Process之memory 及Other Resources&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>若Process內的single Thread is Blocked, 則整個Process亦Blocked&lt;/td>
&lt;td>只要Process內尚有Available Thread可執行，則整個Process不會被Blocked&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Process之Creation context Switching慢，管理成本高&lt;/td>
&lt;td>Thread快，成本低&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>對於MultiProcessors架構之效益發揮較差&lt;/td>
&lt;td>較佳&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Thread的的缺點&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Process&lt;/th>
&lt;th>Thread&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Process無此議題(除非是採用Shared Memory溝通)&lt;/td>
&lt;td>因為同一個Process內之Threads彼此共享此process Data Section，因此必須對共享的Data 提供互斥存取機制，防止race Condition&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="philosophy">Philosophy&lt;/h3>
&lt;p>&lt;strong>Process與Thread沒有功能差異，只有效能差異&lt;/strong>(你會的，我也可以，你不會的，我也不會)。&lt;/p>
&lt;p>哪些工作適合用MultiThreads?&lt;/p>
&lt;p>Ans. &lt;strong>一個時間點有多個工作要執行。例：Client-server Model(同時有人過來要檔案，看檔案)&lt;/strong>&lt;/p>
&lt;p>哪些工作不適合用MultiThreads?&lt;/p>
&lt;p>Ans. 一個時間點最多只有一個工作可以做。例：命令解譯器(eg. UNIX 之 Shell)&lt;/p>
&lt;h2 id="thread分類user-thread與kernel-thread">Thread分類：user-Thread與Kernel-Thread&lt;/h2>
&lt;p>區分角度：**Thread Management工作(如：Thread Creation, Destroy, Suspend, wakeup, Scheduling, Context Switching, etc)**由誰負責&lt;/p>
&lt;ol>
&lt;li>
&lt;p>User-Level Thread&lt;/p>
&lt;ul>
&lt;li>定義：Thread Management是由在User Site之Thread Library提供APIs, 供User Process呼叫使用，進而管理，稱之&lt;/li>
&lt;li>Kernel 完全不知道(is Unaware of) Use-Level Threads 之存在Note：只知有Process(Singal-Threaded)&lt;img src="https://i.imgur.com/E6QHraV.png"
loading="lazy"
alt="image-20221227215115098"
>&lt;/li>
&lt;li>Thread management不須Kernel介入干預**(kernel unware user-thread)**&lt;/li>
&lt;li>優點：There creation, context switching 等，Management is fast 成本較低&lt;/li>
&lt;li>缺點：
&lt;ol>
&lt;li>當Process內某條執行中的user-thread is blocked(eg. i/o)，會導致整個Process亦被Blocked(即使process內還有其他available threads)&lt;code>這個process都是user Thread，發出一個blocking的system call, kernel會認為是這個Single process發出的請求，因為kernel不知道process裡頭還有其他user Thread的存在，於是就把整個process block住，CPU切到其他process去執行&lt;/code>&lt;/li>
&lt;li>&lt;strong>MultiProcessors架構效益發揮較差&lt;/strong>(因為無法做到process內之多條user-threads平行執行，但這樣也是有好處的，整個thread的管理不需要kernel的干預，不需要再user, kernel間切換，降低管理的成本)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>例：舉凡Thread library皆是user-threads(eg. POSIX 的 PThread library&lt;code>是規格，只在UNIX系統上&lt;/code>, Mach的C-Thread Library, Solaris2以上的 UI Thread Library及Green Thread Library).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Kernel-Level Thread&lt;/p>
&lt;ul>
&lt;li>
&lt;p>定義：Thread Management完全由kernel負責，Kernel知道每一條Thread之存在並進行管理&lt;/p>
&lt;/li>
&lt;li>
&lt;p>優缺點與user-thread相反&lt;/p>
&lt;/li>
&lt;li>
&lt;p>例：大部分OS皆支援 (Windos系列 etc. 2000, Xp, UNIX, LINUX, Solaris)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>舉例：[Module版]&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/3WceJA7.png"
loading="lazy"
alt="image-20221227221417715"
>&lt;/p>
&lt;ul>
&lt;li>CPU Time依分配對象數，平均分配(10個人就分10%，20個人就分5%)&lt;/li>
&lt;li>則Pa, Pb各分到?%CPU Time，if All Threads are
&lt;ol>
&lt;li>User Thread：kernel只知道有兩個Process要來搶CPU，來分CPU Time，Pa,Pb各分50%&lt;/li>
&lt;li>Kernel Thread：kernel知道有5條Thread要分CPU time，1條分20%，Pa分到3條，所以是60%, Pb是40%&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="multithreading-model-恐龍本獨有">MultiThreading Model [恐龍本獨有]&lt;/h2>
&lt;p>恐龍本用來詮釋user Thread跟Kernel Thread的見解&lt;/p>
&lt;p>[user thread mapping kernel thread的數目]&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>Many-to-One Model&lt;/li>
&lt;li>One-to-One Model&lt;/li>
&lt;li>Many-to-Many Model&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;ol>
&lt;li>Many-to-One&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/xsaND6K.png"
loading="lazy"
alt="image-20221228220250841"
>&lt;/p>
&lt;ul>
&lt;li>定義：This model maps &lt;strong>many&lt;/strong> use threads to one kernel Thread. Thread Management is done in &lt;strong>use space&lt;/strong>&lt;/li>
&lt;li>優、缺點：如同user thread&lt;/li>
&lt;li>例：thread library皆是&lt;/li>
&lt;li>圖示：&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/sqCg5Xc.png"
loading="lazy"
alt="image-20221228220049555"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/lhpbH4A.png"
loading="lazy"
alt="image-20221229212527117"
>&lt;/p>
&lt;ol start="2">
&lt;li>One-to-One Model&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>定義：This model maps &lt;strong>each&lt;/strong> use Threads to &lt;strong>a&lt;/strong> kernel Thread. Thread Management is done in &lt;strong>use space&lt;/strong>&lt;/li>
&lt;li>優點：同kernel thread&lt;/li>
&lt;li>缺點：
&lt;ol>
&lt;li>Slower&lt;/li>
&lt;li>Process每建立一條user-thread, system就必須配合生一條kernel thread與之，所以user thread數目眾多，系統負擔會很重，耗資源&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>例：Window NT, Window2000, OS/2, &lt;strong>Linux&lt;/strong>(個人電腦系列幾乎都是ONE-TO-ONE)&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/IGGT876.png"
loading="lazy"
alt="image-20221229220124154"
>&lt;/p>
&lt;ol start="3">
&lt;li>Many to Many&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>定義：This model maps &lt;strong>many&lt;/strong> use Threads to &lt;strong>a small or equal number of&lt;/strong> kernel Thread. Thread Management is done in &lt;strong>use space&lt;/strong>&lt;/li>
&lt;li>優點：同前述kernel thread, 負擔也不像one to one的model來的重&lt;/li>
&lt;li>缺點：1. slower 2. 製作設計上，較為複雜&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/suqnx3Q.png"
loading="lazy"
alt="image-20221229222340644"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/9IyKGLf.png"
loading="lazy"
alt="image-20221229224155328"
>&lt;/p>
&lt;h2 id="multithreading-issue">MultiThreading Issue&lt;/h2>
&lt;p>原本Single Thread沒這問題&lt;/p>
&lt;ol>
&lt;li>fork() issue&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/7BGxfOx.png"
loading="lazy"
alt="image-20221229230232766"
>&lt;/p>
&lt;ol start="2">
&lt;li>
&lt;p>Signal delivery(傳送) issue&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Signal：it is used in UNIX to notify(通知) the &lt;u>process&lt;/u> that a particular event has occurred&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/yqINM2g.png"
loading="lazy"
alt="image-20221229231422602"
>&lt;/p>
&lt;p>當process收到signal通知後，它必須處理(可由process自己處理或交給default signal handler處理)&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/g1UOlQ6.png"
loading="lazy"
alt="image-20221229232030659"
>&lt;/p>
&lt;ol start="2">
&lt;li>
&lt;p>Signal的種類&lt;/p>
&lt;ol>
&lt;li>Synchronous signal[自作自受，這件事情是由你這個Process發生的，所以Signal就是發給你]eg. Divide-by-zero, illegal memory access,&lt;/li>
&lt;li>Asynchronous signal[池魚之殃，事情不是你做的，但別人發出，卻是砍你] eg. ctrl-c by administrator, time-out by timer&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/gXweQBH.png"
loading="lazy"
alt="image-20221229233929050"
>&lt;/p>
&lt;ol start="3">
&lt;li>
&lt;p>Signal Delivery issue&lt;/p>
&lt;p>4個options&lt;/p>
&lt;ol>
&lt;li>發給那個thread&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/3sQwWIo.png"
loading="lazy"
alt="image-20221230220600034"
>&lt;/p>
&lt;ol start="2">
&lt;li>
&lt;p>發給大家&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/ug5ei8O.png"
loading="lazy"
alt="image-20221230220706683"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>發給一些threads&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/2KO94EM.png"
loading="lazy"
alt="image-20221230220735243"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>發給一個thread，這個thread再把signal轉派給大家&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/sZLZfZc.png"
loading="lazy"
alt="image-20221230220744830"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Threads Pool&lt;/p>
&lt;ul>
&lt;li>緣由：在Client-Server Model中，當Server 收到Client&amp;rsquo;s request後，Server才&lt;strong>建立Thread去服務&lt;/strong>此一請求，然而&lt;strong>Thread creation 仍須耗用一些時間&lt;/strong>，所以對client 之回應&lt;strong>不是那麼迅速&lt;/strong>&lt;/li>
&lt;li>解法：採用Thread pool機制，process(server)先建立一些Threads，置於threads pool中，當收到Client&amp;rsquo;s request後，就從Thread pool中指派一條 available thread去服務此請求，不須creation回應較fast，當此Thread 完成工作以後，再回到Threads pool中Stand By 如果Threads Pool中無可用的Threads，&lt;u>則Client&amp;rsquo;s request 須等待&lt;/u>&lt;/li>
&lt;li>缺點：
&lt;ol>
&lt;li>萬一Process事先生出過多的Threads in the Thread pool, 對System resource耗用很高，&lt;code>Note:通常ＯＳ會限制Threads pool size&lt;/code>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="thread程式追蹤">Thread程式追蹤&lt;/h2>
&lt;p>(以PThread library為例)&lt;/p>
&lt;p>例：P4-49&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;Pthread.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">sum&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nf">runner&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">param&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">sum&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;=&lt;/span>&lt;span class="n">upper&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">sum&lt;/span>&lt;span class="o">+=&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">Pthread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//thraed終止
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="n">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="n">Pthread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">t&lt;/span> &lt;span class="n">tid&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//tid就代表Thread的id
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Pthread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">attr_t&lt;/span> &lt;span class="n">arrt&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//代表attribute屬性 Thread attributes set
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">...&lt;/span>
&lt;span class="n">Pthread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">attr&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">attr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">;&lt;/span>&lt;span class="c1">//取得attr 初始值
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="err">★&lt;/span>&lt;span class="n">Pthread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">tid&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">attr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">runner&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]);&lt;/span> &lt;span class="c1">//根據attr 屬性值建立一條Thread，Id記在tid中，執行runner()副程式
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Pthread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tid&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//main() thread 在此等待，直到tid thread結束
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sum&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/E96wJWE.png"
loading="lazy"
alt="image-20230101163345552"
>&lt;/p>
&lt;p>例：P4-50 程式二&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">pid&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="n">pthread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">t&lt;/span> &lt;span class="n">tid&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">Pthread_arrt_t&lt;/span> &lt;span class="n">attr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">pid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">//create child process
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span> &lt;span class="c1">//子prcess要做的事情
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">pthread_create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">tid&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">attr&lt;/span> &lt;span class="p">,&lt;/span> &lt;span class="n">runner&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//子Process去create一條thread
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//line C
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>&lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">wait&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//line P
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nf">runner&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">pthread_exit&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/RN22I2X.png"
loading="lazy"
alt="image-20230101164807174"
>&lt;/p>
&lt;p>例 p4-70&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">shared by threads
A. static local variables(共享)
B. program text/exec, binary (code sec)共享
C. register value of CPU(私有)
D. heap memory (code+ Data sec memory space)共享
E. Programming Counter (私有)
F. Stack memory(私有)
G. Open Files(共享)
H. I/O resources(共享)
I. local variable(私有)
J. Global variables(共享)
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="chapter-5-deadlock">Chapter 5 DeadLock&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>定義：&lt;strong>成立的四個必要條件&lt;/strong>，例子, &lt;strong>與Starvation做比較&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Deadlock的處理方法&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>Deadlock Prevention ★★★★&lt;/li>
&lt;li>Deadlock Avoidance(Banker&amp;rsquo;s Algo★★★★★)&lt;/li>
&lt;li>Deadlock Detection and Recovery★★&lt;/li>
&lt;li>Ignores it .&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>定理★★★★★：&lt;/p>
&lt;/li>
&lt;li>
&lt;p>相關圖形&lt;/p>
&lt;blockquote>
&lt;p>Resource Allocation Graph(RAG)+3點結論★★★★★&lt;/p>
&lt;p>Claim edgy+RAG(for Avoidance)&lt;/p>
&lt;p>wait for Graph(for Detection)★&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;h2 id="deadlock">DeadLock&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>定義：系統中存在一組Processes彼此形成&lt;strong>循環等待&lt;/strong>之情況，造成這些Processes皆&lt;strong>無法往下執行(和starvation不同，Starvation還有一絲可能會做到)&lt;/strong>，並降低Throughput之現象。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>死結成立的4個必要條件(4 necessary condition)，即缺一個，死結就不會發生. Ex. if there 4 conditions are true, then the deadlock &lt;strong>will&lt;/strong> arise. Ans. &lt;strong>False&lt;/strong>，都有不代表一定會發生&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Mutual Exclusion&lt;/strong>&lt;/p>
&lt;p>互斥性質，&lt;strong>這是對Resource(正在搶奪的資源)而言&lt;/strong>，具有此性質的Resouce，&lt;strong>在任何時間點最多只允許一個Process持有使用&lt;/strong>，不可多個process同時持有/使用。&lt;/p>
&lt;p>例：大多數的資源皆具此性質，eg. CPU, Memory, Disk, printer, etc &amp;hellip;&lt;/p>
&lt;p>例：read-only file：不具互斥性質&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Hold &amp;amp; wait&lt;/strong>&lt;/p>
&lt;p>&lt;strong>持有並等待，Process持有部分資源，且又在等待其他Process持有的資源&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>No preemption&lt;/strong>&lt;/p>
&lt;p>不可搶奪，**Process不可以任意剝奪其他Process所持有的資源，**必須等到對方釋放資源後才有機會取得資源&lt;code>若可Preemption，則必無DeadLock，頂多只有Starvation&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Circular Waiting&lt;/strong>&lt;/p>
&lt;p>循環等待，系統中存在一組Processes形成循環等待之情況，eg.&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/KZA7hIH.png"
loading="lazy"
alt="image-20230102162108560"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>恐龍本：4 implies 2&lt;/p>
&lt;p>其他版本：4 implies 1,2,3eeeee&lt;/p>
&lt;p>ex. Why Singl-process不會造成DeadLock?&lt;/p>
&lt;p>A：因為Circular waiting 不存在，只少要有兩個process才可以形成循環等待，因此四個必要條件有一個不符合，即不會造成DeadLock&lt;/p>
&lt;/li>
&lt;li>
&lt;p>例子：&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/dAckLzV.png"
loading="lazy"
alt="image-20230102163619321"
>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>與Starvatiom比較&lt;/p>
&lt;p>不同點：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>DeadLock&lt;/th>
&lt;th>Starvation&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>一組Processes形成Circular waiting，造成這些Processes皆無法往下執行，&lt;strong>Waiting forever&lt;/strong>&lt;/td>
&lt;td>Process因為長期無法取得完工所需的各式資源，造成它遲遲無法完工，&lt;strong>有完工的機會喔，只是機會渺茫&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>會連帶造成throughput低落&lt;/td>
&lt;td>與throughput高低無關&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>有4個必要條件，其中一定是No preemptive&lt;/td>
&lt;td>容易發生在Preemption的環境(沒有一定，只是容易)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>解法有prevention, Avoidance, Detection &amp;amp; recovery&lt;/td>
&lt;td>採用Aging技術防止&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>相同點：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>DeadLock 7 Starvation&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>皆是資源分配管理機制設計不恰當相關。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="resource-allocation-graphrag">Resource Allocation Graph(R.A.G)&lt;/h2>
&lt;blockquote>
&lt;p>資源分配圖&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>定義：令Ｇ=&amp;lt;V,E&amp;gt; 有向圖代表RAG，其中&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Vertex(頂點)：有兩個類型：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Process：以O來表示&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Resource：以&lt;img src="https://i.imgur.com/EnZNLpN.png"
loading="lazy"
alt="image-20230102171928690"
>表示&lt;/p>
&lt;p>其中&amp;rdquo;·&amp;ldquo;數目代表The Number of instances&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Edge(邊)：分為２種edge：&lt;/p>
&lt;ol>
&lt;li>Allocation Edge：&lt;img src="https://i.imgur.com/dpQ8jWe.png"
loading="lazy"
alt="image-20230102172625471"
>&lt;/li>
&lt;li>Requset Edge：&lt;img src="https://i.imgur.com/8JBHEw8.png"
loading="lazy"
alt="image-20230102172716745"
>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>例子 ：&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/7QY3f61.png"
loading="lazy"
alt="image-20230102173423507"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="rag的三點結論必考">RAG的三點結論☆☆☆☆☆必考&lt;/h2>
&lt;ol>
&lt;li>No Cycle則No DeadLock&lt;/li>
&lt;li>有Cycle&lt;strong>不一定&lt;/strong>有死結 例：&lt;img src="https://i.imgur.com/9d3b4lv.png"
loading="lazy"
alt="image-20230102175224638"
>因為P3一定可以完工，會釋放1個R2, 可佩給P2，此時圖無Cycle，No DeadLock&lt;/li>
&lt;li>除非(若)每一類型的資源，皆為Single instance(單一數量)，則有Cycle必為死結&lt;/li>
&lt;/ol>
&lt;h2 id="deadlock處理方式">DeadLock處理方式&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>DeadLock Prevention&lt;/li>
&lt;li>DeadLock Avoidance(避免) Banker&amp;rsquo;s Algo&lt;/li>
&lt;li>DeadLock Detection &amp;amp; Recovery&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>1.2&lt;/p>
&lt;ul>
&lt;li>
&lt;p>優點：&lt;/p>
&lt;ol>
&lt;li>保證System is Deadlock free (or never enters the deadlock state)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>缺點：&lt;/p>
&lt;ol>
&lt;li>對Resource的使用/取得限制多，因為resource utilization 偏低，連帶throughput 也偏低&lt;/li>
&lt;li>&lt;strong>可能造成Starvation&lt;/strong>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;p>3&lt;/p>
&lt;ul>
&lt;li>優點：
&lt;ol>
&lt;li>Resources utilization相對較高. throughput也連帶較高&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>缺點：
&lt;ol>
&lt;li>System有可能進入DeadLock state&lt;/li>
&lt;li>Detection &amp;amp; Recovery之cost相當高&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h2 id="deadlock-prevention">DeadLock Prevention&lt;/h2>
&lt;ul>
&lt;li>原則：破除4個必要條件之其中一個，則死結必不發生&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>破除 &amp;ldquo;Mutual Exclusion&amp;rdquo; -&amp;gt; 兩個字「&lt;strong>辦不到&lt;/strong>」！因為這是Resource&lt;strong>與生俱來&lt;/strong>(inheritance)的性質&lt;/p>
&lt;/li>
&lt;li>
&lt;p>破除 &amp;ldquo;Hold &amp;amp; wait &amp;quot; - &amp;gt; 兩個方法(protocols)可用，想辦法讓Hold不成立，或是讓Wait不成立&lt;/p>
&lt;ol>
&lt;li>OS實施規定：&lt;strong>除非Process可一次取得全部所需資源，才准許持有資源，否則不得持有任何資源&lt;/strong>，但這樣子會有資源利用度低的問題(明明可用，但卻要等到全部都可以用才可以使用)&lt;/li>
&lt;li>OS實施規定：Process可先持有部分資源，但當Process要申請其他資源時，必須Release持有的全部資源(不再Hold)，才可提出申請。但資源利用率一樣很低，因為有可能會把即將要使用的資源釋放出去&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>破除&amp;quot;No preemption&amp;rdquo;　-&amp;gt; 改為&amp;quot;preemption&amp;rdquo; 即可, eg. based on priority-level&lt;/p>
&lt;/li>
&lt;li>
&lt;p>☆☆☆☆☆破除&amp;quot;Circular waiting&amp;quot; -&amp;gt; 方法叫做&amp;quot;resource ordering&amp;quot; ，&lt;/p>
&lt;ol>
&lt;li>
&lt;p>OS會賦予每一個類型資源一個Unique(唯一的)Resource id&lt;/p>
&lt;/li>
&lt;li>
&lt;p>OS會規定Process必須按照Resource Id Ascending(遞增、遞減都行，你爽就好)的方式對資源提出申請&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>持有的&lt;/th>
&lt;th>欲申請的&lt;/th>
&lt;th>允許或不允許&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>R1&lt;/td>
&lt;td>R3&lt;/td>
&lt;td>允許&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>R5&lt;/td>
&lt;td>R3&lt;/td>
&lt;td>必須先放到R5，才可提R3(因為不符合遞增)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>R1,R5&lt;/td>
&lt;td>R3&lt;/td>
&lt;td>必須先放到R5，才可提R3(因為不符合遞增)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>WHY?&lt;/p>
&lt;p>pf：假設在這樣的規定下，系統仍存在一組Processes形成Circular waiting如下&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/vWfXi5r.png"
loading="lazy"
alt="image-20230103215842475"
>&lt;/p>
&lt;p>依規定，我們可以推導出資源ID大小關係如下&lt;/p>
&lt;p>r0 &amp;lt; r1 &amp;lt; r2 &amp;lt; &amp;hellip; &amp;lt;rn &amp;lt; r0&lt;/p>
&lt;p>竟推出 r0 &amp;lt;r此一矛盾式子，因此Circular waiting必不存在&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h2 id="deadlock-avoidance">Deadlock Avoidance&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>定義：當某個Process提出某些資源申請時，則OS必須執行&lt;strong>Banker&amp;rsquo;s Algorithm&lt;/strong>，以確定&lt;strong>倘若分配給process其申請資源後，System未來處於safe state&lt;/strong>，若Safe則核准其申請，否則(unsage)則否決其申請，process必須等一段時間後，再重提申請。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/TG6PUR9.png"
loading="lazy"
alt="image-20230103223800287"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Deadlock是unsafe之subset&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="bankers-algo-">Banker&amp;rsquo;s Algo ☆☆☆☆☆&lt;/h2>
&lt;p>&lt;code>本章的計算題都在這 Banker's Alog and Safety Algo&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>定義：使用的Data Structures&lt;/p>
&lt;/li>
&lt;li>
&lt;p>看不懂的話直接看下面範例比較快&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">假設
n：process個數
m: resource種類數
1. Request i ：［1..m］of int
-&amp;gt; Pi提出之各式資源申請量
2. Allocation : n*m martrix
-&amp;gt; 各個process目前持有的各式資源數量
3. MAX: n*m martrix
-&amp;gt; 各process完工所需之各式資源最大數量
4. Need：n*m martrix(自己算)
-&amp;gt; 各process尚須(欠)各式資源數量才能完工，因此Need= MAX -Allocation
5. Avaliable：[1..m]of int
-&amp;gt; 系統目前可用的，各式資源數量，因此Available=資源總量-Allocation
舉例說明：假設有人來貸款3,000萬，那麼Requesti =3000萬、Allocation就是自己的存款，假設這邊是2,000萬，想買一棟9,000萬的房子，這9,000萬就是他的MAX，那麼Need= 9,000-2,000= 7,000萬，Available 就是銀行目前金庫裡能借給你的錢，這邊假設是10,000萬。
Step1. Check Request &amp;lt;= Need ?若成立，則往下執行，若不成立，則終止Process。
Request=3,000萬，Need= 7,000萬。這樣就是合理的，但假設你今天需求7,000萬，可是卻貸了3,000兆，遠超於你的需求，那就有問題了
Step2. Check Request &amp;lt;=Available?若成立，則往下執行，若不成立，則Pi waits until resouce availalbe
概念就是你去貸3,000萬，可是銀行金庫目前的錢不夠，需要你稍等一下
Step3 (試算)
假設貸款成功
Allocation = Allocation + Request
Need = Need - Request
Available = Available - Request
Step4 依上述試算值，必須執行 &amp;#34;safety&amp;#34; algo，若回傳&amp;#34;Safe&amp;#34; state則核准Pi此次申請。若回傳&amp;#34;unsafe&amp;#34; state，則否決Pi此次申請。Pi必須等一段時間再重提申請
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="safety-algorithm">Safety Algorithm&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Data Structures used 除上述之外，另外加入&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Work:[1..m] of int -&amp;gt; 表系統目前可用Resources之累計數量&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Finish:[1..m] of Boolean -&amp;gt; 針對Process&lt;/p>
&lt;p>Finish[i]=&lt;/p>
&lt;p>True: 表Pi可完工&lt;/p>
&lt;p>False: 表Pi尚未完工&lt;/p>
&lt;p>∀1&amp;lt;=i&amp;lt;=n&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Procedures&lt;/p>
&lt;p>Step&lt;/p>
&lt;ol>
&lt;li>
&lt;p>設定初值&lt;/p>
&lt;p>Work = Available&lt;/p>
&lt;p>Finish[i]皆為False&lt;/p>
&lt;p>∀1&amp;lt;=i&amp;lt;=n&lt;/p>
&lt;/li>
&lt;li>
&lt;p>看可否找到Pi滿足：&lt;/p>
&lt;ol>
&lt;li>Finish[i]為False且&lt;/li>
&lt;li>Needi &amp;lt;= Work (我所需要的資源，)&lt;/li>
&lt;/ol>
&lt;p>若可找到，則進3,否則則進4&lt;/p>
&lt;/li>
&lt;li>
&lt;p>設定Finish[i]=True，且Work= Work + Allocationi, then, 回到2&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Check Finish Array, 若皆為True，則傳回Safe State，否則傳回Unsafe state&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>範例&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">5個Process(P0,P1,P2,P3,P4)
3種resource(A,B,C)
資源量(A,B,C) = (10,5,7)
1. 求出Need及Available
2. P1提出(A,B,C)= (1,0,2)申請，是否核准?Why?
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Ans.&lt;/p>
&lt;ul>
&lt;li>Allocation-各個Process身上所持有的資源&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>A&lt;/th>
&lt;th>B&lt;/th>
&lt;th>C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>P0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P1&lt;/td>
&lt;td>2&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P2&lt;/td>
&lt;td>3&lt;/td>
&lt;td>0&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P3&lt;/td>
&lt;td>2&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P4&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>MAX- Process完成工作最多所需要的資源數量分別是多少&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>A&lt;/th>
&lt;th>B&lt;/th>
&lt;th>C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>P0&lt;/td>
&lt;td>7&lt;/td>
&lt;td>5&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P1&lt;/td>
&lt;td>3&lt;/td>
&lt;td>2&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P2&lt;/td>
&lt;td>9&lt;/td>
&lt;td>0&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P3&lt;/td>
&lt;td>2&lt;/td>
&lt;td>2&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P4&lt;/td>
&lt;td>4&lt;/td>
&lt;td>3&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>Need= &lt;strong>MAX-Allocation&lt;/strong>&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>A&lt;/th>
&lt;th>B&lt;/th>
&lt;th>C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>P0&lt;/td>
&lt;td>7-0=7&lt;/td>
&lt;td>5-1=4&lt;/td>
&lt;td>3-0=3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P1&lt;/td>
&lt;td>3-2=1&lt;/td>
&lt;td>2-0=2&lt;/td>
&lt;td>2-0=2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P2&lt;/td>
&lt;td>6&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P3&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P4&lt;/td>
&lt;td>4&lt;/td>
&lt;td>3&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>Available= 系統目前還剩的可用資源數，資源總量()-已經配置出去的(Allocation出去的)&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>A&lt;/th>
&lt;th>B&lt;/th>
&lt;th>C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>10-(2+3+2)=3&lt;/td>
&lt;td>5-(1+1)=3&lt;/td>
&lt;td>7-(2+1+2)=2&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Request=(1,0,2), Banker&amp;rsquo;s Algo&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Check Request &amp;lt;= Need ? (你所要求的小於你真正需要的，亦即你買東西只要500，不能跟銀行借到500萬)&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/5QkkGo9.png"
loading="lazy"
alt="image-20230107115630812"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Check Request &amp;lt;= Available (你要的借的錢是否小於銀行本身所持有的錢，亦即如果你要借1億，但銀行只有一百萬)?&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/rEVlV70.png"
loading="lazy"
alt="image-20230107120047287"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>(試算)&lt;/p>
&lt;p>P1:&lt;/p>
&lt;p>Allocation = &amp;lt;2,0,0&amp;gt;+&amp;lt;1,0,2&amp;gt;(申請量) = &lt;strong>&amp;lt;3,0,2&amp;gt;&lt;/strong>&lt;/p>
&lt;p>Need = &amp;lt;1,2,2&amp;gt; - &amp;lt; 1,0,2&amp;gt;(申請量) = &lt;strong>&amp;lt;0,2,0&amp;gt;&lt;/strong>&lt;/p>
&lt;p>Available = &amp;lt;3,3,2&amp;gt; - &amp;lt;1,0,2&amp;gt;(申請量) = &lt;strong>&amp;lt;2,3,0&amp;gt;&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>依上述調整值，來執行&amp;quot;Safety&amp;quot; Algo&lt;/p>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Allocation&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>A&lt;/th>
&lt;th>B&lt;/th>
&lt;th>C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>P0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P1(要調整)&lt;/td>
&lt;td>&lt;u>&lt;strong>3&lt;/strong>&lt;/u>&lt;/td>
&lt;td>&lt;strong>&lt;u>0&lt;/u>&lt;/strong>&lt;/td>
&lt;td>&lt;u>&lt;strong>2&lt;/strong>&lt;/u>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P2&lt;/td>
&lt;td>3&lt;/td>
&lt;td>0&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P3&lt;/td>
&lt;td>2&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P4&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>MAX&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>A&lt;/th>
&lt;th>B&lt;/th>
&lt;th>C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>P0&lt;/td>
&lt;td>7&lt;/td>
&lt;td>5&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P1&lt;/td>
&lt;td>3&lt;/td>
&lt;td>2&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P2&lt;/td>
&lt;td>9&lt;/td>
&lt;td>0&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P3&lt;/td>
&lt;td>2&lt;/td>
&lt;td>2&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P4&lt;/td>
&lt;td>4&lt;/td>
&lt;td>3&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>Need&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>A&lt;/th>
&lt;th>B&lt;/th>
&lt;th>C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>P0&lt;/td>
&lt;td>7&lt;/td>
&lt;td>4&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P1(要調整)&lt;/td>
&lt;td>0&lt;/td>
&lt;td>2&lt;/td>
&lt;td>&lt;strong>0&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P2&lt;/td>
&lt;td>6&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P3&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P4&lt;/td>
&lt;td>4&lt;/td>
&lt;td>3&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>Available&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>A&lt;/th>
&lt;th>B&lt;/th>
&lt;th>C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>3&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Safety Algo&lt;/p>
&lt;ol>
&lt;li>
&lt;p>初值的設定&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Work = Abailable = &amp;lt;2,3,0&amp;gt;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Finish&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>0&lt;/th>
&lt;th>1&lt;/th>
&lt;th>2&lt;/th>
&lt;th>3&lt;/th>
&lt;th>4&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>F&lt;/td>
&lt;td>F&lt;/td>
&lt;td>F&lt;/td>
&lt;td>F&lt;/td>
&lt;td>F&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul>
&lt;p>尋找有沒有Process還沒完成工作，並且它的needi &amp;lt;= work的&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可找到P1滿足Finish[i]= False且Need &amp;lt;=work&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>​ &lt;img src="https://i.imgur.com/9uFiGp9.png"
loading="lazy"
alt="image-20230107123442941"
>&lt;/p>
&lt;ol start="3">
&lt;li>設定Finish[i]=True，且Work= Work+Allocation = (2,3,0) + (3,0,2) = (5,3,2) , then goto 2&lt;/li>
&lt;li>work = &lt;del>(2,3,0)&lt;/del> &amp;gt; (5,3,2)&lt;/li>
&lt;/ol>
&lt;p>​ &lt;img src="https://i.imgur.com/qn6JXjh.png"
loading="lazy"
alt="image-20230107123951216"
>&lt;/p>
&lt;ol start="5">
&lt;li>
&lt;p>選擇P3滿足 Need&amp;lt;= Work，且Finish[i] = False&lt;/p>
&lt;/li>
&lt;li>
&lt;p>設定Finishj[3]=True，且Work=(5,3,2) +(2,1,1) = (7,4,3), then goto 2&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&amp;hellip; 以此類推，P0, P2, P4皆可Finish，直到大家都Finish，因此大家都滿足了。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Check Finish陣列，因為皆為True，所以&lt;strong>傳回Safe State&lt;/strong>，&lt;strong>因此核准P1此次的申請&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>列出上述其中一組&lt;strong>Safe Sequence&lt;/strong>&lt;code>Safe Sequence/ Safe State定義：至少可以找到&amp;gt;=1組，Safe Sequence，成為Safe State，否則unsafe state。代表OS未來依此Processes順序可分配各Process所need的資源，使得大家皆可順利完工&lt;/code>&lt;/p>
&lt;p>Ans. P1,P3,P0,P2,P4&lt;/p>
&lt;/li>
&lt;li>
&lt;p>依現在狀況，若P4提出(3,3,0)申請，是否核准?why? &lt;strong>(練習題)&lt;/strong>&lt;/p>
&lt;p>Ans. Banker&amp;rsquo;s algo&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Check Request (3,3,0) &amp;lt;= Need(4,3,1) &lt;strong>通過&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Need&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>A&lt;/th>
&lt;th>B&lt;/th>
&lt;th>C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>P0&lt;/td>
&lt;td>7&lt;/td>
&lt;td>4&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>2&lt;/td>
&lt;td>&lt;strong>0&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P2&lt;/td>
&lt;td>6&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P3&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P4&lt;/td>
&lt;td>4&lt;/td>
&lt;td>3&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>​ 2. Check Request4(3,3,0) &amp;lt;= Available (2,3,0)?&lt;/p>
&lt;p>​ 不成立，因為無法核准，&lt;strong>可用資源不足&lt;/strong>&lt;/p>
&lt;ol start="11">
&lt;li>
&lt;p>依現在情況，若P0提出(0,2,0)，是否核准? Ｗhy?&lt;/p>
&lt;p>Ans. Banker&amp;rsquo;s Algo&lt;/p>
&lt;ol>
&lt;li>
&lt;p>快速跑過，確認可以過，資源分配改變如下&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Allocation&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>A&lt;/th>
&lt;th>B&lt;/th>
&lt;th>C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>P0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>3&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P1&lt;/td>
&lt;td>3&lt;/td>
&lt;td>0&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P2&lt;/td>
&lt;td>3&lt;/td>
&lt;td>0&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P3&lt;/td>
&lt;td>2&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P4&lt;/td>
&lt;td>0&lt;/td>
&lt;td>2&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>Need&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>A&lt;/th>
&lt;th>B&lt;/th>
&lt;th>C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>P0&lt;/td>
&lt;td>7&lt;/td>
&lt;td>2&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>2&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P2&lt;/td>
&lt;td>6&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P3` | 0 | 1 | 1 |&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P4&lt;/td>
&lt;td>4&lt;/td>
&lt;td>3&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>Available&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>A&lt;/th>
&lt;th>B&lt;/th>
&lt;th>C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>執行Safety&amp;rsquo;s algo&lt;/p>
&lt;ol>
&lt;li>設定初值，Work=(2,1,0)&lt;/li>
&lt;li>找尋是否有符合Needi &amp;lt;= Work 的Process，且還有Process為False**(不通過)**，所以unsafe&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>範例二&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Allocation&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>A&lt;/th>
&lt;th>B&lt;/th>
&lt;th>C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>P0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>3&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P1&lt;/td>
&lt;td>3&lt;/td>
&lt;td>0&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P2&lt;/td>
&lt;td>3&lt;/td>
&lt;td>0&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P3&lt;/td>
&lt;td>2&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P4&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>Need&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>A&lt;/th>
&lt;th>B&lt;/th>
&lt;th>C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>P0&lt;/td>
&lt;td>7&lt;/td>
&lt;td>2&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>2&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P2&lt;/td>
&lt;td>6&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P3&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P4&lt;/td>
&lt;td>4&lt;/td>
&lt;td>3&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>Available&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>A&lt;/th>
&lt;th>B&lt;/th>
&lt;th>C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>1&lt;/td>
&lt;td>&lt;strong>x&lt;/strong>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul>
&lt;p>求x的最小值，使其成為Safety&lt;/p>
&lt;ol>
&lt;li>設置初值，work= (2,1,x)&lt;/li>
&lt;li>找尋 Need &amp;lt;= work&lt;/li>
&lt;li>找到了，P3，先暫定x=1 (2,1,1)&lt;/li>
&lt;li>P3因為可以完成，完成後資源就可以釋放出來，因此work (2,1,1) &amp;gt; (4,2,2)&lt;/li>
&lt;li>繼續找尋Need &amp;lt;=work&lt;/li>
&lt;li>找到了，P1&lt;/li>
&lt;li>P1因為可以完成，完成後資源就可以釋放出來，因此work(4,2,2) &amp;gt; (7,2,4)&lt;/li>
&lt;li>&amp;hellip;往復循環，以此類推&lt;/li>
&lt;/ol>
&lt;p>​&lt;/p>
&lt;p>x= 1;&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/mo7FIyC.png"
loading="lazy"
alt="image-20230107194309689"
>&lt;/p>
&lt;h2 id="bankers-algo-之-time-complexity">Banker&amp;rsquo;s Algo 之 Time Complexity&lt;/h2>
&lt;p>先講結論，&lt;strong>複雜度就是O(n^2*m)&lt;/strong>&lt;/p>
&lt;p>(n: Process 數目, m:resource 種類數)&lt;/p>
&lt;p>Banker&amp;rsquo;s Algo Time Complexity&lt;/p>
&lt;p>Step&lt;/p>
&lt;ol>
&lt;li>O(m)&lt;code>Check Request &amp;lt;= Need &lt;/code>&lt;/li>
&lt;li>O(m)&lt;code> Check Request &amp;lt;=Available&lt;/code>&lt;/li>
&lt;li>O(m)&lt;code>試算&lt;/code>&lt;/li>
&lt;li>Run safety algo&lt;/li>
&lt;li>設置初值work -&amp;gt; 1~m的一維陣列，因此複雜度為O(m)。Finish -&amp;gt;1~n的一維陣列，因此複雜度為 O(n)&lt;/li>
&lt;li>先來看看Safety&amp;rsquo;s algo的步驟&lt;img src="https://i.imgur.com/sIe7W3D.png"
loading="lazy"
alt="image-20230109221851317"
>&lt;/li>
&lt;/ol>
&lt;p>​ 第一次最多會檢查n次，再來第二次檢查n-1次&amp;hellip;&lt;/p>
&lt;p>​ =(n+1)n/2個Processes。每次檢查Need &amp;lt;=Work 花O(m)的時 間，最多花O(n^2*m) time&lt;/p>
&lt;ol start="7">
&lt;li>花O(n) Check Finish&lt;/li>
&lt;/ol>
&lt;p>因此&lt;strong>複雜度就是O(n^2*m)&lt;/strong>&lt;/p>
&lt;h2 id="針對每一項類型資源皆為single-instance情況下有較簡易的avoidance作法">針對每一項類型資源，皆為Single-instance情況下，有較簡易的Avoidance作法&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>利用RAG，搭配&lt;strong>Claim edge(宣告邊)使用&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Claim edge:&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/DbUNSBR.png"
loading="lazy"
alt="image-20230110213506269"
>&lt;/p>
&lt;p>代表Pi未來會對Rj提出申請(即表MAX/NEED之意義)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Steps：&lt;/p>
&lt;p>&lt;code>當Pi提出Rj申請後&lt;/code>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>檢查有無Pi對Rj的這條宣告邊(Claim edge)存在，若有，則goto2否則，終止Pi&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Check Rj是否Available，若是，則goto3，否則&lt;strong>Pi waits&lt;/strong>(變成申請邊)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>(試算)暫時把宣告邊改為配置邊&lt;img src="https://i.imgur.com/45EmEs2.png"
loading="lazy"
alt="image-20230110234601069"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>執行safety&amp;rsquo;s Algo, check 圖中是否有cycle存在&lt;/p>
&lt;p>若沒有，則為safe -&amp;gt; 可核准&lt;/p>
&lt;p>有Cycle，則為unsafe -&amp;gt; 否決&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>例：&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/aTNbxz5.png"
loading="lazy"
alt="image-20230110233244192"
>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>若P1提出R2之申請，是否核准?&lt;/p>
&lt;p>Ans.&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/sE32Vh1.png"
loading="lazy"
alt="image-20230110235023904"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>若P2提出R2之申請，是否核准?&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/VDS6Lz1.png"
loading="lazy"
alt="image-20230111000113366"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>補充：&lt;strong>Deadlock是unsafe之subset(或unsafe有可能導致死結，也有可能不會導致死結)&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/BSN7MhD.png"
loading="lazy"
alt="image-20230111001212290"
>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>可能&lt;strong>不會&lt;/strong>死結&lt;/p>
&lt;p>ans. 搞不好P1在提出R2的申請時，就使用完R1了，這時就不會有死結。或是P2在P1提出申請之前就使用完R2了，此時也不會有死結。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可能&lt;strong>會有&lt;/strong>死結&lt;/p>
&lt;p>ans. P1立刻對R2提出申請，此時RAG有Cycle，且資源都是Single Instance&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>也就是說死結產生與否取決於宣告邊在哪個moment提出申請&lt;/p>
&lt;p>​&lt;/p>
&lt;h2 id="定理">定理&lt;/h2>
&lt;p>系統若有&lt;u>n&lt;/u>個processes，m個resource量(單一種類)滿足下列2個條件：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>1≦MAXi≦m(每個process的最大需求量至少要有1個，最多不超過m)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>且所有n個process的Maxi加總，小於n+m&lt;/p>
&lt;p>$$
\sum_{i=1}^nMAXi&amp;lt;(n+m)
$$&lt;/p>
&lt;p>則System is &lt;strong>Deadlock free&lt;/strong>.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>例1. 有6部printers被process使用，每個process最多需要2部printers才可以完工，則System 最多允許?個process執行以確保deadlock Free?&lt;/p>
&lt;p>ans. m=6, Max=2&lt;/p>
&lt;p>開始跑定理&lt;/p>
&lt;ol>
&lt;li>
&lt;p>1 ≦ Maxi ≦ m -&amp;gt; 1 ≦ 2 ≦ 6成立&lt;/p>
&lt;/li>
&lt;li>
&lt;p>$$
\sum_{i=1}^nMaxi&amp;lt;(n+m)
$$&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>​ 所以2n&amp;lt;n+6，n&amp;lt;6，Ans:　最多５個processes&lt;/p>
&lt;p>​&lt;/p>
&lt;p>詳解&lt;/p>
&lt;ol>
&lt;li>
&lt;p>所謂死結的發生，就是系統已經將所有的資源都投入下去，但依然沒有產出，不會有一個系統是佔據著資源不分配，看著底下的Process進入Deadlock還很開心&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/60Ndyr2.png"
loading="lazy"
alt="image-20230112221927497"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>應此將資源分配下去後，就是長這樣&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/9rc68RH.png"
loading="lazy"
alt="image-20230112222025831"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Process取得2個Resource後就可以執行，執行完後又釋放2個Resource給其他的Process使用&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/VDXlZBP.png"
loading="lazy"
alt="image-20230112222203015"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>持續的把Resource分配給Process&amp;hellip; 往復循環，即可完成。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>若很不幸的是，如果今天是6個Process，就會發生死結&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/k3fiqJr.png"
loading="lazy"
alt="image-20230112222340478"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>推導公式，若今天題目改成，每個Process需要3台印表機，現在有10部列表機，最多能允許幾個Process(MAX=3, m=10)&lt;/p>
&lt;p>&lt;code>3n&amp;lt;n+10&lt;/code>&lt;/p>
&lt;p>&lt;code>=2n&amp;lt;10&lt;/code>&lt;/p>
&lt;p>&lt;code>=n&amp;lt;5&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>​ ans. n=4&lt;/p>
&lt;p>例2. 證明：&lt;/p>
&lt;p>​ proof：假設資源全部配置出去&lt;/p>
&lt;p>$$
即\sum_{i=1}^n Allocationi = m
$$&lt;/p>
&lt;p>​ 又因為&lt;/p>
&lt;p>$$
\sum_{i=1}^nNeedi = \sum_{i=1}^nMaxi-\sum_{i=1}^n Allocationi(Banker&amp;rsquo;s Algo) \&lt;br>
= \sum_{i=1}^nMaxi-m \&lt;br>
∴\sum_{i=1}^nMaxi=\sum_{i=1}^nNeedi+m
$$&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​ 再依據條件(2)&lt;/p>
&lt;p>$$
\sum_{i=1}^nMaxi &amp;lt; (n+m) \&lt;br>
∴\sum_{i=1}^nNeedi+m&amp;lt;(n+m) \&lt;br>
$$&lt;/p>
&lt;p>​ 得出這個結論&lt;/p>
&lt;p>$$
∴ \sum_{i=1}^nNeedi &amp;lt; n
$$&lt;/p>
&lt;p>​ 此事代表至少有&amp;gt;=1個Process之Needi為0，代表Process可以完工，且Pi至少會Release出&amp;gt;=1個Resource**(∵條件(1) -&amp;gt; MAX&amp;gt;=1,而Needi=0 ∴Allocation &amp;gt;=1)**使得剩下的Process當中又會有&amp;gt;=1個process之Need為0又可以完工。使得剩下的process中又會有&amp;gt;=1個Process之Need為0又可以完工，依此類推，所有Process皆可完工，∴Deadlock Free&lt;/p>
&lt;p>解釋的數學式子如下，類似離散的鴿籠原理&lt;/p>
&lt;p>$$
\sum_{i=1}^{n-1}Needi&amp;lt;n-1
$$&lt;/p>
&lt;h2 id="deadlock-detection--recovery">Deadlock Detection &amp;amp; Recovery&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>如果放任resource使用較無限制，雖然Utilization高，&lt;strong>但是System有可能進入死結而不自知。&lt;strong>因為需要有一個&lt;/strong>死結偵測演算法&lt;/strong>，及萬一偵測出有死結，如何破除這個死結(recovery)的作法。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Recovery做法：&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Kill&lt;/strong> Process in the deadlock&lt;/p>
&lt;blockquote>
&lt;p>方法一：&lt;strong>Kill All Processes in the deadlock&lt;/strong>寸草不生，眼不見為淨&lt;/p>
&lt;p>缺點：成本太高，先前的工作成果全部作廢。&lt;/p>
&lt;p>方法二：&lt;strong>Kill processes one by one&lt;/strong>，&lt;strong>Kill一個之後，須再跑偵測Algo，若死結仍存在，再Repeat上述步驟&lt;/strong>&lt;/p>
&lt;p>缺點：&lt;strong>成本太高&lt;/strong>，Loop次數*偵測成本&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>Resource Preemption&lt;/p>
&lt;blockquote>
&lt;p>步驟一：選擇&amp;quot;Victim&amp;quot; process(假設此Process擁有資源A,B,C)&lt;/p>
&lt;p>步驟二：剝奪他們身上的資源(剝奪B，保留A,B，這是最基本的情況)&lt;/p>
&lt;p>步驟三：&lt;strong>回復此Victim process當初未取得此剝奪資源的狀態(這一步非常困難，成本極高，也不一定做得好，此外也可能有Starvation的問題)&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;/li>
&lt;/ol>
&lt;h2 id="deadlock-detection-algorithm考比較多的是bankerdetection稍微知道就好">Deadlock Detection Algorithm(考比較多的是Banker,Detection稍微知道就好)&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Data Structures used&lt;/p>
&lt;p>n：process數&lt;/p>
&lt;p>m：resource種類&lt;/p>
&lt;ol>
&lt;li>Allocation：n*m matrix&lt;/li>
&lt;li>Availavle：[1&amp;hellip;m] of int &lt;code>目前可用資源數量&lt;/code>&lt;/li>
&lt;li>Work: [1&amp;hellip;m] of int&lt;/li>
&lt;li>Finish：[1&amp;hellip;n] of Boolean&lt;/li>
&lt;li>&lt;strong>Request：n*m matrix&lt;/strong>，各process目前提出之各式資源申請量&lt;/li>
&lt;/ol>
&lt;p>Note：&lt;/p>
&lt;ol>
&lt;li>Avoidance(Banker&amp;rsquo;s Algo)含有&lt;u>未來(Future)&lt;/u>info(MAX,Need)&lt;/li>
&lt;li>Detection：只有現在(Current)info&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Procedures&lt;/p>
&lt;p>步驟一：初值設定&lt;/p>
&lt;p>Work=Available&lt;/p>
&lt;p>Finish[i]= True: &lt;strong>if Allocation ==0&lt;/strong>&lt;/p>
&lt;p>​ False: **if Allocation ≠0 **&lt;/p>
&lt;p>步驟二：看可否找到Pi滿足：&lt;/p>
&lt;ol>
&lt;li>Finish[i]為False&lt;/li>
&lt;li>Requesti ≦ Work&lt;/li>
&lt;/ol>
&lt;p>若&lt;strong>找到&lt;/strong>，則進入步驟三，否則進入步驟四&lt;/p>
&lt;p>步驟三：設定Finish[i]=True，且Work=Work+Allocationi, then 回到步驟二，找不到則回到第四步&lt;/p>
&lt;p>步驟四：Check Finish Array，若皆為True，&lt;strong>因此目前無死結&lt;/strong>，否則則有死結，且Finish[i]= False者，即為陷入死結中&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Time：O(n^2 *m) &amp;ndash;&amp;gt; 死結偵測一次，cost很高，再加上&lt;strong>乘以偵測頻率&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>範例1：&lt;/p>
&lt;ul>
&lt;li>Allocation&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>A&lt;/th>
&lt;th>B&lt;/th>
&lt;th>C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>P0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P1&lt;/td>
&lt;td>2&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P2&lt;/td>
&lt;td>3&lt;/td>
&lt;td>0&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P3&lt;/td>
&lt;td>2&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P4&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>Request&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>A&lt;/th>
&lt;th>B&lt;/th>
&lt;th>C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>P0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P1&lt;/td>
&lt;td>2&lt;/td>
&lt;td>0&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P2&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P3&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P4&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>Available&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>A&lt;/th>
&lt;th>B&lt;/th>
&lt;th>C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>偵測目前有哪些死結?&lt;/p>
&lt;p>若有，那些process in the Deadlock&lt;/p>
&lt;p>Ans.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Work = Available = (0,0,0)&lt;/p>
&lt;p>Finish&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>0&lt;/th>
&lt;th>1&lt;/th>
&lt;th>2&lt;/th>
&lt;th>3&lt;/th>
&lt;th>4&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>F&lt;/td>
&lt;td>F&lt;/td>
&lt;td>F&lt;/td>
&lt;td>F&lt;/td>
&lt;td>F&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>因為Allocation皆≠(0,0,0)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>∵可以找到P0滿足Finish[0]為F，且Request≤work ∴到第三步驟&lt;/p>
&lt;/li>
&lt;li>
&lt;p>設定Finish[0]為True，且Work=(0,0,0)+(0,1,0)=(0,1,0)，回到第二步驟&lt;/p>
&lt;/li>
&lt;li>
&lt;p>∵可以找到P2滿足Finish[2]為F，且Request2 ≤ Work，∴到第三步驟&lt;/p>
&lt;/li>
&lt;li>
&lt;p>設定Finsh[2]為True，且Work=(0,1,0)+(3,0,3)=(3,1,3)，回到第三步驟&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在步驟二與步驟三之間抽插，往復循環，P1, P3, P4皆可Finished&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Check Finish Array ∵皆為True，∴目前無死結&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="若每一類型資源資源皆為single-instance則有較簡化的detection作法-使用wait-for-graph">若每一類型資源資源皆為Single-instance，則有較簡化的Detection作法-使用Wait-For Graph&lt;/h2>
&lt;ul>
&lt;li>定義：令G=&amp;lt;V,E&amp;gt;有向圖，代表Wait-For Graph，其中&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>Vertex：只有Process Only，沒有Resource頂點&lt;/li>
&lt;li>Edge：Pi &lt;code>等待&lt;/code>&amp;mdash;&amp;gt;Pj，稱之為wait edge&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>是從RAG簡化而得&lt;/strong>，即若RAG中存在：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">graph LR;
Pi --申請--&amp;gt; R --配置--&amp;gt; Pj
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>則在Wait-For Graph 以&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">graph LR;
Pi --等待--&amp;gt; Pj
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>呈現&lt;/p>
&lt;/li>
&lt;li>
&lt;p>偵測作法：&lt;strong>在Wait-For Graph中，若有Cycle，則目前有死結，否則目前無死結&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>例：RAG如下&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/8OxjTRA.png"
loading="lazy"
alt="image-20230115163340361"
>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>化成Wait-For Graph&lt;/p>
&lt;/li>
&lt;li>
&lt;p>目前有無死結&lt;/p>
&lt;p>Ans.∵有Cycle，∴&lt;strong>目前有死結&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/Fq0Ku1V.png"
loading="lazy"
alt="image-20230115163349303"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h1 id="chapter-6-process-synchronization">Chapter 6 Process Synchronization&lt;/h1>
&lt;p>&lt;code>Process Communication&lt;/code>,&lt;code>Inter Processes Communication; IPC&lt;/code>&lt;/p>
&lt;p>Process的關係就兩種&lt;/p>
&lt;ol>
&lt;li>Independent&lt;/li>
&lt;li>&lt;strong>Cooperating&lt;/strong>(有資訊交換的需求)&lt;/li>
&lt;/ol>
&lt;p>何謂同步(Synchronization)？Process在執行的過程當中，因為某件事情的發生或沒有發生，導致它必須停下來，等對方完成，才可以接著往下做，符合這些事情的就是同步。&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>
&lt;p>Process Communication兩大方式&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Shared Memory&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Message Passing&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Race Condition Problem&lt;/p>
&lt;/li>
&lt;li>
&lt;p>解決Race Condition之兩大策略&lt;/p>
&lt;ol>
&lt;li>Disable interrupt&lt;/li>
&lt;li>Critical section design&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>C.S.Design 必須滿足的3個Criteria(Mutual Exclustion, Progress, Bounded Waiting)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>C.S Design 方法(架構)&lt;/p>
&lt;ul>
&lt;li>SoftWare Solutions&lt;/li>
&lt;li>HardWare Instructions Support(Test-and-Set, SWAP)&lt;/li>
&lt;li>&lt;strong>semaphore☆☆☆☆☆&lt;/strong>(號誌)&lt;/li>
&lt;li>&lt;strong>Monitor&lt;/strong>&lt;/li>
&lt;li>解決著名的同步問題
&lt;ul>
&lt;li>Producer-Consumer Problem&lt;/li>
&lt;li>Reader/Writer Problem
&lt;ol>
&lt;li>First&lt;/li>
&lt;li>Second&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>The Sleeping Barber problem&lt;/li>
&lt;li>The Dining-Philosophers Problem&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Message Passing 溝通方式(較少考)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="process-communication之兩大方式">Process communication之兩大方式&lt;/h2>
&lt;h3 id="shared-memory本篇重點">Shared Memory(本篇重點)&lt;/h3>
&lt;p>定義：Processes透過共享變數(shared Variable)之存(Write)取(Read)達到溝通(Info exchange)之目的&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/sklBx0M.png"
loading="lazy"
alt="image-20230122193004264"
>&lt;/p>
&lt;p>分析：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>適用於大量Data(message)傳輸之狀況&lt;/strong>&lt;/li>
&lt;li>&lt;strong>傳輸速度較快(因為不須kernel介入干預/支持，Shared memory是Programmer的責任，Programmer要負責去處理互斥的問題)&lt;/strong>&lt;/li>
&lt;li>&lt;strong>不適合用於Distributed System&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Kernel不需提供額外的支援(頂多供應Shared memory space)&lt;/strong>&lt;/li>
&lt;li>&lt;strong>是Programmer的負擔，必須寫額外的程式碼防止Race Condition的發生&lt;/strong>&lt;/li>
&lt;/ol>
&lt;h3 id="message-passing">Message Passing&lt;/h3>
&lt;p>定義：Process雙方要溝通必須遵循下列Steps&lt;/p>
&lt;ol>
&lt;li>建立Communication Link&lt;/li>
&lt;li>訊息可雙向傳輸&lt;/li>
&lt;li>傳輸完畢，必須Release&lt;/li>
&lt;/ol>
&lt;p>分析：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>適用於少量Data(message)傳輸之情況&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>傳輸速度較慢(因為需要kernel支持)&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>適合用於Distribute System&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Kernel必須提供額外的支援&lt;/strong>&lt;/p>
&lt;p>&lt;strong>例：send/recevice system call, Communication Link管理，Message lost之偵測、例外狀況之處理&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Programmer沒有什麼負擔，只要會用send/receive的System Call就好&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="race-condition-problem">Race Condition problem&lt;/h2>
&lt;p>in shared memory Communication&lt;/p>
&lt;p>定義：&lt;strong>In shared memory Communication, 若未對共享變數存取提供任何互斥存取控制之Synchronization機制，則會造成&amp;quot;共享變數的最終結果值會因為Process之間的執行順序不同而有不同的結果值&amp;quot;&lt;/strong>，此種Data inconsistency情況，稱之為Race Condition&lt;/p>
&lt;p>例子：Ｃ是共享變數，初值=5，此時有2個Process&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Pi&lt;/th>
&lt;th>Pj&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&amp;hellip;&lt;/td>
&lt;td>&amp;hellip;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>C=C+1&lt;/td>
&lt;td>C=C-1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;hellip;&lt;/td>
&lt;td>&amp;hellip;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;hellip;&lt;/td>
&lt;td>&amp;hellip;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Pi，Pj各執行一次，則C的最終值&lt;strong>可能是5 or 4 or 6&lt;/strong> ，這種稱之為Race Condition&lt;/p>
&lt;ul>
&lt;li>
&lt;p>結果為5，執行順序可能為&lt;/p>
&lt;p>T1= Pi = C =C+1&lt;/p>
&lt;p>T2= Pj = C =C -1&lt;/p>
&lt;p>or&lt;/p>
&lt;p>T1 = Pj = C = C - 1&lt;/p>
&lt;p>T2 = Pi = C = C + 1&lt;/p>
&lt;/li>
&lt;li>
&lt;p>結果為4，執行順序可能為&lt;/p>
&lt;p>T1：Pi執行C+1，得到6，但尚未Assign給C，只是先放在一個佔存器&lt;/p>
&lt;p>T2：Pj執行C-1，得到4，尚未Assign回C&lt;/p>
&lt;p>T3：Pi 6 assign回C&lt;/p>
&lt;p>T4：Pj 4 assign回C&lt;/p>
&lt;p>C的結果為4&lt;/p>
&lt;/li>
&lt;li>
&lt;p>結果為6，執行順序可能為&lt;/p>
&lt;p>T1：Pi執行C+1，得到6，但尚未Assign給C，只是先放在一個佔存器&lt;/p>
&lt;p>T2：Pj執行C-1，得到4，尚未Assign回C&lt;/p>
&lt;p>T3：Pj 4 assign回C&lt;/p>
&lt;p>T4：Pi 6 assign回C&lt;/p>
&lt;p>結果為6&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>範例1&lt;/p>
&lt;p>x, y 是共享變數，初值x=5, y=7&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Pi&lt;/th>
&lt;th>Pj&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>x= x+y&lt;/td>
&lt;td>y=x*y&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Pi,Pj各作一次，求(x,y)之可能值&lt;/p>
&lt;p>Ans.&lt;/p>
&lt;p>(x,y) = (12,84)&lt;/p>
&lt;p>(x,y) = (40,35)&lt;/p>
&lt;p>&lt;strong>(x,y) = (12,35)&lt;/strong>&lt;/p>
&lt;p>範例2&lt;/p>
&lt;p>x=0是共享變數，i 是區域變數&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Pi&lt;/th>
&lt;th>Pj&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>for(i=1;i&amp;lt;=3;i++)x=x+1&lt;/td>
&lt;td>for(i=1;i&amp;lt;=3;i++)x=x+1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Pi,Pj各作一次，求(x)之可能值&lt;/p>
&lt;p>提示&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Pi&lt;/th>
&lt;th>Pj&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>第一次&lt;/td>
&lt;td>x=x+1&lt;/td>
&lt;td>x=x+1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>第二次&lt;/td>
&lt;td>x=x+1&lt;/td>
&lt;td>x=x+1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>第三次&lt;/td>
&lt;td>x=x+1&lt;/td>
&lt;td>x=x+1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Ans.(3,4,5,6)&lt;/p>
&lt;p>範例3&lt;/p>
&lt;p>x=0是共享變數，i 是區域變數&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Pi&lt;/th>
&lt;th>Pj&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>for(i=1;i&amp;lt;=3;i++)x=x+1&lt;/td>
&lt;td>for(i=1;i&amp;lt;=3;i++)x=x-1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Pi,Pj各作一次，求(x)之可能值&lt;/p>
&lt;p>(-3,-2,-1,0,1,2,3)&lt;/p>
&lt;h2 id="解決race-condition之兩大策略">解決Race Condition之兩大策略&lt;/h2>
&lt;h3 id="disable-interrupt">Disable Interrupt&lt;/h3>
&lt;p>&lt;code>對CPU下手&lt;/code>&lt;/p>
&lt;p>定義：&lt;strong>Process在對共享變數存取之前，先Disable Interrupt，等到完成共享變數的存取後再才Enable Interrupt。如此一來可以保證Process在存取共享變數的期間CPU不會被Preempted&lt;/strong>，即此一存取是&lt;strong>Atomically Executed&lt;/strong>&lt;/p>
&lt;p>例&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Pi&lt;/th>
&lt;th>Pj&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&amp;hellip;Disable interrupt&lt;/td>
&lt;td>&amp;hellip; Disable Interrupt&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>C=C+1&lt;/td>
&lt;td>C=C-1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Enable Interrupt &amp;hellip;&lt;/td>
&lt;td>Enable Interrupt &amp;hellip;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>優點：&lt;/p>
&lt;ol>
&lt;li>Simple, Easy implementation&lt;/li>
&lt;li>適用於Uniprocessor System(單一CPU)&lt;/li>
&lt;/ol>
&lt;p>缺點：&lt;/p>
&lt;ol>
&lt;li>不適合用於Multiprocessor的系統當中，&lt;strong>只Disable 單一CPU的Interrupt，是無法防止Race Condition&lt;/strong>(因為其他CPUs上執行的Process仍可存取共享變數)，必須要Disable掉&lt;strong>全部的&lt;/strong>CPU&amp;rsquo;s Interrupt才可防止Race Condition，但這樣會大幅降低Performance(因為無法平行執行)&lt;/li>
&lt;li>風險很高，因為必須信任user process在Disable interrupt後，在很短的時間可以在Enable Interrupt，否則CPU never come back to kernel。&lt;strong>注意，通常Disable Interrupt做法是不會開放給user Process的，它通常只存在於kernel的製作中&lt;/strong>(只有OS Developers可以用，因為開發者也要避免kernel內部的Race Condition)&lt;/li>
&lt;/ol>
&lt;h3 id="critical-section臨界區間-design">Critical section(臨界區間) Design&lt;/h3>
&lt;p>&lt;code>對共享Data下手&lt;/code>&lt;/p>
&lt;p>&lt;code>恐龍誤用Spinlock, Busy-waiting&lt;/code>&lt;/p>
&lt;p>&lt;code>是一個概念&lt;/code>&lt;/p>
&lt;p>定義：對&lt;strong>共享變數之存取&lt;/strong>進行管制，當Pi取得共享變數存取權利，在它尚未完成的期間，即使別的Process取得CPU，任何其他Process也無法存取共享變數。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Critiacal Section：Process中對共享變數進行存、取的敘述之集合&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Remainder Section(RS)：Process中除了Critical Section以外的區間，統稱為Remainder Section&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Process內容：&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/wnFMYbJ.png"
loading="lazy"
alt="image-20230123191840993"
>&lt;/p>
&lt;p>每個CS的前後，Programmer須設計/加入額外的控制碼，叫Entity Section，即Exit Section&lt;/p>
&lt;/li>
&lt;li>
&lt;p>而&lt;strong>CS Design不是在設計臨界區間，因為臨界區間是個概念，CS Design是在設計Entry Sec及Exit Sec的Code&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>一個process可以擁有不只一個CS 只是範例都是只畫一個而已，要注意&lt;/code>,&lt;code>進入C=C+1後，CPU可以被Pj搶走，但Pj想要對C操作時，Pj的Enrty Section就會把它擋下來。&lt;/code>&lt;img src="https://i.imgur.com/EMZilhy.png"
loading="lazy"
alt="image-20230123193312033"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>C.S Design 與 Disable Interrupt相比(spinlock, Busy waiting)&lt;/p>
&lt;p>優點：適用於Multiprocessors system&lt;/p>
&lt;p>缺點：&lt;/p>
&lt;ol>
&lt;li>設計較為複雜&lt;/li>
&lt;li>較不適合用在uniprocessor&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h2 id="busy-waiting-skillor-spinlock">Busy-Waiting Skill(or Spinlock)&lt;/h2>
&lt;ul>
&lt;li>定義：透過使用looping相關敘述(eg. for, while, repeat &amp;hellip; util)，達到讓process&lt;strong>暫時等待之效果&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">條件式&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="o">//&lt;/span>&lt;span class="err">不做事，只是讓它跑&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>當條件式為True時，process就被卡在while中，無法離開while，如此達到Process暫停的效果，直到條件式變為False，process才會離開while，往下執行。&lt;/p>
&lt;p>Note：&lt;/p>
&lt;ol>
&lt;li>&lt;img src="https://i.imgur.com/9OPWIvY.png"
loading="lazy"
alt="image-20230125012255548"
>&lt;/li>
&lt;li>[恐]誤用：因為在C.S Design Entry section中經常是使用Busy waiting的技巧(或叫Spinlock)，因此恐龍會把spinlock &amp;amp; busy waiting 視作C.S Design，來去跟Disable Interrupt比較&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>
&lt;p>分析：&lt;/p>
&lt;p>缺點：&lt;strong>等待中的Process，會跟其他的Processes競爭CPU，將搶到的CPU time浪費掉，用於做無實質進展的迴圈測試上&lt;/strong>。因此，若此Process要等很長的時間才能exit迴圈，則&lt;strong>此舉非常浪費CPU time&lt;/strong>&lt;/p>
&lt;p>優點：若Process卡在Loop的時間很短(i.e 小於Context Switcing time)，則Spinlock十分有利，因為Loop的時間很短，浪費的時間也不會太短。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>另一種Non-Busy-waiting Skill&lt;/p>
&lt;p>定義：當Process因為同步事件被卡住，且如要卡很久的時間，&lt;strong>則可以使用Block(p)的System call&lt;/strong>，將p暫停，即讓p進入Blocked的狀態，如此一來，P就不會與其他Processes競爭CPU，直到同步事件發生了，才wakeup(p) system call，將P從blocked變成ready state。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/03E2Ny9.png"
loading="lazy"
alt="image-20230125020111751"
>&lt;/p>
&lt;p>優點：&lt;strong>等待當中的Process不會與別人競爭CPU，不會浪費CPU Time&lt;/strong>&lt;/p>
&lt;p>缺點：額外付出Context Switch的事件&lt;code>幹 這真的算缺點嗎&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="cs-design應該滿足的3個性質">C.S Design應該滿足的3個性質&lt;/h2>
&lt;ol>
&lt;li>Mutual exclusion&lt;/li>
&lt;li>Progress&lt;/li>
&lt;li>Bounded waiting&lt;/li>
&lt;/ol>
&lt;p>分述如下&lt;/p>
&lt;h3 id="mutual-exclusion相互排斥">Mutual exclusion(相互排斥)&lt;/h3>
&lt;p>定義：最重要的一點，如果沒這點的話談個屁的C.S Design，Race Condition都處理不了了。在任何時間點，最多只允許一個Process進入它自己的CS，不可有多個Process分別進入&amp;quot;各自&amp;quot;的CS&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/h07zzPH.png"
loading="lazy"
alt="image-20230125023324542"
>&lt;/p>
&lt;h3 id="progress進展">Progress(進展)&lt;/h3>
&lt;ul>
&lt;li>定義：須&lt;strong>滿足以下兩點才算Progress&lt;/strong>
&lt;ol>
&lt;li>不想進入C.S的Process(亦即在Ramaid Section活動)，不可以阻礙其他Process進入C.S(或不參與進入C.S之決策)&lt;code>不想進去的process不會阻礙別人進入&lt;/code>&lt;/li>
&lt;li>&lt;strong>從那些想進入C.S的Processes中，決定誰可以進入C.S的決策時間是有限的(不可以無窮，也就是No Deadlock likes waitgin forever 大家都無法進入CS)&lt;/strong>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h3 id="bounded-waiting有限的等待">Bounded waiting(有限的等待)&lt;/h3>
&lt;ul>
&lt;li>定義：以個別process的角度來看，自某progress提出申請到核准進入C.S的等待時間是&lt;strong>有限的&lt;/strong>，即若有n個Process想進入CS，則任一Process至多等(n-1)次後，即可進入CS，即&lt;strong>No Startvation&lt;/strong>，&lt;strong>須公平對待&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="cs-design的方法架構圖重要">C.S Design的方法(架構圖)重要&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th style="text-align:left">&lt;/th>
&lt;th>關注的焦點&lt;/th>
&lt;th>補充&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>高階&lt;/td>
&lt;td style="text-align:left">Monitor定義、應用、種類、製作方式&lt;/td>
&lt;td>同步問題之解決(&lt;strong>應用&lt;/strong>)&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>中階&lt;/td>
&lt;td style="text-align:left">Semaphore(號誌)定義、應用、種類、製作方式&lt;/td>
&lt;td>C.S Degign正確與否，同步問題之解決&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>基礎&lt;/td>
&lt;td style="text-align:left">Software solutions, Hardware Insturctions support&lt;/td>
&lt;td>C.S Degign正確與否&lt;/td>
&lt;td>同位階的還有Disable Interrupt&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="software-solutions">Software Solutions&lt;/h2>
&lt;!--https://youtu.be/72tnIO2Lvrk?list=PLGRcV7rvSdTYY0i6Sm-YQJqQerk1mQlgg&amp;t=3450-->
&lt;ul>
&lt;li>
&lt;p>特色&lt;/p>
&lt;ol>
&lt;li>
&lt;p>2個Processes(Pi,Pj)(P0,P1)&lt;/p>
&lt;blockquote>
&lt;p>Algo1 x&lt;/p>
&lt;p>Algo2 x&lt;/p>
&lt;p>Algo3 o = Peterson&amp;rsquo;s solution&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>n個Processes&lt;/p>
&lt;blockquote>
&lt;p>Peterson&amp;rsquo;s Solution(n個Processes)[不太會考了，因為真的很爛]&lt;/p>
&lt;p>&lt;strong>Bankery&amp;rsquo;s Algo&lt;/strong>[麵包店取號碼牌的演算法，恐龍移掉了，但真的很重要，要學]&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h2 id="2個processes之cs-designpipjij">2個Processes之C.S Design(Pi,Pj,i≠j)&lt;/h2>
&lt;h3 id="algo1">Algo1&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>共享變數宣告如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">turn: int 值為i或為j
意義：權杖，turn值為i，就是只能讓Pi進入(只有Pi有資格進入)，反之亦然
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>程式&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/hIwkE4O.png"
loading="lazy"
alt="image-20230125222327372"
>&lt;/p>
&lt;ol start="3">
&lt;li>&lt;/li>
&lt;/ol>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>CS Design要滿足的條件&lt;/th>
&lt;th>滿足與否&lt;/th>
&lt;th>解析&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Mutual Exclusion&lt;/td>
&lt;td>O&lt;/td>
&lt;td>因為turn值不會同時為i且為j，只會為i或j的其中一個，因此只有Pi或Pj其中一個可以進入CS，不會兩個同時進入C.S&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Progress&lt;/td>
&lt;td>X&lt;/td>
&lt;td>假設目前Pi在RS(Pi不想進入CS)，且Turn值為i，若此時Pj想進入CS卻無法進入，被Pi阻礙，因為唯有仰賴Pi才能將Turn的值改為j，Pj才能進入CS，但此時Pi並不會去做此設定&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Bounded Waiting&lt;/td>
&lt;td>O&lt;/td>
&lt;td>假設目前turn為i，且Pi已先於Pj進入CS，而Pj等待中，當Pi離開CS後，又立刻想再進入CS，但因Pi會在離開CS後，將turn的值設為j，使得Pi無法先於Pj進入CS，所以Pj至多等一次後即可進入CS&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="algo2">Algo2&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>共享變數宣告如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">flag[i..j] of boolean;
初值皆為False
意義：flag[i] ={
True:Pi有意進C.S
False:Pi無意進C.S
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>程式：&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/efUReYc.png"
loading="lazy"
alt="image-20230126182421298"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>分析&lt;/p>
&lt;/li>
&lt;/ol>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>CS Design要滿足的條件&lt;/th>
&lt;th>滿足與否&lt;/th>
&lt;th>解析&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Mutual Exclusion&lt;/td>
&lt;td>O&lt;/td>
&lt;td>兩個人確實都不會同時進去，但有可能會兩個都想進去，卡住彼此，參照下面&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Progress&lt;/td>
&lt;td>X&lt;/td>
&lt;td>第二點不符合，會&lt;strong>形成Deadlock&lt;/strong>，Pi,Pj可能接無法進入C.S&lt;code>解析在下面&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Bounded Waiting&lt;/td>
&lt;td>O&lt;/td>
&lt;td>兩個都進不去，是deadlock，不是stravation&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>解析：&lt;img src="https://i.imgur.com/RJq3tIi.png"
loading="lazy"
alt="image-20230126183442922"
>&lt;/p>
&lt;h3 id="algo3">Algo3&lt;/h3>
&lt;p>&lt;code>Peterson's solution&lt;/code>&lt;/p>
&lt;p>&lt;code>混合Algo1,Algo2做撒尿牛丸&lt;/code>&lt;/p>
&lt;p>algo1只考慮誰有資格，沒考慮意願。algo2只考量意願，但會造成死結。因此結合百家之長，不只考量資格也考量意願&lt;/p>
&lt;ol>
&lt;li>
&lt;p>共享變數宣告如下&lt;/p>
&lt;ol>
&lt;li>Flag[i&amp;hellip;j] of Boolean初值皆為False &lt;code>表意願&lt;/code>&lt;/li>
&lt;li>Turn：值為i或j only &lt;code>表資格&lt;/code>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>程式&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/RdgEoJs.png"
loading="lazy"
alt="image-20230126220525905"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>分析&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>CS Design要滿足的條件&lt;/th>
&lt;th>滿足與否&lt;/th>
&lt;th>解析&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Mutual Exclusion&lt;/td>
&lt;td>O&lt;/td>
&lt;td>&lt;code>相互排斥，不會有兩個process同時進入C.S&lt;/code>：若Pi，Pj皆想進入C.S，代表flag[i]跟flag[j]結為True， 當雙方皆做到while測試的時候(也就是交錯)，表示雙方已分別執行過Turn=i, Trun=j之設定，差別只是先後順序不同而已。&lt;strong>若Pi執行比較快，把Turn改成J，接著Pj因為執行比較慢，又把Turn改成i，所以Turn的值只會為i(或j其中一個)，不會同時為兩者&lt;/strong>，所以只有Pi或Pj一個Process得以進入CS，因此符合Mutual Exclustion&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Progress&lt;/td>
&lt;td>O&lt;/td>
&lt;td>因為progress有兩個情況，因此分別討論之。&lt;br />1.&lt;code>不想進去的process不會阻礙別人進入&lt;/code>： 假設turn值為i，且Pi不想進入C.S，代表Flag[i]為False，若此時Pj想進去則Pj必可離開while(因為Flag[i]==False)，&lt;strong>而進入CS，因為Pi不會阻礙Pj進CS&lt;/strong>&lt;br />2.&lt;code>不產生Deadlock&lt;/code>：若Pi,Pj皆想進入C.S，則在有限的時間內必可決定出Turn值為i或為j，讓Pi or Pj進入，兩者不會waiting forever&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Bounded Waiting&lt;/td>
&lt;td>O&lt;/td>
&lt;td>&lt;code>先進去的process出來後，不會立刻再進去，亦即不會有Starvation的情形&lt;/code>：假設turn為i，Pi已先於Pj進入CS，而Pj等待進入中，Flag[i]==[j]==True，若Pi離開CS之後，又立刻想進入CS，則Pi必定會做一件事情，就是**~~把Flag[i]自己設為False~~，把Turn設成=j**，一定是Pj進入CS，因為Pj至多等一次後即可進入CS。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ol>
&lt;h2 id="n個processes-cs-design">N個Processes C.S Design&lt;/h2>
&lt;h3 id="bankerys-algo麵包店取號碼牌">Bankery&amp;rsquo;s Algo(麵包店取號碼牌)&lt;/h3>
&lt;p>&lt;code>解決Race Condition&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>觀念：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>客人(Process)要先取得號碼牌，才可入店內(CS)&lt;/strong>&lt;/li>
&lt;li>&lt;strong>店內(CS)一次只容一人(Process)進入&lt;/strong>&lt;/li>
&lt;li>&lt;strong>號碼最小的客人或同為最小號碼之多個客人中ID最小的(PID)，得以優先進入店(CS)&lt;/strong>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>共享變數宣告如下：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Choosing[0&amp;hellip;n-1] of Boolean 初值皆為False。&lt;/p>
&lt;p>意義：choosing[i]=&lt;/p>
&lt;ul>
&lt;li>True：&lt;strong>Pi正在取得號碼牌&lt;/strong>，尚未確定號碼&lt;/li>
&lt;li>False：
&lt;ul>
&lt;li>Pi取得號碼牌&lt;/li>
&lt;li>初值&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Number [0&amp;hellip;n-1] of int 代表號碼牌&lt;/p>
&lt;p>意義：代表P0~Pn-1，n個Process之&lt;strong>號碼牌值&lt;/strong>，初值皆為0。&lt;/p>
&lt;p>number[i]：&lt;/p>
&lt;ul>
&lt;li>0：表Pi&lt;strong>無意願&lt;/strong>進入CS&lt;/li>
&lt;li>.&lt;strong>&amp;gt;0：表Pi有意願進入CS&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>數學函數used&lt;/p>
&lt;ol>
&lt;li>MAX(&amp;hellip;)：取最大值(用來&lt;strong>決定號碼牌的值&lt;/strong>)&lt;/li>
&lt;li>(a,b)&amp;lt;(c,d)若要成立，則&lt;strong>必須滿足下列兩個條件之其中一個&lt;/strong>
&lt;ol>
&lt;li>a&amp;lt;c&lt;/li>
&lt;li>a==c and b&amp;lt;d&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Pi之程式如下：&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="n">repeat&lt;/span>
&lt;span class="n">chosing&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">True&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//表明正在取得號碼牌
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Number&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">MAX&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Number&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]...[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//決定號碼牌是幾號
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">choosing&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">False&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//表示已取得號碼牌
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span> &lt;span class="c1">// 此for-loop去檢測所有process
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">choosing&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]){&lt;/span>&lt;span class="k">do&lt;/span> &lt;span class="n">noting&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="c1">//若別人pj正在取號碼牌中，則稍等一下，若都沒有被卡住，可以順利跑完，則進入CS
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">number&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">number&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">number&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)){&lt;/span>&lt;span class="k">do&lt;/span> &lt;span class="n">noting&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="c1">//i代表自己，j代表別人。Pj有意願進入CS，並取Pj號碼小於我或跟我同好，Pj Id j &amp;lt;Pi ID i，則我等待。
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="n">C&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">S&lt;/span>
&lt;span class="n">Number&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">R&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">S&lt;/span>
&lt;span class="n">untill&lt;/span> &lt;span class="n">False&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h4 id="經典問題">經典問題&lt;/h4>
&lt;h5 id="為何會有很多個processes取得相同的number值">為何會有很多個Processes取得相同的Number值？&lt;/h5>
&lt;p>Ans. 假設MAX(Number [0]~[n-1]值為k，Pi,Pj(i≠j) 2個Processes之交錯執行順序如下：&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/4yOA23W.png"
loading="lazy"
alt="image-20230211150854314"
>&lt;/p>
&lt;h5 id="正確性證明">正確性證明？&lt;/h5>
&lt;p>Ans.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Mutual Exclusion：OK&lt;/p>
&lt;p>Case1. 假設Number值皆不同(&amp;gt;0)，則具有最小的Number值之Process，得以優先進入CS，其餘Process wait而最小值必唯一&lt;/p>
&lt;p>Case2. 有多個Processes具最小Number值，則以Processes之PID最小者得以進入CS，而ProcessID具備Unique性質，因為最小值必定唯一。&lt;/p>
&lt;p>藉由Case1, Case2知道唯一性確定，互斥確保&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Progress：OK&lt;/p>
&lt;p>Case1. 假設Pj不想進入CS，代表Number[j]為0，若此時Pi想進入CS則Pi檢查到Pj，Pi必定不會被Pj所阻礙，可以exits for中第二個While(因為while(number[j]&amp;gt;0 )，這個條件判斷不成立)&lt;/p>
&lt;p>Case2. 若P0~Pn1-1，n個Processes皆想進入CS，則在有限的時間內，必有一個Proess(其Number最小或同號中ProcessID最小)，可以順利跑完for loop進入CS，&lt;strong>因為No Deadlock&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Bouned waiting：OK&lt;/p>
&lt;p>Case1. 假設P0~Pn-1 n個Processes皆想進入CS，另Pi具有最大的，number值為=K(number[i]=K)，因此Pi會是最後進去的，其他(n-1)個Processes:Pj(j≠i)，必定皆先於Pi進入CS。若Pj離開C.S後，又立刻想再進入C.S，則Pj取得的號碼牌之值Number[j]必定大於K，所以Pj不會再度先於Pi進入CS，因此Pi頂多等(n-1)次後即可進入CS&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h5 id="設計問題">設計問題&lt;/h5>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">choosing&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]){&lt;/span>
&lt;span class="c1">// do noting
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">number&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">number&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">number&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)){&lt;/span> &lt;span class="c1">//問題，既然這邊都會把不符合的Process攔下來，娜何還需要上面的choosing[j]來卡住呢?是不是可以把choosing[j]刪掉，這樣的邏輯對嗎?會出現什麼問題嗎
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// do noting
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>解釋：&lt;/p>
&lt;p>違反了&lt;strong>互斥&lt;/strong>。&lt;/p>
&lt;p>例：令　目前Number[0,n-1]&lt;code>都還沒領到號碼牌&lt;/code>值皆為0，Pi，Pj2個Processes(i≠j)想進入CS，且假設ProcessID是i&amp;lt;j&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/9MHjI6c.png"
loading="lazy"
alt="image-20230211181602704"
>&lt;/p>
&lt;p>​ 就好比一個阿婆跟一個年輕妹妹一起去麵包店，年輕人先取完號碼牌，老太婆還沒取完。這時候妹妹領完後，老太婆還沒領，原本的設計下，妹妹會等阿婆領完才執行下一步，但這種情況下，即使阿婆還沒取，妹妹也會直接進入麵包店裡。接著阿婆取完號碼牌，發現跟妹妹同號(Race Condition)，此時他也想進入CS，這時候阿婆的身分證號碼(UID)比妹妹小，所以阿婆也可以進入CS，這種情況下，有兩個Process同時進入CS裡，違反了互斥(Mutual Exclustion)&lt;/p>
&lt;h2 id="hardware-solution---cpu-instructions-support">Hardware Solution - CPU Instructions Support&lt;/h2>
&lt;p>若CPU有提供下列指令之一&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>Test-and-Set (Lock)&lt;/li>
&lt;li>SWAP(a,b)&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>則Programmer可以運用在CS Design&lt;/p>
&lt;h3 id="test-and-setlock-指令">Test-and-Set(Lock) 指令&lt;/h3>
&lt;p>定義：此CPU Instruction之功能為，傳出Lock參數值&lt;code>Lock的資料型別為boolean&lt;/code>且將Lock參數設為True(1)，且CPU保證此指令是&lt;strong>☆☆☆&amp;quot;Atomically Executed&amp;quot;☆☆☆&lt;/strong>，&lt;/p>
&lt;p>範例：以Ｃ語言說明此指令功能：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="n">Test&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">and&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">Set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">Lock&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">temp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">Lock&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">Lock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">temp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>用在C.S Design上&lt;/p>
&lt;h3 id="algo1ｘ不可以用">[Algo1]：Ｘ不可以用&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>共享變數如下：&lt;/p>
&lt;p>Lock：boolean = False&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Pi程式如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="n">repeat&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Test&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">and&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">Set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Lock&lt;/span>&lt;span class="p">)){&lt;/span>
&lt;span class="c1">// do nothing
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="n">C&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">S區塊&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">Lock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">False&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">R&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">S&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">Utill&lt;/span> &lt;span class="n">False&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>分析：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Mutual Exclustion：OK&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/XtJJRuB.png"
loading="lazy"
alt="image-20230211192216510"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Progress：OK&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>不想進去的人就待在RS裡面，不會去搶&lt;/li>
&lt;li>避免死結，總有一個人會搶到Test-and-Set(Lock)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Bounded Waiting：違反&lt;/strong>&lt;/p>
&lt;p>假設Pi已先於Pj進入CS，且Pj等待中，當Pi離開CS後，若想在立刻進去CS，則&lt;strong>Pi是有機會在優先進去搶到Test-and-set之執行&lt;/strong>，因此Pj 有可能Starvation&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h3 id="algo2-穩的可以用">[Algo2] ：穩的，可以用&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>共享變數如下：&lt;/p>
&lt;ol>
&lt;li>Lock：boolean = False; &lt;code>Test and Set會用到的變數&lt;/code>&lt;/li>
&lt;li>waiting[0 ..n-1] of boolean初值皆為False，若為True則代表有意進入區間，若為False則代表初值，或準備進入C.S&lt;/li>
&lt;/ol>
&lt;p>意義：&lt;/p>
&lt;p>waiting[i]有兩種，若為&lt;/p>
&lt;p>True：&lt;strong>表Pi有意進入CS，且正在等待中&lt;/strong>&lt;/p>
&lt;p>False：&lt;strong>代表初值，或是表示Pi不需要再等了，可以進入CS&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Pi之程式如下： [034 17 02 CH6 P 6 71時24分02秒 17:57]&lt;/p>
&lt;p>區域變數&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Key：boolean;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>j: int&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="n">repeat&lt;/span>
&lt;span class="n">waiting&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="n">True&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//Pi有意，且等待中...
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">True&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">waiting&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">key&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Test&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">and&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Lock&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//--------------------分隔線--------------
&lt;/span>&lt;span class="c1">//在還沒離開while前，waiting[i]的值不可能為False，Process i 個人而言不可能把waiting[i]值改成False進入CS。因此只剩Key可以動了
&lt;/span>&lt;span class="c1">// 又因TestAndSet(Lock)方法會返回Lock的Boolean值，並將Lock設為True，也因此，惟有第一個搶到CPU的Process，才會有False的Key值
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">waiting&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">False&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//☆☆☆☆☆表明Pi不用等了，可以進入CS了☆☆☆☆☆
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">C&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">S&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">j&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//n是陣列長度, j 是指i的下一個element of array
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="err">≠&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">not&lt;/span> &lt;span class="n">waiting&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]){&lt;/span> &lt;span class="c1">//若j=i，則表示已經繞了一圈。waiting表意願，True代表想，False代表不想
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//找出下一個想進入C.S之Pj
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">//搭配下面的case2，代表都沒人想進入CS，並且因為 Test-and-Set(Lock)會將Lock設為True(可參照上面)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Lock&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="n">False&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//因為都沒人想進去，因此就把鎖打開
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="n">waiting&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">False&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//Pj不用等了，換你進CS
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="n">R&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">S&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">utill&lt;/span> &lt;span class="n">False&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Case1.&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/yLoFE11.jpg"
loading="lazy"
alt="S__16056339"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/qdgQnel.jpg"
loading="lazy"
alt="S__16056339"
>&lt;/p>
&lt;p>Case2：當Pi執行完後，發現外面都沒任何人想進來，只好再把Lock設回False，一切重新ReSet&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/5Dc47tS.png"
loading="lazy"
alt="image-20230214225719635"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/tRwC3p0.png"
loading="lazy"
alt="image-20230214232435547"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Q1：證明正確性&lt;/p>
&lt;p>Ans．&lt;/p>
&lt;p>[1] Mutual Exclusion：OK&lt;/p>
&lt;p>pf： Pi可進入C.S之條件有兩種可能&lt;/p>
&lt;p>case1. Key值為False&lt;/p>
&lt;p>代表Pi是第一個搶到Test-and-Set(Lock)執行者，如此才能將Key改為False，==&lt;strong>因此唯一性確立&lt;/strong>==&lt;/p>
&lt;p>case2. waiting[i]為False&lt;/p>
&lt;p>代表Pi在離開while之前，是&lt;strong>不會&lt;/strong>將waiting[i]改為False,==&lt;strong>只會將它設為True，只有在CS的Proces當它離開CS後，才能改變其他processes中之一個process的waiting值變False，在CS中的Process只有一個，出來CS後也只改變一個Process之waiting值為False，因此唯一性也確立。換言之，一個process不會自己把自己的waitiing值設成False，一定都是別的process來設的，因此唯一性確立&lt;/strong>==&lt;/p>
&lt;p>因此由case1及2得知，互斥成立&lt;/p>
&lt;p>[2] Progress：OK&lt;/p>
&lt;p>pf：==&lt;strong>若Pi不想進入C.S，其waiting[i]為False，而且Pi不會跟其他Process競爭Test-and-Set(Lock)的執行&lt;/strong>，且從CS離開之Process，也不會改變Pi之waiting值，因此Pi不會參與進行CS之決策。==&lt;/p>
&lt;p>若n個Process都想進入CS，則在有限的時間內必定會決定出第一個搶到Tetst-and-Set()執行，並進入CS。它從CS離開後，也會在&lt;strong>有限的&lt;/strong>時間內讓下一個想進入CS之Process進入CS或Lock設False。&lt;/p>
&lt;p>==不會有Deadlock==&lt;/p>
&lt;p>[3]Bounded Waiting：OK&lt;/p>
&lt;p>pf：假設P&lt;sub>0&lt;/sub>~P&lt;sub>n-1&lt;/sub>等n個Processes皆想進入C.S表示waiting[0]~[n-1]皆為True&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/Xk4eZu4.png"
loading="lazy"
alt="image-20230216003256885"
>&lt;/p>
&lt;p>令Pi是&lt;strong>第一個&lt;/strong>搶到Test-and-Set執行之Process，率先進入CS當Pi離開CS後，會將P&lt;sub>(n+1)%n&lt;/sub>之waiting值改為False，讓P&lt;sub>(n+1)%n&lt;/sub>進入cs，依此類推，Process會依P&lt;sub>i&lt;/sub>,P&lt;sub>(i+1)%n&lt;/sub>,P&lt;sub>(i+2)%n&lt;/sub>&amp;hellip;P&lt;sub>(i-1)%n&lt;/sub>FIFO 順序依據進入CS，故不會有Starvation&lt;/p>
&lt;h2 id="swapab指令">SWAP(a,b)指令&lt;/h2>
&lt;ul>
&lt;li>定義：&lt;strong>此CPU指令是將a,b兩值互換，且CPU保證它是==Atomically executed==&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>若以C語言描述，功能如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="nf">swap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">temp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">temp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>用在C.S design上&lt;/li>
&lt;/ul>
&lt;p>[algo1]：Ｘ&lt;/p>
&lt;p>共享變數如下&lt;/p>
&lt;p>Lock：boolean=False;&lt;/p>
&lt;p>區域變數如下：&lt;/p>
&lt;p>key：boolean&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">repeat;
key=True;
{repeat;
swap(Lock,key);
utill(key==False)} ; //成立才離開
C.S
Lock=False;
R.S
until False;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/MBKeMjT.png"
loading="lazy"
alt="image-20230216233043091"
>&lt;/p>
&lt;p>分析：&lt;/p>
&lt;p>[Algo1]同Test-and-Set&lt;/p>
&lt;p>Mutual Exclustion= ok&lt;/p>
&lt;p>progress= ok&lt;/p>
&lt;p>&lt;strong>Bounded waiting= No，只有設成Fales而已，還是無法避免無限等待&lt;/strong>&lt;/p>
&lt;p>[Algo2] 正確的&lt;/p>
&lt;p>將Test-and-set的[algo2]中&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">...
while(...){
// key=test-and-set(Lock);
swap(Lock,key); //改成這樣即可
}
...
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>綜合練習&lt;/p>
&lt;p>在Test-and-set[Algo2]中&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">while(waiting[i] and key){
key = Test-and-Set(Lock);
}
waiting[i] = False; //Pi不用等了，可進入CS
CS
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>若把&lt;code>waiting[i] = False; &lt;/code>這行刪掉，此行removed是否正確?explain in details&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/nYiqTti.png"
loading="lazy"
alt="image-20230217001954998"
>&lt;/p>
&lt;p>Ans.&lt;/p>
&lt;p>&lt;strong>違反Progress&lt;/strong>，不想進入的progress參與決策，並且會發生死結，兩件事情都會發生&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/e6tghIj.png"
loading="lazy"
alt="image-20230217005154344"
>&lt;/p>
&lt;h2 id="semaphore號誌">Semaphore(號誌)&lt;/h2>
&lt;p>&lt;strong>製作Semaphore的目的就是為了確保 ，號誌的值不會Race Condition&lt;/strong>&lt;/p>
&lt;p>學習地圖&lt;/p>
&lt;blockquote>
&lt;p>定義&lt;/p>
&lt;p>應用&lt;/p>
&lt;blockquote>
&lt;p>CS Design (臨界區間設計)&lt;/p>
&lt;p>synchronization problem solution(解決同步問題)&lt;/p>
&lt;/blockquote>
&lt;p>種類&lt;/p>
&lt;blockquote>
&lt;p>Binary semaphore vs counting semaphore&lt;/p>
&lt;p>spinlock semaphore vs non-busy waiting semaphore&lt;/p>
&lt;/blockquote>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>定義：令Ｓ為Semaphore type變數，架構在integer type針對S，提供兩個&lt;strong>Atomica operations&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>wait(S)&lt;code>或P(S)&lt;/code> &lt;code>因為是荷蘭人，所以用荷蘭命名&lt;/code>&lt;/li>
&lt;li>signal(S)&lt;code>或V(S)&lt;/code> &lt;code>因為是荷蘭人，所以用荷蘭命名&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>定義如下&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="waits">wait(S)：&lt;/h3>
&lt;p>==若S為0則卡住，若S不為0則通過==&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">while(S≦０){do no-op;} //若semaphore的值為0，則卡在這邊
S=S-1; //退出後semaphore值-1
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="signals">signal(S)：&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">S=S+1;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>note：因為Atomical, 所以S不會有race condition&lt;/p>
&lt;ul>
&lt;li>應用：主要用在CS Design，及同步問題之解決&lt;/li>
&lt;/ul>
&lt;h3 id="cs-design使用如下">&lt;strong>CS Design使用如下&lt;/strong>&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>共享變數宣告如下&lt;/p>
&lt;p>mutex&lt;code>常見的變數名稱，代表mutual exclustion的意思&lt;/code>：semaphore= 1; //初值為1&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Pi程式如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">repeat :
wait(mutex);
C.S
signal(mutex);
RS
untill False;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Pi&lt;/th>
&lt;th>Pj&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>T1：wait(mutex);&lt;br />因為mutex = 1&lt;br />所以Pi可以離開while，then,mutex值在減1變0，then Pi進入CS&lt;/td>
&lt;td>T2：wait(mutex)，因為此時mutex=0，這時候Pj會卡住。符合&lt;strong>Mutual exclustion&lt;/strong>&lt;br />&lt;strong>Progress也符合&lt;/strong>&lt;br />&lt;strong>Bounded waiting也符合&lt;/strong>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ol>
&lt;h3 id="解決簡單的synchronization-problem">&lt;strong>解決簡單的Synchronization problem&lt;/strong>&lt;/h3>
&lt;p>​ 何謂Synchronization? Process因為某些事件發生(or未發生)而被迫等待，無法往下執行，直到其他Processes do something才得以往下&lt;/p>
&lt;p>範例1：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Pi&lt;/th>
&lt;th>Pj&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&amp;hellip;&lt;/td>
&lt;td>&amp;hellip;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>A;&lt;/td>
&lt;td>B;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;hellip;&lt;/td>
&lt;td>&amp;hellip;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>規定：A必須在B之前執行，試用Semaphore達到此需求&lt;/p>
&lt;p>Ans. 宣告一共享變數&lt;/p>
&lt;p>S= Semaphore=0;
&lt;img src="https://i.imgur.com/gFkvUDs.png"
loading="lazy"
alt="image-20230218153218428"
>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Pi&lt;/th>
&lt;th>Pj&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&amp;hellip;&lt;/td>
&lt;td>&amp;hellip;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>A;&lt;br />signal(S);&lt;/td>
&lt;td>wait(S);&lt;br />B;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;hellip;&lt;/td>
&lt;td>&amp;hellip;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>==Note：semaphore的初值是具有某些意義的，並且初值不一定要是０或１，其實都可以，只是都用０跟１做舉例==&lt;/p>
&lt;ul>
&lt;li>初值為1：用作互斥控制&lt;/li>
&lt;li>初值為0：用作強迫等待&lt;/li>
&lt;/ul>
&lt;p>例2：&lt;/p>
&lt;p>S1：Semaphore= 0;&lt;/p>
&lt;p>S2：Semaphore= 0;&lt;/p>
&lt;p>規定執行順序為A -&amp;gt; C -&amp;gt; B 該如何完成?&lt;/p>
&lt;p>Ans：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Pi&lt;/th>
&lt;th>Pj&lt;/th>
&lt;th>Pk&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>wait(s2)&lt;/td>
&lt;td>wait(s1)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>A&lt;/td>
&lt;td>B;&lt;/td>
&lt;td>C;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>signal(s1)&lt;/td>
&lt;td>&lt;/td>
&lt;td>signal(s2)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Ex2：希望達成 &lt;u>A,B,C,&lt;/u>&lt;u>A,B,C,&lt;/u>&lt;u>A,B,C&lt;/u> repeatly execuction&lt;/p>
&lt;p>承上性質，S1,S2 semaphore=0;S3 semaphore=1&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Pi&lt;/th>
&lt;th>Pj&lt;/th>
&lt;th>Pk&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>wait(s3)&lt;/td>
&lt;td>wait(s1)&lt;/td>
&lt;td>wait(s2)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>A;&lt;/td>
&lt;td>B;&lt;/td>
&lt;td>C;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>signal(s1)&lt;/td>
&lt;td>signal(s2)&lt;/td>
&lt;td>signal(s3)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Ex3：C是共享變數，初值為3，請寫出最後C的值為多少&lt;/p>
&lt;ul>
&lt;li>第一小題&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Pi&lt;/th>
&lt;th>Pj&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>C=C*2&lt;/td>
&lt;td>C=C+1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>7或8或4或6&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>第二小題&lt;/li>
&lt;/ul>
&lt;p>s= semaphore=1&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Pi&lt;/th>
&lt;th>Pj&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>wait(s)&lt;/td>
&lt;td>wait(s)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>c=c*2&lt;/td>
&lt;td>c=c+1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>signal(s)&lt;/td>
&lt;td>singal(s)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>7或8&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>第三小題&lt;/li>
&lt;/ul>
&lt;p>s= semaphore = 0&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Pi&lt;/th>
&lt;th>Pj&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>wait(s)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>c=c*2&lt;/td>
&lt;td>c=c+1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>signal(s)&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>7&lt;/strong>&lt;/p>
&lt;p>EX4&lt;/p>
&lt;p>S1：Semaphore = 1;&lt;/p>
&lt;p>S2：Semaphore = 0;&lt;/p>
&lt;p>求ABC可能執行順序&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Pi&lt;/th>
&lt;th>Pj&lt;/th>
&lt;th>Pk&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>wait(s1)&lt;/td>
&lt;td>wait(s2)&lt;/td>
&lt;td>wait(s1)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>A;&lt;/td>
&lt;td>B;&lt;/td>
&lt;td>C;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>signal(s2)&lt;/td>
&lt;td>signal(s1)&lt;/td>
&lt;td>signal(s1)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Ans：把不可能的刪除就好&lt;/p>
&lt;p>ABC,&lt;/p>
&lt;p>&lt;del>ACB,&lt;/del>&lt;/p>
&lt;p>&lt;del>BAC,&lt;/del>&lt;/p>
&lt;p>&lt;del>BCA,&lt;/del>&lt;/p>
&lt;p>CAB,&lt;/p>
&lt;p>&lt;del>CBA&lt;/del>&lt;/p>
&lt;h3 id="semaphore之誤用所造成之問題">semaphore之誤用所造成之問題&lt;/h3>
&lt;p>違反互斥、形成死結&lt;/p>
&lt;p>例1&lt;/p>
&lt;p>s= Semaphore=1&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Pi&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>singal(s)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CS&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Wait(s)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&amp;mdash;&amp;gt; 違反mutual exclusion&lt;/p>
&lt;p>例2&lt;/p>
&lt;p>s= semaphore = 2&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Pi&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>wait(s)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>cs&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>wait(s)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>rs&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&amp;mdash;&amp;gt; 形成死結&lt;/p>
&lt;p>例3&lt;/p>
&lt;p>S1,S2 = Semaphore = 1;&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Pi&lt;/th>
&lt;th>Pj&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>T1:wait(s1)&lt;/td>
&lt;td>T2:wait(s2)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>T3:wait(s2)&lt;/td>
&lt;td>T4:wait(s1)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;hellip;&lt;/td>
&lt;td>&amp;hellip;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>signal(s1)&lt;/td>
&lt;td>signal(s2)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>signal(s2)&lt;/td>
&lt;td>signal(s1)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>可能形成deadlock，如果Pi，Pj依照T1~T4之順序交錯執行&lt;/p>
&lt;h3 id="著名的synchronization-problem之解決">著名的Synchronization Problem之解決&lt;/h3>
&lt;p>&lt;strong>想看看何時會停下來&lt;/strong>&lt;/p>
&lt;h4 id="producer-consumer-problem生產者消費者問題">Producer-Consumer Problem(生產者消費者問題)&lt;/h4>
&lt;p>Producer：此process專門產生資訊供別人使用&lt;/p>
&lt;p>Consumer：此process專門消耗別人產生的成果&lt;/p>
&lt;p>在sharrd memory溝通方式底下，會準備一個buffer&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/Ms4bWcB.png"
loading="lazy"
alt="image-20230219133538935"
>&lt;/p>
&lt;p>細分為兩個類型的問題&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Bounded Buffer Producer-Consumer(Buffer有限)&lt;/p>
&lt;p>有兩個情況會被迫等待&lt;/p>
&lt;ol>
&lt;li>當Buffer滿了，Producer被迫等待&lt;/li>
&lt;li>當Buffer空了，Consumer被迫等待&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Unbounded Buffer Producer-Consumer(Buffer無限)&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h5 id="algo1-1">algo1&lt;/h5>
&lt;p>共享變數宣告如下&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Buffer: [0..n-1] of items;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>in,out: int = 0;&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Producer 程式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">repeat:
produce an item in nextp;
while((in+1)%n==out) {do noting}; //當buffer滿的話，就卡在while中
Buffer[in] =nextp;
in = (in+1)%n;
until false;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Consumer程式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">repeat
while(in == out ){ do nothing} //buffer為空
nextc= Buffer[out];
out=(out+1) % n;
...
consumes the item in nextc;
until false;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/BkZNIb6.png"
loading="lazy"
alt="image-20230219174042582"
>&lt;/p>
&lt;p>此時producer 無法在加item，因為(in+1)%n == out, 即buffer已經滿了，因此最多利用(n-1)格&lt;/p>
&lt;h5 id="algo2-1">algo2&lt;/h5>
&lt;p>共享變數宣告如下&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Buffer: [0..n-1] of items;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>in,out: int = 0;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>==&lt;strong>count:int =0&lt;/strong>==&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>這個count值有可能導致race condition，因此不完全正確&lt;/strong>&lt;/p>
&lt;p>Producer 程式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">repeat:
produce an item in nextp;
while(count==n) {do noting}; //當buffer滿的話，就卡在while中
Buffer[in] =nextp;
in = (in+1)%n;
count = count +1;
until false;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Consumer程式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">repeat
while(count ==0 ){ do nothing} //buffer為空
nextc= Buffer[out];
out=(out+1) % n;
count = count -1;
...
consumes the item in nextc;
until false;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="用semaphore解producer-consumer-problem">用semaphore解producer-consumer problem&lt;/h4>
&lt;p>共享變數宣告如下：&lt;/p>
&lt;ol>
&lt;li>empty : semaphore = n . 代表buffer內空格數，若空格數變為0，代表滿了&lt;/li>
&lt;li>full : semaphore=0. 代表buffer區中，填入item之格數，若為0，表buffer為空&lt;/li>
&lt;li>mutex：semaphore=1; 對buffer, in , out , count做互斥控制，防止&lt;strong>race condition&lt;/strong>&lt;/li>
&lt;/ol>
&lt;h4 id="semaphore的設計哲學">semaphore的設計哲學&lt;/h4>
&lt;blockquote>
&lt;ol>
&lt;li>滿足同步條件之號誌變數&lt;code>empty, full&lt;/code>&lt;/li>
&lt;li>互斥控制防止race condition之號誌 &lt;code>mutex&lt;/code>&lt;/li>
&lt;li>先測同步在測互斥，不然會造成死結&lt;/li>
&lt;li>&lt;strong>==共享變數取存之前都需要經過互斥的處理==&lt;/strong>&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>producer&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">repeat
produce on item in nextp;
wait(empty) ; //若無空格則P被迫等待
wait(mutex);
add nextp into Bufffer; //濃縮很多程式在這行裡面喔
signal(mutex);
signal(full); //填入item之格數加1，maybe拯救Consumer
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>consumer&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">repeat
wait(full);
wait(mutex);
remove item from Buffer in nextc
signal(mutex);
singal(empty)
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="readwrite-problem">Read/write Problem&lt;/h4>
&lt;p>&lt;img src="https://i.imgur.com/J4nkQh8.png"
loading="lazy"
alt="image-20230222215707149"
>&lt;/p>
&lt;p>&lt;strong>基本的同步條件&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Reader write要互斥&lt;/strong>&lt;/li>
&lt;li>&lt;strong>writer,writer也要互斥&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>此外，這問題再細分成兩類&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>First read/writer problem&lt;/strong>&lt;/p>
&lt;p>-&amp;gt; 對Reader有利，對writer不利，因此writer可能starvation&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Second read/writer problem&lt;/strong>&lt;/p>
&lt;p>-&amp;gt; 對writer有利，對reader不利，因此reader可能startvation&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="first-readerwriter-problem">First Reader/Writer Problem&lt;/h4>
&lt;p>何謂「對Reader有利，Writer不利」?&lt;/p>
&lt;p>只要有源源不絕的Reader，則W1可能Starvation&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/P4FyOhL.png"
loading="lazy"
alt="image-20230222223611353"
>&lt;/p>
&lt;p>共享變數宣告如下：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>wrt：semaphore =1&lt;/p>
&lt;blockquote>
&lt;p>提供R/W 及 W/W互斥控制，並&lt;strong>兼差對Writer不利的控制&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>readcnt：int = 0;&lt;/p>
&lt;blockquote>
&lt;p>統計Reader個數，直到沒有Reader，才可以放writer進去&lt;/p>
&lt;p>Reader到-&amp;gt;Readcnt +1&lt;/p>
&lt;p>Reader走 -&amp;gt;Readcnt -1&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>mutex：semaphore=1&lt;/p>
&lt;blockquote>
&lt;p>由於readcnt是一共享變數，會有Race Condition之問題，故需額外宣告一變數Mutex做互斥控制&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ol>
&lt;p>程式：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>writer&lt;/th>
&lt;th>reader&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&amp;hellip;&lt;br />wait(wrt)&lt;br />執行寫入作業&lt;br />signal(wrt)&lt;br />&amp;hellip;&lt;/td>
&lt;td>&amp;hellip;&lt;br />wait(mutex) ;&lt;br />readcnt = readcnt +1&lt;br />if(readcnt==1)&lt;code>代表你是第一個Reader&lt;/code> then wait(wrt)&lt;code>要去偵測是否有writer存在。若有則卡住，若無則通過，也順便卡住writer&lt;/code>&lt;br />signal(mutex);&lt;br />執行reading工作 &lt;br />wait(mutex);&lt;br />readcnt = readcnt -1 //reader走，reader-1&lt;br />if(readcnt=.=0) then signal(wrt) //No reader，放writer進去&lt;br />singal(mutex)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>練習：&lt;/p>
&lt;p>若目前W1已在寫入中&lt;/p>
&lt;ol>
&lt;li>R1到，則R1會卡在wrt 裡，此時readcnt=1&lt;/li>
&lt;li>R2又到，則R2會卡在mutex，此時readcnt=1&lt;/li>
&lt;li>R3到，則R3會卡在mutex，此時readcnt=1&lt;/li>
&lt;/ol>
&lt;h4 id="second-reader-writer-problem">Second Reader/ writer problem&lt;/h4>
&lt;p>何謂對Writer 有利，&lt;strong>對Reader不利&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/beObzlW.png"
loading="lazy"
alt="image-20230306001249076"
>&lt;/p>
&lt;p>T6：w1離開，&lt;strong>優先&lt;/strong>放W2近來(並非R1)&lt;/p>
&lt;p>T7：w2離開，&lt;strong>優先&lt;/strong>放W2近來(並非R1)&lt;/p>
&lt;p>&amp;hellip;(以此類推)&lt;/p>
&lt;p>只要Writer離開，發現尚有waiting writer在，那就會優先放writer近來，所以R1有可能Startvation&lt;/p>
&lt;p>&lt;strong>共享變數之宣告&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>readcnt：int=0 ：統計reader個數&lt;/p>
&lt;/li>
&lt;li>
&lt;p>wrtcnd：int=0：統計writer個數&lt;/p>
&lt;/li>
&lt;li>
&lt;p>x：semaphore：１　//用來對readcnt做互斥控制，防止race condition&lt;/p>
&lt;/li>
&lt;li>
&lt;p>y：semaphore：１ //用來對wrtcnd做互斥控制，防止race condition&lt;/p>
&lt;/li>
&lt;li>
&lt;p>z：semaphore：１　//有的版本會有，有的版本不會有。作為對reader之入口控制(讓它卡多一些關卡，讓reader slower)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>rsem：semaphore=1　//作為對reader不利之控制&lt;/p>
&lt;/li>
&lt;li>
&lt;p>wsem：semephore=1 //提供R/W及W/W互斥控制&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>程式&lt;/strong>：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>writer&lt;/th>
&lt;th>reaeder(以First reader程式為主，再加入控制)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>wait(y)&lt;br />wrtcnt = wrtcnt+1;&lt;br />if(wrtcnt=&lt;!---->=1) then(wait(rsem)) //第一個writer ，要負責築起對reader不利之控制&lt;br />signal(y);&lt;br />wait(wsem) //&lt;br />執行writing工作&lt;br />&lt;br />wait(y)&lt;br />wrtcnt = wrtcnt-1&lt;br />if(wrtcnt==0) then signal(resm) //解除對reader不利之控制&lt;br />signal(wsem) //解除 R/W W/W互斥&lt;br />signal(y)&lt;/td>
&lt;td>wait(z)&lt;br />wait(rsem) //通過對reader不利之控制?&lt;br />wait(x)&lt;br />readcnt = readcnt +1;&lt;br />if(readcnt ==1) then wait(wsem) //R/W互斥&lt;br />signal(x)&lt;br />signal(rsem)&lt;br />signal(z)&lt;br />(執行reading工作)&lt;br />&lt;br />wait(x);&lt;br />readcnt = readcnt -1&lt;br />if(readcnt ==0) then signal(wsem) //解除R/W互斥&lt;br />signal(x)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="the-sleeping-barbers-problem">The Sleeping Barbers Problem&lt;/h4>
&lt;p>&lt;strong>描述&lt;/strong>：有一個barber，一張BarberChair，n張waitingChair。並且有客人。&lt;/p>
&lt;p>客人的行為如下&lt;/p>
&lt;blockquote>
&lt;p>waiting chairs 坐滿(n個等待客人)：不入店&lt;/p>
&lt;p>waiting chairs 尚未坐滿：入店內，坐在waitingChair，通知(喚醒)barber&lt;/p>
&lt;p>客人睡覺(wait) if barber is busy now&amp;hellip; 直到Barber叫他起床剪髮，剪完髮Exit&lt;/p>
&lt;/blockquote>
&lt;p>理髮師的行為如下&lt;/p>
&lt;blockquote>
&lt;p>睡覺 if no 客人&lt;/p>
&lt;p>直到有客人喚醒(通知)他&lt;/p>
&lt;p>叫醒客人剪髮&lt;/p>
&lt;p>剪完髮後如果還有客人，則叫醒客人剪髮&lt;/p>
&lt;p>剪完髮後如果沒有客人，則繼續睡，繼續水時間&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>共享變數宣告：&lt;/strong> &lt;strong>==共享變數取存之前都需要經過互斥的處理==&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>Customer：semaphore=0 ：用來卡住理髮師 if no &lt;strong>客人&lt;/strong>&lt;/li>
&lt;li>Barber：semaphore=0：用來卡住客人的 if Barber is busy&lt;/li>
&lt;li>waiting：int=0 // 坐在等待椅上的客人數目。何時+1?何時-1?客人入店，坐上椅子。Barber叫客人起來剪髮，會有race condition的問題&lt;/li>
&lt;li>mutex：semaphore=1 //防止waiting值race condition&lt;/li>
&lt;/ol>
&lt;p>程式：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Barber&lt;/th>
&lt;th>Customer&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>repeat&lt;br />wait((Customer))&lt;br />wait(mutex)&lt;br />waiting = waiting -1;&lt;br />signal(Barber)&lt;br />signal(mutex)&lt;br />剪客人頭髮();&lt;br />until False&lt;/td>
&lt;td>wait(mutex);&lt;br />if(waitng&amp;lt;n){waiting=waiting+1;&lt;br />signal(Customer) //叫醒、通知barber&lt;br />signal(mutex);&lt;br />wait(barber);&lt;br />被理髮()&lt;br />}else{ signal(mutex)}&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>客人是沒有repear &amp;hellip; until false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="the-dining-philosophers-problems">The Dining-Philosophers Problems&lt;/h4>
&lt;p>描述&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/Qxdepnt.png"
loading="lazy"
alt="image-20230306233039022"
>&lt;/p>
&lt;p>&lt;code>注意：1. 吃中餐：奇數、偶數哲學家皆可&lt;/code>&lt;/p>
&lt;p>&lt;code>2. 吃西餐：偶數位才可以（刀叉一副&lt;/code>&lt;/p>
&lt;p>&lt;strong>共享變數之宣告&lt;/strong>&lt;/p>
&lt;p>chopstick：[0,1,2,3,4] of semaphore；初值皆為1，對5根筷子做互斥控制。&lt;/p>
&lt;p>&lt;strong>i號哲學家(i=0~4)哲學家Pi之狀況&lt;/strong>(這程式是有問題的)&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">repeat...
hugry now;
wait(chopstick[i]);
wait(chopstick[(i+1)%5])
eating now;
signal(chopstick[i]);
signal(chopstick[(i+1)%5]);
think now;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>此Solution有問題，可能會形成Deadlock!!&lt;/p>
&lt;p>若每位哲學家都拿起自己左邊的筷子，則每位哲學家都卡住，皆無法取得右筷，形成circular waiting&lt;/p>
&lt;p>&lt;strong>解法一&lt;/strong>&lt;/p>
&lt;p>一次最多讓4位哲學家上桌&lt;/p>
&lt;p>m=5根,Maxi=2&lt;/p>
&lt;ol>
&lt;li>
&lt;p>1≦Maxi≦m成立&lt;/p>
&lt;/li>
&lt;li>
&lt;p>$$
\sum_{i=1}^nMaxi &amp;lt; n+m,因此2n&amp;lt;n+5, n&amp;lt;5。最多4位
$$&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>保證DeadLock Free-&amp;gt; 可額外加入另一個號誌 No:semaphore=4，做入口控制&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">repeat...
wait(No);
hugry now;
wait(chopstick[i]);
wait(chopstick[(i+1)%5])
eating now;
signal(chopstick[i]);
signal(chopstick[(i+1)%5]);
think now;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>解法二&lt;/strong>&lt;/p>
&lt;p>除非&lt;strong>哲學家可同時取得左右兩邊筷子&lt;/strong>，才准許持有筷子，否則不得持有任何筷子。否則不得持有任何筷子&lt;/p>
&lt;p>破除Hold&amp;amp;wait 條件&lt;/p>
&lt;p>&lt;strong>解法三&lt;/strong>&lt;/p>
&lt;p>相鄰哲學家之取筷順序不同，創造&lt;strong>Asymmetric mode&lt;/strong>，例如：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>奇數號&lt;/th>
&lt;th>偶數號&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>先取左，再取右&lt;/td>
&lt;td>先取右，再取左&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>破除Circular waiting條件&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/M9uGAQg.png"
loading="lazy"
alt="image-20230307231842002"
>&lt;/p>
&lt;p>Note：等同於西餐，大家規定：先取刀再取叉&lt;/p>
&lt;h4 id="cigarette-smokers-problem">cigarette smokers problem&lt;/h4>
&lt;p>很少考，從50年前就沒考過了。Pass&lt;/p>
&lt;h3 id="semaphore之種類">Semaphore之種類&lt;/h3>
&lt;h4 id="分類一號誌值域做區分">分類一：號誌值域做區分&lt;/h4>
&lt;p>&lt;strong>Binary(二元) Semaphore Vs Counting(計數) semaphore&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>Binary Semaphore&lt;/li>
&lt;/ol>
&lt;p>定義：Semaphore之值&lt;strong>只有0,與1兩種&lt;/strong>(C.S Design正常使用下)不可為負值，無法統計有多少個Process卡在wait中&lt;/p>
&lt;p>S：Binary-Semaphore=1;&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="n">Wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">S&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">：&lt;/span>
&lt;span class="n">While&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">S&lt;/span>&lt;span class="err">≦&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>&lt;span class="k">do&lt;/span> &lt;span class="n">no&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">op&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="n">S&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">S&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">S&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">S&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">S&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>Counting Semaphore&lt;/li>
&lt;/ol>
&lt;p>定義：Semaphore值不限於0,1 可以為負值，且若值為-N，可知道(統計出)有N個processes卡在wait中&lt;/p>
&lt;p>範例1.&lt;/p>
&lt;p>請用Binary Semaphore定義出Counting Semaphore。&lt;/p>
&lt;p>共享變數宣告如下&lt;/p>
&lt;ol>
&lt;li>C：int //代表 Counting Semaphore號誌值&lt;/li>
&lt;li>S1：Binary-Semaphore=1 對C作互斥控制，防止C值race Condition&lt;/li>
&lt;li>S2：Binary-Semaphore=0 ，當C值&amp;lt;0，強迫Process暫停之用&lt;/li>
&lt;/ol>
&lt;p>程式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="n">wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">C&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">：&lt;/span>
&lt;span class="n">wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">S1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">C&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">C&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">then&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">S1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">S2&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//process自己卡住
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>&lt;span class="k">else&lt;/span>
&lt;span class="n">signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">S1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">C&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">：&lt;/span>
&lt;span class="n">wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">S1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">C&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">C&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="err">≦&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">then&lt;/span> &lt;span class="n">Singal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">S2&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//救process
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Demo如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="n">C&lt;/span>&lt;span class="err">：&lt;/span>&lt;span class="n">Counting&lt;/span> &lt;span class="n">semaphore&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="n">wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">C&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">C&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">S&lt;/span> &lt;span class="c1">// 臨界區間
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Singal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">C&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">R&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">S&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="分類二是否採用busy-waitingspinlock技巧來定義semaphore">分類二：是否採用Busy-waiting(Spinlock)技巧來定義Semaphore&lt;/h4>
&lt;p>&lt;strong>Spinlock Vs Non-Busy-waiting Semaphore&lt;/strong>&lt;/p>
&lt;p>&lt;strong>Spinlock&lt;/strong>&lt;/p>
&lt;p>定義：令Ｓ為Semaphore變數，而&lt;/p>
&lt;ul>
&lt;li>
&lt;p>wait(S)：&lt;/p>
&lt;p>定義：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">S&lt;/span>&lt;span class="err">≦&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>&lt;span class="k">do&lt;/span> &lt;span class="n">no&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">op&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="c1">//採用Busy-waiting Skill
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">S&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">S&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>Signal(S)：&lt;/p>
&lt;p>定義：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="err">Ｓ&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">S&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>優缺點：參閱前述Busy-waiting內容&lt;/p>
&lt;p>Non-Busy waiting semaphore&lt;/p>
&lt;p>定義：Semaphore type定義如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="n">Struct&lt;/span> &lt;span class="n">semaphore&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//號誌值
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Queue&lt;/span> &lt;span class="n">Q&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="c1">// FIFO Queue
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>令S為Semaphore變數，則&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="n">Wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">S&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">：&lt;/span>
&lt;span class="n">S&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">S&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">S&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="n">then&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="n">add&lt;/span> &lt;span class="n">process&lt;/span> &lt;span class="n">P&lt;/span> &lt;span class="n">into&lt;/span> &lt;span class="n">S&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Q&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">Block&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">P&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// P之狀態改為block state
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">S&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">：&lt;/span>
&lt;span class="n">S&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">S&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">S&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="err">≦０&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">then&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="n">remove&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="n">process&lt;/span> &lt;span class="n">form&lt;/span> &lt;span class="n">S&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Q&lt;/span>
&lt;span class="n">wakeup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">P&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">//將P改為ready state
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Note：此號誌也是一個Counting Semaphore&lt;/p>
&lt;h3 id="製作semaphore">製作Semaphore&lt;/h3>
&lt;p>using&lt;/p>
&lt;ol>
&lt;li>Disable interrupt&lt;/li>
&lt;li>Software solution or Hardware instructions support&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>何謂製作Semaphore?&lt;/strong>&lt;/p>
&lt;p>即是如何保證Semaphore值不會Race Condition(or 如何確保wait與singal是&lt;strong>Atomic operation?&lt;/strong>)&lt;/p>
&lt;p>&lt;strong>製作Semaphore的目的就是為了確保 ，號誌的值不會Race Condition&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>製作方式|號誌定義&lt;/th>
&lt;th>Non-Busy waiting Semaphore&lt;/th>
&lt;th>Spinlock Semaphore&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Disable Interrupt&lt;/td>
&lt;td>[Algo1]&lt;/td>
&lt;td>[Algo3]&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>C.S Design(基礎)&lt;br />software Solution&lt;br />硬體指令&lt;/td>
&lt;td>[Algo2]&lt;/td>
&lt;td>[Algo4]&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="algo1-2">Algo1&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="n">wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">：&lt;/span>
&lt;span class="n">Disable&lt;/span> &lt;span class="n">interrupt&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">S&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">S&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">S&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">then&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="n">Enable&lt;/span> &lt;span class="nf">Interrupt&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">//在這邊打開中斷，而不是在if之外，避免Block(p)之後，因為Disable Interrupt而無法釋放CPU
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">add&lt;/span> &lt;span class="n">process&lt;/span> &lt;span class="n">P&lt;/span> &lt;span class="n">into&lt;/span> &lt;span class="n">S&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Q&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">block&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="algo2-2">Algo2&lt;/h4>
&lt;p>將[Algo1]中的Disable Interrupt 換成 Enter Section，Enable Interrupt改成Exit Section。&lt;/p>
&lt;p>Enter Section與Exit Section之控制碼找個地方寫出來。取決於題目教你用Software Solution(Bakery&amp;rsquo;Algo) or Hardware Instrution(Test-and-set or Swap的Algo[2]或Algo[1]&lt;code>時間不夠就寫這個，但這好像不符合什麼Bound wait還是什麼鬼的&lt;/code>)&lt;/p>
&lt;h4 id="algo3-1">Algo3&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="n">wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">：&lt;/span>&lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">S&lt;/span>&lt;span class="err">≦&lt;/span>&lt;span class="mi">０&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">Enable&lt;/span> &lt;span class="n">Interrupt&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">no&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">op&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">Disble&lt;/span> &lt;span class="n">Interrupt&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">S&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">S&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="n">Signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">S&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">：&lt;/span>&lt;span class="n">S&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">S&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="algo4">Algo4&lt;/h4>
&lt;p>將[Algo3]中的Disable Interrupt 換成 Enter Section，Enable Interrupt改成Exit Section。&lt;/p>
&lt;p>Enter Section與Exit Section之控制碼找個地方寫出來。取決於題目教你用Software Solution(Bakery&amp;rsquo;Algo) or Hardware Instrution(Test-and-set or Swap的Algo[2]或Algo[1]&lt;code>時間不夠就寫這個，但這好像不符合什麼Bound wait還是什麼鬼的&lt;/code>)&lt;/p>
&lt;h3 id="busy-waiting是否可以完全避免之avoid-altogether">Busy-waiting是否可以完全避免之(avoid altogether)&lt;/h3>
&lt;p>Ans. No, 無法完全避免，以Semaphore為例&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/pvJx1sC.png"
loading="lazy"
>&lt;/p>
&lt;h2 id="monitor">Monitor&lt;/h2>
&lt;blockquote>
&lt;p>定義、組成&lt;/p>
&lt;p>特性(優點)&lt;/p>
&lt;p>Condition 變數使用&lt;/p>
&lt;p>解同步問題&lt;/p>
&lt;p>Conditional Monitor&lt;/p>
&lt;p>種類(3種)&lt;/p>
&lt;p>用semaphore Monitor&lt;/p>
&lt;/blockquote>
&lt;p>定義：Ｍonitor是一個用來解決同步問題的高階結構&lt;code>class&lt;/code>，是一種&lt;strong>ADT(abstract data type&lt;/strong>)，Monitor之定義，主要有3個&lt;/p>
&lt;p>組成：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>共享變數宣告區&lt;/strong>&lt;/li>
&lt;li>&lt;strong>一組local function(or procedures)&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Initialization area(初始區)&lt;/strong>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="n">Class&lt;/span> &lt;span class="n">MonitorName&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="c1">//共享變數宣告
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="n">procedure&lt;/span> &lt;span class="n">entry&lt;/span> &lt;span class="nf">function1&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">參數&lt;/span>&lt;span class="o">){&lt;/span>
&lt;span class="n">begin&lt;/span>
&lt;span class="n">Body&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">end&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">procedure&lt;/span> &lt;span class="n">entry&lt;/span> &lt;span class="nf">functionX&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">參數&lt;/span>&lt;span class="o">){&lt;/span>
&lt;span class="n">begin&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">Body&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">end&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">begin&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">初始區&lt;/span>
&lt;span class="n">end&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>特性(優點)：&lt;/p>
&lt;p>&lt;strong>Monitor本身已保證互斥(Mutual excluesive)即任何時間點最多只允許，1個Process在Monitor內活動(Active)&lt;/strong>，也就是說：在任何時間點，最多只允許一個1個Process呼叫(calling)monitor的某個function(或procedure)執行中，不可以有多個processes同時呼叫monitor的functions&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/oaFm55Q.png"
loading="lazy"
alt="image-20230313232606063"
>&lt;/p>
&lt;blockquote>
&lt;p>此一互斥性質帶來何種好處？&lt;/p>
&lt;/blockquote>
&lt;p>因為共享變數區之共享變數只能被monitor的local function直接存取，外界不能直接存取，外界(process)只能透過呼叫Monitor的Local Function來存取共享變數，而&lt;strong>Monitor保障互斥&lt;/strong>，因此保障了共享變數不會發生Race Condition，&lt;strong>所以Programmer毋須煩惱Race Condition problem (不用撰寫額外的Code，或是使用Mutex semaphore)&lt;/strong>，只需專心處理同步問題即可。&lt;strong>此點優於Semaphore&lt;/strong>&lt;/p>
&lt;p>Question：Semaphore 比 Monitor容易使用 when solving synchronization problem&lt;/p>
&lt;p>Ans：False，參照如上。並且semaphore一多，容易產生Deadloc&lt;/p>
&lt;h2 id="condition-type">Condition Type&lt;/h2>
&lt;p>定義：Condition 型別是用Monitor中，提供給Programmer&lt;strong>解決同步問題&lt;/strong>之用，令x是Condition Type變數，&lt;strong>在X上提供兩個operations：&lt;/strong>&lt;/p>
&lt;p>&lt;strong>x.wait 及 x.signal&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>x.wait：執行此運作的process會被Blocked且置入Monitor內x所屬的&lt;strong>waiting queue中(預設是FIFO)&lt;/strong>&lt;/li>
&lt;li>x.signal：如果先前有Processes卡在x的waiting queue中，則此運作會自此waiting queue中移走一個process且恢復(resume)其執行，&lt;strong>否則無任何作用&lt;/strong>&lt;/li>
&lt;/ol>
&lt;h2 id="使用monitor解決-the-dining-philosophers-problem">使用Monitor解決 The dining-philosophers Problem&lt;/h2>
&lt;p>先定義所需的Monitor ADT Type&lt;/p>
&lt;p>Dining-philosophers = Monitor&lt;/p>
&lt;p>Var&lt;/p>
&lt;ol>
&lt;li>State[0..4] of {thinking, hungry, eating}&lt;/li>
&lt;li>self[0..4] of condition;&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="n">procedure&lt;/span> &lt;span class="n">entry&lt;/span> &lt;span class="nf">pickup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nl">i&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="mf">0.&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mf">.4&lt;/span>&lt;span class="p">){&lt;/span> &lt;span class="c1">//拿起筷子
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nl">begin&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">state&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">hungry&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">state&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">≠&lt;/span>&lt;span class="n">eating&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">then&lt;/span> &lt;span class="n">self&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">wait&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// Pi自己卡住
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="n">procedure&lt;/span> &lt;span class="nf">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nl">k&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">0.&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mf">.4&lt;/span>&lt;span class="p">){&lt;/span> &lt;span class="c1">//測試
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nl">begin&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">state&lt;/span>&lt;span class="p">[(&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">≠&lt;/span>&lt;span class="n">eating&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="n">hungry&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">[(&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">≠&lt;/span>&lt;span class="n">eating&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">then&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="n">state&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">eating&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">self&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">signal&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">procedure&lt;/span> &lt;span class="n">entry&lt;/span> &lt;span class="nf">putdown&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nl">i&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">0..4&lt;/span>&lt;span class="p">){&lt;/span> &lt;span class="c1">// 吃飽了放下筷子
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">begin&lt;/span>
&lt;span class="n">state&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">thinking&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">test&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">test&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">end&lt;/span>
&lt;span class="n">begin&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="err">≦&lt;/span>&lt;span class="mi">4&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">state&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">thinking&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">end&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>使用方式&lt;/li>
&lt;/ul>
&lt;p>共享變數宣告：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="n">dp&lt;/span>&lt;span class="err">`變數名稱`：&lt;/span>&lt;span class="n">Dining&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">ph&lt;/span>&lt;span class="err">`&lt;/span>&lt;span class="n">Monitor&lt;/span> &lt;span class="n">type&lt;/span>&lt;span class="err">`&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Pi (i號哲學家)&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="n">repeat&lt;/span>
&lt;span class="n">hungry&lt;/span> &lt;span class="n">now&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">dp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pickup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//在Monitor中
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">eating&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//不在Mnitor中
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">dp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">putdown&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//在Monitor中
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">thinking&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">untill&lt;/span> &lt;span class="n">False&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="conditional-monitor">Conditional Monitor&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>緣由：condition變數，eg. X所附屬的waiting Queue, 一般皆是FIFO Queue (甚至Monitor的Entry Quene 也是FIFO,In general)，&lt;strong>可是我們有時需要Priority Queue，優先移除高優先權的Process，恢復執行或讓已進入Monitor內active&lt;/strong>，此種monitor稱之&lt;/p>
&lt;/li>
&lt;li>
&lt;p>語法改變：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="n">x&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// c代表此process的priority info
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="使用conditional-monitor解決問題">使用Conditional Monitor解決問題&lt;/h2>
&lt;ul>
&lt;li>範例一&lt;/li>
&lt;/ul>
&lt;p>使用Monitor解決&lt;strong>互斥資源的配置問題&lt;/strong>&lt;/p>
&lt;p>&lt;strong>規定：process最小者，優先權高，優先取得資源&lt;/strong>&lt;/p>
&lt;p>解決問題之哲學&lt;/p>
&lt;blockquote>
&lt;p>「非」優先權之需求-&amp;gt;寫入Monitor之定義&lt;/p>
&lt;p>優先權之需求-&amp;gt;只要告知老師說你用的是Priority Queue的Monitor即可&lt;/p>
&lt;/blockquote>
&lt;p>Ans.&lt;/p>
&lt;ol>
&lt;li>先定義Monitor&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="n">type&lt;/span> &lt;span class="n">ResourceAllocator&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Monitor&lt;/span>
&lt;span class="n">var&lt;/span> &lt;span class="nl">Busy&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Boolean&lt;/span> &lt;span class="c1">//代表資源配置出去與否
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="n">var&lt;/span> &lt;span class="n">X&lt;/span>&lt;span class="err">：&lt;/span>&lt;span class="n">Condition&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//代表資源到底可用不可用
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="n">procdure&lt;/span> &lt;span class="n">entry&lt;/span> &lt;span class="nf">Apply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nl">processId&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">begin&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Busy&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">then&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">Busy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">True&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">procedure&lt;/span> &lt;span class="n">entry&lt;/span> &lt;span class="nf">Release&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">begin&lt;/span>
&lt;span class="n">Busy&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">False&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">X&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">signal&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">end&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">Begin&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">Busy&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">False&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">end&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用方式：&lt;/p>
&lt;p>共享變數宣告如下：&lt;/p>
&lt;p>​ RA：Resource Allocator;&lt;/p>
&lt;p>​ Pi(i代表processId)：&lt;/p>
&lt;p>程式如下：&lt;/p>
&lt;p>RA.Apply(i);&lt;/p>
&lt;p>使用資源;&lt;/p>
&lt;p>RA.Release();&lt;/p>
&lt;p>此Monitor的X Condition變數之waiting Queue及Monior的entry Queue是Priority Queue且processId小者，優先權高，優先移出&lt;/p>
&lt;ul>
&lt;li>範例二 ==(最常考)==&lt;/li>
&lt;/ul>
&lt;p>有一個File可被多個Processes使用，每一個Process有Unique priority No，並且存取File須滿足以下限制&lt;/p>
&lt;ol>
&lt;li>&lt;strong>所有正在存取file的process之priority No之加總須&amp;lt;n，超過就無法存取&lt;/strong>&lt;/li>
&lt;li>process priority No小的，優先度高&lt;/li>
&lt;/ol>
&lt;p>試設計Monitor&lt;/p>
&lt;p>Ans.&lt;/p>
&lt;p>eg n =10&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/ouDhBzn.png"
loading="lazy"
alt="image-20230317013644199"
>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>先定義Monitor&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="n">type&lt;/span> &lt;span class="n">FileAccess&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Monitor&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">var&lt;/span> &lt;span class="nl">sum&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">var&lt;/span> &lt;span class="nl">x&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">condition&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">procedure&lt;/span> &lt;span class="n">entry&lt;/span> &lt;span class="nf">Access&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nl">i&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">priority&lt;/span> &lt;span class="n">No&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">begin&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">while&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">sum&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">≧&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="k">do&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sum&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="n">end&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">procedure&lt;/span> &lt;span class="n">entry&lt;/span> &lt;span class="nf">Leave&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nl">i&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">priorityNo&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">begin&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sum&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">x&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">signal&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">end&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">begin&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">sum&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">end&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>使用方式：&lt;/p>
&lt;p>共享變數宣告：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>FA：FileAccess;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Pi(i：process Priority No)程式：&lt;/p>
&lt;p>​ &lt;strong>FA.Access(i);&lt;/strong>&lt;/p>
&lt;p>​ 使用File;&lt;/p>
&lt;p>​ &lt;strong>FA.Leave(i);&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>範例三&lt;/li>
&lt;/ul>
&lt;p>有3部printer 被processes使用&lt;sub>(三個互斥資源)&lt;/sub>，且規定Process Id 小，優先權高。&lt;/p>
&lt;p>Ans.&lt;/p>
&lt;p>先定義Monitor&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="n">var&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mf">0..2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">of&lt;/span> &lt;span class="n">Boolean&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nl">x&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">condition&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">Acquire&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nl">i&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">processId&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]){&lt;/span>
&lt;span class="n">x&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">not&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]){&lt;/span>
&lt;span class="n">y&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">not&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]){&lt;/span>
&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="n">y&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">p&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">Release&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nl">y&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">printerNo&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">p&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">False&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">x&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">signal&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用方式：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>共享變數宣告：&lt;/p>
&lt;p>PA: Allocator&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Pi(i=processId)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>程式如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="nl">pNo&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">printerNo&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">pNo&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">PA&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Acquire&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">//使用pno號之列表機
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="n">PA&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Realse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pno&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>範例四 &lt;strong>使用Monitor定義Semaphore&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">type semaphore = Monitor;
var value : int; //號誌值
var x : condition;
procedure entry wait(){
begin
value = value -1;
if (value &amp;lt;0) then x.wait;
end
}
procedure entry Signal(){
begin
value = value+1;
x.signal;
end
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="monitor的種類3種">Monitor的種類(3種)&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>區分角度(緣由)&lt;/p>
&lt;p>假設Process A目前卡在 x condition 變數之 waiting Queue(因為 Q 先前執行了 X.wait目前，**Process P is active in the **)&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="幹他媽的這邊也拖太久了我受不了我想先去看記憶體管理-2023323">幹他媽的，這邊也拖太久了，我受不了，我想先去看記憶體管理 2023/3/23&lt;/h2>
&lt;h1 id="chapter-7-memory-management">Chapter 7 Memory Management&lt;/h1>
&lt;p>&lt;strong>本章的考試重點是圖，有圖的都很重要&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>Binding 及其時機點&lt;/p>
&lt;p>Dynamic Binding&lt;/p>
&lt;p>Dynamic Loading, Dynamic Linking&lt;/p>
&lt;p>&lt;strong>Contiguous Memory Allocation(Firstt/Best/Worst Fit)☆☆&lt;/strong>&lt;/p>
&lt;p>External Fragmentation, Internal Fragmentation☆☆☆☆☆&lt;/p>
&lt;p>解決外部碎裂方法&lt;/p>
&lt;blockquote>
&lt;p>Compaction☆☆&lt;/p>
&lt;p>Page&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>Page Memory Management☆☆☆☆☆&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>Schema&lt;/p>
&lt;p>Page Table 製作(3個)&lt;/p>
&lt;p>相關計算&lt;/p>
&lt;p>Page Table Size 太大之解決(3個)&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>Segment Memory Management☆☆&lt;/strong>&lt;/p>
&lt;p>&lt;strong>Paged Segment Memory Management&lt;/strong> [恐龍本已移除]&lt;/p>
&lt;/blockquote>
&lt;h2 id="binding">Binding&lt;/h2>
&lt;p>定義：&lt;strong>決定程式/process執行的起始位址&lt;/strong>，此一動作稱之為Binding&lt;/p>
&lt;p>時機點：&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Compiling Time&lt;/strong>：由Compiler作Binding&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Loading Time 或 Linking Loading Time&lt;/strong>：由Linking Loader 或 Linkage Editor作&lt;/p>
&lt;p>&amp;laquo;以上兩者都叫Static Binding&amp;raquo;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Execution Time&lt;/strong>：由OS動態決定，也叫&lt;strong>Dynamic Binding&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>&lt;img src="https://i.imgur.com/kIEguNv.png"
loading="lazy"
alt="image-20230322223226871"
>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Compiler作Binding&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>產生之Object Code叫做&lt;strong>Absolute object code(絕對式目的碼)&lt;/strong>&lt;/p>
&lt;p>eg:&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/39GeUzp.png"
loading="lazy"
alt="image-20230322224154158"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>後面的Loader叫作&lt;strong>Absolute Loader&lt;/strong>主要是作Allocation與Loading only&lt;/p>
&lt;/li>
&lt;li>
&lt;p>缺點：&lt;strong>Process若要改變起始位址，則必須re-compiling非常不便&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Note：通常用於.COM(命令檔)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Loading Time由 Linking Loader 作Binding&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Compiler所產生出的Object Code叫作&lt;strong>Relocatable Object Code(可重定位之目的碼)&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://i.imgur.com/07A826q.png"
loading="lazy"
alt="image-20230323000356425"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>何謂Relocation修正？&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>當成是執行起始位址改變，某些Object code內容必須隨之修正&lt;/strong>，將來才能正確執行。&lt;/p>
&lt;p>例：採用&lt;strong>直接定址&lt;/strong>(Direct Addressing Mode)指令，假設今天起始位址為0000，變數儲存於2000的位址。今起始位址改為1000後，變數儲存的位址需要有相應的改動，這個改動值就是寫在Relocation修正資訊&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://i.imgur.com/I986VNO.png"
loading="lazy"
alt="image-20230323015129289"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>何謂Linking修正？&lt;/p>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>解決External Symbol reference(外部符號參考)之修正&lt;/p>
&lt;p>例：外部符號：副程式名稱&lt;/p>
&lt;p>外部變數(extern)、Library, etc&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://i.imgur.com/PHXZ2lg.png"
loading="lazy"
alt="image-20230323020626593"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/g4VuPXo.png"
loading="lazy"
alt="image-20230324002149684"
>&lt;/p>
&lt;p>Linking Loader主要4個工作&lt;/p>
&lt;ol>
&lt;li>Allocation：依照目的碼之大小，向OS要求分配起始位址&lt;/li>
&lt;li>Loading：obj code 載入到Memory&lt;/li>
&lt;li>&lt;strong>Linking：依Compiler所交辦之Linking修正資訊，執行Linking修正&lt;/strong>，將Jump ????改為 Jump 8000&lt;/li>
&lt;li>&lt;strong>Relocation：作重定位修正&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>優點：&lt;strong>程式起始位址若要改變，則只需重新Relocation, Linking即可，無須re-compiling&lt;/strong>&lt;/p>
&lt;p>缺點：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>程式重新執行，若Modules數多，則re-linking(外部符號參考修正)很花時間。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Process執行期間，不可更改起始位址&lt;/strong>&lt;/p>
&lt;p>&lt;code>Note：凡是Static Binding皆無法更改&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Linkage Editor的主要工作&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/8StIweF.png"
loading="lazy"
alt="image-20230324004823565"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="dynamic-binding">Dynamic Binding&lt;/h2>
&lt;p>定義：決定Process起始位址之工作，推遲至&lt;strong>執行時期(Execution Time)才動態執行&lt;/strong>，即Process在執行期間，可任意變更起始位址，且Process仍能正確執行。&lt;/p>
&lt;p>需要Hardware額外支持&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/mLdkOxL.png"
loading="lazy"
alt="image-20230326195032169"
>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Logical Address：generated by CPU &lt;code>logical代表以使用者觀點來看&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Physical Address：實際去physical memory(ie. RAM存取之位址)&lt;code>physical代表以硬體觀點來看 &lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;blockquote>
&lt;p>logical address = physical address = &amp;gt; &lt;strong>static binding&lt;/strong>&lt;/p>
&lt;p>logical address ≠ Physical address = &amp;gt; Dynamic binding, Page, segment, Paged segment。會有「logical address轉成physical address之運作」，&lt;strong>且此運作交由Hardware負責&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ol>
&lt;p>優點：&lt;/p>
&lt;ol>
&lt;li>Process之起始位址可於execution time 任意更動且能正確執行，有助於OS Memory Management之彈性度。eg. Compaction實施、process swapout後再swap in，不一定要相同起始位址\&lt;/li>
&lt;/ol>
&lt;p>缺點：&lt;/p>
&lt;ol>
&lt;li>需要Hardware額外支持&lt;/li>
&lt;li>Process執行時間較久、效益較差&lt;/li>
&lt;/ol>
&lt;h2 id="dynamic-loading">Dynamic Loading&lt;/h2>
&lt;p>定義：也叫&lt;strong>Load-on-Call&lt;/strong>，在execution time，若module真正被呼叫到且不在memory中，此時loader才將它載入到memory中。當一個程序只有當它真正被呼叫時才載入到記憶體之中。&lt;/p>
&lt;p>&lt;strong>目的：節省Memory space&lt;/strong>&lt;/p>
&lt;p>優點：不須要OS之額外支持&lt;/p>
&lt;p>&lt;strong>缺點：Process執行時間較久&lt;/strong>&lt;/p>
&lt;p>Note：&lt;strong>早期使用overlay的技巧，是programmer的責任，OS沒啥責任。近代則是OS提供Virtual Memory來處理&lt;/strong>&lt;/p>
&lt;h2 id="dynamic-linking">Dynamic Linking&lt;/h2>
&lt;p>定義：在Execution Time，若Module被呼叫到，才將之載入，並且與&lt;strong>其他Modules進行Linking修正(外部符號參考之解決)，適用在Library Linking eg Dynamic Linking Library(DLL)&lt;/strong>&lt;/p>
&lt;p>&lt;strong>目的：節省不必要之Linking Time，需要OS額外支持&lt;/strong>&lt;/p>
&lt;h2 id="contiguous-連續性-memory-allocation">Contiguous (連續性) Memory Allocation&lt;/h2>
&lt;p>也叫Dynamic Variable Partitions Memoy Management 動態變動分區記憶體管理。&lt;/p>
&lt;p>OS必須配置Process一個&lt;strong>連續的Free Memory Space&lt;/strong>&lt;/p>
&lt;p>&lt;strong>Partition：Process所占用的Memory Space&lt;/strong>&lt;/p>
&lt;p>&lt;strong>Partition數目＝Process數目＝Multiprogramming Degree&lt;/strong>，由於不同時期，系統內Process數目不固定&lt;/p>
&lt;p>因此&lt;strong>Parition數目不固定(Dynamic)&lt;/strong>&lt;/p>
&lt;p>&lt;strong>由於各Process Size不盡相同，因此各Partition大小也就不一定相同(Variable)&lt;/strong>&lt;/p>
&lt;p>Memory中會有一些&lt;strong>Free Memory Space(or Block)&lt;/strong>，叫做Hole，通常OS會用LinkedList的概念，來管理這些Holes，叫做AV-List(Available List 可用空間串列)&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/k9sGUnf.png"
loading="lazy"
alt="image-20230326222005833"
>&lt;/p>
&lt;p>配置方法&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>First-Fit&lt;/li>
&lt;li>Best-Fit&lt;/li>
&lt;li>Worst-Fit&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;ol>
&lt;li>First-Fit&lt;/li>
&lt;/ol>
&lt;p>定義：從AV-List頭開始找起，直到找到第一個Hole，其hole size ≧　process size為止，即可配置或找完整條串列，或找完整條串列，無依夠大符合為止&lt;/p>
&lt;ol start="2">
&lt;li>Best-Fit&lt;/li>
&lt;/ol>
&lt;p>定義：必須&lt;strong>檢查AV-List中所有Holes&lt;/strong>找出一個hole，其hole size≧process size，且hole size減去process size後差值最&lt;strong>小&lt;/strong>的hole，予以配置&lt;/p>
&lt;ol start="3">
&lt;li>Best-Fit&lt;/li>
&lt;/ol>
&lt;p>定義：必須&lt;strong>檢查AV-List中所有Holes&lt;/strong>找出一個hole，其hole size≧process size，且hole size減去process size後差值最&lt;strong>大&lt;/strong>的hole，予以配置&lt;/p>
&lt;p>例題一&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/yHsmFuH.png"
loading="lazy"
alt="image-20230326223538608"
>&lt;/p>
&lt;p>若Process大小=90K&lt;/p>
&lt;p>則&lt;/p>
&lt;ol>
&lt;li>First-Fit會配置&amp;quot;A&amp;quot;Block之90K給Process，剩下&amp;quot;210&amp;quot;K之Hole&lt;/li>
&lt;li>Best-Fit會配置&amp;quot;B&amp;quot;Block之90K給Process，剩下&amp;quot;10&amp;quot;K之Hole&lt;/li>
&lt;li>Worst-Fit會配置&amp;quot;C&amp;quot;Block之90K給Process，剩下410K之Hole&lt;/li>
&lt;/ol>
&lt;p>例題二&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/wkKh2QS.png"
loading="lazy"
alt="image-20230327002539199"
>&lt;/p>
&lt;p>First, Best,Worst Fit，哪個最好 in memory Utilization?&lt;/p>
&lt;p>First-Fit&lt;/p>
&lt;p>最後會剩420K的無法配置&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/DS8KcMB.png"
loading="lazy"
alt="image-20230326225935843"
>&lt;/p>
&lt;p>Best-Fit&lt;/p>
&lt;p>皆可配置&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/xMES8xF.png"
loading="lazy"
alt="image-20230326230449292"
>&lt;/p>
&lt;h3 id="比較表">比較表&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>時間效率&lt;/th>
&lt;th>空間利用度&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>First-Fit(勝)&lt;/td>
&lt;td>最佳&lt;/td>
&lt;td>佳&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Best-Fit&lt;/td>
&lt;td>差&lt;/td>
&lt;td>最佳&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Worst-Fit&lt;/td>
&lt;td>差&lt;/td>
&lt;td>差&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="上述contiguous-memory-allocation方法均遭遇一個共通問題external-fragmentation">上述Contiguous Memory Allocation方法均遭遇一個共通問題&amp;quot;External Fragmentation&amp;quot;&lt;/h2>
&lt;p>External Fragmentation&lt;/p>
&lt;p>定義：在Contiguous Allocation要求，目前AV-List中任何一個hole Size均小於process size，但這些holes size 加總卻≧process size，然而，因為這些holes 並不連續，因此仍無法配置給此process，造成空間閒置不用，memory utilization低之問題&lt;/p>
&lt;p>範例：&lt;/p>
&lt;p>若Process大小為220K，而這些hole size加總=250K&amp;gt;220K，但這些hole不連續，仍無法配置，[恐]一般而言，每配置N大小，平均會有0.5N的外碎，所以外碎的比例為=1/3，是個嚴重的問題&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/aQAS2P1.png"
loading="lazy"
alt="image-20230327002915437"
>&lt;/p>
&lt;h2 id="另一個名詞internal-fragmentation內部碎裂">另一個名詞Internal Fragmentation(內部碎裂)&lt;/h2>
&lt;p>定義：配置給Process之space超過process size，兩者之差值空間，此process使用不到且其他processes亦無法使用，此一浪費空間，稱之為內部碎裂&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/QtWQBwv.png"
loading="lazy"
alt="image-20230327004138907"
>&lt;/p>
&lt;h2 id="解決external-fragmentation">解決External Fragmentation&lt;/h2>
&lt;p>方法一：使用**Compaction(聚集)**技術&lt;/p>
&lt;p>作法：移動執行中的process，使得原本非連續的holes，得以聚集形成一個夠大的連續的Free Memory Space&lt;/p>
&lt;p>例子：　&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/MBzMYFZ.png"
loading="lazy"
alt="image-20230327232414541"
>&lt;/p>
&lt;p>困難處：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>不易制定最佳的Compaction策略&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Processes&lt;strong>必須是Dynamic Binding&lt;/strong>才可於execution time移動&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>方法二：&lt;strong>使用Page Memory Management&lt;/strong>&lt;/p>
&lt;p>方法三：&lt;strong>Multiple Base/Limit Register方法&lt;/strong>&lt;/p>
&lt;p>這個方法其實不行解決，只能降低。將Process拆成Code Section與Data Section兩部分，分開配置連續的hole，&lt;strong>以降低外部碎裂發生的機率&lt;/strong>。因此，每個Process需要2套 Base/Limit Registers，分別記Code Sec及Data Sec 的起始位址及大小&lt;/p>
&lt;h2 id="page分頁-memory-management">Page(分頁) memory Management&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Physical Memory&lt;/strong> (i,e RAM)視為一組&lt;strong>Frame(頁框)&lt;strong>之集合，且&lt;/strong>各Frame Size相同&lt;/strong>，Note：Frame Size是HW決定，OS只是配合，Paging是採Physical ViewPoint。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Logical Memory&lt;/strong> (即User Process大小)視為一組&lt;strong>Page(頁面)&lt;strong>之集合，且&lt;/strong>Page Size=Frame Size&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>RAM=400KB=40個Frames&lt;/p>
&lt;p>Frames=10KB&lt;/p>
&lt;p>配置方式：&lt;strong>OS採非連續性配置原則&lt;/strong>，即若Process大小=n個Pages，則OS只需在Physical memory 找出&lt;strong>n個Free Frames(不一定要連續)，即可配給此process&lt;/strong>&lt;/p>
&lt;p>OS會替每個Process建立一個&lt;strong>Page Table(分頁表)，紀錄各個Page置於哪個Frame 之Frame No&lt;/strong>&lt;/p>
&lt;p>Note：Page Table is stoted in PCB&lt;/p>
&lt;p>若Process大小=n個Pages，則它的Page Table就有n個entry(格子)&lt;/p>
&lt;p>圖示：&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/uhe1dwc.png"
loading="lazy"
alt="image-20230328205131031"
>&lt;/p>
&lt;h3 id="logical-address-轉-physical-address-過程by-mmuhardware">Logical Address 轉 Physical Address 過程By MMU(Hardware)&lt;/h3>
&lt;p>Steps [例：假設Page size=10]&lt;/p>
&lt;ol>
&lt;li>LogicalAddress初始是&lt;strong>單一量&lt;/strong>，自動拆解成：&lt;img src="https://i.imgur.com/7sQbMJQ.png"
loading="lazy"
alt="image-20230328210819830"
>&lt;/li>
&lt;/ol>
&lt;p>​ 其中p代表PageNo，d代表Page offset(偏移量)&lt;/p>
&lt;p>$$
單一量位址 \div PageSize = 商數(p)&amp;hellip;餘數(d)
$$&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/U3e2Le5.png"
loading="lazy"
alt="image-20230328213544244"
>&lt;/p>
&lt;ol start="2">
&lt;li>
&lt;p>依P查詢Page Table, 取得該Page的FrameNo(頁框號碼)，令為f&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>f與d合成&lt;img src="https://i.imgur.com/sLrGWip.png"
loading="lazy"
alt="image-20230328213723596"
>即為Physical Address&lt;/strong>&lt;/p>
&lt;p>或 f * PageSize + d = Physical Address&lt;/p>
&lt;p>eg.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>p&lt;/th>
&lt;th>d&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>依P=3查表，它的Frame No= F7, 因此&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>f&lt;/th>
&lt;th>d&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>7&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>=Physical Address&lt;/p>
&lt;p>=7*10+2=72&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/6hez29T.png"
loading="lazy"
alt="image-20230328215606192"
>&lt;/p>
&lt;h3 id="優缺點比較">優缺點比較&lt;/h3>
&lt;h4 id="優點">優點：&lt;/h4>
&lt;ol>
&lt;li>&lt;strong>沒有外部碎裂&lt;/strong>&lt;/li>
&lt;li>&lt;strong>可支援Memory Sharing及Memory Protection之實施&lt;/strong>&lt;/li>
&lt;li>&lt;strong>可支持Dynamic Loading, Dynamic Linking及Virtual Memory之實現&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>Memory Sharing(共享)&lt;/p>
&lt;p>若多個Processes彼此具有共通的&lt;strong>Read-only Code/Data&lt;/strong> Pages，則我們可以藉由process各自的Page Table，將共通Pages映射到同一個頁框，如此可以節省memory space&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/j6gQWCf.png"
loading="lazy"
alt="image-20230328230158676"
>&lt;/p>
&lt;p>Memory Protection(保護)&lt;/p>
&lt;p>在Page Table中多加一個欄位：&lt;/p>
&lt;p>&lt;strong>Protection Bit 值為&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>R：表此Page只能Read-Only&lt;/p>
&lt;p>W：表此Page Read/write都可以&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://i.imgur.com/p0B6b2l.png"
loading="lazy"
alt="image-20230328231459427"
>&lt;/p>
&lt;h4 id="缺點">缺點：&lt;/h4>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>有Internal Fragmentation&lt;/strong>，因為Process大小不見得是PageSize之整數倍數。eg. PageSize=10KB，Process大小=32KB，因此需配置4個Frames，因此內碎=4*10-32=8KB&lt;/p>
&lt;p>&lt;code>Note：若PageSize愈大，則內碎越嚴重&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>需要額外Hardware支援&lt;/strong>，例：Page Table之製作、Logical Address轉physical address By &lt;strong>MMU&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>effective memory access time 較長&lt;code>因為有Logical Address轉physical address 的時間&lt;/code>，這邊的較長是相對於Contiguous來看&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="page-table之製作保存">Page Table之製作(保存)&lt;/h2>
&lt;p>[方法一] 使用Register保存，Page Table中每個Entry內容(frame No)&lt;/p>
&lt;p>優點：存取page table 時，無須memory access，因為速度最快&lt;/p>
&lt;p>缺點：&lt;strong>Register數量有限，不適用大型的Page Table(或大型Process)&lt;/strong>&lt;/p>
&lt;p>[方法二] 使用&lt;strong>Memory&lt;/strong>保存分頁表，且用一個Register:PTBR(Page Table Base Register)紀錄它在memory中之位址，及PTLR(Page Table Length Register)紀錄Table大小&lt;/p>
&lt;p>優點：&lt;strong>適用於大型Page Table&lt;/strong>&lt;/p>
&lt;p>缺點：&lt;strong>須額外多一次Memory Access來存取Page Table，因此速度很慢&lt;/strong>&lt;/p>
&lt;p>[方法三] &lt;strong>最普遍的方法&lt;/strong>，&lt;strong>使用TLB(Translation-Lookaside Buffer)&lt;/strong> Register(或叫Associative Registers)保存&lt;strong>Page Table中經常被存取之Page No及FrameNo&lt;/strong>，且完整的age Table存於memory中&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/ssiW1QX.png"
loading="lazy"
alt="image-20230329002106932"
>&lt;/p>
&lt;p>使用TLB之effective Memory Access Time =&lt;/p>
&lt;p>$$
effective Memory Access Time=P \times (TLB time+ Memory Access Time)+ (1-P) * (TLB Time +2*Memory Access Time) \&lt;br>
where P is TLB Hit Ration
$$&lt;/p>
&lt;blockquote>
&lt;p>Translation Lookaside Buffer (TLB) 是一種硬體快取，用於加速虛擬記憶體的地址轉換過程。當程式存取一個虛擬記憶體頁面時，處理器需要將虛擬地址轉換成實體地址，才能夠從記憶體中取得資料。這個轉換過程需要查詢一個由作業系統維護的稱為頁表的資料結構，以獲取虛擬地址和實體地址的對應關係。但是，這個查詢過程需要訪問主記憶體，因此非常耗時。為了加速這個過程，處理器使用 TLB 快取了最近的地址轉換資料，以便在下一次存取相同虛擬頁面時可以直接從快取中取得資料，而不必再次查詢頁表。&lt;/p>
&lt;p>TLB 是一種關鍵的虛擬記憶體子系統，因為地址轉換是虛擬記憶體系統中最常見、最複雜和最耗時的操作之一。TLB 的效能直接影響了系統的整體效能，因此設計高效的 TLB 是非常重要的。&lt;/p>
&lt;/blockquote>
&lt;p>範例：&lt;/p>
&lt;p>&lt;strong>Register access Time : 0 ns(ignored)&lt;/strong>&lt;/p>
&lt;p>&lt;strong>Memory Access Time：200ns&lt;/strong>&lt;/p>
&lt;p>&lt;strong>TLB Time：100ns&lt;/strong>&lt;/p>
&lt;p>&lt;strong>TLB Hit Ration：90%&lt;/strong>&lt;/p>
&lt;p>求Effective Memory Access Time if Page Table is Stored using&lt;/p>
&lt;ol>
&lt;li>Register&lt;/li>
&lt;li>Memory&lt;/li>
&lt;li>TLB&lt;/li>
&lt;/ol>
&lt;p>Ans.&lt;/p>
&lt;ol>
&lt;li>200ns(只訪問一次記憶體)&lt;/li>
&lt;li>2*200 =400 ns&lt;/li>
&lt;li>0.9 * (100+200) + 0.1 * (100+2*200) = 100+200+0.1*200=320ns&lt;/li>
&lt;/ol>
&lt;h2 id="paging相關計算">Paging相關計算&lt;/h2>
&lt;h3 id="型一-使用tlb之effective-memory-access-time">[型一] 使用TLB之effective Memory Access Time&lt;/h3>
&lt;h3 id="型二-logical-address-與-physical-address-bit-數目計算">[型二] Logical Address 與 Physical Address Bit 數目計算&lt;/h3>
&lt;p>例一：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>pageSize=1kb;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Process最大有8個Pages&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Physical Memory 有32個Frames&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>求&lt;/p>
&lt;ol>
&lt;li>Logical Address length&lt;/li>
&lt;li>physical Address length&lt;/li>
&lt;/ol>
&lt;p>Ans.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Logical address&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>p&lt;/th>
&lt;th>d&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>13&lt;/td>
&lt;td>10&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>因為pageSize=1kb= 2 &lt;sup>10&lt;/sup>Bytes ，&lt;strong>所以d佔10bits&lt;/strong>。又因為process最多8個process最多8(2&lt;sup>3&lt;/sup>&amp;gt;)個Pages。所以P佔3bits，因此3+10 = 13bits&lt;/p>
&lt;/li>
&lt;li>
&lt;p>physical address&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>f&lt;/th>
&lt;th>d&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>15bits&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>因為physical memory有32(2&lt;sup>5&lt;/sup>)個Frames，所以f佔5bits，所以5+10= 15bits&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="型三-pagetable-size相關計算">[型三] PageTable size相關計算&lt;/h3>
&lt;p>1bit = 0 or 1&lt;/p>
&lt;p>1 KB = 1024 bytes&lt;/p>
&lt;p>1 byte= 8 bits&lt;/p>
&lt;p>1MB = 1024 KB&lt;/p>
&lt;p>例一&lt;/p>
&lt;ul>
&lt;li>Page size=8KB&lt;/li>
&lt;li>Process 大小 = 2MB&lt;/li>
&lt;li>Page Table entry 佔4bytes&lt;/li>
&lt;/ul>
&lt;p>求此process的pageTable size?&lt;/p>
&lt;p>ans&lt;/p>
&lt;p>process大小= 2MB/8KB = 2&lt;sup>21&lt;/sup>/2&lt;sup>13&lt;/sup>=2&lt;sup>8&lt;/sup>個Pages，這麼大&lt;/p>
&lt;p>因此 Page Table 有2 &lt;sup>8&lt;/sup> entry，因此size = 2&lt;sup>8&lt;/sup>*4bytes = 1KB&lt;/p>
&lt;p>例二&lt;/p>
&lt;ul>
&lt;li>logical address = 32 bits&lt;/li>
&lt;li>page size = 16kb&lt;/li>
&lt;li>page table entry 佔 4 bytes&lt;/li>
&lt;/ul>
&lt;p>求MAX page table size?&lt;/p>
&lt;p>ans&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/syWnbGX.png"
loading="lazy"
alt="image-20230329231152261"
>&lt;/p>
&lt;p>因為Page size = 16kb = 2 &lt;sup>14&lt;/sup> bytes，所以d佔14bites，所以p佔32-14= &lt;strong>18bits&lt;/strong>&lt;/p>
&lt;p>process 最大可以有2&lt;sup>18&lt;/sup>Pages，所以MAX. page Table size = 2 &lt;sup>18&lt;/sup> 個entry * 4bytes= 1MB&lt;/p>
&lt;p>Ex. 承上 若Logical Adress = 48 bits呢?&lt;/p>
&lt;p>Ans:&lt;/p>
&lt;p>p 佔 48-14 = 34 bits&lt;/p>
&lt;p>因此MAX page table size = 2&lt;sup>34&lt;/sup> * 4 bytes = 64GB&lt;/p>
&lt;p>&lt;strong>Note：page table size 太大是個議題！！&lt;/strong>&lt;/p>
&lt;p>例三&lt;/p>
&lt;ul>
&lt;li>Page Size = 16 KB&lt;/li>
&lt;li>Page Table entry 佔 4 bytes&lt;/li>
&lt;li>MAX Page Table Size 恰為one Page 求 Logical Address length&lt;/li>
&lt;/ul>
&lt;p>因為Page size = 16KB = 2 &lt;sup>14&lt;/sup> bytes，所以d佔14 bits，因為MAX Page Table Size = One Page = 16KB。因為MAX Page Table = 16KB/ 4 bytes = 2&lt;sup>12&lt;/sup>entry，因此P佔12bits，因此12+14= 26 bits&lt;/p>
&lt;h3 id="型四-page-table-size-太大之解法的相關計算-考試必考">[型四] Page Table Size 太大之解法的相關計算 (考試必考)&lt;/h3>
&lt;h2 id="page-table-size-太大-之解決方案">Page Table Size 太大 之解決方案&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>☆☆☆☆☆MultiLevel Paging(Hierarchical Paging)(Paging the Page Table)(Forward Mapping)&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Hashing Page Table&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>☆☆☆☆☆Inverted Page Table&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="multilevels-paging">Multilevels Paging&lt;/h3>
&lt;p>考的頻率較高&lt;/p>
&lt;p>定義：並不是把分頁表縮小，而是縮減抓進來的分頁表的內容，只抓有需要的區間，不需要將整個Page Table 載入進memory中，而是&lt;span style='color:yellow'>載入部分需要的內容就好&lt;/span>，因此提出多層次的Paging的做法，例：&lt;strong>以2-level paging 為例&lt;/strong>，當然你想要分3, 4 ,5 層都可以，你爽就好&lt;/p>
&lt;p>&lt;img src="https://hoxtonhsu.com/C:%5cUsers%5cza546%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20230330003135347.png"
loading="lazy"
alt="image-20230330003135347"
>&lt;/p>
&lt;ul>
&lt;li>Level 1 Page Table ：有2&lt;sup>x&lt;/sup>個entry，每個entry 紀錄某個Level-2 Page Table&lt;/li>
&lt;li>Level 2 Page Table ：有2&lt;sup>y&lt;/sup>個entry，每個entry紀錄Frame No.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/dRpeTZW.png"
loading="lazy"
alt="image-20230330003742535"
>&lt;/p>
&lt;ul>
&lt;li>Process在執行時只須1個Level 1- Page Table以及某1個 Level 2 - Page Table在memory中即可，因此可大幅降低Pable Table占用之Memory Space&lt;/li>
&lt;/ul>
&lt;p>缺點：&lt;strong>effective Memory Access Time更久&lt;/strong>，因為須多次Memory Access存取Page Table&lt;/p>
&lt;p>例如&lt;/p>
&lt;p>Two-Level Paging -&amp;gt; 整個過程須三次MA&lt;/p>
&lt;p>Three-Level Paging - &amp;gt; 整個過程須四次MA&lt;/p>
&lt;p>相關計算：&lt;/p>
&lt;p>例一：&lt;/p>
&lt;ul>
&lt;li>TLB Time：100ns&lt;/li>
&lt;li>TLB Hit Ratio：80%&lt;/li>
&lt;li>Memory Access(MA) Time ：200ns&lt;/li>
&lt;li>Two-Level Paging 採用&lt;/li>
&lt;/ul>
&lt;p>求有效Memory Access Time&lt;/p>
&lt;p>Ans.&lt;/p>
&lt;p>0.8 * (100ns + 200ms) +0.2 * (100ns+3*200ns)&lt;/p>
&lt;p>例二：&lt;/p>
&lt;ul>
&lt;li>Logical Address= 32 bits&lt;/li>
&lt;li>Page Size = 4KB&lt;/li>
&lt;li>Page Table Entry 佔 4 bytes&lt;/li>
&lt;/ul>
&lt;p>在以下幾種情下，求Max. Page Table Size&lt;/p>
&lt;ol>
&lt;li>Single-level-paging&lt;/li>
&lt;li>Two-level paging 且Level-1 Paging與Level 2 Paging Bit數相等&lt;/li>
&lt;/ol>
&lt;p>Ans.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;img src="https://i.imgur.com/ez1sZgK.png"
loading="lazy"
alt="image-20230331005008885"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://i.imgur.com/uvmaBGc.png"
loading="lazy"
alt="image-20230331005534600"
>&lt;/p>
&lt;p>因為Level-1及Level-2 Paging 各佔 20/2 = 10bits，所以&lt;/p>
&lt;p>1個level-1 Page Table MAX Size = 2&lt;sup>10&lt;/sup>*4bytes = 4 KB,&lt;/p>
&lt;p>1個Level-2 Page Table MAX Size = 2&lt;sup>10&lt;/sup>*4bytes=4KB&lt;/p>
&lt;p>因此頂多4KB+4KB= 8KB in the memory&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>例三：&lt;/p>
&lt;ul>
&lt;li>Logical Address = 65 bits&lt;/li>
&lt;li>Page Size = 16kb&lt;/li>
&lt;li>Page Table entry 佔 4 bytes;&lt;/li>
&lt;li>&lt;strong>任一 Level Paging之MAX Page Table Size頂多為One Page&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>則至少分幾層 ?-level Paging&lt;/p>
&lt;p>Ans.&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/5BqLTFC.png"
loading="lazy"
alt="image-20230331011238059"
>&lt;/p>
&lt;p>因為任一level之MAX Page table Size = One Page = 16KB，&lt;/p>
&lt;p>所以任一Level之Page Table 最多有 16KB / 4 bytes =span 2&lt;sup>12&lt;/sup>個Entry&lt;/p>
&lt;p>所以任意Level Paging Bits數 ≦ 12bits&lt;/p>
&lt;p>50 / 12 = 5 Level&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/DVVkFug.png"
loading="lazy"
alt="image-20230331011244762"
>&lt;/p>
&lt;h3 id="hashing-page-table">Hashing Page Table&lt;/h3>
&lt;p>考的機會較少&lt;/p>
&lt;p>定義：利用Hashing 技巧，將Page Table 視為Hash Table，具有相同的Hasing Address的Page No及他的Frame No資訊，會置入於同一個Entry(Bucket)中，且已&lt;strong>Link List&lt;/strong>(Chain)串接，圖示如下：&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/QqvinfA.png"
loading="lazy"
alt="image-20230402145915308"
>&lt;/p>
&lt;p>缺點：&lt;strong>使用Linear Search 在Link List中找符合的Page No，較為耗時&lt;/strong>&lt;/p>
&lt;p>例題：&lt;/p>
&lt;ul>
&lt;li>H(x)= X % 53&lt;/li>
&lt;li>Page Table Entry 佔 4 bytes&lt;/li>
&lt;li>求Hashing Page Table Size&lt;/li>
&lt;/ul>
&lt;p>Ans：有53個entry ，所以53 * 4 = 212 bytes&lt;/p>
&lt;h3 id="inverted-page-table">Inverted Page Table&lt;/h3>
&lt;p>反轉分頁表，考的頻率較高&lt;/p>
&lt;p>定義：大部分的解決方案都是以Process為對象，這個方法改為以記憶體為對象。&lt;strong>是以Physical Memory為記錄對象，並非以Process為對象&lt;/strong>，即若有N個Frames，則此表就有n個entry，&lt;span style='color:yellow'>&lt;strong>每個entry紀錄 &amp;lt;Process Id, Page No&amp;gt;，配對資訊，代表此Frame存放的是哪個Process的哪個Page&lt;/strong>，如此一來，整個系統只有一份表格&lt;/span>&lt;/p>
&lt;p>圖示：&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/o8CZLoB.png"
loading="lazy"
alt="image-20230402153519417"
>&lt;/p>
&lt;p>缺點：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>必須使用&amp;lt;Process Id, Page No&amp;gt; 資訊，一一比對查詢，此舉&lt;u>甚為耗時&lt;/u>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;span style='color:yellow'>喪失了Memory Sharaing之好處，即無法支持其實現&lt;/span>&lt;/strong>，因為Process Id不一樣&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>例題：&lt;/p>
&lt;ul>
&lt;li>Page Size = 8 KB&lt;/li>
&lt;li>Physical Memory = 16 GB&lt;/li>
&lt;li>Page Table entry 佔 4 bytes&lt;/li>
&lt;li>求Inverted Page Table 之 size?&lt;/li>
&lt;/ul>
&lt;p>Ans.&lt;/p>
&lt;p>&lt;em>&lt;em>physical memory 有 16 GB/ 8 KB= 2&lt;sup>34&lt;/sup> / 2&lt;sup>13&lt;/sup> = 2 &lt;sup>21&lt;/sup>個frames，所以Inverted page table 有2&lt;sup>21&lt;/sup>個entry，所以size = 2&lt;sup>21&lt;/sup>&lt;/em> 4 bytes= 8MB&lt;/em>*&lt;/p>
&lt;h2 id="segment-memory-management">Segment Memory Management&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;span style='color:yellow'>&lt;strong>Physical&lt;/strong> &lt;strong>Memory&lt;/strong>&lt;/span> 視為一個夠大的連續可用空間&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;span style='color:yellow'>&lt;strong>Logical memory(process)視為一組Segment(段)之集合，且各段大小不一定相同，段的觀點是採用Logical viewpoint&lt;/strong>&lt;/span>，與user對memory之看法一致&lt;/p>
&lt;p>例：&lt;span style='color:yellow'>code segment, Data segment, stack segment&lt;/span> etc&amp;hellip;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;span style='color:yellow'>配置原則：&lt;/span>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;span style='color:yellow'>段與段之間可以是非連續性配置&lt;/span>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;span style='color:yellow'>但對每一個段而言，必須占用連續的(Sapce)空間&lt;/span>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Os會替每個Process建立&lt;strong>Segment Table分段表&lt;/strong>，紀錄每個段的&lt;strong>Limit&lt;/strong>(大小)即&lt;strong>Base&lt;/strong>(起始位址)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>圖示：&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/2uhiWfP.png"
loading="lazy"
alt="image-20230402163145272"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Logical Address轉physical Address&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Logical Address initially是&lt;u>兩個量&lt;/u>&lt;/strong>，[ s | d ]其中s是段編號，d是段的offset&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>依S查分段表，取得它的limit及Base&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>**Check d &amp;lt; limit ?**若成立，代表合法，所以physical address = Base + d，若不成立，則代表非法存取&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/WoBKZJK.png"
loading="lazy"
alt="image-20230402164329222"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>例題：&lt;/p>
&lt;p>分段表如下，求下列Logical Address&lt;sub>s,d &lt;/sub>之physical Address?&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Limit&lt;/th>
&lt;th>Base&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>0&lt;/td>
&lt;td>100&lt;/td>
&lt;td>4200&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>500&lt;/td>
&lt;td>80&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>830&lt;/td>
&lt;td>7300&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>940&lt;/td>
&lt;td>1000&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ol>
&lt;li>(0,90)&lt;/li>
&lt;li>(1,380)&lt;/li>
&lt;li>(2,900)&lt;/li>
&lt;li>(3,940)&lt;/li>
&lt;/ol>
&lt;p>Ans.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>因為90&amp;lt;100，所以合法。4200+90 = 4290&lt;/p>
&lt;/li>
&lt;li>
&lt;p>因為380&amp;lt; 500，所以合法。80+380 = 460&lt;/p>
&lt;/li>
&lt;li>
&lt;p>因為900 &amp;gt; 830，不合法。非法存取&lt;/p>
&lt;/li>
&lt;li>
&lt;p>因為940 不小於940，不合法。非法存取&lt;/p>
&lt;/li>
&lt;li>
&lt;p>優點&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>沒有內部碎裂&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可支持Memory Sharing及Memory protection，且比Page容易實施(因為段是採用Logical viewpoint)&lt;/p>
&lt;p>eg. 以Protection為例&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/gau5RjN.png"
loading="lazy"
alt="image-20230402171913562"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可支持Dynamic Loading , Linking 及 Vitual Memory 實施&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>缺點&lt;/p>
&lt;ol>
&lt;li>&lt;strong>有外部碎裂&lt;/strong>&lt;/li>
&lt;li>必須要有額外硬體支持，例如分段表的保存、logical address轉physical address&lt;/li>
&lt;li>Effective memory access time 更久&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h2 id="page與segment比較表">Page與Segment比較表&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Page&lt;/th>
&lt;th>Segment&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>各Page Size相同&lt;/td>
&lt;td>各段大小不一定相同&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>用physical viewpoint&lt;/td>
&lt;td>logical viewpoint&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>無外部碎裂&lt;/td>
&lt;td>有外部碎裂&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>有內部碎裂&lt;/td>
&lt;td>無內部碎裂&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Memory protection及Sharing&lt;span style='color:yellow'>較難實施&lt;/span>&lt;/td>
&lt;td>&lt;span style='color:yellow'>較容易實施&lt;/span>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;span style='color:yellow'>無須&lt;/span>Check page offset &amp;lt; page size&lt;/td>
&lt;td>&lt;span style='color:yellow'>須 check 段 offset &amp;lt; 段大小&lt;/span>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Logical address initially &lt;span style='color:yellow'>單一量&lt;/span>&lt;/td>
&lt;td>&lt;span style='color:yellow'>兩個量&amp;lt;s,d&amp;gt;&lt;/span>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Page Table紀錄Frame No&lt;/td>
&lt;td>分段表紀錄段的Limit 及Base&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="paged-segment-memory-management">Paged Segment Memory Management&lt;/h2>
&lt;p>[恐]現已移除，當作補充&lt;/p>
&lt;p>觀念：process &amp;mdash;&amp;gt; 段組成 &amp;mdash;&amp;gt; Page 組成。&lt;u>段在分頁&lt;/u>&lt;code>(Process由一堆段構成，段再由頁面構成)&lt;/code>&lt;/p>
&lt;p>動機：希望保有分段採logical viewpoint的好處，且又要解決外部碎裂，所以段再分頁&lt;/p>
&lt;p>圖示：&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/kwg8e5y.png"
loading="lazy"
alt="image-20230403162821988"
>&lt;/p>
&lt;h2 id="小結-1">小結&lt;/h2>
&lt;p>四大記憶體管理方式，&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Contiguous Allocation&lt;/th>
&lt;th>Page(主角，考最多)&lt;/th>
&lt;th>Segment&lt;/th>
&lt;th>Paged Segment&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>外部碎裂&lt;/td>
&lt;td>有&lt;/td>
&lt;td>無&lt;/td>
&lt;td>有&lt;/td>
&lt;td>無&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>內部碎裂&lt;/td>
&lt;td>無&lt;/td>
&lt;td>有&lt;/td>
&lt;td>無&lt;/td>
&lt;td>有&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>047&lt;/p>
&lt;h1 id="ch8-virtula-memory-虛擬記憶體">Ch8 Virtula Memory (虛擬記憶體)&lt;/h1>
&lt;blockquote>
&lt;p>[基本]主要目的(優點)以及附帶好處&lt;/p>
&lt;p>[基本]Demand Paging技術&lt;/p>
&lt;p>☆☆☆Page fault 即其處理步驟&lt;/p>
&lt;p>☆☆☆☆☆Effective Memory Access time計算 in virtual memory&lt;/p>
&lt;p>影響Page fault ration之因素&lt;/p>
&lt;p>☆☆☆☆☆Page replacement 及其法則、計算題、及相關名詞(Modification Bit, Belady Anomaly, stack property)&lt;/p>
&lt;p>☆Frame數分配多寡之影響&lt;/p>
&lt;p>☆☆☆☆☆Thrashing現象及其解法&lt;/p>
&lt;p>☆☆Page Size 大小之影響&lt;/p>
&lt;p>☆☆☆Program structure 之影響&lt;/p>
&lt;p>☆☆☆☆Copy-on-write之技術 (3種Fork())&lt;/p>
&lt;p>☆TLB Reach&lt;/p>
&lt;/blockquote>
&lt;h2 id="主要目的優點以及附帶好處">主要目的(優點)以及附帶好處&lt;/h2>
&lt;p>優點：&lt;strong>允許Process size 在超過physical memory 可用空間大小情況下，process仍能進行&lt;/strong>，是OS的責任(負擔)，programmerr沒什麼負擔&lt;/p>
&lt;p>附帶好處：&lt;/p>
&lt;ol>
&lt;li>Memory Utilization較高&lt;/li>
&lt;li>盡可能地的提升Multiprogramming Degree，增高CPU Utilization，Note：Thrasing除外&lt;/li>
&lt;li>I/O Transfer(傳輸) Time較小 Note：&lt;strong>I/O次數、Total Time增加&lt;/strong>&lt;/li>
&lt;li>programmer只須專心寫好程式即可，毋須煩惱程式過大無法執行之問題，這是OS的責任，所以Programmer也不須要，過時的overlay技術&lt;/li>
&lt;/ol>
&lt;h2 id="實現virtual-memory的技術之一demand-paging需求分頁">實現Virtual Memory的技術之一　Demand Paging(需求分頁)&lt;/h2>
&lt;p>是架構在Page Memory Management 基礎上。差別在於採用&lt;span style='color:yellow'>Lazy Swapper觀念&lt;/span>&lt;span style='color:yellow'>，即Process在執行之初，毋須事先載入全部的Page，而是指載入部分的Pages(甚至不載入任何Page，Pure demand paging)&lt;/span>，Process即可執行。&lt;/p>
&lt;ul>
&lt;li>若Process執行時，它所需要的Pages皆在Memory中，則Process本身一切無誤地執行&lt;/li>
&lt;li>&lt;span style='color:yellow'>若Process執行時，企圖存取不在memory中的Pages，則稱為發生&lt;strong>Page Fault&lt;/strong>，OS必須處理，將Process所需的lost Page(missed page)載入到Memory 中 from disk，&lt;/span>process才可執行&lt;/li>
&lt;/ul>
&lt;p>在Page Table中須引進一個欄位：&lt;span style='color:yellow'>Valid/ Invalid Bit ，用以區分此page是否在memory當中&lt;/span>&lt;/p>
&lt;p>V：表在memory&lt;/p>
&lt;p>I：表不在memory&lt;/p>
&lt;p>Note：此Bit是由OS set and modify。MMU reference&lt;/p>
&lt;p>圖示：&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/YqMmrBa.png"
loading="lazy"
alt="image-20230403222803230"
>&lt;/p>
&lt;h2 id="page-fault-之處理-steps">Page fault 之處理 Steps&lt;/h2>
&lt;ol>
&lt;li>MMU會發出一個Address error interrupt 通知OS&lt;/li>
&lt;li>OS收到中斷後，必須要暫停目前Process之執行且保存其Status info&lt;/li>
&lt;li>OS檢查Process之存取位址是否合法。
&lt;ol>
&lt;li>若非法，則終止此Process&lt;/li>
&lt;li>&lt;span style='color:yellow'>若合法，則SO判定是由Page Fault所引起&lt;/span>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>OS先去Memory中檢查有無Free的Frame
&lt;ol>
&lt;li>&lt;span style='color:yellow'>若沒有，則OS必須執行Page Replacement工作，&lt;/span>以空出一個Free Frame&lt;/li>
&lt;li>有的話就把頁面抓近來&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;span style='color:yellow'>OS再到Disk中找出Lost Page所在位置，啟動I/O運作，將Lost Page 載入到Free Frame中&lt;/span>&lt;/li>
&lt;li>&lt;span style='color:yellow'>然後，OS修改Page Table&lt;/span>紀錄此Page的Frame No&lt;span style='color:yellow'>，以及將Invailaid 值改為Valid值&lt;/span>&lt;/li>
&lt;li>&lt;span style='color:yellow'>OS 恢復中斷之前Process的執行&lt;/span>&lt;/li>
&lt;/ol>
&lt;p>No.&lt;/p>
&lt;ol>
&lt;li>p8-5簡單一點&lt;/li>
&lt;li>p8-7 更多一些stpes&lt;/li>
&lt;/ol>
&lt;h2 id="effective-memory-access-time計算-in-virtual-memory">Effective Memory Access Time計算 in Virtual Memory&lt;/h2>
&lt;p>公式：&lt;/p>
&lt;p>$$
(1-p) \times \begin{matrix}\text{memory} \ \text{Access} \\text{Time}\end{matrix} + P \times \begin{matrix}\text{Page Fault} \ \text{Process Time} \\end{matrix}
$$&lt;/p>
&lt;p>&lt;span style='color:yellow'>Process Fault Process Time的時間超級久！&lt;/span>&lt;/p>
&lt;p>where P is Page Fault Ration&lt;/p>
&lt;p>範例1.&lt;/p>
&lt;ul>
&lt;li>Memory Access Time: 200ns&lt;/li>
&lt;li>Page Fault process time: 5ms&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>若Page Fault ration = 10 %，求effective memory access time&lt;/li>
&lt;/ol>
&lt;p>ans. &lt;span style='color:yellow'>(1-0.1) * 200ns + 0.1 *5ms = 180ns + 0.1 * 5 % 10 &lt;sup>6&lt;/sup>ns = 500180ns&lt;/span>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>m&lt;/td>
&lt;td>milli&lt;/td>
&lt;td>毫&lt;/td>
&lt;td>10&lt;sup>-3&lt;/sup>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u&lt;/td>
&lt;td>micro&lt;/td>
&lt;td>微&lt;/td>
&lt;td>10&lt;sup>-6&lt;/sup>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>n&lt;/td>
&lt;td>nano&lt;/td>
&lt;td>奈&lt;/td>
&lt;td>10&lt;sup>-9&lt;/sup>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>範例2. `&lt;/p>
&lt;p>若希望effective memory access time不超過2 ms，則Page fault ration應為?&lt;/p>
&lt;p>Ans.&lt;/p>
&lt;p>&lt;span style='color:yellow'>(1-p) * 200ms + p * 5ms ≦ 2ms &lt;/span>&lt;/p>
&lt;p>= p ≒ 2/5&lt;/p>
&lt;h2 id="小結-2">小結&lt;/h2>
&lt;p>&lt;span style='color:yellow'>欲降低effective memory Access Time&lt;/span>提升VM效益，關鍵做法在於&lt;span style='color:yellow'>降低Page Fault Ration&lt;/span>&lt;/p>
&lt;p>[049]&lt;/p>
&lt;h2 id="影響page-fault-ration因素">影響Page Fault ration因素&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>Page Replacement 法則之選擇&lt;/li>
&lt;li>Frame 數目分配多寡之影響&lt;/li>
&lt;li>Page Size 影響&lt;/li>
&lt;li>Program Structure 之影響&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;h2 id="page-replacement頁面替換">Page Replacement(頁面替換)&lt;/h2>
&lt;p>定義：當&lt;span style='color:yellow'>Page Fault發生&lt;/span>且&lt;span style='color:yellow'>Memory中無Free frame時&lt;/span>，OS必須執行此工作，&lt;span style='color:yellow'>即選一個Victim Page (or the replaced page)&lt;/span>將它Swap out到Disk保存，以空出一個Free Frame&lt;/p>
&lt;p>圖示：&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/KPYXyYi.png"
loading="lazy"
alt="image-20230404114127009"
>&lt;/p>
&lt;p>&lt;span style='color:yellow'>會額外多出一個Disk I/O運作，所以Page falut process time更久&lt;/span>&lt;/p>
&lt;p>如何降低Swap out此一額外I/O次數？&lt;/p>
&lt;p>作法：在Page Table 再引進一個欄位，&lt;span style='color:yellow'>Modification Bit 或 Dirty Bit&lt;/span>，用以表示Page上次載入後，到現在，內容是否被修改過&lt;/p>
&lt;blockquote>
&lt;p>0：沒有&lt;/p>
&lt;p>１：有&lt;/p>
&lt;/blockquote>
&lt;p>引進這件事情後，&lt;span style='color:yellow'>OS可檢查Victim page的modification Bit值，若為0，則無需Swap it out&lt;/span>，因此可降低I/O次數，&lt;span style='color:yellow'>反之，則需Swap it out &lt;/span>&lt;/p>
&lt;p>Note：此Bit由MMU set(0&amp;mdash;&amp;gt;1)，OS Reference 及 Reset (1 &amp;mdash;&amp;gt; 0)&lt;/p>
&lt;p>例題：&lt;/p>
&lt;ul>
&lt;li>Page Fault process time：8ms&lt;/li>
&lt;/ul>
&lt;p>​ if 有可用頁框，或 the replaced page is not modified&lt;/p>
&lt;ul>
&lt;li>Page fault process tiem if victim page is modified : 20ms&lt;/li>
&lt;li>memory access time：100ns&lt;/li>
&lt;li>victim page is modified 之機率 ：70%&lt;/li>
&lt;/ul>
&lt;p>求Page fault ration ≦ ? if effective memory access time ≦ 200ns&lt;/p>
&lt;p>Ans.&lt;/p>
&lt;p>(1-p) * 100ns + p * page fault process time&lt;code>(0.3 * 8ms + 0.7 * 20ms)=16.4ms&lt;/code>&lt;/p>
&lt;p>= (1-p * 100ns + p * 16.4 ms ≦ 200ns )&lt;/p>
&lt;p>= 100 - 100p + P* 16.4 * 10 &lt;sup>6&lt;/sup> ≦　200 &lt;span style='color:yellow'>p  ≦ 1/ 163999&lt;/span>&lt;/p>
&lt;p>例題：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>1次 I/O time ：10 ms&lt;/p>
&lt;/li>
&lt;li>
&lt;p>page Fault Ration：10 %&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Victim page modified ration：60%&lt;/p>
&lt;/li>
&lt;li>
&lt;p>memory access time：200ns&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>求Effective memory access time&lt;/p>
&lt;p>Ans .&lt;/p>
&lt;p>&lt;span style='color:yellow'>0.9 * 200ns + 0.1 *(page fault process time)&lt;code>(0.4 * 10 ms + 0.6 * 10ms *2 兩次I/O)&lt;/code>&lt;/span>&lt;/p>
&lt;p>replacement policy 有兩種&lt;/p>
&lt;ol>
&lt;li>Local replacement policy&lt;/li>
&lt;li>Global replacement policy&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>
&lt;p>Local：OS只能從發生Page Fault 的process 之Pages中，去挑victim page ，&lt;span style='color:yellow'>不可以從其他processes之pages&lt;code>(in memory)&lt;/code>挑victim page&lt;/span>&lt;/p>
&lt;p>缺點：&lt;/p>
&lt;ul>
&lt;li>&lt;span style='color:yellow'>Memory utilization較差&lt;/span>&lt;/li>
&lt;/ul>
&lt;p>優點：&lt;/p>
&lt;ul>
&lt;li>&lt;span style='color:yellow'>可限縮Thrashing 的範圍&lt;/span>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Global：OS可從其他processes挑victim page(目前都是採此方案)
缺點：&lt;/p>
&lt;ul>
&lt;li>不能限縮Thrasing的範圍&lt;/li>
&lt;/ul>
&lt;p>優點：&lt;/p>
&lt;ul>
&lt;li>Memory Utilization較佳&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="page--replacement法則介紹">Page replacement法則介紹&lt;/h2>
&lt;ol>
&lt;li>FIFO&lt;/li>
&lt;li>OPT&lt;/li>
&lt;li>LRU&lt;/li>
&lt;li>LRUU近似
&lt;ol>
&lt;li>Additional Reference Bitws Usage&lt;/li>
&lt;li>Second chance&lt;/li>
&lt;li>Enhanced Second Chance&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>LFU與MFU&lt;/li>
&lt;li>Page Buffering algo (偏向機制)&lt;/li>
&lt;/ol>
&lt;h3 id="fifo-法則">FIFO 法則&lt;/h3>
&lt;p>定義：最早載入&lt;span style='color:yellow;font-size:17px;'>(Loading Time最小)&lt;/span>的Page，作為Victim page&lt;/p>
&lt;p>[049 00:45:00]&lt;/p>
&lt;p>範例：給予&lt;u>3個&lt;/u>Frames, Initially, they are all empty(或 pure demand paging)有下列的&lt;span style='color:yellow'>Page Reference String &lt;/span>，求Page Fault次數&lt;/p>
&lt;p>頁面編號：7,0,1,2,0,3,0,4,2,3,0,3,2,1,2,0,1,7,0,1&lt;/p>
&lt;p>或　Page Size = 100，下列存取位址：731, 008, 117, 258, 039 , 331, 047 &amp;hellip;&lt;/p>
&lt;p>或　Logical address= 12 bits, Page No佔3 bits，存取位址如下：7AF, 8BD, 259, 047, EAF, D72&lt;/p>
&lt;p>Ans.&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/PfZ4cK2.png"
loading="lazy"
alt="image-20230404143314093"
>&lt;/p>
&lt;p>分析：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;span style='color:yellow'>Simple , easy, implementation&lt;/span>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;span style='color:yellow'>效能不是很好，Page Fault ration相當高&lt;/span>&lt;/p>
&lt;p>Note：Page replacement法則中，&lt;span style='color:yellow'>只有最佳，沒有最差&lt;/span>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可能有&lt;span style='color:yellow'>Belady Anormaly(異常現象)&lt;/span>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="belady--anormaly">Belady Anormaly&lt;/h2>
&lt;p>定義：&lt;span style='color:yellow'>process 分配到的頁框數增加，其Page Fault ration卻不降反升之異常現象&lt;/span>&lt;/p>
&lt;p>例子：&lt;/p>
&lt;p>頁面編號：1,2,3,4,1,2,5,1,2,3,4,5&lt;/p>
&lt;ol>
&lt;li>3個頁框&lt;/li>
&lt;/ol>
&lt;p>​ &lt;img src="https://i.imgur.com/BsK6dO1.png"
loading="lazy"
alt="image-20230404145501311"
>&lt;/p>
&lt;ol start="2">
&lt;li>
&lt;p>4個頁框&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/GGBSJWi.png"
loading="lazy"
alt="image-20230404145029156"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="stack-property">Stack Property&lt;/h2>
&lt;p>定義：：&lt;span style='color:yellow'>ｎ個Frames所包含的Page Set保證是(n+1)個Frames &amp;hellip; 之子集合(subset)&lt;/span>，此性質稱之&lt;/p>
&lt;p>性質：&lt;span style='color:yellow'>若具有 stack property，保證不會有Belady Anormaly&lt;/span>，只有&lt;span style='color:yellow'>OPT&lt;/span>與&lt;span style='color:yellow'>LRU&lt;/span>法則，具有stack property，&lt;span style='color:yellow'>所以他們不會發生belady anomaly&lt;/span>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/HwcvNND.png"
loading="lazy"
alt="image-20230404150301566"
>&lt;/p>
&lt;h2 id="opt-uoptuional-最佳法則">OPT (&lt;u>Opt&lt;/u>ional 最佳)法則&lt;/h2>
&lt;p>定義：&lt;span style='color:yellow'>選擇將來(未來)長期不會用到的Page為Victim Page&lt;/span>&lt;/p>
&lt;p>範例：&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/31vOE5C.png"
loading="lazy"
alt="image-20230404170523441"
>&lt;/p>
&lt;p>分析：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;span style='color:yellow'>Page Fault ration最低，因此最佳&lt;/span>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;span style='color:yellow'>不會有Belady AnomalyS&lt;/span>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;span style='color:yellow'>無法被實作&lt;/span>(因為 needs the future knowledge)，通常做為理論上研究比較對象之用&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="lruulueast-uruecently-uuused法則">LRU(&lt;u>L&lt;/u>east &lt;u>R&lt;/u>ecently &lt;u>U&lt;/u>sed)法則&lt;/h2>
&lt;p>定義：&lt;span style='color:yellow'>選擇過去不常使用的Page&lt;/span>作為Victim Page，即&lt;span style='color:yellow'>相當於是OPT reverse (依歷史info 做決定的OPT)&lt;/span>即挑選the last reference time 最小的page&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/0tQ7M1w.png"
loading="lazy"
alt="image-20230404180556546"
>&lt;/p>
&lt;p>分析：&lt;/p>
&lt;ol>
&lt;li>&lt;span style='color:yellow'>Page fault ration可以接受&lt;/span>&lt;/li>
&lt;li>&lt;span style='color:yellow'>不會發生Belady Anomaly&lt;/span>&lt;/li>
&lt;li>&lt;span style='color:yellow'>LRU的製作，須要大量Hardware支持，因此Cost很高&lt;/span>，因此才有LRU近&lt;/li>
&lt;/ol>
&lt;h2 id="lru的製作方法">LRU的製作方法&lt;/h2>
&lt;h3 id="方法一counter法">方法一：Counter法&lt;/h3>
&lt;p>步驟&lt;/p>
&lt;ol>
&lt;li>每發生memory Acess，Counter值++&lt;/li>
&lt;li>Copy Counter值到Access Page的&amp;quot;the last reference time&amp;quot;欄位，&lt;span style='color:yellow'>將來OS要選LRU Page時，就挑the last reference time最小的Page &lt;/span>&lt;/li>
&lt;/ol>
&lt;h3 id="方法二stack-法">方法二：Stack 法　&lt;/h3>
&lt;p>&lt;code>此為Stack property之由來&lt;/code>&lt;/p>
&lt;p>定義：&lt;/p>
&lt;ul>
&lt;li>最後一次存取之Page 必置於Stack &lt;span style='color:yellow'>Top端&lt;/span>&lt;/li>
&lt;li>Stack 之 &lt;span style='color:yellow'>Botton(底端)&lt;/span>，即為&lt;span style='color:yellow'>LRU Page&lt;/span>&lt;/li>
&lt;li>&lt;span style='color:yellow'>Stack大小=Frame數目&lt;/span>&lt;/li>
&lt;/ul>
&lt;p>釋例：&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/oQbJlwZ.png"
loading="lazy"
alt="image-20230404183208550"
>&lt;/p>
&lt;h2 id="lru近似法則">LRU近似法則&lt;/h2>
&lt;p>主要是以&lt;span style='color:yellow'>Reference Bit(參考位元)&lt;/span>為基礎，此作法較為簡單&lt;/p>
&lt;p>0：此Page&lt;span style='color:yellow'>不曾被參考過&lt;/span>&lt;/p>
&lt;p>1：此Page&lt;span style='color:yellow'>曾被參考過&lt;/span>&lt;/p>
&lt;p>[050]&lt;/p>
&lt;h2 id="additional-reference-bits-usage">Additional Reference Bits usage&lt;/h2>
&lt;p>作法：每個Page 有一個欄位(or Register) ，例如：8 bits&lt;/p>
&lt;p>當發生Memory Access，該被Access Page之Ref Bit 會 Set為1&lt;/p>
&lt;p>&lt;span style='color:yellow'>系統每隔一段時間會將各page的register值右移一位(空出最高位元，最右位元捨去)並將各Page之Ref Bit值Copy到Register之最高位元，且Reset 各Page 之ref bit 為0&lt;/span>，將來要排victim page時，&lt;span style='color:yellow'>就挑Register最小之Page&lt;/span>，若多個Page具相同值，則以FIFO為準&lt;/p>
&lt;p>圖示：&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/2oAdti0.gif"
loading="lazy"
alt="未命名的作品"
>&lt;/p>
&lt;p>犧牲頁面會挑Page2，因為暫存器的值最小&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/iB3xYEE.png"
loading="lazy"
alt="image-20230406010708144"
>&lt;/p>
&lt;h2 id="second-chance">Second Chance&lt;/h2>
&lt;p>二次機會法則&lt;/p>
&lt;p>定義：以FIFO為基礎，搭配Reference Bit使用，挑victim page之Steps如下&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;span style='color:yellow'>先以FIFO order 挑出一個Page&lt;/span>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;span style='color:yellow'>檢查此page的Reference Bit值&lt;/span>&lt;/p>
&lt;p>Case 1：若為0，則它即Victim Page&lt;/p>
&lt;p>Case 2：&lt;span style='color:yellow'>若為1，則給它機會，不讓它當犧牲頁面。但Reset its Reference Bit值為0。並將它的Loading Time(載入時間)更改為現在，因此FIFO指針往下指。接回Step1&lt;/span>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>例：&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/2F59EKU.png"
loading="lazy"
alt="image-20230407230307064"
>&lt;/p>
&lt;p>挑犧牲頁面&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/6WhmKL2.png"
loading="lazy"
alt="image-20230407230516510"
>&lt;/p>
&lt;p>例：3個Frames&lt;/p>
&lt;p>頁面參考：1,2,3,4,2,5,2,6,1,2，求Second Change&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/tiyTry7.gif"
loading="lazy"
alt="未命名的作品"
>&lt;/p>
&lt;p>Note：當所有Pages之Reference Bit皆相同，&lt;span style='color:yellow'>則退化成FIFO。也叫Clock Algorithm&lt;/span>&lt;/p>
&lt;h2 id="enhanced-second-chance">Enhanced Second Chance&lt;/h2>
&lt;p>加強型二次機會&lt;/p>
&lt;p>定義：&lt;span style='color:yellow'>以&amp;lt;Reference Bit, Modification Bit&amp;gt;配對值&lt;/span>，作為挑選Victim Page之依據，&lt;span style='color:yellow'>值最小之Page，作為Victim&lt;/span>。若有多個Pages具相同值，則以FIFO為準&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">值&lt;/th>
&lt;th>&amp;lt;R bit, M bit&amp;gt;&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">第一小&lt;/td>
&lt;td>&amp;lt;0,0&amp;gt;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">第二小&lt;/td>
&lt;td>&amp;lt;0,1&amp;gt;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">第三小&lt;/td>
&lt;td>&amp;lt;1,0&amp;gt;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">第四小&lt;/td>
&lt;td>&amp;lt;1,1&amp;gt;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="lfu與mfu法則">LFU與MFU法則&lt;/h2>
&lt;p>定義：以Page的&lt;span style='color:yellow'>累積參考總次數&lt;/span>作為挑Victim Page之依據，分為兩種：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;span style='color:yellow'>LFU(Least Frequently Used)&lt;/span>&lt;/p>
&lt;p>次數最小的Page為Victim&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;span style='color:yellow'>MFU(Most Frequently Used)&lt;/span>&lt;/p>
&lt;p>次數最大的page 為Vimtim&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>若多個Pages具相同值，也是FIFO為準&lt;/p>
&lt;p>分析：計算題FIFO,OPT,LRU最常考。&lt;/p>
&lt;ol>
&lt;li>&lt;span style='color:yellow'>Page Fault Ration相當高　&lt;/span>&lt;/li>
&lt;li>&lt;span style='color:yellow'>有Belady Anomoaly&lt;/span>&lt;/li>
&lt;li>&lt;span style='color:yellow'>製作需大量Hardware支持，因此Cost很高&lt;/span>&lt;/li>
&lt;/ol>
&lt;p>&lt;span style='color:yellow'>&lt;/span>&lt;/p>
&lt;p>例：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Page&lt;/th>
&lt;th>Loading　TIme&lt;/th>
&lt;th>The Last reference Time&lt;/th>
&lt;th>R bit&lt;/th>
&lt;th>M Bit&lt;/th>
&lt;th>參考次數&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Page1&lt;/td>
&lt;td>493&lt;/td>
&lt;td>800&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>410&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Page2&lt;/td>
&lt;td>172&lt;/td>
&lt;td>700&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>235&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Page3&lt;/td>
&lt;td>333&lt;/td>
&lt;td>430&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>147&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Page4&lt;/td>
&lt;td>584&lt;/td>
&lt;td>621&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>875&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Page5&lt;/td>
&lt;td>256&lt;/td>
&lt;td>564&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>432&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;span style='color:yellow'>在下列情況中，victim page為&lt;/span>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>FIFO：Page2&lt;/p>
&lt;/li>
&lt;li>
&lt;p>LRU：Page3&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Second Chance：Page5&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Enhanced Second Chance：Page1&lt;/p>
&lt;/li>
&lt;li>
&lt;p>LFU：Page3&lt;/p>
&lt;/li>
&lt;li>
&lt;p>MFU：Page4&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="page-buffering機制">Page Buffering機制&lt;/h2>
&lt;p>緣由：當挑出Victim Page之後，且它被Modified過，步驟如下&lt;/p>
&lt;p>&lt;span style='color:yellow'>1. 則把Victim Page&lt;u>Swap Out&lt;/u> 到 Disk&lt;/span>&lt;/p>
&lt;p>&lt;span style='color:yellow'>2. &lt;u>載入&lt;/u>Lost Page&lt;/span>&lt;/p>
&lt;p>&lt;span style='color:yellow'>3. Process resume execution&lt;/span>&lt;/p>
&lt;p>&amp;ndash;&amp;gt; IO太多，&lt;u>Process恢復執行的時間點拖太久，想要改善&lt;/u>&lt;/p>
&lt;h3 id="方法一">方法一&lt;/h3>
&lt;p>&lt;span style='color:yellow'>OS 會 Keeps一個 Free Frames Pool&lt;/span>(OS的私房錢，不是配置給Process的)&lt;/p>
&lt;p>圖示：&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/oiSstEn.png"
loading="lazy"
alt="image-20230408011210426"
>&lt;/p>
&lt;p>流程：&lt;/p>
&lt;p>OS挑完犧牲頁面(Modified)&lt;/p>
&lt;p>&lt;span style='color:yellow'>步驟更改如下&lt;/span>&lt;/p>
&lt;p>&lt;span style='color:yellow'>1. OS從Free Frame pool中，取出一個Free Frame，供Lost Page使用，讓它先載入&lt;/span>&lt;/p>
&lt;p>&lt;span style='color:yellow'>2. 載入完後，Process恢復執行&lt;/span>&lt;/p>
&lt;p>&lt;span style='color:yellow'>3. Process Resume execution&lt;/span>&lt;/p>
&lt;p>OS可稍後將Victim Page 寫回Disk，空出Frame&lt;span style='color:yellow'>再還給OS，加入Free Frame Pool中&lt;/span>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/p5vQabo.png"
loading="lazy"
alt="image-20230408012305710"
>&lt;/p>
&lt;h3 id="方法二">方法二&lt;/h3>
&lt;p>OS會Keep一條&lt;span style='color:yellow'>Modification List，記錄所有被Modified過的Page info(即Modification Bit值=1之Pages)&lt;/span>，OS會等Paging I/O Device有空時，將此List中某些Pages寫回Disk，&lt;span style='color:yellow'>同時自此List中，移走這些Pages，Reset their Modification Bit值為0。如此可增加Victim pages是unmodified 之機率，這樣直接把Lost Page抓進來就好&lt;/span>，這樣Process有較高機會快速resume exec&lt;/p>
&lt;p>[051 00:00:00 ~00:40:00]&lt;/p>
&lt;h3 id="方法三">方法三&lt;/h3>
&lt;p>&lt;span style='color:yellow'>希望連一次I/O都不要有。是以方法一為基礎，差別在於針對Free Frames Pool(私房錢)中的每個Frame，紀錄放的是哪個Process的哪個Page(&amp;lt;process ID, Page No&amp;gt;)，這些Page內容必定是最新的&lt;/span>&lt;/p>
&lt;p>流程：&lt;/p>
&lt;ol>
&lt;li>OS選完Victim Page(modified)&lt;/li>
&lt;li>&lt;span style='color:yellow'>OS去Free Frames Pool中尋找有無Lost Page存在。若存在，代表其內容為最新的，則將此Free Frame加入Resident Frames Pool中，Process即可Resume exec，連一次I/O都不用！&lt;/span>，OS寫回Victim Page後，再加入(還給)Free Frames Pool，&lt;span style='color:yellow'>若不存在，則依方法一步驟處理&lt;/span>&lt;/li>
&lt;/ol>
&lt;p>.
.&lt;/p>
&lt;p>.&lt;/p>
&lt;p>&lt;span style='color:red;font-size:32px;'>這邊看不太懂，先Pass&lt;/span>&lt;/p>
&lt;p>.&lt;/p>
&lt;p>.&lt;/p>
&lt;p>.&lt;/p>
&lt;h2 id="frame-數目分配多寡之影響">Frame 數目分配多寡之影響&lt;/h2>
&lt;ol>
&lt;li>&lt;span style='color:yellow;font-size:16px;'>一般而言&lt;/span>Process分配到的頁框數增加，其Page Fault Ration理應下降&lt;/li>
&lt;li>&lt;span style='color:yellow;font-size:16px;'>OS在分配Process頁框數時，必須滿足最少及最多數目之限制，這兩個限制均由&lt;u>Hardware&lt;/u>決定的，非OS&lt;/span>&lt;/li>
&lt;/ol>
&lt;p>&lt;span style='color:yellow;font-size:16px;'>最多數目限制&lt;/span>即是Physical Memory Size(頁框總數)&lt;/p>
&lt;p>&lt;span style='color:yellow;font-size:16px;'>最少數目限制即是CPU完成機器指令執行過程中，最多的可能Memory存取次數&lt;/span>，否則機器指令可能永遠無法完成&lt;/p>
&lt;p>例：&lt;/p>
&lt;p>[051] 01:10:00 看不太懂，需要計組知識&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/V6mHUyB.png"
loading="lazy"
alt="image-20230408163437049"
>&lt;/p>
&lt;ul>
&lt;li>&lt;span style='color:yellow;font-size:16px;'>假設指令不跨頁面&lt;/span>&lt;/li>
&lt;li>&lt;span style='color:yellow;font-size:16px;'>運算元(memory變數)是採用Direct Addressing &lt;/span>&lt;/li>
&lt;/ul>
&lt;p>則最多可能需要3次Memory Access(M.A.)，&lt;span style='color:yellow;font-size:16px;'>因此os至少要分給process ≧3個Frames&lt;/span>&lt;/p>
&lt;h2 id="thrashing現象-">Thrashing現象 ☆☆☆☆☆&lt;/h2>
&lt;p>Thrashing meaning 徒勞無功&lt;/p>
&lt;p>定義：&lt;span style='color:yellow;font-size:16px;'>若Process分配到的頁框數不足時&lt;/span>，則此Process會經常Page Fault，且OS要做Page Replacement，若OS採用Global replacement policy，所以OS可能挑其他Process之Page，而這也會造成其他Process Page Fault，它們也會去搶奪別的Process之Frame來用，如此一來，幾乎所有的Processes皆Page Fault，&lt;span style='color:yellow;font-size:16px;'>大家皆在等待Paging I/O Device 之I/O 運作(swap  out/in)完成，CPU Utilization下降，系統會企圖調高Multiprogramming degree&lt;/span>，引入更多Process進入執行，&lt;span style='color:yellow;font-size:16px;'>但是Memory本來就不夠，&lt;/span>Process也立刻Page Fault，系統&lt;span style='color:yellow;font-size:16px;'>又&lt;/span>調高Multiprogramming Degree，&lt;span style='color:yellow;font-size:16px;'>如此循環下去，此時系統呈現&lt;/span>&lt;/p>
&lt;ol>
&lt;li>CPU Utilization急速下降&lt;/li>
&lt;li>Paging I/O Device 異常忙碌&lt;/li>
&lt;li>Processes花在Page Fault Processing Time(就是閒置時間啦)遠大於正常執行時間，此一現象稱為Thrashing&lt;/li>
&lt;/ol>
&lt;h2 id="解決預防-thrashing">解決/預防 Thrashing&lt;/h2>
&lt;h3 id="方法一-1">方法一&lt;/h3>
&lt;p>&lt;span style='color:yellow;font-size:16px;'>減少 Multiprogramming Degree &lt;/span>&lt;/p>
&lt;p>例如挑選一些lower-priority 或完成度低 Process swap-out&lt;/p>
&lt;h3 id="方法二-1">方法二&lt;/h3>
&lt;p>利用&lt;span style='color:yellow;font-size:16px;'>Page Fault Frequency Control 機制，來防止/預防Thrashimg發生&lt;/span>&lt;/p>
&lt;p>作法：&lt;span style='color:yellow;font-size:16px;'>OS會去制定process Page Fault Ration之合理的上限與下限值&lt;/span>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/3Tzqy5P.png"
loading="lazy"
alt="image-20230408173939031"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/vXUwbG3.png"
loading="lazy"
alt="image-20230408173954495"
>&lt;/p>
&lt;p>&lt;span style='color:yellow;font-size:16px;'>OS若發現Process的Page Fault ration&lt;/span>&lt;/p>
&lt;ol>
&lt;li>高於上限，則OS應增加額外Frame數目給此Process，降低其Ratio，回到合理區間&lt;/li>
&lt;li>低於下限，則OS自此Process取走多餘的Frame，分給其他有需要之Processes&lt;/li>
&lt;/ol>
&lt;p>&lt;span style='color:yellow;font-size:16px;'>若OS能夠控制所有processes之Page Fault ratio 在合理區間，則理當不會有Thrashing&lt;/span>&lt;/p>
&lt;p>方法三&lt;/p>
&lt;p>運用&lt;span style='color:yellow;font-size:16px;'>Working Set Model技術預估&lt;/span>Process在不同執行時期所需之頁框數，並依此分配各Process&lt;span style='color:yellow;font-size:16px;'>足夠的Frame數目，以防止Thrashing&lt;/span>&lt;/p>
&lt;h2 id="working-set-model-技術">Working Set Model 技術&lt;/h2>
&lt;p>&lt;span style='color:yellow;font-size:16px;'>是架在&amp;quot;Locality Mode&amp;quot;之理論基礎上&lt;/span>&lt;/p>
&lt;p>定義：Process執行時，對於所存取的Memory Area，&lt;span style='color:yellow;font-size:16px;'>並非是均勻的，而是具有某種局部/集中區域存取之特性&lt;/span>，一般分為兩種Locality&lt;/p>
&lt;ol>
&lt;li>Temporal&lt;code>時間&lt;/code> Locality&lt;/li>
&lt;li>Spatial&lt;code>空間&lt;/code> Locality&lt;/li>
&lt;/ol>
&lt;h3 id="temporal-locality">Temporal Locality&lt;/h3>
&lt;p>目前所存取的區域，&lt;span style='color:yellow;font-size:16px;'>過不久&lt;/span>又會再度被存取&lt;span style='color:yellow;font-size:16px;'>(或此區域經常被存取)&lt;/span>&lt;/p>
&lt;p>例：&lt;span style='color:yellow;font-size:16px;'>For Loop &lt;/span>(while, for , repeat &amp;hellip;), &lt;span style='color:yellow;font-size:16px;'>Subroutine&lt;/span>&lt;code>副程式&lt;/code>(function, pure code), &lt;span style='color:yellow;font-size:16px;'>Counter&lt;/span>, &lt;span style='color:yellow;font-size:16px;'>Stack&lt;/span>&lt;/p>
&lt;h3 id="spatial-locality">Spatial Locality&lt;/h3>
&lt;p>定義：目前所存取之區域，&lt;span style='color:yellow;font-size:16px;'>其鄰近的區域，也即有可能被存取&lt;/span>&lt;/p>
&lt;p>例：&lt;span style='color:yellow;font-size:16px;'>Array, Sequential Code Execution, Common Data area, Linear Search, Vector operat&lt;/span>&lt;/p>
&lt;p>[052]&lt;/p>
&lt;p>只要Program中用到的指令, Data Structures, algo 符合 Locality Model 則為&lt;span style='color:yellow;font-size:16px;'>Good(所以 Page Fault Ratio 度會下降) 若違反，則為Bad&lt;/span>&lt;/p>
&lt;p>例：BAD Samples&lt;/p>
&lt;p>Ans：&lt;span style='color:yellow;font-size:16px;'>Hashing&lt;code>(分散在各個記憶體頁面，不符空間局部性)&lt;/code>, Binary Search&lt;code>(跳來跳去)&lt;/code>, LinkedList&lt;code>(散落在不同頁面)&lt;/code>, goto Jump指令&lt;code>(跳來跳去)&lt;/code>, Indirect Addressing mode(間接定址模式)&lt;/span>&lt;/p>
&lt;p>Working Set Model相關術語解析：&lt;/p>
&lt;ol>
&lt;li>&lt;span style='color:yellow;font-size:16px;'>Working Set window&lt;/span>：記為&lt;span style='color:yellow;font-size:16px;'>△&lt;/span>表示以&lt;span style='color:yellow;font-size:16px;'>△次　Pages reference 作為統計Working Set之依據&lt;/span>&lt;/li>
&lt;li>&lt;span style='color:yellow;font-size:16px;'>Working Set: &lt;/span> 在△次Page參考中，&lt;span style='color:yellow;font-size:16px;'>所參考到的不同Pages之集合&lt;/span>&lt;/li>
&lt;li>&lt;span style='color:yellow;font-size:16px;'>Working Set Size(WSS)&lt;/span>：working Set之 元素(Page)個數，&lt;span style='color:yellow;font-size:16px;'>代表Process 此時所需之頁框數&lt;/span>&lt;/li>
&lt;/ol>
&lt;p>[052] 00:13:00&lt;/p>
&lt;p>&lt;span style='color:red;font-size:32px;'>例題：到時候再來補&lt;/span>&lt;/p>
&lt;h2 id="page-size-之影響">Page Size 之影響&lt;/h2>
&lt;p>若Page Size越小，則&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>Page Fault ratio：&lt;span style='color:yellow;font-size:16px;'>上升&lt;/span>&lt;/li>
&lt;li>Page Table Size ：&lt;span style='color:yellow;font-size:16px;'>變數&lt;/span>&lt;/li>
&lt;li>I/O次數(total Time)：&lt;span style='color:yellow;font-size:16px;'>增加&lt;/span>&lt;/li>
&lt;li>內部碎裂：&lt;span style='color:yellow;font-size:16px;'>輕微&lt;/span>&lt;/li>
&lt;li>I/O Transfer Time：&lt;span style='color:yellow;font-size:16px;'>變小&lt;/span>&lt;/li>
&lt;li>Locality：&lt;span style='color:yellow;font-size:16px;'>越佳&lt;/span>&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>&lt;span style='color:yellow;font-size:16px;'>趨勢：朝Page size大的更新，因為我們只關心Page Fault ration&lt;/span>&lt;/p>
&lt;h2 id="program-structures-之影響">Program Structures 之影響&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;span style='color:yellow;font-size:16px;'>若Profram中使用的指令Data Structure, Algo 符合 &amp;ldquo;Locality Model&amp;rdquo;，則為GOOD(有助於降低Page Fault Ratio)&lt;/span>，反之，若違反，則為BAD&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;span style='color:yellow;font-size:16px;'>程式中對於Arrray元素的處理順序最好與Array元素在Memory中的儲存方式(Row-Major或Column-mahor)對應，有助於降低Page Fault  ratio&lt;/span>&lt;/p>
&lt;p>例：A：Array[1..128,1..128] of int;&lt;/p>
&lt;p>每個int 佔 1 bytes&lt;/p>
&lt;p>A以&lt;span style='color:yellow;font-size:32px;'>Row-major&lt;/span>&lt;code>(第一列放完再放第二列在放第三列...)&lt;/code>方式存於Memory&lt;/p>
&lt;p>Page Size= 128 byte&lt;/p>
&lt;p>給3個Frames，且程式已在Memory中&lt;/p>
&lt;p>採FIFO Replacemenrt policy&lt;/p>
&lt;p>求下列Code之Page Fault次數&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">for i = 1 to 128 do
for j = 1 to 128 do
A[i,j]=0
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">for j=1 to 128 do
for i to 128 do
A[i,j] = 0
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol>
&lt;li>&lt;span style='color:yellow;font-size:32px;'>Row-Major&lt;/span> 的排列方式&lt;img src="https://i.imgur.com/KDo64vw.png"
loading="lazy"
alt="image-20230409122905579"
>&lt;/li>
&lt;li>&lt;span style='color:yellow;font-size:32px;'>Column-Major&lt;/span>&lt;img src="https://i.imgur.com/EPP3g9a.png"
loading="lazy"
alt="image-20230409123224894"
>&lt;/li>
&lt;/ol>
&lt;p>例2：A：Array[1..100,1..100] of int;&lt;/p>
&lt;p>每個int 佔 1 bytes&lt;/p>
&lt;p>A以&lt;span style='color:yellow;font-size:32px;'>Row-major&lt;/span>&lt;code>(第一列放完再放第二列在放第三列...)&lt;/code>方式存於Memory&lt;/p>
&lt;p>Page Size= &lt;span style='color:yellow;font-size:16px;'>200&lt;/span> byte&lt;/p>
&lt;p>給3個Frames，且程式已在Memory中&lt;/p>
&lt;p>採&lt;span style='color:yellow;font-size:16px;'>LRU&lt;/span> Replacemenrt policy&lt;/p>
&lt;p>求下列Code之Page Fault次數&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">for i = 1 to 100 do
for j = 1 to 100 do
A[i,j]=0
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">for j=1 to 100 do
for i to 100 do
A[i,j] = 0
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol>
&lt;li>&lt;img src="https://i.imgur.com/vrNwxGu.png"
loading="lazy"
alt="image-20230409124706967"
>&lt;/li>
&lt;li>&lt;img src="https://i.imgur.com/qHVjqWq.png"
loading="lazy"
alt="image-20230409124835188"
>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h2 id="copy-on-write技術">Copy-On-Write技術&lt;/h2>
&lt;p>(此處主要是討論3種Fork())&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;span style='color:yellow;font-size:16px;'>傳統的Fork() &lt;code>ch4&lt;/code>&lt;/span>&lt;/p>
&lt;p>(fork () without &amp;ldquo;copy-on-write&amp;rdquo;)&lt;/p>
&lt;p>定義：Parent process fork() 建立出Child process，&lt;span style='color:yellow;font-size:16px;'>OS會配置New Frames給Child Process&lt;/span>(即Child 與 Parent 占用不同的Memory Space)，&lt;span style='color:yellow;font-size:16px;'>同時OS也要複製(Copy)Parent Process內容(code Sec 及 Data Sec)給Child Process initially&lt;/span>&lt;/p>
&lt;p>&lt;span style='color:yellow;font-size:16px;'>此舉會導致兩個缺失&lt;/span>&lt;/p>
&lt;ol>
&lt;li>&lt;span style='color:yellow;font-size:16px;'>Memory(Frames)需求量大增&lt;/span>&lt;/li>
&lt;li>&lt;span style='color:yellow;font-size:16px;'>Slower Child Process Creation&lt;/span>&lt;/li>
&lt;/ol>
&lt;p>而且上述做法在&lt;span style='color:yellow;font-size:16px;'>Child 生出後，立刻執行execlp()作其他Task時，更加顯得無用 unnecessary(不適合，因為沒有共通的東西，卻要Copy不用的東西給child)&lt;/span>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;span style='color:yellow;font-size:16px;'>Fork() with copy-on-write&lt;/span>&lt;/p>
&lt;p>定義：當Parent Process 生出child process 之初，&lt;span style='color:yellow;font-size:16px;'>OS會讓child共享parent process之memory(frames)空間&lt;/span>，如此，&lt;span style='color:yellow;font-size:16px;'>無須配置給Child process New Frames 且也不用Copy Parent 內容給Child，因此可降低頁框需求量及加速Speed Up process Creation&lt;/span>。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/owOY29K.png"
loading="lazy"
alt="image-20230409161126347"
>&lt;/p>
&lt;p>但是，&lt;span style='color:yellow;font-size:16px;'>任何一方改變了某Page內容，則另一方會受到影響(此為risk)，所以引入&lt;/span>&lt;span style='color:yellow;font-size:16px;'>Copy-on-write技術，即eg. 若Child Process 想要更改某Page內容(eg. Stack內容)，則OS會配置一個New Frame給Child，且Copy Page內容到new Frame中，且修改Child的page Table 指向 New Frame，供Child 使用/修改&lt;/span>，如此，則不會影響Parent&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/Exzz7a8.png"
loading="lazy"
alt="image-20230409161809333"
>&lt;/p>
&lt;p>因此那些有Modified可能的Pages，須標示Copy-on-write，而有些不會Modified 的Page(eg: read-only code/data)則不須標示，&lt;span style='color:yellow;font-size:16px;'>則可共享&lt;/span>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;span style='color:yellow;font-size:16px;'>Vfork() &lt;code>(virtual memory fork())&lt;/code>&lt;/span>&lt;/p>
&lt;p>定義：Parent 生出Child 之初，&lt;span style='color:yellow;font-size:16px;'>也是讓Child共享parent相同的frames，但是，它&lt;u>並未提供Copy-on-weite技術&lt;/u>&lt;/span>，所以，&lt;span style='color:yellow;font-size:16px;'>任何一方改變了某Page內容，則另一方會受到影響&lt;/span>，故務必小心使用。&lt;span style='color:yellow;font-size:16px;'>這個東西特別適合用在：當生出Child 後，Child立刻執行execlp()去作其他task時，Vfork()非常有效率。例如：Command Interpreter製作(eg：Unix shell)&lt;/span>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="tlb-reach">TLB Reach&lt;/h2>
&lt;p>定義：經由TLB Mapping 所能存取到的Memory Area大小，&lt;span style='color:yellow;font-size:16px;'>即TLB Reach  = TLB Entry數目 * Page Size&lt;/span>&lt;/p>
&lt;p>eg. TLB有8個Entry，且Page Szie= 16 KB，所以TLB reach = 8 * 16kb = 128 kb&lt;/p>
&lt;p>&lt;span style='color:yellow;font-size:16px;'>Note：希望 TLB Reach 越大越好&lt;/span>&lt;/p>
&lt;p>Q：如何加大TLB Reach?&lt;/p>
&lt;h3 id="方法一-2">方法一&lt;/h3>
&lt;p>提高TLB Entry數目&lt;/p>
&lt;p>&lt;span style='color:yellow;font-size:16px;'>優點：&lt;/span>&lt;/p>
&lt;ol>
&lt;li>&lt;span style='color:yellow;font-size:16px;'>TLB Reach 變大&lt;/span>&lt;/li>
&lt;li>&lt;span style='color:yellow;font-size:16px;'>連帶TLB Hit Ratio也較高&lt;/span>&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>TLB (Translation Lookaside Buffer) Hit Ratio 是計算虛擬記憶體管理中 TLB 命中率的一個指標。TLB 是處理器中一種硬體快取，用於加速虛擬記憶體的地址轉換過程。當程式存取一個虛擬記憶體頁面時，處理器會先在 TLB 中查找是否已經有該頁面的轉換資料。如果有，就可以直接進行地址轉換，稱為 TLB 命中。如果沒有，則需要從主記憶體中讀取轉換資料，並且更新 TLB 中的內容，稱為 TLB 錯誤。&lt;/p>
&lt;p>TLB Hit Ratio 就是 TLB 命中率，即在虛擬記憶體管理中，TLB 命中的次數與總存取次數之比。這個指標反映了 TLB 的效率，也可以用來評估虛擬記憶體子系統的效能。一般來說，高的 TLB Hit Ratio 表示處理器能夠更快速地完成地址轉換，因為有更多的轉換資料被快取在 TLB 中。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;span style='color:yellow;font-size:16px;'>缺點：&lt;/span>&lt;/p>
&lt;ol>
&lt;li>&lt;span style='color:yellow;font-size:16px;'>成本貴(高)&lt;/span>&lt;/li>
&lt;li>&lt;span style='color:yellow;font-size:16px;'>有時TLB Entry數仍不足以涵蓋Process &lt;/span>&lt;/li>
&lt;/ol>
&lt;h3 id="方法二-2">方法二&lt;/h3>
&lt;p>加大Page Size&lt;/p>
&lt;p>&lt;span style='color:yellow;font-size:16px;'>優點：&lt;/span>&lt;/p>
&lt;ol>
&lt;li>&lt;span style='color:yellow;font-size:16px;'>加大TLB Reach Cost可接受&lt;/span>&lt;/li>
&lt;/ol>
&lt;p>&lt;span style='color:yellow;font-size:16px;'>缺點：&lt;/span>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;span style='color:yellow;font-size:16px;'>內部碎裂會很嚴重&lt;/span>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>解決方法：現代很多硬體均提供一些不同大小的Page&lt;span style='color:yellow;font-size:16px;'>(Multiple Page Size)&lt;/span>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>eg . 提供乙組Page Size (4 KB, 2 MB)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;span style='color:yellow;font-size:16px;'>因此TLB 紀錄項目多增加一個Page(Frame) Size&lt;/span>&lt;/p>
&lt;/li>
&lt;li>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Page No&lt;/th>
&lt;th>Frame No&lt;/th>
&lt;th>&lt;span style='color:yellow;font-size:16px;'>Page(Frame) Size&lt;/span>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>此外，TLB管理以前是Hardware管理，&lt;span style='color:yellow;font-size:16px;'>現在委由OS管理，這樣帶來的好處遠大於效能下降的壞處&lt;/span>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>[053 1:29:23]&lt;/p>
&lt;h1 id="ch9-disk-management">Ch9 Disk Management&lt;/h1>
&lt;blockquote>
&lt;p>Disk System 組成即大小計算 ☆☆&lt;/p>
&lt;p>Disk Access Time 組成 計算 ☆☆☆☆&lt;/p>
&lt;p>Disk Free Space Management(4種) &lt;code>很少考&lt;/code>&lt;/p>
&lt;p>File Allocatation Method(3種) ☆☆☆☆☆&lt;/p>
&lt;p>Disk Scheduling Algo (6種) ☆☆☆☆☆&lt;/p>
&lt;p>其他名詞 &lt;code>考個一兩次吧&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>Formatting ☆&lt;/p>
&lt;p>Raw-I/O x&lt;/p>
&lt;p>Bootstrap loader, Boot Disk ☆☆&lt;/p>
&lt;p>Bad Sectors 處理方法(3種) ☆☆☆&lt;/p>
&lt;p>Swap Space Mangement (2方法) ☆&lt;/p>
&lt;p>RAID 介紹 ☆☆☆☆&lt;/p>
&lt;/blockquote>
&lt;/blockquote>
&lt;p>​&lt;/p>
&lt;h2 id="disk-system組成">Disk System組成&lt;/h2>
&lt;p>定義：Disk System 由多片Disks組成，&lt;/p>
&lt;ul>
&lt;li>每片Disk通常&lt;u>雙面(Double-side)&lt;/u>，可存Data&lt;/li>
&lt;li>每一面(surface)劃分為多個同心圓軌道，叫做磁軌(Track)&lt;/li>
&lt;li>每條Track由多個Sector(磁區)所組成&lt;/li>
&lt;li>不同面之相同Track No組成之Track 集合，叫做Cylinder(磁柱)&lt;/li>
&lt;/ul>
&lt;p>圖示：&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/5CCRoN2.png"
loading="lazy"
alt="image-20230409175639147"
>&lt;/p>
&lt;p>例：Disk System有10片Disk&lt;/p>
&lt;ul>
&lt;li>每片皆雙面可存&lt;/li>
&lt;li>每面有2048條Tracks&lt;/li>
&lt;li>每條Track有4096個Sectors&lt;/li>
&lt;li>每個Sector可存16KB Data&lt;/li>
&lt;/ul>
&lt;p>求Disk System Size?&lt;/p>
&lt;p>Ans.&lt;/p>
&lt;p>10 * 2 * 2048 * 4096 * 16KB = 20 * 2&lt;sup>11&lt;/sup> * 2 &lt;sup>12&lt;/sup> * 2 &lt;sup>14&lt;/sup> Bytes&lt;/p>
&lt;p>= 10 * 2&lt;sup>38&lt;/sup> bytes = 2.5 * 2 &lt;sup>40&lt;/sup> bytes = 2.5 TB&lt;/p>
&lt;h2 id="disk-access-time">Disk Access Time&lt;/h2>
&lt;p>定義：Disk Access Time 由下列3個時間加總而得&lt;/p>
&lt;ol>
&lt;li>&lt;span style='color:yellow;font-size:16px;'>Seek Time&lt;/span>&lt;/li>
&lt;li>&lt;span style='color:yellow;font-size:16px;'>Latency Time (or Rotation&lt;code>旋轉&lt;/code> Time)&lt;/span>&lt;/li>
&lt;li>&lt;span style='color:yellow;font-size:16px;'>Transfer Time&lt;/span>&lt;/li>
&lt;/ol>
&lt;p>分述如下：&lt;/p>
&lt;ol>
&lt;li>Seek Time：&lt;span style='color:yellow;font-size:16px;'>將Head(磁頭)移到欲存取之Track上方&lt;/span>所花的時間&lt;/li>
&lt;li>&lt;span style='color:yellow;font-size:16px;'>Latency Time：將欲存取之Sector 轉到Head 下方所花的時間&lt;/span>&lt;/li>
&lt;li>Transfer Time：&lt;span style='color:yellow;font-size:16px;'> Data在Disk 與 Memory 之間的傳輸時間&lt;/span>，與傳輸量成正比&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/GpPfT5M.png"
loading="lazy"
alt="image-20230409225106416"
>&lt;/p>
&lt;p>此外上述3者通常&lt;span style='color:yellow;font-size:16px;'>以 Seek time 佔比較大&lt;/span>&lt;/p>
&lt;p>計算：&lt;/p>
&lt;p>例1：&lt;/p>
&lt;p>Disk 轉速 7200 rpm，求Avg Latency (rotation) Time?&lt;/p>
&lt;p>Ans.&lt;/p>
&lt;p>7200 rpm = 一分鐘轉7200次 = 一秒鐘120次 = 轉一圈1/120 秒&lt;/p>
&lt;p>平均Rotation Time = 1/2 * 1/120 = 1/240 秒&lt;/p>
&lt;p>例2：&lt;/p>
&lt;p>Disk System 有3片Disks，雙面可存&lt;/p>
&lt;ul>
&lt;li>每面有1024條Tracks&lt;/li>
&lt;li>每條Track有40%個Sectors&lt;/li>
&lt;li>每個Sector可存32KB&lt;/li>
&lt;li>轉速6000 rpm&lt;/li>
&lt;/ul>
&lt;p>&lt;span style='color:yellow;font-size:16px;'>求Transfer Rate(即每秒可傳輸多大量Data)&lt;/span>&lt;/p>
&lt;p>Ans.&lt;/p>
&lt;p>6000 Rpm = 1秒可轉 6000/60 = 100圈&lt;/p>
&lt;p>&lt;span style='color:yellow;font-size:16px;'>每轉一圈可傳輸一個Cylinder容量(多面時)&lt;/span>&lt;/p>
&lt;p>&lt;span style='color:yellow;font-size:16px;'>因為一條Track容量 = 4096 * 32 Kb&lt;/span>&lt;/p>
&lt;p>&lt;span style='color:yellow;font-size:16px;'>一條Cylinder容量 = 6條Track * 4096 * 32KB&lt;/span>&lt;/p>
&lt;p>= 6 * 128 MB&lt;/p>
&lt;p>&lt;span style='color:yellow;font-size:16px;'>Transfer Rate = 100 * 6 * 128 MB/sec &lt;/span>&lt;/p>
&lt;p>= 600 * 128 Mb/Sec&lt;/p>
&lt;p>&lt;span style='color:yellow;font-size:16px;'>&lt;/span>&lt;/p>
&lt;p>&lt;u>&lt;/u>&lt;/p>
&lt;p>&lt;span style='color:yellow;font-size:16px;'>&lt;/span>&lt;/p>
&lt;p>&lt;u>&lt;/u>&lt;/p>
&lt;p>&lt;u>&lt;/u>&lt;/p>
&lt;p>&lt;u>&lt;/u>&lt;/p></description></item><item><title>資料結構筆記</title><link>https://hoxtonhsu.com/p/%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B%E7%AD%86%E8%A8%98/</link><pubDate>Sat, 08 Oct 2022 03:02:43 +0800</pubDate><guid>https://hoxtonhsu.com/p/%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B%E7%AD%86%E8%A8%98/</guid><description>&lt;img src="https://i.imgur.com/NiqSvey.png" alt="Featured image of post 資料結構筆記" />&lt;p>[ToC]&lt;/p>
&lt;h1 id="學習路線">學習路線&lt;/h1>
&lt;h2 id="ch1algorithm-recursion-and-performance-analysisspace--time">Ch1Algorithm, Recursion and Performance Analysis(space + Time)&lt;/h2>
&lt;h2 id="ch3-stack--queue">Ch3 Stack &amp;amp; Queue&lt;/h2>
&lt;h2 id="ch5-tree-and-binary-tree">Ch5 Tree And Binary Tree&lt;/h2>
&lt;h2 id="ch9-advanced-trees">Ch9 Advanced Trees&lt;/h2>
&lt;h2 id="ch7-search-and-usortingu">Ch7 Search and &lt;u>Sorting&lt;/u>&lt;/h2>
&lt;h2 id="ch8-hasing">CH8 Hasing&lt;/h2>
&lt;h2 id="ch6-graph">Ch6 Graph&lt;/h2>
&lt;h2 id="ch2ch4-arraylinked-list">Ch2/Ch4 Array&amp;amp;Linked List&lt;/h2>
&lt;h1 id="ch1-algorith-recursion-and-performance-analysis">Ch1 Algorith, Recursion and Performance Analysis&lt;/h1>
&lt;blockquote>
&lt;p>Algo定義(5個Criteria)&lt;/p>
&lt;p>Recursion(遞迴)☆☆☆☆☆&lt;/p>
&lt;blockquote>
&lt;p>定義&lt;/p>
&lt;p>種類&lt;/p>
&lt;p>與 Non-Recursion比較考型及來源&lt;/p>
&lt;/blockquote>
&lt;p>效能分析&lt;/p>
&lt;blockquote>
&lt;p>Space(較少考)&lt;/p>
&lt;p>Time(較常考)☆☆☆☆☆&lt;/p>
&lt;/blockquote>
&lt;/blockquote>
&lt;h2 id="algorithm演算法">Algorithm(演算法)&lt;/h2>
&lt;ul>
&lt;li>定義：為了解決特定問題之有限個敘述／步驟／指令所構成之集合，且必須滿足下列&lt;strong>５&lt;/strong>個Criteria：&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>Input：輸入的資料量&amp;gt;=0個即可&lt;/li>
&lt;li>Output：至少要有&amp;gt;=1個輸出量&lt;/li>
&lt;li>Definiteness(明確性)：每個敘述／步驟／指令必須是Clear且unambiauous(不可混淆不清)。&lt;code>3之要求在於Algo之寫作格式無一致標準之規範 &lt;/code>&lt;/li>
&lt;li>Finiteness(有限性)：必須在執行／追蹤有限個步驟後，必能夠終止&lt;/li>
&lt;li>Effectiveness(有效性)：人可以用紙和筆追蹤／執行每一個步驟，即每一個Step is baisc enough to be carried。&lt;code>當log完成，你如何確定它是正確的&lt;/code>&lt;/li>
&lt;/ol>
&lt;h2 id="recurtion遞迴">Recurtion(遞迴)&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>定義：(以Direct Recursion為例)，Algo/program中含有==&lt;strong>self-calling(自我呼叫)&lt;/strong>==敘述存在者，稱之遞迴&lt;/p>
&lt;/li>
&lt;li>
&lt;p>種類：&lt;/p>
&lt;ol>
&lt;li>Direct：直接遞迴&lt;/li>
&lt;li>Indirect：間接遞迴&lt;/li>
&lt;li>Tail：尾端遞迴&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>分述如下&lt;/p>
&lt;ol>
&lt;li>
&lt;p>直接遞迴：方法中直接呼叫自己&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="n">function&lt;/span> &lt;span class="nf">A&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="c1">// do something
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(...)&lt;/span> &lt;span class="n">then&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">//重複自己
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">else&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="c1">// do something
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>間接遞迴：多個Module之間彼此形成Calling Cycle，&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="n">function&lt;/span> &lt;span class="nf">A&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="c1">//something
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Call&lt;/span> &lt;span class="n">B&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">//相互呼叫
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//something
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="n">function&lt;/span> &lt;span class="nf">B&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="c1">//something
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Call&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">//相互呼叫
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//something
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>尾端遞迴：是Direct Recustion 之一種，recursive call發生在程式即將結束之前一行&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="n">function&lt;/span> &lt;span class="nf">A&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="c1">//do something
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">xxx&lt;/span>&lt;span class="p">){}&lt;/span> &lt;span class="n">then&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">//程式的最後一行 優點是Complier或工程師方便改寫成非遞迴的形式(降低時間複雜度
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>任何problem之解決，必定存在兩種形式之Algo&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>遞迴&lt;/li>
&lt;li>非遞迴(Interation)&lt;/li>
&lt;/ol>
&lt;p>eq. 求n! 求費氏數列&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/dIbSOTs.png"
loading="lazy"
alt="image-20230212130259106"
>&lt;/p>
&lt;p>比較圖如下&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Recursion&lt;/th>
&lt;th>Non-Recursion&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>程式碼較為精簡&lt;/strong>&lt;/td>
&lt;td>冗長&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>較少，或沒有使用區域變數&lt;/td>
&lt;td>使用到區域變數來保存中間值，Loop控制等等&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>程式碼占的儲存空間&lt;/strong>比較少&lt;/td>
&lt;td>程式碼占用的儲存空間較多&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>表達力較強(powerful)&lt;/td>
&lt;td>表達力較弱(weak)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>==&lt;strong>執行的時間較久，較沒效率&lt;/strong>==&lt;/td>
&lt;td>執行時間較短，較有效率&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>==&lt;strong>需要額外的stack space支持&lt;/strong>==&lt;/td>
&lt;td>不需要這東西&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>補充&lt;/li>
&lt;/ul>
&lt;p>在complier或程式語言的課程裡面，會&lt;strong>討論如何處理recursion?&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>當遇到Recursive call的時候，&lt;/p>
&lt;ol>
&lt;li>必須先保存當時執行狀況，push這些東西&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;ol>
&lt;li>參數值&lt;/li>
&lt;li>區域/占存 變數值&lt;/li>
&lt;li>返回位址(return address)&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>到System &lt;strong>stack&lt;/strong>&lt;/p>
&lt;ol start="2">
&lt;li>Jump to 程式開端執行&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>若遇到程式結束(END)敘述時&lt;code>遞迴條件不符合，繼續往下執行，遇到程式的END，要判斷是某一次的遞迴結束，還是整個都結束了。判斷的依據是查看Stack區是否為空，若為空則代表只是一次的遞迴結束，若Stack為空，則代表整個程式結束&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">stack&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">empty&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">then&lt;/span> &lt;span class="err">整個結束&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="n">pop&lt;/span> &lt;span class="n">stack&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//取出當時保存的參數或區域變數以及返回位置(return address) then go to &amp;#34;return address&amp;#34;執行
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//所謂的return address(返回位址，就是指遞迴結束完後，下一個會執行的程式碼)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="n">function&lt;/span> &lt;span class="nf">A&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">a&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">xxx&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">then&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//recursive call
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">else&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="c1">//do something
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="n">x&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="err">這就是返回位址&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/7uzIEQg.png"
loading="lazy"
alt="image-20230212135153292"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/7JDHEkJ.png"
loading="lazy"
alt="image-20230212135446234"
>&lt;/p>
&lt;h3 id="考型及來源">考型及來源&lt;/h3>
&lt;p>考型：&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>給一個Probleam，寫下Recursive algo/code&lt;/li>
&lt;li>給Recursive algo/code，要我們追蹤結果 etc&amp;hellip;&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>來源：&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>數學類：階層&lt;/li>
&lt;li>往後章節(二元樹的追蹤、圖形的追蹤、排序的追蹤&amp;hellip;)&lt;/li>
&lt;li>其他&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;ol>
&lt;li>Tower fo Hanoi&lt;/li>
&lt;li>permutation printing&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;/blockquote>
&lt;h4 id="數學類">數學類&lt;/h4>
&lt;ol>
&lt;li>寫下一個非遞迴的求階層方法&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="nf">fac&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>&lt;span class="k">else&lt;/span> &lt;span class="c1">// n&amp;gt;0{
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">S&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;=&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">S&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">S&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">S&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>
&lt;p>寫下一個用遞迴處理的求階程式&lt;/p>
&lt;p>==關鍵點：記下數學遞迴定義式==&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/taUXn8C.png"
loading="lazy"
alt="image-20230212145854185"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="nf">fac&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">fac&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>以2的Code為題目&lt;/p>
&lt;ol>
&lt;li>
&lt;p>求Fac(3)&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/5TgPcuk.png"
loading="lazy"
alt="image-20230212145917501"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>共呼叫Fac函數?次，含Fac(3)這次&lt;code>這影響到了時間複雜度，以及會調用幾次pop&lt;/code>&lt;/p>
&lt;p>4次，&lt;code>Fac(n)共呼叫幾次=n+1次&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>write a recursive algo for sum(n)= 1+2+&amp;hellip;+n, and sum(0)=0;&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/7JkNHxN.png"
loading="lazy"
alt="image-20230212150912005"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="nf">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>Fibonacci Number(費氏數列)&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/T5k9DFx.png"
loading="lazy"
alt="image-20230212151908181"
>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>n&lt;/th>
&lt;th>0&lt;/th>
&lt;th>1&lt;/th>
&lt;th>2&lt;/th>
&lt;th>3&lt;/th>
&lt;th>4&lt;/th>
&lt;th>5&lt;/th>
&lt;th>6&lt;/th>
&lt;th>7&lt;/th>
&lt;th>8&lt;/th>
&lt;th>9&lt;/th>
&lt;th>10&lt;/th>
&lt;th>11&lt;/th>
&lt;th>12&lt;/th>
&lt;th>13&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Fn&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>2&lt;/td>
&lt;td>3&lt;/td>
&lt;td>5&lt;/td>
&lt;td>8&lt;/td>
&lt;td>13&lt;/td>
&lt;td>21&lt;/td>
&lt;td>34&lt;/td>
&lt;td>55&lt;/td>
&lt;td>89&lt;/td>
&lt;td>144&lt;/td>
&lt;td>233&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Q：F98 = ? + ? = ? - ? = ? - ?&lt;/p>
&lt;ol>
&lt;li>F97+F96;&lt;/li>
&lt;li>F99-F97;&lt;/li>
&lt;li>F100-F99;&lt;/li>
&lt;/ol>
&lt;p>Q：不超過500之費氏數列&lt;/p>
&lt;p>​ A. F14 = 377&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Write a recursive algo/code for Fibonacci&lt;/p>
&lt;ol>
&lt;li>遞迴解法&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">int Fib(int n){
if(n==0){ return 0;}
if(n==1){return 1;}
return Fib(n-1)+Fib(n-2);
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>非遞迴解法&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="nf">Fib&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="p">}&lt;/span>&lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="p">}&lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">c&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="n">b&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Fo&lt;/th>
&lt;th>F1&lt;/th>
&lt;th>F2&lt;/th>
&lt;th>F3&lt;/th>
&lt;th>&amp;hellip;&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>a=0&lt;/td>
&lt;td>b=1&lt;/td>
&lt;td>c=a+b&lt;br />a=b&lt;br />b=c&lt;/td>
&lt;td>c=a+b&lt;br />a=b&lt;br />b=c&lt;/td>
&lt;td>&amp;hellip;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>依(1)之code，(i)求出Fib(5)之值(ii)呼叫次數?次(iii)Fib(10)的呼叫次數呢?&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">int Fib(int n){
if(n==0){ return 0;}
if(n==1){return 1;}
return Fib(n-1)+Fib(n-2);
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>ans .&lt;/p>
&lt;p>(i) 5&lt;/p>
&lt;p>(ii)&lt;img src="https://i.imgur.com/9rkgJtk.png"
loading="lazy"
alt="image-20230220000219053"
>&lt;/p>
&lt;p>(iii)&lt;img src="https://i.imgur.com/ed9zsLC.png"
loading="lazy"
alt="image-20230220001353812"
>&lt;/p>
&lt;ol start="4">
&lt;li>
&lt;p>令T&lt;sub>(n)&lt;/sub>代表求Fin(n)時之呼叫次數，即T(0)=T(1)=1次，(i)寫出T(n)之Recursive definition(ii)Based on (i)，求出T(10)之值&lt;/p>
&lt;p>ans . (i) T(n) = T(n-1)+T(n-2)+1 且 T(0) =T(1) = 1;&lt;/p>
&lt;p>​ (ii)&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>0&lt;/th>
&lt;th>1&lt;/th>
&lt;th>2&lt;/th>
&lt;th>3&lt;/th>
&lt;th>4&lt;/th>
&lt;th>5&lt;/th>
&lt;th>6&lt;/th>
&lt;th>7&lt;/th>
&lt;th>8&lt;/th>
&lt;th>9&lt;/th>
&lt;th>10&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>3&lt;/td>
&lt;td>5&lt;/td>
&lt;td>9&lt;/td>
&lt;td>15&lt;/td>
&lt;td>25&lt;/td>
&lt;td>41&lt;/td>
&lt;td>67&lt;/td>
&lt;td>109&lt;/td>
&lt;td>177&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>求Fib(5)時，則Fib(0),Fib(1),Fib(2),Fib(3),Fib(4),Fib(5),分別被呼叫?次&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Fib(n)&lt;/th>
&lt;th>0&lt;/th>
&lt;th>1&lt;/th>
&lt;th>2&lt;/th>
&lt;th>3&lt;/th>
&lt;th>4&lt;/th>
&lt;th>5&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>呼叫幾次&lt;/td>
&lt;td>3&lt;/td>
&lt;td>5&lt;/td>
&lt;td>3&lt;/td>
&lt;td>2&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>5只會自己生自己，4只會由5產生，3會由4跟5產生(1+1)，2則是由3跟4產生(2+1)，1會由2跟3產生(3+5)，但0只會由2產生，不會由0產生。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>接續上題，那Fib(10)呢?&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Fin(n)&lt;/th>
&lt;th>0&lt;/th>
&lt;th>1&lt;/th>
&lt;th>2&lt;/th>
&lt;th>3&lt;/th>
&lt;th>4&lt;/th>
&lt;th>5&lt;/th>
&lt;th>6&lt;/th>
&lt;th>7&lt;/th>
&lt;th>8&lt;/th>
&lt;th>9&lt;/th>
&lt;th>10&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>呼叫幾次&lt;/td>
&lt;td>34&lt;/td>
&lt;td>55&lt;/td>
&lt;td>34&lt;/td>
&lt;td>21&lt;/td>
&lt;td>13&lt;/td>
&lt;td>8&lt;/td>
&lt;td>5&lt;/td>
&lt;td>3&lt;/td>
&lt;td>2&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>令T(n)代表求Fib(n)時之加法次數&lt;/p>
&lt;p>(i)求出T(n)之recursive definition&lt;/p>
&lt;p>(ii)求T(5)之值 based on(i)&lt;/p>
&lt;p>ans&lt;/p>
&lt;p>(i) T(n)=T(n-1)+T(n-2)+1，且T(0)=0,T(1)=0&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Fib(n)&lt;/th>
&lt;th>0&lt;/th>
&lt;th>1&lt;/th>
&lt;th>2&lt;/th>
&lt;th>3&lt;/th>
&lt;th>4&lt;/th>
&lt;th>5&lt;/th>
&lt;th>6&lt;/th>
&lt;th>7&lt;/th>
&lt;th>8&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>呼叫幾次&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>2&lt;/td>
&lt;td>4&lt;/td>
&lt;td>7&lt;/td>
&lt;td>12&lt;/td>
&lt;td>20&lt;/td>
&lt;td>33&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>code如下，求F(5)之值&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">int Fib(int n){
if(n==0 || n==1){return 1}
return F(n-1)+F(n-2)
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Fib(n)&lt;/th>
&lt;th>0&lt;/th>
&lt;th>1&lt;/th>
&lt;th>2&lt;/th>
&lt;th>3&lt;/th>
&lt;th>4&lt;/th>
&lt;th>5&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>值&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>2&lt;/td>
&lt;td>3&lt;/td>
&lt;td>5&lt;/td>
&lt;td>8&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>code如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">int Fib(int n){
if(n&amp;lt;1){return 0}
if(n&amp;lt;3){return 1}
return Fib(n-1)+Fin(n-2)
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>(i)求Fib(5)之值&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Fib(n)&lt;/th>
&lt;th>0&lt;/th>
&lt;th>1&lt;/th>
&lt;th>2&lt;/th>
&lt;th>3&lt;/th>
&lt;th>4&lt;/th>
&lt;th>5&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>值&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>2&lt;/td>
&lt;td>3&lt;/td>
&lt;td>5&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>(ii)呼叫Fib函數?次(含Fib(5))&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/cR8M7qZ.png"
loading="lazy"
alt="image-20230220214503733"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Binomical coe(二項式係數)&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>​&lt;/p>
&lt;p>$$
{C_m}^n =(\underset{m}{\overset{n}{{}}})=\frac{n!}{m!(n-m)!}
$$&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>​&lt;/p>
&lt;p>$$
(i)write a recursive algo / code 求 (\underset{m}{\overset{n}{{}}})之值
$$&lt;/p>
&lt;p>ans. 關鍵，==&lt;strong>必背&lt;/strong>==&lt;/p>
&lt;p>$$
(\underset{m}{\overset{n}{{}}})=&lt;br>
\begin{cases}
&amp;amp; 1, \text{ if } (n = m \text{ or } m = 0) \&lt;br>
&amp;amp; (\underset{m}{\overset{n-1}{{}}})+(\underset{m-1}{\overset{n-1}{{}}})
\end{cases}
$$&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">int Bin(int n , int m){
if(n==m || m==0){return 1}
else{
return Bin(n-1,m)+Bin(n-1,m-1)
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>(ii) based on (i) code 求Bin(5,3)之值及呼叫次數&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/8VKJjX9.png"
loading="lazy"
alt="image-20230220232145991"
>&lt;/p>
&lt;p>ans 10 ,19次&lt;/p>
&lt;p>Note ：計算時有些撇步&lt;/p>
&lt;p>$$
(\underset{3}{\overset{5}{{}}}) = \frac{5\times4\times3}{1\times2\times3}=10
$$&lt;/p>
&lt;p>$$
(\underset{4}{\overset{8}{{}}}) = \frac{8\times7\times6\times5}{1\times2\times3\times4}=70
$$&lt;/p>
&lt;ol start="12">
&lt;li>GCD(A,B) 求A,B兩數之最大公因數，寫出recursive algo/code&lt;/li>
&lt;/ol>
&lt;p>==&lt;strong>☆☆☆☆☆☆☆☆☆要背☆☆☆☆☆☆☆☆☆☆☆☆&lt;/strong>==&lt;/p>
&lt;p>$$
GCD(A,B)=\ \begin{cases}
&amp;amp; B, \text{ if } (A modsB)=0 \&lt;br>
&amp;amp;GCD(B,AmodsB), other wise
\end{cases}
$$&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">int GCD(int A,int B){
if (A%B==0) {return B}
else return GCD(B,A%B)
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>依上述code，試求(1)求GCD(18,33)之值(2)呼叫GCD?次&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/JkzUfwK.png"
loading="lazy"
alt="image-20230221000814907"
>&lt;/p>
&lt;ol start="13">
&lt;li>Ackerman&amp;rsquo;s Function &lt;code>一坨大便，幹破你娘&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>$$
A(m,n) = \begin{cases}
n+1, &amp;amp; \text{if } m=0\&lt;br>
A(m-1,1), &amp;amp; \text{if } n=0\&lt;br>
A(m-1,A(m,n-1)), &amp;amp; \text{otherwise}
\end{cases}
$$&lt;/p>
&lt;p>(i) A(2,2)=?&lt;/p>
&lt;p>ans.&lt;/p>
&lt;p>A(2, 2) =7&lt;/p>
&lt;p>(ii) A(10,10)
ans.&lt;/p>
&lt;p>A(10, 10) = A(9, A(10, 9))
= A(9, A(9, A(10, 8)))
= A(9, A(9, A(9, A(10, 7))))
= A(9, A(9, A(9, A(9, A(10, 6)))))
= A(9, A(9, A(9, A(9, A(9, A(10, 5))))))
= A(9, A(9, A(9, A(9, A(9, A(9, A(10, 4)))))))
= A(9, A(9, A(9, A(9, A(9, A(9, A(9, A(10, 3))))))))
= A(9, A(9, A(9, A(9, A(9, A(9, A(9, A(9, A(10, 2)))))))))
= A(9, A(9, A(9, A(9, A(9, A(9, A(9, A(9, A(9, A(10, 1))))))))))
= A(9, A(9, A(9, A(9, A(9, A(9, A(9, A(9, A(9, A(9, 1))))))))))
≈ 2.1216 x 10^19728&lt;/p>
&lt;p>(iii)A(1,3)&lt;/p>
&lt;p>A(1, 3) = A(0, A(1, 2))
= A(0, A(0, A(1, 1)))
= A(0, A(0, A(0, A(1, 0))))
= A(0, A(0, A(0, A(0, 1))))
= A(0, A(0, A(0, 1)))
= A(0, A(0, 2))
= A(0, 3)
= 4&lt;/p>
&lt;p>&lt;strong>常考排行&lt;/strong>&lt;/p>
&lt;p>A(2,2) = 7&lt;/p>
&lt;p>A(2,1) = 5&lt;/p>
&lt;p>A(1,2) = 4&lt;/p>
&lt;p>A(2,3)= 9&lt;/p>
&lt;ol start="14">
&lt;li>求x&lt;sup>n&lt;/sup>，其中x,n是integer，且n ≧ 0 , write a recursive algo/ code&lt;/li>
&lt;/ol>
&lt;p>ans&lt;/p>
&lt;p>$$
x^n=
\begin{cases}
1&amp;amp;\text {if}(n==0) \
x \times x^{n-1}&amp;amp;\text {if} (n&amp;gt;0)
\end{cases}
$$&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">int exp(int x,int n){
if (n==0){return 1}
else{
return Exp(x,n-1)*x
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="15">
&lt;li>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">f&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="n">f&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">x&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>(i) 求foo(2,5)值&lt;/p>
&lt;p>​ &lt;img src="https://i.imgur.com/GvgDjdH.png"
loading="lazy"
alt="image-20230223220045068"
>&lt;/p>
&lt;p>(ii)求foo(x,n)之功能&lt;/p>
&lt;p>​ 求x&lt;sup>n&lt;/sup>&lt;/p>
&lt;p>(iii)求foo(x,n)之Time Complexity&lt;/p>
&lt;p>​ O(log&lt;sub>n&lt;/sub>)&lt;/p>
&lt;h4 id="河內塔towers-of-hanai">河內塔(Towers of Hanai)&lt;/h4>
&lt;p>&lt;img src="https://i.imgur.com/dj1RFAh.png"
loading="lazy"
alt="image-20230223232944377"
>&lt;/p>
&lt;p>程式如下：&lt;/p>
&lt;p>Hanoi(n,x,y,z);&lt;/p>
&lt;p>n：盤數&lt;/p>
&lt;p>x：來源&lt;/p>
&lt;p>y：占存地&lt;/p>
&lt;p>z：目的地&lt;/p>
&lt;p>Step1 Hanoi(n-1,A,C,B);&lt;/p>
&lt;p>Step2 Hanoi(1,A,B,C);&lt;/p>
&lt;p>Step3 Hanoi(n-1,B,A,C);&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="kt">void&lt;/span> &lt;span class="nf">Hanoi&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">Char&lt;/span> &lt;span class="n">B&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Char&lt;/span> &lt;span class="n">C&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;move disk %d from %c to %c &lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">C&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>&lt;span class="k">else&lt;/span> &lt;span class="c1">//n&amp;gt;1{
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Hanoi&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">C&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;move disk %d from %c &lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">C&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">Hanoi&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">C&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="permutation列印">Permutation列印&lt;/h4>
&lt;p>將[a,b,c]以不同的排列組合印出來&lt;/p>
&lt;p>如&lt;/p>
&lt;p>abc&lt;/p>
&lt;p>acb&lt;/p>
&lt;p>bac&lt;/p>
&lt;p>bca&lt;/p>
&lt;p>cba&lt;/p>
&lt;p>cab&lt;/p>
&lt;p>有3!=6種寫法&lt;/p>
&lt;p>以遞迴的概念來理解&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/VJL10za.png"
loading="lazy"
alt="image-20230308214715912"
>&lt;/p>
&lt;p>原始碼的部分&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="kt">void&lt;/span> &lt;span class="nf">perm&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="n">list&lt;/span>&lt;span class="p">[],&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="c1">//產生list[i]~list[n]之排列組合
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//i≦n
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">){&lt;/span> &lt;span class="c1">//代表遞迴中止
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">&amp;lt;=&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]);&lt;/span> &lt;span class="c1">// for each完後印出當時list的內容
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">&amp;lt;=&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">swap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]);&lt;/span> &lt;span class="c1">// list[j]做頭
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">perm&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//接(i+1)~(n)之perm
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">swap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="c1">// 還原成原本List的內容
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>實際演練&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="n">list&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">};&lt;/span>
&lt;span class="n">Perm&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/Eiyo3mb.jpg"
loading="lazy"
alt="1914A818-E923-4D51-854B-57E4AB2A9C3F"
>&lt;/p>
&lt;h2 id="performance-analysis效能分析">Performance Analysis(效能分析)&lt;/h2>
&lt;p>Algo/code之效能分析，主要分析兩點&lt;/p>
&lt;ol>
&lt;li>Space&lt;/li>
&lt;li>Time&lt;/li>
&lt;/ol>
&lt;h2 id="space空間需求分析">Space(空間)需求分析&lt;/h2>
&lt;p>定義：令SP(P)代表Algo/Code P 之空間需求，則SP(P)= &lt;strong>Fixed&lt;/strong> Space requirement + &lt;strong>Variable&lt;/strong> Space Requirement&lt;/p>
&lt;p>固定(Fixed)空間需求= Instruction (or Code) Space &lt;code>意即你寫了幾行的程式&lt;/code>+變數+常數空間 =&lt;strong>C&lt;/strong>(mean Constant)&lt;/p>
&lt;p>變動(Varialbe)空間需求=&lt;/p>
&lt;p>主要有兩個來源&lt;/p>
&lt;ol>
&lt;li>若參數為結構型態(Array, Struct)且&lt;strong>採用Call-By-Value參數傳遞方式&lt;/strong>(若是用Call-By-Address則也不是變動空間，因為只收一個Address的起始位址而已)&lt;/li>
&lt;li>遞迴(recursion)所需之stack space (堆疊空間)&lt;/li>
&lt;/ol>
&lt;p>因此主要的分析是在變動空間需求這邊&lt;/p>
&lt;p>SP(P)= C + SP(i)&lt;/p>
&lt;p>範例&lt;/p>
&lt;p>求SP(i)=?&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="n">rsum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">floot&lt;/span> &lt;span class="n">list&lt;/span>&lt;span class="p">[],&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">!=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">rsum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">list&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 此外，假設 floot 佔4 bytes, int佔2bytes pointr(address)佔2bytes, List[]採用Call-by-address傳遞
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Ans.SP(i)= Stack Space for recursion&lt;/p>
&lt;p>如何計算?&lt;/p>
&lt;ul>
&lt;li>
&lt;p>每發生一次遞迴的呼叫(recusive call)，我們需要將&lt;/p>
&lt;ul>
&lt;li>
&lt;p>參數值 &lt;code>list[] 佔2byte,因為是call by address。n 佔2bytes&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>區域變數值&lt;code>無&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Return Address&lt;code>一定有，題目說是2Byte&lt;/code>&lt;/p>
&lt;p>&lt;strong>Push 6 byte per recursive call&lt;/strong>&lt;/p>
&lt;p>又共發生&lt;strong>n&lt;/strong>次recursive call(不含rsum(list,n))&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>因此Sp(i)= 6n bytes&lt;/p>
&lt;h2 id="time時間需求分析">Time(時間)需求分析&lt;/h2>
&lt;p>定義：令T(P)代表Algo,code P之時間需求，則T(P)=Development time(開發時間) + Execution Time&lt;/p>
&lt;p>只注重/討論 Execution Time分析in DS/Algo課程&lt;/p>
&lt;p>Execution Time之評量有兩個方法&lt;/p>
&lt;ol>
&lt;li>Measurement(實際量度)&lt;/li>
&lt;li>&lt;strong>Analysis&lt;/strong>(分析、預估)\&lt;/li>
&lt;/ol>
&lt;p>本課程是採用Analysis方式，Analysis是以Algo/Code的指令執行總次數，作為分析Time之基礎&lt;/p>
&lt;p>範例1. 不考慮指令之難易度&lt;/p>
&lt;p>eq. 整數除法 a/b，浮點數除法 a/b視為一樣&lt;/p>
&lt;p>原始code如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="err">≦&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Then, 宣告一個Global變數，Count=0，在適當處加入Count++之敘述&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="err">≦&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">count&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//用來統計for做幾次
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">count&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="c1">//統計 a=a+b做幾次
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="n">count&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">// for最後失敗的那一次，跳出for迴圈，實際上還是有做，因此要補上
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">conut&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//用來統計下面的return
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>T(P)= 指令執行次數之統計= 2n+1+1(每行被執行了幾次)=2n+2次&lt;/p>
&lt;p>範例2. 考慮指令之難易程度&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Source Code&lt;/th>
&lt;th>S/E&lt;/th>
&lt;th>Frequency&lt;/th>
&lt;th>Total&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>for(i=1;i≦n;i++)&lt;/td>
&lt;td>4&lt;/td>
&lt;td>n+1&lt;/td>
&lt;td>4n+4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>{a=a+b}&lt;/td>
&lt;td>2&lt;/td>
&lt;td>n&lt;/td>
&lt;td>2n&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>return a&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>6n+5&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>利用S/E (Steps per Execution&lt;code>每執行一次要花幾步，開心要怎麼定就怎麼定&lt;/code>)區別指令難易程度 S/E高，代表較難&lt;/p>
&lt;h2 id="研究所的time分析考型">研究所的Time分析考型&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>計算某行指令執行次數&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Asymptotic&lt;code>漸進式&lt;/code> Notations&lt;code>符號&lt;/code>定義、大小、定理&lt;/p>
&lt;p>(O,Ω,θ,o,w)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Recursive time function遞迴時間函數計算/求解 (eq. Honai Tower:T(n)+2*T(n-1)+1)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>給一遞迴演算法Recursive algo/code寫出Time Function求解&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h1 id="ch5-tree-and-binary-tree-1">Ch5 Tree and Binary Tree&lt;/h1>
&lt;p>&lt;strong>Tree跟BinaryTree不一樣&lt;/strong>&lt;/p>
&lt;h2 id="學習路線-1">學習路線&lt;/h2>
&lt;blockquote>
&lt;p>Tree Def 相關術語&lt;/p>
&lt;p>Tree的表示方法(4種)☆☆&lt;/p>
&lt;p>Binary Tree之 Def 與 &lt;u>Tree不同比較☆☆☆☆☆&lt;/u>&lt;/p>
&lt;p>B.T的3個基本定理☆☆☆☆☆☆&lt;/p>
&lt;p>B.T的種類(4種)☆☆&lt;/p>
&lt;p>B.T的表示方式(2種)☆☆&lt;/p>
&lt;p>B.T Traversal (前中後序及level-order)及其應用☆☆&lt;/p>
&lt;p>&lt;strong>Binary Search Tree(BST)☆☆☆☆☆&lt;/strong>&lt;/p>
&lt;p>&lt;strong>Heap☆☆☆☆☆&lt;/strong>&lt;/p>
&lt;p>Thread Binary Tree(有效利用空鏈結，但非考試重點)☆☆&lt;/p>
&lt;p>Tree化成B.T,Forest化成BT&lt;/p>
&lt;p>N個Node所形成的不同B.T Structures ☆☆☆&lt;/p>
&lt;p>Disjoint Sets定義、表示、應用及Union(i,j) , Find(x)運作&lt;/p>
&lt;/blockquote>
&lt;h2 id="tree樹">Tree(樹)&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>定義：是由&amp;gt;0個Node所構成之集合，&lt;strong>不可以為空&lt;/strong>，滿足以下的條件&lt;/p>
&lt;ol>
&lt;li>至少會有一個特定Node叫做&lt;strong>Root(樹根)&lt;/strong>&lt;/li>
&lt;li>其餘的Node分成T1~Tm個互斥集合，T1~Tm稱之為Root之子樹(subtrees)&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/iwSOSZh.png"
loading="lazy"
alt="image-20230201220412599"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>術語&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Node&amp;rsquo;s Degree&lt;/strong>：該節點的子樹個數&lt;/p>
&lt;p>Ａ之Degree：３&lt;/p>
&lt;p>Ｂ之Degree：２&lt;/p>
&lt;p>Ｅ之Degree：０&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Leaf(樹葉)&lt;/strong>：Degree=0的Node&lt;/p>
&lt;p>例如：E,F,G,H,I,J&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Non-Leaf(非樹葉)：非樹葉的點(Degree&amp;gt;0的點)&lt;/p>
&lt;p>例如：Ａ,B,C,D&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Child與Parent&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Sibling(兄弟)：具有共同父點的Node，即為Sibling&lt;/p>
&lt;p>&lt;strong>eg. B,C,D是sibling&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Ancestors(先祖)：沿著父節點往上延伸的Node即為Ancestors&lt;/p>
&lt;p>eg. E之Ancestors{B,A}&lt;/p>
&lt;p>​ I之Ancestors{D,A}&lt;/p>
&lt;blockquote>
&lt;p>Note：Descendents(後代)&lt;/p>
&lt;p>eg. B之後代={E,F}&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>Node&amp;rsquo;s Level值：各家定義不盡相同，有以下幾種，&lt;strong>差異在於Root是0還是1&lt;/strong>。&lt;/p>
&lt;ul>
&lt;li>定義：
&lt;ol>
&lt;li>Root Level = 1;&lt;/li>
&lt;li>若 Parent 之 level=i，則it children level = i+1&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Tree&amp;rsquo;s Degree：MAx{Node&amp;rsquo;s Degree}&lt;/p>
&lt;p>eg. Tree&amp;rsquo;s Degree = 3&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Tree&amp;rsquo;s Height (or Depth) ：Max{Node&amp;rsquo;s Level}&lt;/p>
&lt;p>eg. Tree高度=3(假設root為1)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Forest(森林)&lt;/strong>：由≥0棵互斥Trees所形成之集合，&lt;strong>Forest可以為空&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h2 id="tree的表示方式">Tree的表示方式&lt;/h2>
&lt;p>方法一：LinkedList直接表示&lt;/p>
&lt;p>作法：假設Tree&amp;rsquo;s Degree=K，Node數=n，則Node Structure如下&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/jCq1OHY.png"
loading="lazy"
alt="image-20230201224708128"
>&lt;/p>
&lt;p>分析：&lt;/p>
&lt;p>&lt;strong>缺點:極度浪費Link空間&lt;/strong>，共準備n*K條Link，&lt;strong>☆☆☆☆☆有用的非Nil之Link有n-1條☆☆☆☆☆&lt;/strong>(扣掉樹根不用，概念類似相通的無向圖)，所以Nil Links(浪費的)有nk-(n-1)條，因為浪費比例&lt;/p>
&lt;p>$$
\frac{n&lt;em>k-(n-1)}{n&lt;/em>k} = \frac{nk-n+1}{nk}=\frac{k-1}{k} =0.99
$$&lt;/p></description></item><item><title>TYPORA 如何上傳圖片(教學 使用Github , imagur作為圖片空間)</title><link>https://hoxtonhsu.com/p/typora-%E5%A6%82%E4%BD%95%E4%B8%8A%E5%82%B3%E5%9C%96%E7%89%87%E6%95%99%E5%AD%B8-%E4%BD%BF%E7%94%A8github-imagur%E4%BD%9C%E7%82%BA%E5%9C%96%E7%89%87%E7%A9%BA%E9%96%93/</link><pubDate>Sat, 08 Oct 2022 01:02:04 +0800</pubDate><guid>https://hoxtonhsu.com/p/typora-%E5%A6%82%E4%BD%95%E4%B8%8A%E5%82%B3%E5%9C%96%E7%89%87%E6%95%99%E5%AD%B8-%E4%BD%BF%E7%94%A8github-imagur%E4%BD%9C%E7%82%BA%E5%9C%96%E7%89%87%E7%A9%BA%E9%96%93/</guid><description>&lt;img src="https://i.imgur.com/W6FAkN1.png" alt="Featured image of post TYPORA 如何上傳圖片(教學 使用Github , imagur作為圖片空間)" />&lt;p>最近領到薪水後買了TYPORA後，想找如何上傳圖片的教學，發現網路上的教學蠻少的，台灣好像只有一篇，還是For mac的教學，剩下的都是中國的教學，但他們用的圖床，台灣也很多不能用，後來研究了幾天終於搞懂，所以決定寫一篇看看&lt;/p>
&lt;p>圖片空間有Github跟imgur，就看你想要用哪個就用哪個吧，其實沒差太多，但imgur會稍微簡單一點點點點點點，以下是步驟&lt;/p>
&lt;h2 id="開始">開始&lt;/h2>
&lt;ul>
&lt;li>先去安裝node.js，因為會需要裡面的npm&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/&lt;/a>&lt;/p>
&lt;p>安裝好可以用系統管理員身分打開cmd，並輸入&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">node
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>如果有成功安裝的話應該會顯示&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/0*TJh1mXLciPRITGML.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>接著安裝picGo-core&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">npm install picgo -g
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/0*OURwrokLcSXsKhh7.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>說出現錯誤，要我們執行&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">npm audit fix -force
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/0*iJyRBtSoBBDDWCiL.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>執行完之後就安裝好了，接著輸入&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">picgo
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>來確認是否有安裝成功，有時候可能會出現&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">檔案未經數位簽署這個指令碼將不會在系統上執行
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>之類之類的句子，這時候可以輸入&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">Set-ExecutionPolicy RemoteSigned
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>來允許執行，這時候在輸入picgo應該就可以看到這樣子的畫面了&lt;/p>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/0*5z4fiwasXjd5owxU.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>到這一步本地端的設定已經完成80%了，接下來就是要選擇要使用哪種圖片空間&lt;/p>
&lt;h2 id="github">Github&lt;/h2>
&lt;ul>
&lt;li>首先先到Github創建一個&lt;strong>公開&lt;/strong>的Repository，名字隨意就好&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/0*Qtv_aOAy_jvvJmxS.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;ul>
&lt;li>接著把這個Repository的URL複製下來&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">https://github.com/Hoxton019030/Typora
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>右上角個人頭像點開，選擇Settings&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/0*IvpN0zdI8lH7ArDz.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;ul>
&lt;li>左側選項最下面有一個Developer settings&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/0*I0XbiRgEZbAqSl1P.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;ul>
&lt;li>選擇Personal access tokens&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/0*av4YXNmNeXapHaSQ.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;ul>
&lt;li>選擇 Generate new token&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/0*f4CIbfps52_y13UM.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;ul>
&lt;li>輸入這個token的名稱，隨便取就好，Expiration看個人喜好，我很懶，所以我選擇永久，下面的select scopes勾選repo&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/0*OdCzsVJiqnSncFsR.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;ul>
&lt;li>接著會產生一組ghp開頭的token，這組序號&lt;strong>只會在這裡以明碼出現一次，接下來永遠都不會再以明碼的方式呈現&lt;/strong>所以請好好記起來&lt;/li>
&lt;li>然後到Typora的偏好設定裡打開&lt;code>開啟設定檔&lt;/code>，通常會是用一個文本編輯器打開，通常都是vscode啦&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/0*TfGA65bOI7NQlTdO.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;ul>
&lt;li>接著把這串東西複製貼上去&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">{
&amp;#34;picBed&amp;#34;: {
&amp;#34;current&amp;#34;: &amp;#34;github&amp;#34;,
&amp;#34;uploader&amp;#34;: &amp;#34;github&amp;#34;,
&amp;#34;github&amp;#34;: {
&amp;#34;repo&amp;#34;: &amp;#34;Hoxton019030/Typora&amp;#34;, //這串對應的是使用者名稱+Repo名稱，改成自己的
&amp;#34;token&amp;#34;: &amp;#34;ghp_xxxxxxxxxxxxxxxxxxxx&amp;#34;, //這邊把剛剛產生的token貼上去
&amp;#34;path&amp;#34;: &amp;#34;data/&amp;#34;, //圖片要上傳到哪個資料夾，可以先不用設定，
&amp;#34;customUrl&amp;#34;: &amp;#34;https://raw.githubusercontent.com/Hoxton019030/Typora/main&amp;#34;, //把Hoxton019030/Typora改成你自己的repo
&amp;#34;branch&amp;#34;: &amp;#34;main&amp;#34; //應該也不用動
}
},
&amp;#34;picgoPlugins&amp;#34;: {}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>完成之後應該長這個樣子，接著按存檔&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/0*Jv9sK10wHg0dKTgj.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;ul>
&lt;li>接著回到設定，試著按看看測試圖片上傳&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/0*aBg4zeoUl5MUkCUB.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>如果成功的話就會出現這樣的畫面&lt;/p>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/0*jWdQ9Nc1dfG2Ju4g.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>就代表你成功了！&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>如果你在按一次測試圖片上傳，由於上傳的圖片檔名一模一樣，會報錯，這樣是正常現象，請不要驚慌&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/0*W658xLMijQPg2W5M.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;h2 id="imgur">imgur&lt;/h2>
&lt;ul>
&lt;li>首先先辦帳號&lt;/li>
&lt;li>&lt;a href="https://api.imgur.com/oauth2/addclient">https://api.imgur.com/oauth2/addclient&lt;/a> 點擊這個網址&lt;/li>
&lt;li>老樣子，名字隨意取就好，然後Authorization type選擇第二個&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/1*X8N6pfp6RBxMrFUQ-7DMhg.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;ul>
&lt;li>接著會跳出畫面，會告訴你你的Client ID是什麼，請複製下來&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/0*BXo0QET3625yCZb3.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;ul>
&lt;li>接著到偏好設定裡面打開開啟設定檔，通常會用vscode開啟&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/0*wcsfPRq4DONBo8WE.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;ul>
&lt;li>接著把這段複製貼上上去&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">{
&amp;#34;picBed&amp;#34;: {
&amp;#34;current&amp;#34;: &amp;#34;imgur&amp;#34;,
&amp;#34;uploader&amp;#34;: &amp;#34;imgur&amp;#34;,
&amp;#34;imgur&amp;#34;:{
&amp;#34;clientId&amp;#34;: &amp;#34;XXXXXXXXXXX&amp;#34;
}
},
&amp;#34;picgoPlugins&amp;#34;: {}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>貼上去之後應該會長這個樣子&lt;/p>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/0*w6neiFt-pF_F7Xi5.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;ul>
&lt;li>然後存檔之後，回到偏好設定，按「測試圖片上傳」&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/0*zVjvGlhqINfbk757.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/0*J3wT0Gdta9xwlTpd.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>跳出這個就代表成功上傳了！&lt;/p>
&lt;h2 id="小結">小結&lt;/h2>
&lt;p>這樣子只要在typora裡面貼上圖片，typora就會自動幫我們上傳圖片到圖片空間了。&lt;/p></description></item><item><title>從入職到離職，事務所的日子之《該進事務所嗎？》</title><link>https://hoxtonhsu.com/p/%E5%BE%9E%E5%85%A5%E8%81%B7%E5%88%B0%E9%9B%A2%E8%81%B7%E4%BA%8B%E5%8B%99%E6%89%80%E7%9A%84%E6%97%A5%E5%AD%90%E4%B9%8B%E8%A9%B2%E9%80%B2%E4%BA%8B%E5%8B%99%E6%89%80%E5%97%8E/</link><pubDate>Sat, 08 Oct 2022 00:36:13 +0800</pubDate><guid>https://hoxtonhsu.com/p/%E5%BE%9E%E5%85%A5%E8%81%B7%E5%88%B0%E9%9B%A2%E8%81%B7%E4%BA%8B%E5%8B%99%E6%89%80%E7%9A%84%E6%97%A5%E5%AD%90%E4%B9%8B%E8%A9%B2%E9%80%B2%E4%BA%8B%E5%8B%99%E6%89%80%E5%97%8E/</guid><description>&lt;img src="https://i.imgur.com/aHMlhAm.png" alt="Featured image of post 從入職到離職，事務所的日子之《該進事務所嗎？》" />&lt;p>​ &lt;strong>到底要不要進事務所？&lt;/strong>&lt;/p>
&lt;p>我想一開始就給出解答&lt;/p>
&lt;p>&lt;strong>如果不知道做什麼就進事務所吧！&lt;/strong>&lt;/p>
&lt;p>​ 如果是會計系的學生，在大學期間一定有想過自己到底要不要進入所謂的四大（勤業、資誠、安侯、安永），我在大學的時候對於這個問題倒是沒太多想法，只覺得進入四大事務所好像很威風，出入信義區，西裝革履的樣子，名稱也是國際上有名公司，怎麼想都覺得很穩，能出什麼問題？&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/b0yPTz9.png"
loading="lazy"
alt="image-20221008012440851"
>&lt;/p>
&lt;p>當然實際進去之後我就後悔了，發現這樣的生活根本不是自己想要的，索性的待到一月，把年終獎金還有到職獎金，以及政府的青年就業補助的錢領一領之後，就趕緊跑回高雄準備轉換跑道，做什麼都行，但這輩子絕對不會在做會計了。&lt;/p>
&lt;p>但離職過後也快一年，轉換工作也算成功，但持續的一直有在Follow會計這個圈子，所以想說來分享一下自己的一些想法，希望可以幫助到一些會計系的學生。&lt;/p>
&lt;hr>
&lt;p>一份工作一定是有好有壞的，事務所的工作則是將好與壞的那非常極端，這篇文章先來講「我」覺得事務所好的地方，下一篇文章再來講我為什麼離職。&lt;/p>
&lt;ol>
&lt;li>
&lt;h2 id="事務所的名聲">事務所的名聲&lt;/h2>
&lt;/li>
&lt;/ol>
&lt;p>事務所的名聲是我在離職之後最直接的感受，在自我介紹或是之後轉換跑道的面試，第一個被問的問題都是&lt;/p>
&lt;p>「你之前在資誠耶，很好的一間公司？怎麼會想要離職轉換跑道呢？」&lt;/p>
&lt;p>誠然四大在會計系學生的眼中已經是臭到不能再臭的公司，但出了事務所之後，只要待的公司不是太鳥的那種，基本上四大的經歷即使不到亮眼，但也絕對不會是一個看不上眼的經歷。&lt;/p>
&lt;ol start="2">
&lt;li>
&lt;h2 id="事務所是一家很大的公司">事務所是一家很大的公司&lt;/h2>
&lt;/li>
&lt;/ol>
&lt;p>在離職之後第二個很深的感受是，四大確實是一間很大的公司，在信義區的精華地段裡有很多層樓的辦公室，有包場的尾牙，會請藝人來唱歌，還有很完善的公司分工制度。我現在的公司就是一家在中山區普通商辦大樓裡面的辦公室，員工數大概也就十來人左右，也沒什麼完整的分工制度，有時候感覺一個人要身兼多職。&lt;/p>
&lt;p>而且我相信很多人離職之後，第二家公司的規模都不會再有四大那樣的規模，所以我覺得可以來四大體驗看看一家員工數破千的公司感覺是怎麼樣的。&lt;/p>
&lt;ol start="3">
&lt;li>
&lt;h2 id="事務所的工作強度">事務所的工作強度&lt;/h2>
&lt;/li>
&lt;/ol>
&lt;p>這點其實很諷刺，我之前在的組別是最近很夯的資誠A11 AKA 獨立所疊字組。說實話當時也沒覺得什麼地不地獄的，當你看同事在加班，組長在加班，經理們也在加班，其實當下也會覺得沒什麼，反正大家就一起加班，有時候晚上六點多，同事們相約訂餐的畫面總讓我想起國小在讀安親班的感覺。&lt;/p>
&lt;p>我在事務所的上班的大概就是9月入職然後到1月初離職，唯一接觸到的忙季大概就是十月，那時候星期一到五大概都是9點10點那邊回家，差不多有三天是待到11點才走（11點就可以走是因為資誠是在國貿大樓，國貿大樓11點就要關門，所以才有機會回家Q_Q），星期六大概是10點11點進所內，然後可能晚上8、9點離開，至於星期天我是沒進過所內，快樂的小確幸～&lt;/p>
&lt;p>在這樣中強度的加班強度下，我離職之後，不管待哪家公司我都覺得好爽，這可能也是事務所很諷刺的一個好處吧，畢竟從四大出來的，每個都是見過地獄的人，到哪裡都像是天堂一樣。&lt;/p>
&lt;hr>
&lt;p>哈哈，可能真的太久沒寫文章了，感覺原本腦中有很多想法，突然要寫就寫不出什麼東西來，自己寫完再回頭來看自己列的這幾點，發現真的是蠻無聊的幾個點，也不構成什麼吸引力，但要問我後悔進入事務所嗎？其實還蠻慶幸我有進入事務所的，因為世界上真的找不太到比那更爛的工作了，我也是在那段期間真的很想離職，有這樣的念頭之後才知道自己到底想做的是什麼，這可能就是所謂的「在極大的痛苦中感覺精神甦醒吧」，總之我想說的是，不管你是台政北或是私科會計，不知道做啥就是選事務所，進去之後就會知道原來有這麼爛的工作，就會強迫自己去想自己到底要做什麼，如果做得下去那也很好，事務所的履歷還是有一點點用的（但我都建議最好是待到組長會比較有用一點）。&lt;/p>
&lt;p>接下來下一篇文章會聊聊我為什麼從事務所離職，應該蠻多可以談的～&lt;/p></description></item><item><title>基礎AOP介紹-Filter Interceptor AspectJ</title><link>https://hoxtonhsu.com/p/%E5%9F%BA%E7%A4%8Eaop%E4%BB%8B%E7%B4%B9-filter-interceptor-aspectj/</link><pubDate>Fri, 07 Oct 2022 22:41:52 +0800</pubDate><guid>https://hoxtonhsu.com/p/%E5%9F%BA%E7%A4%8Eaop%E4%BB%8B%E7%B4%B9-filter-interceptor-aspectj/</guid><description>&lt;img src="https://i.imgur.com/B7GhSw1.png" alt="Featured image of post 基礎AOP介紹-Filter Interceptor AspectJ" />&lt;h1 id="目錄">目錄&lt;/h1>
&lt;ul>
&lt;li>&lt;a class="link" href="#Filter%28%e9%81%8e%e6%bf%be%e5%99%a8%29Interceptor%28%e6%94%94%e6%88%aa%e5%99%a8%29AOP%28%e5%89%96%e9%9d%a2%e5%b0%8e%e5%90%91%e7%a8%8b%e5%bc%8f%e8%a8%ad%e8%a8%88%29%e4%b9%8b%e5%b7%ae%e7%95%b0" >Filter(過濾器)Interceptor(攔截器)AOP(剖面導向程式設計)之差異&lt;/a>
&lt;ul>
&lt;li>&lt;a class="link" href="#Filter" >Filter &lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#Interceptor" >Interceptor&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#AspectJ" >AspectJ&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="aspectj">AspectJ&lt;/h1>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">graph TD;
AOP ---&amp;gt; SpringAop &amp;amp; AspectJ
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="aop-概念">AOP (概念)&lt;/h2>
&lt;p>面向切面編程，利用AOP可以對業務邏輯的各個部分進行隔離，使得業務邏輯各部分之間的耦合度降低，提高程式的可重用性，同時提高開發的效率&lt;/p>
&lt;p>不修改原始碼，從而擴充新功能&lt;/p>
&lt;h1 id="filter過濾器interceptor攔截器aspectjaop之差異">Filter(過濾器)Interceptor(攔截器)AspectJ(AOP)之差異&lt;/h1>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">flowchart LR;
1((使用者))--發送請求
--&amp;gt;Filter\n+統一設置編碼\n+過濾敏感字\n+登入驗證\n+URL級別的訪問權限控制\n+數據壓縮
--&amp;gt;dispatcher
--&amp;gt;Interceptor\n+權限驗證\n+登入驗證\n+性能檢測
--&amp;gt;AOP\n+日誌紀錄
--&amp;gt;2(Controller)
-1[粗糙]--能處理request的精細程度----&amp;gt;-2[細緻]
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/6rnsYg4.png"
loading="lazy"
alt="image-20220913095403747"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/vO1K7ew.png"
loading="lazy"
alt="image-20220912164304013"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/jQ4pF5v.png"
loading="lazy"
alt="image-20220913100841950"
>&lt;/p>
&lt;h2 id="filter">Filter&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">
flowchart LR;
1[瀏覽器]---&amp;gt;2{過濾器}---&amp;gt;3[Web資源]
3[Web資源]--&amp;gt;2{過濾器}--&amp;gt;1[瀏覽器]
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在HttpServletRequest到達Servlet之前，過濾、處理一些資訊，本身依賴Sevlet容器，不能獲取SpringBean的一些資訊，它是&lt;code>javax.servlet.FilterChain&lt;/code>的項目，&lt;strong>不是Springboot&lt;/strong>&lt;/p>
&lt;p>可以做什麼&lt;/p>
&lt;ul>
&lt;li>修改Request, Response&lt;/li>
&lt;li>防止xss(Cross-Site-SCripting跨網站指令碼)攻擊&lt;/li>
&lt;li>包裝二進制流&lt;/li>
&lt;/ul>
&lt;h4 id="自定義filter">自定義Filter&lt;/h4>
&lt;ul>
&lt;li>以註解方式製作Filter&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="cm">/**
&lt;/span>&lt;span class="cm">* 網路上教學蠻多都是implenments filter，但我建議extend GenericFilterBean
&lt;/span>&lt;span class="cm">* 會比較方便一點，省去implenments init(), distory()的麻煩
&lt;/span>&lt;span class="cm">*/&lt;/span>
&lt;span class="nd">@Slf4j&lt;/span>
&lt;span class="nd">@Component&lt;/span>
&lt;span class="nd">@WebFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">filterName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;f1&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">urlPatterns&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="s">&amp;#34;*.html&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="s">&amp;#34;*.jsp&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="s">&amp;#34;/&amp;#34;&lt;/span>&lt;span class="o">})&lt;/span> &lt;span class="c1">//filterName就只是一個名稱可以，隨意就好，urlPattern是用來指定哪些url要經過這個過濾器
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">HiFilter&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">GenericFilterBean&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">doFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ServletRequest&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ServletResponse&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">FilterChain&lt;/span> &lt;span class="n">chain&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">IOException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ServletException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">info&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Hello Hoxton&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">chain&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">doFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">response&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//代表這個Filter已經作用完畢，可以把request,response交給下一個Filter了
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/R9tNv8y.png"
loading="lazy"
alt="image-20220912151657403"
>&lt;/p>
&lt;p>結果如上&lt;/p>
&lt;ul>
&lt;li>以Java配置方式製作Filter&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Slf4j&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm">* 網路上教學蠻多都是implenments filter，但我建議extend GenericFilterBean
&lt;/span>&lt;span class="cm">* 會比較方便一點，省去implenments init(), distory()的麻煩
&lt;/span>&lt;span class="cm">*/&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">HiFilter&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">GenericFilterBean&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">doFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ServletRequest&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ServletResponse&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">FilterChain&lt;/span> &lt;span class="n">chain&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">IOException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ServletException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">info&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Hello Hoxton&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">chain&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">doFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">response&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//代表這個Filter已經作用完畢，可以把request,response交給下一個Filter了
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">FilterConfig&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">FilterRegistrationBean&lt;/span> &lt;span class="nf">heFilterRegistration&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">FilterRegistrationBean&lt;/span> &lt;span class="n">registration&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">FilterRegistrationBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">HiFilter&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">registration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addUrlPatterns&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/*&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//配置相關的路徑
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">registration&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>一些其他的config設置，僅供參考，與上面釋例無關&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">FilterConfig&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//test
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">FilterRegistrationBean&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Filter&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">logProcessTimeFilter&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">FilterRegistrationBean&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Filter&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">bean&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">FilterRegistrationBean&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="n">bean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">LogProcessTimeFilter&lt;/span>&lt;span class="o">());&lt;/span> &lt;span class="c1">//設定想要使用哪一個Filter
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">bean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addUrlPatterns&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/*&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//設置哪些url會觸發Filter，設置成/* 就代表全部都會吃到，/user/*就代表/user開頭的都會吃到
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">bean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;logProcessTimeFilter&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//設置要叫什麼名字
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">bean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setOrder&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//設定過濾器的執行順序
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">bean&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">FilterRegistrationBean&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Filter&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">logApiFilter&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">FilterRegistrationBean&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Filter&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">bean&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">FilterRegistrationBean&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="n">bean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">LogApiFilter&lt;/span>&lt;span class="o">());&lt;/span> &lt;span class="c1">//設定想要使用哪一個Filter
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">bean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addUrlPatterns&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/*&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//設置哪些url會觸發Filter，設置成/* 就代表全部都會吃到，/user/*就代表/user開頭的都會吃到
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">bean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;logApiFilter&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//設置要叫什麼名字
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">bean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setOrder&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//設定過濾器的執行順序
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">bean&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">FilterRegistrationBean&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Filter&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">printResponseRequestFilter&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">FilterRegistrationBean&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Filter&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">bean&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">FilterRegistrationBean&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="n">bean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">PrintResponseRequest&lt;/span>&lt;span class="o">());&lt;/span> &lt;span class="c1">//設定想要使用哪一個Filter
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">bean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addUrlPatterns&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/*&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//設置哪些url會觸發Filter，設置成/* 就代表全部都會吃到，/user/*就代表/user開頭的都會吃到
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">bean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;printResponseRequestFilter&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//設置要叫什麼名字
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">bean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setOrder&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">2&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//設定過濾器的執行順序
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">bean&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/blockquote>
&lt;p>SpringBoot本身也提供了許多不同的Filter供使用，參考如下&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/nKZ6Hy1.png"
loading="lazy"
alt="image-20220912153023872"
>&lt;/p>
&lt;p>常用的有以下幾個&lt;/p>
&lt;ul>
&lt;li>CharacterEncodingFilter(用於處理編碼問題)&lt;/li>
&lt;li>HiddenHttpMethodFilter(隱藏Http函數)&lt;/li>
&lt;li>HttpPutFormContentFilter(form表單處理)&lt;/li>
&lt;li>RequesrtContextFilter(請求上下文)&lt;/li>
&lt;/ul>
&lt;p>其他資訊可以詳閱&lt;a class="link" href="https://blog.csdn.net/qyp1314/article/details/42023725" target="_blank" rel="noopener"
>Spring MVC中各个filter的用法&lt;/a>&lt;/p>
&lt;p>其中以&lt;strong>OncePerRequestFilter&lt;/strong>最常被使用，這個Filter會去&lt;strong>過濾每一個Request請求，且不會重複執行&lt;/strong>，且這個Filter有一個doFilterInternal()的方法，供我們撰寫Filter邏輯&lt;code>因doFilter()的方法已在OncePerRequestFilter裡面實現了&lt;/code>，可以用來做Jwtoken的登入驗證，程式如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Component&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">JwtAuthenticationFilter&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">OncePerRequestFilter&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">JwtService&lt;/span> &lt;span class="n">jwtService&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">UserDetailsService&lt;/span> &lt;span class="n">userDetailsService&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">//注入JwtService UserDetailsService，分別用來解析Token與查詢使用者詳情
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">doFilterInternal&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpServletRequest&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">HttpServletResponse&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">FilterChain&lt;/span> &lt;span class="n">filterChain&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">ServletException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">IOException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">authHeader&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getHeader&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpHeaders&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">AUTHORIZATION&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">authHeader&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">accessToken&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">authHeader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">replace&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Bearer &amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//從請求標頭中取得Authorization欄位中的值
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">claims&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">jwtService&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">parseToken&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">accessToken&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//擷取出後面的JWT字串，接著解析它
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">username&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">claims&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;username&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//從claims物件中取得username欄位的值
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">UserDetails&lt;/span> &lt;span class="n">userDetails&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">userDetailsService&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">loadUserByUsername&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//並透過userDetailService查詢使用者詳情。這也代表JWT的內容(payload)必須包含username這個欄位
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//在filter中查詢使用者的目的，是為了將該次請求所代表的驗證後資料(Authentication)帶進security中的Context。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//Context是一種較抽象的概念，可以想像成該次請求的身分狀態
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="n">Authentication&lt;/span> &lt;span class="n">authentication&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">UsernamePasswordAuthenticationToken&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">userDetails&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">userDetails&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getAuthorities&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="c1">//為了將這個請求的使用者身分告訴伺服器，我們建立UsernamePasswordAuthenticationToken的物件，其中第三個參數放GrantedAuthority的List， 作為API的授權檢查
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//第一個參數(principal)傳入使用者詳請(UserDetails)。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 而第二個參數是credential，通常是密碼，但不傳入也無訪
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//經由傳入principal，我們得以在業務邏輯中從Context輕易獲取使用者身分的資料
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">SecurityContextHolder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getContext&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">setAuthentication&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">authentication&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">filterChain&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">doFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>配置完後再將這個Filter加入Security的過濾鍊&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@EnableWebSecurity&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">SecurityConfig&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">WebSecurityConfigurerAdapter&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">UserDetailsService&lt;/span> &lt;span class="n">userDetailsService&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">JwtAuthenticationFilter&lt;/span> &lt;span class="n">jwtAuthenticationFilter&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 協助帳號密碼認證的東西
&lt;/span>&lt;span class="cm"> * @return
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">AuthenticationManager&lt;/span> &lt;span class="nf">authenticationManagerBean&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kd">super&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">authenticationManagerBean&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//加入Security的過濾鍊
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">protected&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">configure&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpSecurity&lt;/span> &lt;span class="n">http&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">http&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">authorizeHttpRequests&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">antMatchers&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpMethod&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">GET&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;/users/**&amp;#34;&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">hasAuthority&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MemberAuthority&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">SYSTEM_ADMIN&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">name&lt;/span>&lt;span class="o">())&lt;/span>
&lt;span class="c1">// .antMatchers(HttpMethod.GET,&amp;#34;/h2/**&amp;#34;).hasAuthority(MemberAuthority.SYSTEM_ADMIN.name())
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">antMatchers&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpMethod&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">GET&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="s">&amp;#34;/login/**&amp;#34;&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">permitAll&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="c1">// .antMatchers(HttpMethod.POST,&amp;#34;login&amp;#34;).permitAll()
&lt;/span>&lt;span class="c1">// .antMatchers(HttpMethod.POST, &amp;#34;/users&amp;#34;).permitAll()
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">anyRequest&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">permitAll&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">and&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">addFilterBefore&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">jwtAuthenticationFilter&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">UsernamePasswordAuthenticationFilter&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="c1">//於UsernamePasswordAuthenticationFilter進行認證
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">sessionManagement&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">sessionCreationPolicy&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SessionCreationPolicy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">STATELESS&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">and&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">csrf&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">disable&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">formLogin&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">http&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">headers&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">frameOptions&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">disable&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">//讓spring Security可以和h2建立連線
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * @param auth 配置全局驗證資訊，如Authentication Provider,UserDetailService等等資訊，
&lt;/span>&lt;span class="cm"> * authenticationManager會接收到UsernamePasswordAuthenticationToken傳入的資料後
&lt;/span>&lt;span class="cm"> * 調用SecurityConfig中所配置的userDetailsService,passwordEncoder來協助驗證
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * @throws Exception
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">configure&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">AuthenticationManagerBuilder&lt;/span> &lt;span class="n">auth&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">auth&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">userDetailsService&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">userDetailsService&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">passwordEncoder&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">BCryptPasswordEncoder&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>一些Code的示範&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">LogProcessTimeFilter&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">OncePerRequestFilter&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * @param request 請求
&lt;/span>&lt;span class="cm"> * @param response 回應
&lt;/span>&lt;span class="cm"> * @param filterChain 過濾鏈 會將現有的filter給串聯起來，當請求進入後端，需要依序經過它們才會達到Controller，相對的，當回應離開Controller，則是按照相反的方向經過那些Filter
&lt;/span>&lt;span class="cm"> * @throws ServletException
&lt;/span>&lt;span class="cm"> * @throws IOException
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">doFilterInternal&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpServletRequest&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">HttpServletResponse&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">FilterChain&lt;/span> &lt;span class="n">filterChain&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">ServletException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">IOException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">long&lt;/span> &lt;span class="n">startTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentTimeMillis&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">filterChain&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">doFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//doFilter:相當於將請求送至Controller。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">endTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentTimeMillis&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="kt">long&lt;/span> &lt;span class="n">processTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">endTime&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">startTime&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;processTime = &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">processTime&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Controller收到的請求主體(RequestBody)和回應主體(ResponseBody)
&lt;/span>&lt;span class="cm"> * 分別由HttpServletRequest與HttpServletResponse的InputStream、OutputStream轉化而來，
&lt;/span>&lt;span class="cm"> * 但資料流只能讀取一次，如果在Filter層就被讀掉，可能會導致後面都收不到資料
&lt;/span>&lt;span class="cm"> * 為了保留主體中的資料，我們將請求主體與回應主體包裝成ContentCachingResponseWrapper ContentCachingRequestWrapper
&lt;/span>&lt;span class="cm"> * 再如同往常傳入FilterChain
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * 這兩個Wrapper的特色是會在內部備份一個ByteArrayOutputStream，我們只要呼叫這兩個Wrapper的
&lt;/span>&lt;span class="cm"> * getContentAsByteArray就可以無限制地取得主體內容
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">PrintResponseRequest&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">OncePerRequestFilter&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">doFilterInternal&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpServletRequest&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">HttpServletResponse&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">FilterChain&lt;/span> &lt;span class="n">filterChain&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">ServletException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">IOException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ContentCachingRequestWrapper&lt;/span> &lt;span class="n">requestWrapper&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ContentCachingRequestWrapper&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">ContentCachingResponseWrapper&lt;/span> &lt;span class="n">responseWrapper&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ContentCachingResponseWrapper&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">response&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">filterChain&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">doFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">requestWrapper&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">responseWrapper&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// logApi(request, response);
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">logBody&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">requestWrapper&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">responseWrapper&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">responseWrapper&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">copyBodyToResponse&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">logApi&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpServletRequest&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">HttpServletResponse&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">ServletException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">IOException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">httpStatus&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getStatus&lt;/span>&lt;span class="o">();&lt;/span> &lt;span class="c1">//200,403,404之類的
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">httpMethod&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getMethod&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">uri&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getRequestURI&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">params&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getQueryString&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">params&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">uri&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="s">&amp;#34;?&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">params&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">join&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">valueOf&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">httpStatus&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="n">httpMethod&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">uri&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">logBody&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ContentCachingRequestWrapper&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ContentCachingResponseWrapper&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">requestBody&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getContent&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getContentAsByteArray&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Request: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">requestBody&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">responseBody&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getContent&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getContentAsByteArray&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Response: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">responseBody&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * @param content
&lt;/span>&lt;span class="cm"> * @return 返回JSON字串
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">getContent&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">byte&lt;/span> &lt;span class="o">[]&lt;/span> &lt;span class="n">content&lt;/span>&lt;span class="o">){&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">body&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">content&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">body&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">replaceAll&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;[\n\t]&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//去除換行\n與定位符號\t
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="interceptor">Interceptor&lt;/h2>
&lt;p>本身是AOP的一種應用，其實攔截器跟過濾器是可以互相替換的，功能其實差不多，只是&lt;strong>攔截器可以在請求到達Controller或是回應回傳出Contrller時進行攔截&lt;/strong>，攔截成功時可以實做一些自定義的業務邏輯進行修改，且Interceptor是Springboot下的一個功能&lt;code>org.springframework.web.servlet.HandlerInterceptor&lt;/code>&lt;/p>
&lt;p>可以用來&lt;/p>
&lt;ul>
&lt;li>性能監控：紀錄請求的處理時間，比如說請求處理太久（超過500毫秒）&lt;/li>
&lt;li>登入檢測&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/1qACg6a.png"
loading="lazy"
alt="image-20220912164539364"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">graph LR;
request--&amp;gt;id1
id1--&amp;gt;id2--&amp;gt;id4--&amp;gt;id3--&amp;gt;id6--&amp;gt;id5
subgraph 攔截器1
direction TB
id1[&amp;#34;preHandle()&amp;#34;]
id3[&amp;#34;postHandler()&amp;#34;]
id5[&amp;#34;afterCompletion()&amp;#34;]
end
subgraph 攔截器2
direction TB
id2[&amp;#34;preHandle()&amp;#34;]
id4[&amp;#34;postHandler()&amp;#34;]
id6[&amp;#34;afterCompletion()&amp;#34;]
end
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>要實現interceptor有兩種方式&lt;/p>
&lt;ol>
&lt;li>實作HandlerInterceptor&lt;/li>
&lt;li>繼承HandlerInterceptorAdapter&lt;/li>
&lt;/ol>
&lt;p>釋例&lt;/p>
&lt;ul>
&lt;li>自定義攔截器&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">LogInterceptor&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">HandlerInterceptorAdapter&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">preHandle&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpServletRequest&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">HttpServletResponse&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="n">handler&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">long&lt;/span> &lt;span class="n">startTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentTimeMillis&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;\n-------- LogInterception.preHandle --- &amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Request URL: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getRequestURL&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Start Time: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentTimeMillis&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setAttribute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;startTime&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">startTime&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">postHandle&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpServletRequest&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">HttpServletResponse&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="n">handler&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ModelAndView&lt;/span> &lt;span class="n">modelAndView&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;\n-------- LogInterception.postHandle --- &amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Request URL: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getRequestURL&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">afterCompletion&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpServletRequest&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">HttpServletResponse&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="n">handler&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;\n-------- LogInterception.afterCompletion --- &amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kt">long&lt;/span> &lt;span class="n">startTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Long&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getAttribute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;startTime&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kt">long&lt;/span> &lt;span class="n">endTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentTimeMillis&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Request URL: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getRequestURL&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;End Time: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">endTime&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Time Taken: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">endTime&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">startTime&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>註冊攔截器&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">WebConfig&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">WebMvcConfigurer&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">addInterceptors&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">InterceptorRegistry&lt;/span> &lt;span class="n">registry&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">registry&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addInterceptor&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">LogInterceptor&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">registry&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addInterceptor&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">OldLoginInterceptor&lt;/span>&lt;span class="o">()).&lt;/span>&lt;span class="na">addPathPatterns&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/admin/oldLogin&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">registry&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addInterceptor&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">AdminInterceptor&lt;/span>&lt;span class="o">()).&lt;/span>&lt;span class="na">addPathPatterns&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/admin/*&amp;#34;&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">excludePathPatterns&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/admin/oldLogin&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="aspectj-1">AspectJ&lt;/h2>
&lt;p>屬於一種AOP框架&lt;/p>
&lt;ul>
&lt;li>動態代理(Spring5本身已經封裝了)
&lt;ul>
&lt;li>有兩種情況的動態代理
&lt;ul>
&lt;li>
&lt;p>有介面(JDK動態代理)&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">interface&lt;/span> &lt;span class="nc">UserDao&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">login&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">class&lt;/span> &lt;span class="nc">UserDaoImpl&lt;/span> &lt;span class="kd">implements&lt;/span>　&lt;span class="n">UserDao&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">login&lt;/span>&lt;span class="o">(){&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>創建UserDao介面實現類的代理對象，代理對象會有被代理對象的所有方法，並且增強&lt;/p>
&lt;/li>
&lt;li>
&lt;p>無介面(CGLIB動態代理)&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">class&lt;/span> &lt;span class="nc">User&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">add&lt;/span> &lt;span class="o">(){&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">class&lt;/span> &lt;span class="nc">Person&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">User&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="o">(){&lt;/span>
&lt;span class="kd">super&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="aopjdk動態代理">AOP(JDK動態代理)&lt;/h3>
&lt;p>使用JDK的動態代理，要使用Proxy類裡面的方法來創建出代理對象 &lt;code>newProxyInstance(類加載器,增強方法所在的類，這個類實現的介面,實現這個接口(InvocationHandler)&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/Hoxton019030/image/main/data/202209061536485.png"
loading="lazy"
>&lt;/p>
&lt;p>編寫JDK動態代碼&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">UserDao&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">add&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">update&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">UserDaoImpl&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">UserDao&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;add方法執行了&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">update&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">package&lt;/span> &lt;span class="nn">com.example.aop&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.lang.reflect.InvocationHandler&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.lang.reflect.Method&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.lang.reflect.Proxy&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.util.Arrays&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * @author Hoxton
&lt;/span>&lt;span class="cm"> * @version 1.1.0
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">JDKProxy&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Class&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">interfaces&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="n">UserDao&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">};&lt;/span>
&lt;span class="n">UserDaoImpl&lt;/span> &lt;span class="n">userDao&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">UserDaoImpl&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">UserDao&lt;/span> &lt;span class="n">dao&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">UserDao&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">Proxy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newProxyInstance&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">JDKProxy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getClassLoader&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">interfaces&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">UserDaoProxy&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">userDao&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="c1">//此dao已經不是原本的dao，而是新的代理類dao了
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">dao&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">2&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;result = &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//創建代理對象的代碼
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">UserDaoProxy&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">InvocationHandler&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//1. 把創建的是誰的代理對象，把誰傳遞進來
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 有參建構子
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">UserDaoProxy&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Object&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">obj&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//增強的邏輯
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="nf">invoke&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Object&lt;/span> &lt;span class="n">proxy&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Method&lt;/span> &lt;span class="n">method&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">methodArgs&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Throwable&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//方法之前
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;方法之前執行...&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">method&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;傳遞的參數...&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">Arrays&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">methodArgs&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="c1">//被增強的方法執行
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="n">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">method&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">invoke&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">methodArgs&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//方法之後
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;方法之後執行...&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="aop專業術語">AOP專業術語&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>連接點&lt;/p>
&lt;p>一個類裡面中，能被增強的方法就叫連接點，下面這個類就有四個連接點&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/Hoxton019030/image/main/data/202209121200728.png"
loading="lazy"
alt="image-20220912120043665"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">class&lt;/span> &lt;span class="nc">User&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="n">add&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">update&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">select&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">delete&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>切入點&lt;/p>
&lt;p>實際被增強的方法，就叫切入點&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通知(增強)&lt;/p>
&lt;ol>
&lt;li>
&lt;p>實際增強的邏輯部分稱為通知(增強)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通知有多種類型&lt;/p>
&lt;ol>
&lt;li>
&lt;p>前置通知&lt;/p>
&lt;p>在切入點前執行&lt;/p>
&lt;/li>
&lt;li>
&lt;p>後置通知&lt;/p>
&lt;p>在切入點後執行&lt;/p>
&lt;/li>
&lt;li>
&lt;p>環繞通知&lt;/p>
&lt;p>在切入點前後執行&lt;/p>
&lt;/li>
&lt;li>
&lt;p>異常通知&lt;/p>
&lt;p>出現異常時執行&lt;/p>
&lt;/li>
&lt;li>
&lt;p>最終通知&lt;/p>
&lt;p>執行到try&amp;hellip;catch的final時執行&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>切面&lt;/p>
&lt;p>是一個動作&lt;/p>
&lt;ol>
&lt;li>把通知應用到切入點的過程，就叫切面&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h3 id="aop準備">AOP(準備)&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>Spring 框架一般都是基於AspectJ實現的AOP操作&lt;/p>
&lt;ol>
&lt;li>
&lt;p>什麼是AspectJ&lt;/p>
&lt;ul>
&lt;li>AspectJ不是Spring的組成部分，是一個獨立的AOP框架， 一般把AspectJ和Spring框架一起使用，進行AOP操作&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>基於Aspect實現AOP操作&lt;/p>
&lt;ol>
&lt;li>xml配置文件實現&lt;/li>
&lt;li>基於註解方法實現(主要使用)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>再專案裡面引入AOP依賴&lt;/p>
&lt;/li>
&lt;li>
&lt;p>切入點表達式&lt;/p>
&lt;ol>
&lt;li>
&lt;p>切入點表達式的作用: 知道對哪個類的哪個方法進行增強&lt;/p>
&lt;/li>
&lt;li>
&lt;p>語法結構:&lt;/p>
&lt;p>execution( [權限修飾符] [返回類型] [類全路徑] [方法名稱] ( [參數列表] ) )&lt;/p>
&lt;ul>
&lt;li>
&lt;p>權限修飾符: public, private, *(代表不論是public, private 都選)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>返回類型: String, int&lt;/p>
&lt;/li>
&lt;li>
&lt;p>類全路徑: com.hoxton&amp;hellip;&amp;hellip;.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>方法名稱: 就方法名稱&lt;/p>
&lt;/li>
&lt;li>
&lt;p>參數列表: 有哪些參數&lt;/p>
&lt;p>舉例&lt;/p>
&lt;ol>
&lt;li>
&lt;p>對com.hoxton.dao.BookDao類裡面的add方法進行增強&lt;/p>
&lt;ul>
&lt;li>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">execution&lt;/span>&lt;span class="o">(*&lt;/span> &lt;span class="n">com&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hoxton&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">dao&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">BookDao&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(..)&lt;/span> &lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>對com.hoxton.dao.BookDao類的所有方法進行增強&lt;/p>
&lt;ul>
&lt;li>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">execution&lt;/span>&lt;span class="o">(*&lt;/span> &lt;span class="n">com&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hoxton&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">dao&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">BookDao&lt;/span>&lt;span class="o">.*(..))&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>對com.hoxton.dao包裡的所有類，類裡面的髓有方法進行增強&lt;/p>
&lt;ul>
&lt;li>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">excution&lt;/span>&lt;span class="o">(*&lt;/span> &lt;span class="n">com&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hoxton&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">dao&lt;/span>&lt;span class="o">.*.*(..))&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;p>within([package名].* )或( [package名]..*)&lt;/p>
&lt;p>舉例&lt;/p>
&lt;ol>
&lt;li>&lt;/li>
&lt;li>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h3 id="aop操作aspect-j--註解">AOP操作(Aspect J 註解)&lt;/h3>
&lt;ol>
&lt;li>創建類，在類裡面定義方法&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">User&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="o">(){&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;add&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>
&lt;p>創建增強類(編寫增強邏輯)&lt;/p>
&lt;ol>
&lt;li>
&lt;p>在增強類的裡面，創建方法，讓不同方法代表不同通知類型&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">UserProxy&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">before&lt;/span>&lt;span class="o">(){&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;before&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>進行通知的配置&lt;/p>
&lt;ol>
&lt;li>在Spring&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h1 id="log4j-2">Log4j 2&lt;/h1>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">flowchart TD;
8[&amp;#34;ALL(全輸出不留情)&amp;#34;]---&amp;gt;7[&amp;#34;Trace(更細的除錯資訊，通常用來追蹤城市流程的日誌)&amp;#34;]---&amp;gt;6[&amp;#34;DEBUG(除錯資訊的日志)推薦★&amp;#34;]---&amp;gt;5[&amp;#34;INFO(一般資訊的日志)推薦★&amp;#34;]---&amp;gt;4[&amp;#34;WARN(可能導致錯誤的日志)&amp;#34;]---&amp;gt;3[&amp;#34;ERROR(造成應用錯誤停止的日志)&amp;#34;]---&amp;gt;2[&amp;#34;FETAL(造成應用程式停止的日志)&amp;#34;]---&amp;gt;1[&amp;#34;OFF(不輸出任何日志)&amp;#34;]
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="參考">參考&lt;/h1>
&lt;p>&lt;a href="https://www.cnblogs.com/itlihao/p/14329905.html">https://www.cnblogs.com/itlihao/p/14329905.html&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://blog.csdn.net/fly910905/article/details/86537648">https://blog.csdn.net/fly910905/article/details/86537648&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/712557/" target="_blank" rel="noopener"
>SpringBoot攔截器(Interceptor)詳解&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.zendei.com/article/52571.html" target="_blank" rel="noopener"
>Spring Boot使用過濾器和攔截器分別實現REST介面簡易安全認證&lt;/a>&lt;/p>
&lt;blockquote>
&lt;/blockquote></description></item><item><title>死亡擱淺心得，前面無雷，後面有雷</title><link>https://hoxtonhsu.com/p/%E6%AD%BB%E4%BA%A1%E6%93%B1%E6%B7%BA%E5%BF%83%E5%BE%97%E5%89%8D%E9%9D%A2%E7%84%A1%E9%9B%B7%E5%BE%8C%E9%9D%A2%E6%9C%89%E9%9B%B7/</link><pubDate>Fri, 07 Oct 2022 02:44:36 +0800</pubDate><guid>https://hoxtonhsu.com/p/%E6%AD%BB%E4%BA%A1%E6%93%B1%E6%B7%BA%E5%BF%83%E5%BE%97%E5%89%8D%E9%9D%A2%E7%84%A1%E9%9B%B7%E5%BE%8C%E9%9D%A2%E6%9C%89%E9%9B%B7/</guid><description>&lt;img src="https://i.imgur.com/mg2syAL.jpg" alt="Featured image of post 死亡擱淺心得，前面無雷，後面有雷" />&lt;p>​ 如果你是好奇死亡擱淺這款遊戲到底好不好玩，擔心對不到電波，怕買了浪費錢的人可以聽看看我的想法&amp;ndash;「我覺得很難歸納出哪種類型的人會喜歡死亡擱淺」 我只能說，會比較推薦給至少能撥出個1、2小時玩遊戲的人才會比較適合玩。&lt;/p>
&lt;p>無雷心得：&lt;/p>
&lt;p>　　我本身不是小島秀夫的粉絲，他的作品我也只玩過幻痛而已，而且 我覺得幻痛超級無聊，遊戲評分鼓勵你不殺，所以你很多裝備是不能用 的，而且地圖設計也稱不上有趣，荒漠和草原的地形空蕩到很空虛，不太能理解 為什麼硬要做成開放地圖，A任務做完要到B任務就只能自己過去、或是叫直升機等等的。看完了儀式之人的影片後也沒有覺得躍躍欲試的感覺，玩了20個小時後真的撐不下去就 不玩了，所以我在買死亡擱淺前其實猶豫很久，因為我知道我可能會Get不到遊戲有趣的點? 後來還是抱持著是驢是馬遛看看的心情買了下去。&lt;/p>
&lt;p>　　純論遊戲心得，並且在不暴雷太多重要劇情的情形下，死亡擱淺最大的樂趣在於遊戲一開始剝奪你很多東西，初期會要求你背著大重量的貨物到有一段距離的地方，然後這路上可能有懸崖、陡坡之類的地形阻隔著你，所以初期會對於這些事情覺得很毛躁、等到遊戲中期，開始出現很多東西能輔助你送貨，能裝載更多重量的、加速的，會讓你覺得所有的一切不再那麼痛苦，而後期當你解鎖所有設施、道具之後，你會開始愛上送貨這件事情，我覺得這點蠻神奇的，因為在往常的遊戲裡面跑腿送貨是最無聊的環節，你會用快速旅行直接省略掉這個過程，但在死亡擱淺裡你會體認到，所有的一切都是自己努力而來的，是自己讓這件事情變得輕鬆，變得平易近人，就好比學習一項事物，從排斥到接受，再到學以致用，漸漸地愛上一件事情。&lt;/p>
&lt;p>​ 我記得有一個晚上我就上線，也沒推任何主線劇情，就很單純的從A點接單送到B點，再從B點接單送到C點，然後再從C點接單送到B點這樣往復巡還，聽起來很無聊，但我當時送完貨物跑出結算畫面，看到滿滿的SSS時，真的覺得送貨使我快樂。&lt;/p>
&lt;p>　　另一點我覺得有趣的是遊戲裡面的線上模式，會讓你的地圖裡出現其他玩家的建物，比如說休息站、涼亭之類的，或者是其他玩家的登山索、樓梯，這點不是死亡擱淺原創，但在這遊戲裡面卻是我最喜歡的一點，在爬山的時候爬著其他玩家的梯子，然後在山頂看到其他玩家撒尿的蘑菇叢、然後在拉著其他玩家的纜繩下山，雖然你無法看到那些玩家的身影，但它們在你的世界留下的足跡卻令他們的形象具體而鮮明，在你在河流底部發現散落的貨品、峽谷下方報廢的摩托車，宛若有一段故事被濃縮成一個小小的物品，而這個小小的物品又經由你的發現而解壓縮成一段送貨之旅，死亡擱淺大部分的遊戲時間都是獨自一人的，但這種設計讓這個世界不在那麼冰冷，而多了些許溫度。&lt;/p>
&lt;p>　　最後是這個遊戲的氛圍，死亡擱在某些地形出現的時候（比如說高山、平原、裂谷）會撥放一些很空靈感的歌，配合上游戲的畫面、眼前的景象，山姆苗小的身影形成強烈的對比，耳中響起的和聲與山姆亦步亦趨的步伐，行走在一望無際的大草原，所有的一切都是空的，但心中卻被滿滿的感動填滿著。&lt;/p>
&lt;p>　　死亡擱淺到底適合什麼樣的人，我覺得只有自己玩了才能知道，他就是一款這麼特別的遊戲，看起來很無聊，但玩起來卻比想像中的有趣。&lt;/p>
&lt;p>有雷心得：&lt;/p>
&lt;p>　　其實玩完之後，我原本是很期待劇情而對遊戲性無感，但玩完後我卻相反過來 ，因為我劇情看不太懂，但遊戲性卻是出乎我意料之外的好。遊戲到尾聲之前我是都看得懂的，大概就是我們要去救艾米莉，但有個叫希格斯的人百般阻饒，然後頑人藏著什麼秘密。但當艾米莉出來之後我就完全看不懂了，我只能理解到一個艾米莉在冥灘、另一個在總統府當總統，但不能理解為什麼她要希格斯又要山姆，也不能理解她是不是好人，因為從結尾畫面上看來，艾米莉是想要毀掉世界的，但當山姆放下槍後她卻又抱著山姆說了一段我不明所以的台詞：&lt;/p>
&lt;p>「我做過無數個夢，我不知道該相信哪一個，所以我才決定跟你和其他人分享我的夢境，但是為了讓點連成一條線，讓一切都弄清楚，你們需要看得更透徹。你們需要時間。時間對我沒有任何意義，我不是一條線，我是單獨存在的點&amp;hellip;(省略)&amp;hellip;你(山姆)找到了共通的線，把所有點串在一起，而且你用唯一可能的方式做到了，也就是努力活好每一天，謝謝你山姆。」 　　&lt;/p>
&lt;p>​ 這邊我看不懂的原因，是因為不能理解為什麼山姆努力活好每一天就能把所有點串成一條線，也不能理解為什麼山姆把所有的點連城線之後就可以進行大滅絕，我聽得出來翻譯的字幕和語音是對的上的，沒有亂翻，但就是不知道到底發生了什麼事情，後來上網看之後發現日文版的意思比較直觀，比如說有一段我也看不太懂，但日文版就比較清楚 (中文版)艾米莉：&lt;/p>
&lt;p>「我是滅絕體，讓我們的種族滅絕是我們的命運，但在那一刻你也成為這個命運的一部分，你變成了回歸者，DOOMS將我們的惡夢擴散到了全世界」 (日文版)艾米莉：「我是滅絕體，為了將我們的種族引往滅絕才誕生的，當時你也成為了我的一部分，你成為了回歸者，而共享我滅絕夢能力的DOOMS能力者也誕生了」&lt;/p>
&lt;p>　　所以我後面的劇情是破完之後再去找解析影片才知道到底如何，可能是我資質駑鈍，真的看不懂遊戲最後的劇情吧，要看人家解析才看的懂，如果有人要留言說是我自己理解力有問題，他都看得懂的話，那我想跟你說聲抱歉，我是低能兒，我不配玩這個遊戲，發這篇文章真的是很對不起PTT對不起我的爸爸媽媽，生了一個連遊戲劇情都看不懂的小孩。&lt;/p>
&lt;p>　　原本還想打更多的，但發現該講的都講完，最後一點雞蛋挑骨頭的大概就是地圖可以再大一點點之類的，很多人說撐過第三章就會好玩，但我是到爬雪山的時候才覺得好玩，因為雪山就開始能針對地形攻略，而且你攻略的越透徹，爬起來就越輕鬆，所以我當初在爬的時候就帶了一堆建材，瘋狂蓋纜車，建材一沒就立刻搭纜車回家拿，這樣把雪山道路牽起來，最後結尾的時候我就是一路從雪山搭車搭到基地，連對話都還沒跑完就到家了。&lt;/p>
&lt;p>　　結尾就是，如果死亡擱淺有出2，我會買，有朋友要我推薦遊戲，我也會推薦死亡擱淺給他們，畢竟這應該是市面上唯一一款用3A規模製作的獨立遊戲風格的大作了。&lt;/p></description></item><item><title>黑暗靈魂1心得</title><link>https://hoxtonhsu.com/p/%E9%BB%91%E6%9A%97%E9%9D%88%E9%AD%821%E5%BF%83%E5%BE%97/</link><pubDate>Thu, 06 Oct 2022 23:16:34 +0800</pubDate><guid>https://hoxtonhsu.com/p/%E9%BB%91%E6%9A%97%E9%9D%88%E9%AD%821%E5%BF%83%E5%BE%97/</guid><description>&lt;img src="https://i.imgur.com/jQx4JF5.png" alt="Featured image of post 黑暗靈魂1心得" />&lt;p>如果你沒有看過黑暗靈魂1代的任何影片，比如說boss介紹、地圖跑法之類的&lt;/p>
&lt;p>也沒有玩過魂3，那我會覺得黑暗靈魂1代很值得玩
但如果你已經看過很多實況主玩過黑暗靈魂，知道怎麼從傳火祭祀場走到灰燼湖
知道怎麼走到不死鎮底層&amp;hellip;諸如此類的事情，那我會建議你不要玩黑魂
因為黑魂1真正有趣的是地圖探索，如果你地圖都知道怎麼跑
那我不建議你玩魂1&lt;/p>
&lt;hr>
&lt;p>我先從抱怨的地方開始好了，我以下的抱怨都是針對黑暗靈魂1
大部分我抱怨的事情都在魂3有改善了&lt;/p>
&lt;p>1.打Boss的跑屍路程&lt;/p>
&lt;p>　　魂1裡面有些boss的跑屍路程我覺得是設計的不錯的，比如說守鐘的石像鬼、翁斯坦與?
摩等等，這種路程落在30秒內，路上的阻礙不會嚴重到殺死你的，我覺得是個合格的跑屍流程，這種長度可以在每次跑屍的路上，想看看上次犯的錯要如何修正、哪些招該怎麼閃之類的。但有些boss的跑屍流程我就覺得有點誇張了，比如說墓王尼特、烏薪王葛溫、
混沌的溫床這類型的，跑屍流程大於30秒，路上又不是說特別好跑，比如說初始火爐卡在橋上的黑騎士，或是溫床路上的楔型石惡魔、墓王尼特要先跑過一堆有的沒的的區域才能進霧門，使得我後期越玩越煩躁，前面剛開始打的時候都覺得還好，越到後面的王跑屍過程就越長。&lt;/p>
&lt;p>2.篝火的傳送點太少&lt;/p>
&lt;p>　　魂1的篝火每個篝火都能主動傳送，但不是每個篝火都能接受傳送，比如病村的底部下?
道的傳點就不能傳過去，只能選擇從蜘蛛女那邊過去，偏偏病村跑圖又不是件很有趣的
事情，會減弱我中途想要回去探索的慾望&lt;/p>
&lt;p>3.靈活度&lt;/p>
&lt;p>　　魂1的翻滾只能朝前後左右方向滾，所幸魂1大部分的boss都不太需要斜方移動，但操作
來就是卡卡的，而且負重要低於25%才能讓翻滾動畫像魂3那樣絲滑流暢，所以我幾乎都是裸體在玩的。&lt;/p>
&lt;p>　　至於魂1的優點，我想先老實說，因為我已經知道大家說黑魂1的地圖設計很神，所以在
的時候已經有主觀認知了，所以在玩的時候沒有真的很驚艷的感覺，不死鎮的電梯下來到祭祀場、病村接飛龍之谷接小隆德接祭祀場，這些我都覺得是很棒的設計，但沒有那種大腦震撼的感覺。當初我在玩空洞騎士的時候，還不知道空洞騎士的地圖探索也做得很強，當我偶然間從心血來潮，不選擇搭車，而是在繼續往右走，走到王國邊界時，真的覺得這遊戲的地圖設計真的太強了，所有的一切都環環相扣。但在魂1裡面我沒有感受到這種
感覺過，唯一一個比較接近的應該就是灰燼湖，我很後悔我是從攻略影片上面得知這個地點，我想如果我是自己偶然間走進樹洞，偶然間撞進幻影牆，順著路一路走，最後進入
灰燼湖，踏上古龍之道的話，我想我對魂1的地圖評價應該會更高，但真的很可惜，我透過Youtube、Twitch等等渠道，已經大略的知道魂1的地圖，所以我對於地圖的感受都已經是二手的，就像張愛玲說的「我們對於生活的體驗往往是第二輪的」，自然而然也沒有那麼感動了。&lt;/p>
&lt;p>　　但魂1還是有些地點是我覺得很有趣的，比如說賽恩古城、地下墓地。古城被譽為賽恩
快樂城、極限體能王，裡面的道路錯綜複雜、又有許多陷阱、埋伏、但實際在跑圖的時候，能感受到這個古城非常用心，怪物的配置、陷阱的位置都有給玩家對應的空間。地下墓地則是讓我體驗了一次神鬼傳奇的感覺，身後有無數隻骷髏士兵永無止盡的追著自己，而自己就要在這種情況下找到篝火，在這一區域每次找到篝火都會讓我有種鬆了口氣的感覺。&lt;/p>
&lt;hr>
&lt;p>文章差不多就打到這邊了，就像我一開始說的，如果你沒玩過魂3、也不知道魂1的地圖長啥樣，想體驗看看什麼叫地圖設計，那魂1可以嘗試看看，但如果你玩過魂3、或是知道魂1?
那我就覺得魂1不太適合玩了，畢竟也是十年前的作品有些地方都顯得有點過時，建議看看影片、看看實況補完就好，以我自己實際下去玩的感受，我覺得痛苦太多，收穫太少，有趣的點都因為預先知情而被淡化、無趣的點則因為玩過魂3而被無限放大，以上這些都是?
個人意見，如果版上有黑暗靈魂一代粉絲，我就在這邊說聲抱歉了。&lt;/p></description></item><item><title>Java內的排程器介紹</title><link>https://hoxtonhsu.com/p/java%E5%85%A7%E7%9A%84%E6%8E%92%E7%A8%8B%E5%99%A8%E4%BB%8B%E7%B4%B9/</link><pubDate>Thu, 06 Oct 2022 23:14:21 +0800</pubDate><guid>https://hoxtonhsu.com/p/java%E5%85%A7%E7%9A%84%E6%8E%92%E7%A8%8B%E5%99%A8%E4%BB%8B%E7%B4%B9/</guid><description>&lt;img src="https://i.imgur.com/9or5BzU.png" alt="Featured image of post Java內的排程器介紹" />&lt;h1 id="springboot-scheduling">SpringBoot-Scheduling&lt;/h1>
&lt;p>用來做定期任務的東西，有兩種&lt;/p>
&lt;ul>
&lt;li>Spring schedule：只適合處理簡單的計畫任務，不能處理分散式的任務，當任務太多時，可能出現阻塞、崩潰、延遲啟動等問題&lt;/li>
&lt;li>Quartz：更強大的一個排程器，能夠配置上百甚至上千的事務。&lt;/li>
&lt;/ul>
&lt;h1 id="spring-schedule">Spring Schedule&lt;/h1>
&lt;h2 id="步驟">步驟&lt;/h2>
&lt;ol>
&lt;li>在啟動類上加上@EnableScheduling&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@SpringBootApplication&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="nd">@EnableScheduling&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Application&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">SpringApplication&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">run&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Application&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>在方法上加上@Scheduled&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Component&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Task&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Scheduled&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">fixedDelay&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">10&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">100&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">printLocalTime&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">LocalTime&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">now&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/RJ1HtHT.png"
loading="lazy"
alt="image-20220914144530121"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="nd">@Scheduled&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cron&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;1 * * * * ?&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">zone&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;Asia/Taipei&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">printPer5second&lt;/span>&lt;span class="o">(){&lt;/span>
&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">info&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;cron&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/AATFHO2.png"
loading="lazy"
alt="image-20220914145339544"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Scheduled&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cron&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;0/1 * * * * ?&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">zone&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;Asia/Taipei&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">printPer5second&lt;/span>&lt;span class="o">(){&lt;/span>
&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">info&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;cron&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/Kby8DZf.png"
loading="lazy"
alt="image-20220914145730980"
>&lt;/p>
&lt;h2 id="cron表達式七子表達式">Cron表達式(七子表達式)&lt;/h2>
&lt;p>&lt;a class="link" href="https://cron.qqe2.com/" target="_blank" rel="noopener"
>表達式生成工具&lt;/a>&lt;/p>
&lt;p>Cron語源來自Chronos，是希臘神話中掌管時間的神柯羅諾斯(Chronos)。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>秒&lt;/th>
&lt;th>分&lt;/th>
&lt;th>時&lt;/th>
&lt;th>日&lt;/th>
&lt;th>月&lt;/th>
&lt;th>周&lt;/th>
&lt;th>年(可選)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>*&lt;/td>
&lt;td>*&lt;/td>
&lt;td>*&lt;/td>
&lt;td>*&lt;/td>
&lt;td>?&lt;/td>
&lt;td>?&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>秒：0-59&lt;/li>
&lt;li>分：0-59&lt;/li>
&lt;li>時 ：0-23&lt;/li>
&lt;li>日：1-31&lt;/li>
&lt;li>月：0-11或&amp;quot;JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC&amp;quot;&lt;/li>
&lt;li>周：1-7或SUN, MON, TUE, WED, THU, FRI,SAT&lt;/li>
&lt;li>年&lt;/li>
&lt;/ul>
&lt;p>想像一個時鐘&amp;hellip;&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>當每次秒針指向一秒時&lt;/th>
&lt;th>1 * * * * ?&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>當每次時針指向12時&lt;/td>
&lt;td>* * 12 * * ?&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>每個月 1 號中午 12 點&lt;/td>
&lt;td>0 0 12 1 * ?&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1 月每天中午 12 點，每 5 秒&lt;/td>
&lt;td>0/5 0 12 * 1 ?&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">字元&lt;/th>
&lt;th style="text-align:left">意義&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">&lt;code>*&lt;/code>&lt;/td>
&lt;td style="text-align:left">表達任意值，所有值都可以匹配&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>?&lt;/code>&lt;/td>
&lt;td style="text-align:left">只用在 &lt;code>日&lt;/code> 跟 &lt;code>周&lt;/code> 的值域，有點表達 don’t care 的概念，無所謂，不關心到底是什麼值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>-&lt;/code>&lt;/td>
&lt;td style="text-align:left">指定範圍，前後接數字: 10-12&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>,&lt;/code>&lt;/td>
&lt;td style="text-align:left">指定離散的選項: 1,5,6,8，或者的概念&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>/&lt;/code>&lt;/td>
&lt;td style="text-align:left">指定增量，表達 &lt;code>每&lt;/code> 的概念: 0/5 意旨從 0 開始每 5 單位&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>L&lt;/code>&lt;/td>
&lt;td style="text-align:left">用在 &lt;code>月&lt;/code> 跟 &lt;code>周&lt;/code> 的值域。在月的話表達最後一天，在周的話前面可以加上數字 3L 表示該月最後一個星期二&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>W&lt;/code>&lt;/td>
&lt;td style="text-align:left">用在&lt;code>日&lt;/code>的值域表示距離最近的該月工作日: 15W，距離 15 號最近的工作日，可能往前也可能往後&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>LW&lt;/code>&lt;/td>
&lt;td style="text-align:left">用在&lt;code>日&lt;/code>的值域，表示最後一周的工作日&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>#&lt;/code>&lt;/td>
&lt;td style="text-align:left">用在&lt;code>周&lt;/code>的值域，指定特定周的特定日: “4#2” 表示第二周的星期三&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>C&lt;/code>&lt;/td>
&lt;td style="text-align:left">用在&lt;code>日&lt;/code>跟&lt;code>周&lt;/code>的值域，指某特定個日期的後一天: 在&lt;code>日&lt;/code>中寫 3C 指該月 3 號的後一天，在&lt;code>周&lt;/code>中寫 2C 指該周星期一的後一天&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="quartz">Quartz&lt;/h1>
&lt;p>&lt;img src="https://i.imgur.com/C8FFRz9.png"
loading="lazy"
alt="image-20220916143034403"
>&lt;/p>
&lt;p>是一個開源的任務排程器，幾乎可以整合到任何Java應用程式中。&lt;/p>
&lt;p>它可以用來&lt;/p>
&lt;ul>
&lt;li>安排每個晚上把資料庫內容轉存到檔案&lt;/li>
&lt;li>提供定時提醒服務&lt;/li>
&lt;li>族繁不及備載&amp;hellip;&lt;/li>
&lt;/ul>
&lt;h3 id="底層數據結構--堆">底層數據結構- 堆&lt;/h3>
&lt;h4 id="介紹">介紹&lt;/h4>
&lt;p>堆是一種特殊的樹，滿足下面兩個條件，就是一個&lt;strong>堆&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>堆是一顆完全二元樹&lt;code>完整二元樹：除了最後一層以外，其他層的節點數需要達到最大(1,2,4,8. ..)&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/GYIKgRe.png"
loading="lazy"
alt="image-20220916103657827"
>&lt;/p>
&lt;ol start="2">
&lt;li>每個節點所儲存的值，必須要大於&lt;code>小頂堆&lt;/code>或小於&lt;code>大頂堆&lt;/code>父節點的值&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/t5Aeict.png"
loading="lazy"
alt="image-20220916104946559"
>&lt;/p>
&lt;blockquote>
&lt;p>小頂堆&lt;/p>
&lt;/blockquote>
&lt;p>完整二元樹的一些特性：快速定位父節點&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/F9btok2.png"
loading="lazy"
alt="image-20220916105634080"
>&lt;/p>
&lt;p>&lt;strong>在排程器的框架中，每一個節點就是一個Job，越頻繁的Job會被放置在越上層的節點&lt;/strong>&lt;/p>
&lt;h4 id="如何插入元素">如何插入元素&lt;/h4>
&lt;p>尾插法，在尾部插入一個新的元素，然後上浮，浮到符合定義&lt;/p>
&lt;ol>
&lt;li>除了最後一層以外，其他層的節點數需要達到最大(1,2,4,8. ..)，且最後一層節點都靠左排列&lt;/li>
&lt;li>每個節點所儲存的值，必須要大於&lt;code>小頂堆&lt;/code>或小於&lt;code>大頂堆&lt;/code>父節點的值&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/kGnnrnf.png"
loading="lazy"
alt="image-20220916110137933"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/YjWGVYi.png"
loading="lazy"
alt="image-20220916110150486"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/pqhvAgT.png"
loading="lazy"
alt="image-20220916110656733"
>&lt;/p>
&lt;h4 id="如何刪除元素">如何刪除元素&lt;/h4>
&lt;p>將尾部(最後一個節點)放置到堆頂，然後下沉&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/vM6IFnf.png"
loading="lazy"
alt="image-20220916111249806"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/ltoSIL1.png"
loading="lazy"
alt="image-20220916111306206"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/spOXHoC.png"
loading="lazy"
alt="image-20220916111330270"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/giEhi6Y.png"
loading="lazy"
alt="image-20220916111958376"
>&lt;/p>
&lt;h3 id="時間輪算法time-wheel">時間輪算法(Time Wheel)&lt;/h3>
&lt;p>&lt;img src="https://i.imgur.com/FGlGv1M.png"
loading="lazy"
alt="image-20220916114613849"
>&lt;/p>
&lt;p>再刪除元素的時候都需要下沉，當節點數很多時會造成性能延宕&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/djp3Uq4.png"
loading="lazy"
alt="image-20220916113838923"
>&lt;/p>
&lt;h4 id="round-型的時間輪">round 型的時間輪&lt;/h4>
&lt;p>任務上記錄一個round，遍歷到了就將round減一，為0時取出來執行&lt;/p>
&lt;h4 id="分層時間輪">分層時間輪&lt;/h4>
&lt;p>Cron表達式以及其他排程器所採用的底層架構，分成秒輪、分輪、小時輪、日輪、周輪、月輪、年輪&amp;hellip;，月輪迭代到了，就將任務取出放到天輪中執行&amp;hellip;，以此類推&lt;/p>
&lt;h2 id="cron表達式七子表達式-1">Cron表達式(七子表達式)&lt;/h2>
&lt;p>&lt;a class="link" href="https://cron.qqe2.com/" target="_blank" rel="noopener"
>表達式生成工具&lt;/a>&lt;/p>
&lt;p>Cron語源來自Chronos，是希臘神話中掌管時間的神柯羅諾斯(Chronos)。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>秒&lt;/th>
&lt;th>分&lt;/th>
&lt;th>時&lt;/th>
&lt;th>日&lt;/th>
&lt;th>月&lt;/th>
&lt;th>周&lt;/th>
&lt;th>年(可選)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>*&lt;/td>
&lt;td>*&lt;/td>
&lt;td>*&lt;/td>
&lt;td>*&lt;/td>
&lt;td>?&lt;/td>
&lt;td>?&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>秒：0-59&lt;/li>
&lt;li>分：0-59&lt;/li>
&lt;li>時 ：0-23&lt;/li>
&lt;li>日：1-31&lt;/li>
&lt;li>月：0-11或&amp;quot;JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC&amp;quot;&lt;/li>
&lt;li>周：1-7或SUN, MON, TUE, WED, THU, FRI,SAT&lt;/li>
&lt;li>年&lt;/li>
&lt;/ul>
&lt;p>想像一個時鐘&amp;hellip;&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>當每次秒針指向一秒時&lt;/th>
&lt;th>1 * * * * ?&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>當每次時針指向12時&lt;/td>
&lt;td>* * 12 * * ?&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>每個月 1 號中午 12 點&lt;/td>
&lt;td>0 0 12 1 * ?&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1 月每天中午 12 點，每 5 秒&lt;/td>
&lt;td>0/5 0 12 * 1 ?&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">字元&lt;/th>
&lt;th style="text-align:left">意義&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">&lt;code>*&lt;/code>&lt;/td>
&lt;td style="text-align:left">表達任意值，所有值都可以匹配&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>?&lt;/code>&lt;/td>
&lt;td style="text-align:left">只用在 &lt;code>日&lt;/code> 跟 &lt;code>周&lt;/code> 的值域，有點表達 don’t care 的概念，無所謂，不關心到底是什麼值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>-&lt;/code>&lt;/td>
&lt;td style="text-align:left">指定範圍，前後接數字: 10-12&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>,&lt;/code>&lt;/td>
&lt;td style="text-align:left">指定離散的選項: 1,5,6,8，或者的概念&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>/&lt;/code>&lt;/td>
&lt;td style="text-align:left">指定增量，表達 &lt;code>每&lt;/code> 的概念: 0/5 意旨從 0 開始每 5 單位&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>L&lt;/code>&lt;/td>
&lt;td style="text-align:left">用在 &lt;code>月&lt;/code> 跟 &lt;code>周&lt;/code> 的值域。在月的話表達最後一天，在周的話前面可以加上數字 3L 表示該月最後一個星期二&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>W&lt;/code>&lt;/td>
&lt;td style="text-align:left">用在&lt;code>日&lt;/code>的值域表示距離最近的該月工作日: 15W，距離 15 號最近的工作日，可能往前也可能往後&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>LW&lt;/code>&lt;/td>
&lt;td style="text-align:left">用在&lt;code>日&lt;/code>的值域，表示最後一周的工作日&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>#&lt;/code>&lt;/td>
&lt;td style="text-align:left">用在&lt;code>周&lt;/code>的值域，指定特定周的特定日: “4#2” 表示第二周的星期三&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>C&lt;/code>&lt;/td>
&lt;td style="text-align:left">用在&lt;code>日&lt;/code>跟&lt;code>周&lt;/code>的值域，指某特定個日期的後一天: 在&lt;code>日&lt;/code>中寫 3C 指該月 3 號的後一天，在&lt;code>周&lt;/code>中寫 2C 指該周星期一的後一天&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>​&lt;/p>
&lt;h2 id="重要api及概念">重要API及概念&lt;/h2>
&lt;blockquote>
&lt;p>記得Job類一定要是&lt;strong>public class&lt;/strong>，不然Scheduler會讀不到&lt;/p>
&lt;/blockquote>
&lt;p>釋例一：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Quartz&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">MyJob&lt;/span> &lt;span class="n">myJob&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">MyJob&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">JobDetail&lt;/span> &lt;span class="n">jobDetail&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">JobBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newJob&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MyJob&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withIdentity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;job1&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;group1&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">Trigger&lt;/span> &lt;span class="n">trigger&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">TriggerBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newTrigger&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withIdentity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;trigger1&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;trigger1&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">startNow&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withSchedule&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SimpleScheduleBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">simpleSchedule&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">withIntervalInSeconds&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">repeatForever&lt;/span>&lt;span class="o">())&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Scheduler&lt;/span> &lt;span class="n">scheduler&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">StdSchedulerFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDefaultScheduler&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">scheduler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">scheduleJob&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">jobDetail&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">trigger&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">scheduler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">SchedulerException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RuntimeException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">MyJob&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Job&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">execute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">JobExecutionContext&lt;/span> &lt;span class="n">jobExecutionContext&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">JobExecutionException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;MyJob execute:&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Date&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>釋例二&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">HelloJob&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Scheduler&lt;/span> &lt;span class="n">scheduler&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">StdSchedulerFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDefaultScheduler&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">scheduler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">JobDetail&lt;/span> &lt;span class="n">jobDetail&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">JobBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newJob&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SayHello&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withIdentity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;job1&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;group1&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="c1">//Job1是名字，具有唯一性，group1是這個Job屬於哪一組，同一組的Job可以共享相同的邏輯來處理Job。需要name與Job才可以組成一個JobKey
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">usingJobData&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;username&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;Hoxton&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">usingJobData&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;age&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;20&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withDescription&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;desc-demo&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">SimpleTrigger&lt;/span> &lt;span class="n">trigger&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">TriggerBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newTrigger&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withIdentity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;trigger1&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;group1&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">startNow&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withSchedule&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SimpleScheduleBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">simpleSchedule&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">withIntervalInSeconds&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">repeatForever&lt;/span>&lt;span class="o">())&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">scheduler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">scheduleJob&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">jobDetail&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">trigger&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">scheduler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">// scheduler.shutdown();
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">SchedulerException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RuntimeException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Slf4j&lt;/span>
&lt;span class="nd">@NoArgsConstructor&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">SayHello&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Job&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">execute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">JobExecutionContext&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">JobExecutionException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">JobDetail&lt;/span> &lt;span class="n">jobDetail&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getJobDetail&lt;/span>&lt;span class="o">();&lt;/span>&lt;span class="c1">//從context中獲取屬性
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">JobKey&lt;/span> &lt;span class="n">key&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">jobDetail&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getKey&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">Class&lt;/span>&lt;span class="o">&amp;lt;?&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">Job&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">jobClass&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">jobDetail&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getJobClass&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">description&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">jobDetail&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDescription&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">JobDataMap&lt;/span> &lt;span class="n">jobDataMap&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">jobDetail&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getJobDataMap&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">username&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">jobDataMap&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;username&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">age&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">jobDataMap&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getIntValue&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;age&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">info&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;\nJobKey : {},\n JobClass : {},\n JobDesc : {},\n username : {},\n age : {}&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">jobClass&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">description&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">age&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="scheduler">Scheduler&lt;/h3>
&lt;p>生命週期由ScheduleFactory建立開始，呼叫shutdown方法結束。&lt;/p>
&lt;p>當Schduler建立，任何關於Schduling相關的事情，都由它控制&lt;/p>
&lt;ul>
&lt;li>新增&lt;/li>
&lt;li>刪除&lt;/li>
&lt;li>列出所有Job&lt;/li>
&lt;li>暫停觸發器&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>在Start之前不會做任何事情&lt;/strong>&lt;/p>
&lt;h3 id="job">Job&lt;/h3>
&lt;p>你希望被排程器排程的任務元件介面，定義如何執行，是正在執行的作業例項，一個Job可以建立多個JobDetail，擁有不同的JobDataMap。本身implement了Job類&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">graph TD;
Job ---&amp;gt; JodDetail1 &amp;amp; JodDetail2 &amp;amp; JodDetail3 &amp;amp; JodDetail...
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">SendEmail&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Job&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">execute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">JobExecutionContext&lt;/span> &lt;span class="n">jobExecutionContext&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">JobExecutionException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;SendEmail&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>當Job的觸發器觸發時，排程程式的工作執行將呼叫excute()方法&lt;/li>
&lt;li>該方法接收一個&lt;code>JobExcutionContext&lt;/code>物件，為Job提供了豐富的執行時環境，比如&lt;code>schduler&lt;/code>,&lt;code>trigger&lt;/code>,&lt;code>jobDataMap&lt;/code>,&lt;code>job&lt;/code>,&lt;code>calender&lt;/code>,&lt;code>time&lt;/code>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>何謂Context(上下文)&lt;/p>
&lt;p>可以理解為環境、容器的意思會比上下文更具體一點，它提供了一個程式中全域性的資訊。&lt;/p>
&lt;/blockquote>
&lt;h3 id="jobdetail">JobDetail&lt;/h3>
&lt;p>用於定義Job的各種屬性、各種任務，還可以用來為Job儲存狀態資訊的JobDataMap，是將Job加入scheduler時，所需要創建的一個物件，它包含了各種屬性設置，以及用於存取job實例狀態訊息的JobDataMap，在創建JobDetail時，需要將欲執行的類名傳遞給JobDetail，這樣schedule就知道要執行何種類型的job。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">JobDetail&lt;/span> &lt;span class="n">jobDetail&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">JobBulider&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newJob&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Job&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">bulid&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="jobdatamap">JobDataMap&lt;/h3>
&lt;p>實作Map介面，因此具有Key-Value，儲存可序列化資料，供Job在執行時使用。也可以使用&lt;code>usingJobData(key,value)&lt;/code>在建構JobDetail的時候傳入資料，使用JobDetail.getDataMap()獲取Map。可以再透過jobDataMap取出裡面的數據&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="n">JobDetail&lt;/span> &lt;span class="n">job&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">JobBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newJob&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HelloJob&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withIdentity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;helloJob&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;hello&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="c1">//給job命名並分組
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">usingJobData&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;jobdd&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;hello job&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="c1">//通過JobBuilder的usingJobData方法給JobDataMap中塞入數據
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">HelloJob&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Job&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">execute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">JobExecutionContext&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">JobExecutionException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">err&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getJobDetail&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getKey&lt;/span>&lt;span class="o">());&lt;/span>&lt;span class="c1">// JobDetail的key又他的name和group組成
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">err&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getTrigger&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getKey&lt;/span>&lt;span class="o">());&lt;/span>&lt;span class="c1">// Trigger的key又他的name和group組成
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">err&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getJobDetail&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getJobDataMap&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;jobdd&amp;#34;&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">err&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;hello,quartz&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>會輸出&lt;/p>
&lt;p>`hello.helloJob&lt;/p>
&lt;p>hello.helloTrigger&lt;/p>
&lt;p>hello job&lt;/p>
&lt;p>hello, quartz&lt;/p>
&lt;h3 id="trigger">Trigger&lt;/h3>
&lt;p>觸發任務執行，觸發器可能具有與Job有關的JobDataMap，以便將觸發器觸發的引數傳遞給Job，Quartz本身提供了幾種觸發器&lt;code>SimpleTrigger&lt;/code>和&lt;code>CronTrigger&lt;/code>是最常用到的。&lt;/p>
&lt;h4 id="simpletriger">&lt;strong>SimpleTriger&lt;/strong>&lt;/h4>
&lt;p>用於一次性執行作業或需要在給定的時間觸發一個作業並重複執行N次，且兩次執行時間有Delay。用在具體的時間點，並已指定的間隔時間重複執行若干次，它包含了幾種屬性：&lt;/p>
&lt;ol>
&lt;li>開始時間&lt;/li>
&lt;li>結束時間&lt;/li>
&lt;li>重複次數&lt;/li>
&lt;li>重複間隔&lt;/li>
&lt;/ol>
&lt;p>釋例一：立刻觸發一次，然後停止&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="n">Date&lt;/span> &lt;span class="n">date&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Date&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">Trigger&lt;/span> &lt;span class="n">trigger1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">TriggerBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newTrigger&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withIdentity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;trigger1&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;group1&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">startAt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">date&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>釋例二：指定時間觸發，每隔十秒執行一次，重複10次&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="n">trigger&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">newTrigger&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withIdentity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;trigger3&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;group1&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">startAt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">myTimeToStartFiring&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="c1">// if a start time is not given (if this line were omitted), &amp;#34;now&amp;#34; is implied
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">withSchedule&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">simpleSchedule&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withIntervalInSeconds&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">10&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withRepeatCount&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">10&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="c1">// note that 10 repeats will give a total of 11 firings
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">forJob&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">myJob&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="c1">// identify job with handle to its JobDetail itself
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>釋例三：5分鐘以後開始觸發，僅執行一次&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="n">trigger&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">SimpleTrigger&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">newTrigger&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withIdentity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;trigger5&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;group1&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">startAt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">futureDate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">5&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">IntervalUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MINUTE&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="c1">// use DateBuilder to create a date in the future
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">forJob&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">myJobKey&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="c1">// identify job with its JobKey
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>釋例四：立即觸發，每個5分鐘執行一次，直到22:00：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">trigger&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">newTrigger&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withIdentity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;trigger7&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;group1&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withSchedule&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">simpleSchedule&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withIntervalInMinutes&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">5&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">repeatForever&lt;/span>&lt;span class="o">())&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">endAt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">dateOf&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">22&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">))&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>釋例五：在下一小時整點觸發，每個2小時執行一次，一直重複：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="n">trigger&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">newTrigger&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withIdentity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;trigger8&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="c1">// because group is not specified, &amp;#34;trigger8&amp;#34; will be in the default group
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">startAt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">evenHourDate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="c1">// get the next even-hour (minutes and seconds zero (&amp;#34;00:00&amp;#34;))
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">withSchedule&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">simpleSchedule&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withIntervalInHours&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">2&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">repeatForever&lt;/span>&lt;span class="o">())&lt;/span>
&lt;span class="c1">// note that in this example, &amp;#39;forJob(..)&amp;#39; is not called which is valid
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// if the trigger is passed to the scheduler along with the job
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">scheduler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">scheduleJob&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">trigger&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">job&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="crontrigger">&lt;strong>CronTrigger&lt;/strong>&lt;/h4>
&lt;p>希望以日期作為觸發任務的板機，就用CronTriger，&lt;strong>實務上比較常用這個&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="n">CronTrigger&lt;/span> &lt;span class="n">trigger2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">TriggerBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newTrigger&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withIdentity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;trigger3&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;group1&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withSchedule&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">CronScheduleBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">cronSchedule&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;0/2 * * * * ?&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">package&lt;/span> &lt;span class="nn">com.how2java&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import static&lt;/span> &lt;span class="nn">org.quartz.CronScheduleBuilder.cronSchedule&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import static&lt;/span> &lt;span class="nn">org.quartz.JobBuilder.newJob&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import static&lt;/span> &lt;span class="nn">org.quartz.TriggerBuilder.newTrigger&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import static&lt;/span> &lt;span class="nn">org.quartz.SimpleScheduleBuilder.simpleSchedule&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.util.Date&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.quartz.CronTrigger&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.quartz.DateBuilder&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.quartz.JobDetail&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.quartz.Scheduler&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.quartz.SimpleTrigger&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.quartz.impl.StdSchedulerFactory&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">TestQuartz&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="n">Scheduler&lt;/span> &lt;span class="n">scheduler&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">StdSchedulerFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDefaultScheduler&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">Date&lt;/span> &lt;span class="n">startTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">DateBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">nextGivenSecondDate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">8&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">JobDetail&lt;/span> &lt;span class="n">job&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">newJob&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MailJob&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">withIdentity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;mailJob&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;mailGroup&amp;#34;&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">CronTrigger&lt;/span> &lt;span class="n">trigger&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">newTrigger&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">withIdentity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;trigger1&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;group1&amp;#34;&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">withSchedule&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cronSchedule&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;0/2 * * * * ?&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">// schedule it to run!
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Date&lt;/span> &lt;span class="n">ft&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">scheduler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">scheduleJob&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">job&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">trigger&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;使用的Cron表达式是：&amp;#34;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">trigger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getCronExpression&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="c1">// System.out.printf(&amp;#34;%s 这个任务会在 %s 准时开始运行，累计运行%d次，间隔时间是%d毫秒%n&amp;#34;, job.getKey(), ft.toLocaleString(), trigger.getRepeatCount()+1, trigger.getRepeatInterval());
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="n">scheduler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">//等待200秒，让前面的任务都执行完了之后，再关闭调度器
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sleep&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">200000&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">scheduler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">shutdown&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="jobbulider">JobBulider&lt;/h3>
&lt;p>用來建立&lt;a class="link" href="#JobDetail" >JobDetail&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="n">JobDetail&lt;/span> &lt;span class="n">jobDetail&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">JobBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newJob&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">某個繼承了Job的類&lt;/span>&lt;span class="o">)...&lt;/span>
&lt;span class="n">JobDetail&lt;/span> &lt;span class="n">jobDetail&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">JobBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newJob&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SayHello&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withIdentity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;job1&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;group1&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">usingJobData&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;username&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;Hoxton&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">usingJobData&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;age&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;20&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withDescription&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;desc-demo&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>TriggerBulider&lt;/p>
&lt;p>用於建立&lt;a class="link" href="#Trigger" >Trigger&lt;/a>&lt;/p>
&lt;h3 id="identity">Identity&lt;/h3>
&lt;p>當Job和Trgger在Quartz排程程式中註冊時，會獲得標示鍵，&lt;code>JobKey&lt;/code>和&lt;code>TriggerKey&lt;/code>置入group中，易於組織管理，其中name與group必須&lt;strong>唯一&lt;/strong>&lt;/p>
&lt;h3 id="為何要將job和trigger分開來">為何要將Job和Trigger分開來?&lt;/h3>
&lt;blockquote>
&lt;p>While developing Quartz, we decided that it made sense to create a separation between the schedule and the work to be performed on that schedule. This has (in our opinion) many benefits.&lt;/p>
&lt;p>For example, Jobs can be created and stored in the job scheduler independent of a trigger, and many triggers can be associated with the same job. Another benefit of this loose-coupling is the ability to configure jobs that remain in the scheduler after their associated triggers have expired, so that that it can be rescheduled later, without having to re-define it. It also allows you to modify or replace a trigger without having to re-define its associated job.&lt;/p>
&lt;/blockquote>
&lt;h2 id="job與jobdetail的一些說明">Job與JobDetail的一些說明&lt;/h2>
&lt;ul>
&lt;li>Job是正在執行的作業，JobDetail則是作業的定義&lt;/li>
&lt;li>一個Job可以創建多個JobDetail，擁有不同的JobDataMap&lt;/li>
&lt;/ul>
&lt;p>舉例來說，今天寫了一個定時寄送信件的Job，叫做SendEmailJob，我們希望這個Job可以寄給客戶，然後在cc給你的主管，所以需要創建兩個不同的JobDetail，比如說SendEmailToClient、SendEmailToAdministor，並透過JobDataMap綁定參數傳遞至JobDetail中，這兩個JobDetail擁有各自獨立的JobDataMap，實現起來會更靈活。&lt;/p>
&lt;h1 id="參考">參考&lt;/h1>
&lt;p>&lt;a class="link" href="http://www.quartz-scheduler.org/documentation/quartz-2.3.0/quick-start.html" target="_blank" rel="noopener"
>官方文檔&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://iter01.com/575275.html" target="_blank" rel="noopener"
>任務排程框架Quartz快速入門&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.1ju.org/quartz/index" target="_blank" rel="noopener"
>Quartz教學基礎&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.796t.com/content/1545519797.html" target="_blank" rel="noopener"
>觸發器詳細定義&lt;/a>&lt;/p></description></item></channel></rss>