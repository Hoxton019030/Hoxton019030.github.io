[{"content":"最近在新電腦上安裝了Docker結果發現一直卡在這個畫面\n後來研究了一下發現應該是wsl沒有裝好的原因，後來安裝好之後，在把Window Update要我Update的東西全部更新一次，就可以執行成功了，推測應該是window版本沒更新，導致不支援wsl的關係。\n","date":"2023-01-21T00:52:36+08:00","image":"https://i.imgur.com/xgUpP8O.png)","permalink":"https://hoxtonhsu.com/p/docker_desktop_starting%E5%95%8F%E9%A1%8C%E8%A7%A3%E6%B1%BA/","title":"Docker_Desktop_Starting問題解決"},{"content":"名詞解釋 Container Docker Container 是一種軟體容器，它可以在其中運行應用程式和其他服務。它使用操作系統級別的虛擬化，可以在單一的物理主機上運行多個容器，並且每個容器都有自己的運行環境和資源。\nDocker Container 是一種軟體容器，它可以在其中運行應用程式和其他服務。容器具有輕量級、可移植性和隔離性等特點。容器是通過在操作系統內核中運行的容器引擎來實現的。\nDocker容器主要是使用了Linux 的 Namespaces 和 Control groups（cgroups） 技術來實現隔離，這兩種技術可以將一個實體主機上的資源限制給每個容器，而容器內部則是共用一個kernel，因此容器比虛擬機器輕量且速度較快。\nDocker容器是基於鏡像(Image)來建立與運行的，一個鏡像可以是一個基礎鏡像或是由其他鏡像所建立而來。當執行docker run 指令時，會從鏡像建立一個容器，並在容器內執行指定的應用程式或服務。\n不僅如此，Docker容器還支援網路、儲存卷的映射，使得容器可以與外部通訊，也可以存取本地端的資料。\n透過Docker容器,我們可以將應用程式、服務和其所需的環境打包在一起，並且可以在不同的環境中運行，提高了應用程式的可移植性和彈性。\nImage Docker Image 是 Docker 容器的基礎，它是一個只讀的模板，包含了容器運行所需的所有檔案、設定和程式。當執行 docker run 指令時，Docker 會從 Image 建立一個新的容器並在其中執行指定的應用程式或服務。\nDocker Image 可以通過構建或下載的方式創建，構建的方式可以使用 Dockerfile 來描述如何構建一個 Image。而下載的方式則可以從 Docker Hub 或其他的 registry 下載。\nVolume Docker Volume 是 Docker 的一種功能，用於管理容器中的數據。容器本身是輕量級的，數據是不能永久存在的，而 Volume 則是可以永久存在的。\nDocker Volume 可以被掛載到容器上，並且可以在容器內部存儲數據。當容器停止運行或者被刪除時，Volume 中的數據仍然可以保留下來。這樣就可以在重啟容器或建立新容器時，繼續使用之前存儲的數據。\n並且Volume裡面的資料是可以和Host分享的，兩邊的資料呈現鏡像的雙向對應，在Host新增的東西會在Container出現，Container新增的資料也會在Host裡面出現\n常用指令 查看目前的image 1 docker image ls 或是\n1 docker images 查看目前運行的Container 1 docker ps ps是process status的意思\n或是\n1 docker container ls ​\t執行docker image 1 docker run [imageName][:tag] 後面的:latest是版本號，可加可不加，沒加的話預設就是latest\n在Detached mode下執行 1 docker run -d nginx 所謂的Detached mode亦即啟動後會不會占用你的terminal，可以看一下下面的git，可以比較兩者間的差異\n沒有-d 有-d 打包成docker image 1 docker build -t drink-more-water . -t 是 tag的縮寫，hello-docker是這個tag的名稱，.代表所有檔案(吧?\n​\n查看目前運作中(running)的Container 1 docker ps 或是\n1 docker ps -a 查看底下全部的Container不論啟動與否\n停止Container 1 docker stop [ContainerId] ​\n刪除Container 1 docker rm [ContainerId]or[NAMEs] 也可以輸入很多個Id，一次刪個爽\n在Docker啟動Ubuntu 下載 ubuntu 的image\n1 docker pull ubuntu 或是可以\n1 docker run ubuntu 就會自動從docker hub載下來了，但這樣只是把ubuntu的image拉到我們的docker裡面，它本身是沒有啟動的\n在docker中運行ubuntu\n1 docker run -it ubuntu 使用apt(advanced package tool)安裝nano(Linux text editor)\n用apt載任何東西前都建議先update\n1 apt update 1 apt install nano Exposing Port 輸入docker ps可以看到以下資訊\n其中的PORTS 80/tcp的意思，容器對外公開的網路端口是 80/tcp，表示這個容器對外公開的網路端口是80，並且是基於TCP協議的。這意味著當外部網路瀏覽器連接到http://localhost或http://時，將會連接到容器內部的 Nginx Web 伺服器。想要讓容器的端口對外開放，就需要exposing它，否則直接打localhost:80是沒有用的。\n我們可以使用以下的方式將8080 連接到80/TCP\n1 docker run -d -p 8080:80 nginx 其中的8080:80的意思是指將主機的 8080 端口映射到容器的 80 端口。也就是說，當外部網路瀏覽器連接到 http://localhost:8080 時，將會連接到容器內部的 Nginx Web 伺服器。\n你也可以不只Exposing一個Port，可以Exposing多個port給80\n1 docker run -d -p 8080:80 -p 3000:80 nginx Container的管理 當我們啟動、並Stop一個Container，實際上如果依照我們剛剛的作法，我們是不斷的創造新的Container，輸入docker ps -a 即可看到目前存在的Container(不論running or Stopping)，或是在Desktop docker裡面也都可以看到\n我們可以透過\n1 docker rm [ContainerId] 來真正意義上的移除Container，而不是停止它\n可以使用docker ps -aq ，這個指令只會秀出ContainerId，可以刪更爽，直接複製貼上就好\n還有更爽的方式，用$(docker ps -aq)的方式 傳遞參數\n為Container命名 建議命名一下，比較好找，只支援英文，不支援中文\n1 docker run --name hoxtonPractice -d -p 8080:80 nginx Volume的使用 讓資訊可以在host與Container共享的一個功能\n範例：\n首先在桌面上創建一個名為website的資料夾，裡面有個index.html，內容如下\n1 \u0026lt;h1\u0026gt;hello docker and volume\u0026lt;/h1\u0026gt; 接著將terminal切至/website底下，然後輸入\n1 docker run --name website -v ${PWD}:/usr/share/nginx/html:ro -d -p 8080:80 nginx -v是 Docker 中的 volume 指令，它用於將主機上的目錄或檔案掛載到容器中。配合後面的${PWD}:/usr/share/nginx/html，意思就是將當前目錄的內容掛載(Mount)到容器中的 /usr/share/nginx/html 目錄下。這樣設定後，當主機上的目錄內容變更時，容器中的 /usr/share/nginx/html 目錄內的內容也會隨之更新。\n:ro 是指將主機上的目錄或檔案掛載到容器中的目錄或檔案，並設定為只讀模式。\n​\t這意味著在容器中將無法寫入或修改掛載的目錄或檔案，只能讀取。這可以避免對主機上的檔案造成損壞或不\t必要的變更。\n/usr/share/nginx/html 是 Nginx 預設的網站根目錄。 結果如下：\n也因為Volume是鏡像對應，因此修改host的檔案，container的內容物也會同步更新\n我們可以用以下的指令來訪問看看Nginx的檔案\n1 docker exec -it website bash docker exec 是 Docker 的命令行工具，用於在運行中的容器內執行命令。 -it 這兩個選項表示要互動式地執行命令，並且讓輸入和輸出保持連接。 website 是容器的名稱或 ID。 bash 是要在容器內執行的命令，這裡是啟動 Bash shell。也可以改成ls，就變成ls了，玩法很多，自行摸索 在Nginx裡面新增檔案，移除檔案，會發現host的資料夾檔案也同步更新\n不同的Container使用相同的Volume 1 docker run --name website-copy --volumes-from website -d -p 8081:80 nginx \u0026ndash;volumes-from [ContainerName]：將這次要啟動的Container使用和website一樣的Volume Dockerfile Dockerfile是一個文本文件，它包含了創建Docker image所需的指令。這些指令可以包括例如：\n從哪個基礎鏡像建立新鏡像 安裝需要的軟體 設置環境變量 添加應用程序文件 定義容器啟動時執行的命令 透過Dockerfile, 可以自動化的建立一個環境，方便在不同的環境上部署，使用者可以更方便的管理環境，以及減少部署錯誤的機會。\n例如，如果你有一個Java應用程序需要在多個不同的服務器上運行，你可以使用Dockerfile創建一個包含Java執行時環境的镜像，然後在每個服務器上執行這個镜像，這樣就能保證每個服務器上都有相同的環境。\n試著把剛剛寫的volume打包成一個image，首先在/website的資料夾裡面新增一個名稱一定要是dockerfile的檔案\n裡面的檔案結構長的像這樣子\n1 2 FROM nginx:latest ADD . /usr/share/nginx/html FROM：指定了基礎Image是nginx，後面的latest是指版本號。Dockerfile中必須要有FROM指令，它是一切的根本，它指定了基礎Image環境。舉例來說，這邊指定用最新版的nginx，那麼我們的鏡像會基於這個最新版的nginx環境運行 ADD：將本地目錄中的文件複製到鏡像中的指定目錄。在這個例子中是將本地目錄中的所有文件複製到鏡像中的/usr/share/nginx/html目錄。它的功能跟COPY有點像，但是COPY用法比較單純，只能複製本地文件和目錄到鏡像中，而ADD指令還可以解壓縮tar文件並將其中的文件複製到鏡像中。 ​\t值得注意的是\n1 ADD . /usr/share/nginx/html 這行指的是，將當前目錄的所有東西(以一個.表示)加入至Container中的/usr/share/nginx/html目錄中。在這個例子中就是將\n這些東西ADD進/usr/share/nginx/html裡面。\n當Dockerfile寫好後，要開始bulid它，步驟如下\n1 docker build website:latest . 這個命令是在使用 Docker 建立一個新的鏡像檔，並標記為 \u0026ldquo;website:latest\u0026rdquo;。 \u0026ldquo;.\u0026rdquo; 表示當前目錄下的 Dockerfile 檔案將會被用來建立映像檔。這個命令將會建立一個名為 \u0026ldquo;website\u0026rdquo; 並且標記為 \u0026ldquo;latest\u0026rdquo; 的鏡像檔。 Build完後就會出現一個image了，輸入\n1 docker images 就可以查看目前擁有的images\n並且可以這個image可以運行我們剛剛對index的設定，輸入\n1 docker run --name website -p 8080:80 -d website:latest 注意：這邊不需要再為website設置volume，因為我們已經將需要的東西打包進image裡面了。\n輸入完後，在URL的地方輸入localhost:8080就可以看到我們剛剛設置的東西了。\ngif如下\n​\n實際演練 NodeJs 前置作業 安裝Node.js，這邊安裝為了快速，就直接用Choco來裝了，Choco的安裝如下\n在Terminal中輸入，記得要以系統管理員身分輸入\n1 Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(\u0026#39;https://community.chocolatey.org/install.ps1\u0026#39;)) 安裝完後安裝nodeJs\n1 choco install nodejs 安裝完後隨便創一個資料夾，這邊命名叫做user-service-api\n切換到該資料夾底下，並且npm init它\n1 npm init 接著安裝express\n1 npm install --save express 用好後檔案結構長這樣\n在該目錄底下新增一個index.js的檔案，內容如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 const express = require(\u0026#39;express\u0026#39;) const app = express() const port = 3000 app.get(\u0026#39;/\u0026#39;, (req, res) =\u0026gt; { res.json([{ name: \u0026#39;Bod\u0026#39;, email: \u0026#39;bob@gmail.com\u0026#39; }]) }) app.listen(port, () =\u0026gt; { console.log(`Example app listening on port ${port}`) }) 使用nodejs運行\n1 node index.js 成功後進入localhost:3000即可看到下列畫面\n如此一來前置作業就完成了\n製作DockerFile 在目錄底下新增dockerfile，內容如下\n1 2 3 4 5 FROM node:latest WORKDIR /app ADD . . RUN npm install CMD node index.js WORKDIR：若Container有/app這個資料夾，則使用它，若沒有，則創造它。 ADD . .： 将当前目录中的文件复制到镜像中的 /app 目录。 RUN npm install： 在鏡像中运行 npm install 命令，安装应用程序所需的依赖项。 CMD node index.js：设置镜像启动时运行的命令，这里是运行 node index.js。 為什麼要分成RUN跟CMD呢？有幾個原因，首先RUN跟CMD的用途本身就不一樣，RUN主要是在創建image中執行命令，並將結果保存在image中，它主要用來安裝依賴、配置應用程式或其他操作。則是用來說明Image創建完成後要執行的動作。簡而言之，RUN是在創建Image中過程所執行的，而CMD則是在Image創建完成後所執行的。\n並且，一個DockerFile可以有很多RUN指令，但只能有一個CMD指令，因為Container只能運行一個CMD指令\n使用Image 接著創建鏡像\n1 docker build --tag user-service-api:latest . 創建完之後啟動鏡像\n1 docker run --name user-api -d -p 8080:3000 user-service-api:latest 這邊的8080:3000是指，將我們容器裡面原本配置的3000端口暴露出來，以8080來接收。\n因為3000是指在Container裡面的端口，host想要讀到它，必須將Container的端口暴露出來。因此localhost:3000會找不到東西，只有打localhost:8080才會有我們要的內容\nDockerIgnore 做完上面這些操作後，我們的檔案結構長這樣\n然後我們的Dockerfile長這樣\n1 2 3 4 5 FROM node:latest WORKDIR /app ADD . . RUN npm install CMD node index.js 比較之後發現一件事情，RUN npm install會創建node_modules資料夾，但我們在ADD時已經把node_modules加入進去，等於說我們重複創建了兩次node_modules，這種情況就類似gitIgnore，需要排除掉重複的資料夾\ndockerIgnore的寫法\n1 2 3 node_modules dockerfile .git 這樣就可以把這些檔案排除在外了\n","date":"2023-01-18T21:47:50+08:00","image":"https://i.imgur.com/JdDwgHn.png ","permalink":"https://hoxtonhsu.com/p/docker%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/","title":"Docker學習筆記"},{"content":" 前陣子在網路上找看看有沒有什麼實用的Git指令，無意間看到這個功能。\n只要在Github的頁面按下 \u0026gt; ，就可以開啟網頁版的Vscode囉，不過有個小缺點就是，Vscode開啟時介面語言是依據你瀏覽器的語言所決定，所以如果想要使用英文版的Vscode就要把Chrome的語言設定成英文喔。\n這樣開啟後最直觀的好處就是可以直接在Github上以Vscode編輯程式碼，做快速的修改，瀏覽起來也比較快，不然原本網頁在看的話速度非常的慢！並且也可以在上面做衝突的處理。\n","date":"2023-01-11T23:27:27+08:00","image":"https://i.imgur.com/Gckim1N.png","permalink":"https://hoxtonhsu.com/p/%E4%BD%A0%E7%9F%A5%E9%81%93%E5%97%8E%E7%8F%BE%E5%9C%A8github%E4%B8%8A%E4%B9%9F%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8vscode%E5%96%94/","title":"你知道嗎?現在Github上也可以使用Vscode喔！"},{"content":"前言 整理一下工作上有用過，並覺得實用、比較少人提過的一些Git指令。\nGit指令 退回到上一個Commit，數字可以更改，1就是上一次，改成三的話就是三次前的Commit 1 git checkout HEAD~1 退回上一次的Commit，重複輸入的話會往復循環 1 git checkout - 將本次修改合併至上次Commit，如果有漏掉的提交會常用這個指令 1 git commit --amend --no-edit ","date":"2023-01-06T14:15:51+08:00","image":"https://i.imgur.com/nCGDuUc.png ","permalink":"https://hoxtonhsu.com/p/%E5%AF%A6%E7%94%A8%E7%9A%84git%E6%8C%87%E4%BB%A4/","title":"實用的Git指令"},{"content":"開頭 Java中的例外分為受檢例外與非受檢例外(RuntimeExcetption)兩大類，可以先看到這張圖。\n所謂的非受檢例外就是指繼承了RuntimeException的Exception，這類的Exception發生，而非受檢例外就是指沒有繼承RuntimeException的Exception。可以看下列的圖片\n何謂受檢例外與非受檢例外 受檢例外之所以叫受檢例外，就在於這些例外是工程師必須明確檢查並處理的例外，例如讀取檔案時發生的FileNotFoundException，這類的Exception，JVM沒有辦法進行處理，因此需要工程師去做處理。而RumtimeException則是指那些工程師不需要去明確處理的Exception，比如說NullPointerException, ArrayIndexOutOfBoundsException，這類的例外都是繼承自RuntimeException，可以由JVM進行處理，當然要處理也是可以的，比如說這樣\n(可以看到左邊第13行的方法，沒有被try..catch包住也沒事，因為該方法拋出的例外是NumberFormatException，這個例外繼承了RuntimeException，因此不用try\u0026hellip;catch處理也沒關係，JVM會自動幫我們處理，如果要放到try\u0026hellip;catch的話，則是在catch段裡去catch NumberFormatException)\n將方法放入try\u0026hellip;catch之後，因為catch是抓RuntimeException，所以被抓到後會print出catch error。\n另外比較實務上的說法即是，受檢例外(checked Exception)是可被修復的例外，可以試看看retry，而不可修復的例外就是非受檢例外(RunTimeException)，這種時候就代表程式出了問題，有bug，需要工程師下來進行處理，把問題處理掉\n來源：2021 IT 鐵人 Day 09 單元測試與例外處理\n那如果一個method會拋出受檢例外，而在該method中又沒有做處理，則會需要呼叫它的那一個method進行處理。\n右邊的方法實際上不會拋出IOException，所以會顯示為灰色的，這邊只是作為Demo先寫上去。可以看到畫面左邊的地方，此時IDE跟我們報錯，說這個方法會拋出一個IOException，要我們進行處理，因為IOException是一個受檢例外，JVM本身沒有能力可以進行處理。\n大概先這樣，其他想到後補。\n","date":"2022-12-27T15:12:58+08:00","image":"https://i.imgur.com/dwbYvaF.png","permalink":"https://hoxtonhsu.com/p/java%E4%B8%AD%E7%9A%84throwthrowstry...catch%E5%8F%97%E6%AA%A2%E4%BE%8B%E5%A4%96%E8%88%87%E9%9D%9E%E5%8F%97%E6%AA%A2%E4%BE%8B%E5%A4%96/","title":"Java中的throw,throws,try...catch，受檢例外與非受檢例外"},{"content":"序言 參考資料：\nAgile Hsinchu 2022.11 - 〈你就是不寫測試，才會沒時間〉線上導讀\n測試有時間再寫？你就是不寫才會沒時間！\n你就是都不寫測試才會沒時間：Kuma 的 30 天 Unit Test 手把手教學，從理論到實戰 （Java 篇）\nTDD(Test-Driven Development)是一個軟體開發的模式，它的概念很簡單，就是先寫測試在寫程式，\n這樣的事情會讓我們覺得不可思議，因為我們一直以來寫程式的方式都是先寫程式，而測試則是有時間才再補的東西。那改成先寫測試會有什麼好處呢？這部分我們等等再來談，我們先討論TDD最核心的部分—單元測試(Unit Test)。\n單元測試在TDD的作用是什麼 ​\t一開始在認識單元測試的時候，許多人的想法都會認為說，單元測試可以避免Bug，可以提升程式碼的品質。確實這些都是Unit Test的好處，但卻不是最核心的關鍵，單元測試最重要的點在於幫助我們重構現有的程式架構。\n​\t我們在經手一個項目的時候，第二個月的理解一定會比第一個月的理解更深，第三個月的理解也一定會比第二個月的理解更加深刻，可能三個月前所使用的架構，在三個月後，隨著業務規模的擴展、需求的增加，而需要去新增新的程式，或是改變原有的設計，因而漸漸不敷使用，在這樣的情形下，若沒有單元測試的保護支持我們重構，讓我們確保每一步的Design都沒有破壞原有程式的設計，工程師會變得去害怕修改舊有的程式碼，因而導致不敷使用的架構繼續生長下去。\n(▲ 程式能跑，但還能在更好）\n​\t如果只是這樣子還沒什麼問題，畢竟就只是把東西一個接著一個地疊上去，頂多就是不好維護而已。但實際上的開發中，是很常出現改Ａ壞Ｂ這種情況的，在沒有單元測試的保護下，工程師在開發中是不會知道自己更新的這段程式碼會對某些程式造成影響，往往要等到合併後才能出現問題，所以會出現一種情況就是前期開發的都很順利，而越到後面Dead Line，效率就越發下降，因為工程師在開發的當下不知道自己新增的功能到底會不會對別人造成影響。而有了測試的保護，我們可以在寫程式的時候就知道現在程式的運行狀況，今天這樣子的修改會不會導致其他程式跑不起來，如果跑不起來那單元測試就不會過，這樣的回饋是立即性的回應，而不需要等到合併後大家才知道。\n(▲ 隨著開發時間的增加，TDD的優勢會更凸顯出來）\nAgile與TDD 講到Agile就會講到瀑布式開發(WaterFall)，但你知道嗎？其實從來都沒有瀑布式開發這種事情喔。\n瀑布式開發是來自於Winston Royce在1970所提出的論文Managing the Development of Larger Software Systems被提出，但事實上這個開發模式在這篇論文的下一行就被Winston Royce否決了。\nI believe in this concept, but the implementation described above is risky and inivites failure. The problem is illustrated in Figure 4 .\n我相信這個概念，但照著這上面的流程做的話是高風險且易導致錯誤的，原因就如第四張圖所示\n​\t(▲Figure 4)\nThe testing phase which occurs at the end of the development cycle is the first event for which timing, stotage, input/output transfers, etc, are experienced as distinguished from analyzed. These phenomena are not precisely analyzable. There phenomena are not precisely analyzable. They are not the solutions or the satndard partial differential quations of mathematical physics for instatnce. Yet if there phenomena fail to satisfy the various external constraints, then invariablt a major redesign is required . A simple octal patch or redo of some isolated code will not fix there kinds of difficulties. The required design changes are likely to be so disruptive that the software requiremnets upon which the design is based and which provides the rationale for everything are violated. Either the requirements must be modified, or a substantial change in the design is required. In effect the development process has returned to the origin and one can expect up to a 100-percent overrun in schedule and/or costs\n在開發流程的最後一個階段-測試，第一個遇到的事情就是時序、儲存，輸出輸入，這些現象情況無法準確的分析，這些不像數學物理的解答，或是標準偏微方程，然而，如果存在不能滿足各種外部約束的現象，則不可避免地需要進行重大的重新設計，一個簡單的八進制補丁或一些孤立代碼的重做不會解決這些困難，所需的設計更改可能會造成破壞，以至於違反了設計所基於的以及為所有事情提供基本原理的軟件要求。 要么必須修改要求，要么需要對設計進行實質性更改。 實際上，開發過程已經回到原點，預計進度和/或成本會超支 100%。\nWinston Royce在瀑布模型提出的當下其實就否認了它的意義，但後續被一些人拿來當作開發的窠臼，也導致了這種開發模式往往會在完工時出現重大的危害。Winston Royce認為，在最後的測試階段是充滿著未知與不確定性，到最後會反覆著在測試、程式修改、確認需求這三個階段來回擺盪，這樣三個階段的來回擺盪是不是有點似曾相似呢？沒錯，就是TDD的概念\n什麼是TDD TDD是一個開發模式而不是測試模式，TDD的測試模式是由\n寫一個會錯的測試 寫一個剛好會過的程式 重構 ​\t這三者循環，對應Winston Royce對瀑布模型提出的弊端，也就是測試、修改程式、確認需求，也因此TDD是一個可以讓問題早期浮上水面的開發方式，為什麼？因為這樣的開發方式要求我們對業務邏輯的需求有充分的了解，這樣我們才可以寫測試，一旦需求明確了，那麼寫出程式就只是時間的問題了。\n​\t另一方面，也是因為TDD的開發模式，我們每一個Code都有單元測試的保護，我們可以隨時重構我們的程式碼而毋須擔心程式被我們改錯，是的，沒錯，TDD的一個核心概念就在於任何時候都可以重構我們的程式碼，因為人對於系統的了解，會隨著開發時間的增加而了解的越深刻，半年前的Code到了現在可能越看越不順眼，另一方面，隨著業務規模的提升，我們早期的設計可能也會越不敷使用，若沒有單元測試的保護，我們重構的成本會隨著產品的規模的提升而提升，而發展到一定規模的情況下，重構變成遙不可及的夢想。\n​\t也是因為有單元測試的保護，我們才可以真正的去設計我們的程式，常見的S.O.L.I.D，以及23種設計模式的使用，如何根據不同的情境套用不同的設計模式，這就是工程師有價值的地方，可以說單元測試的撰寫完整了整個物件導向的程式設計。\n","date":"2022-12-04T22:22:06+08:00","image":"https://i.imgur.com/2xteh3C.png","permalink":"https://hoxtonhsu.com/p/%E6%B7%BA%E8%AB%87%E6%B8%AC%E8%A9%A6%E9%A9%85%E5%8B%95%E9%96%8B%E7%99%BC/","title":"淺談測試驅動開發"},{"content":"在Junit5中，有對一些Junit的測試的註解進行調整\n比如說\nJunit4 Junit5 測試用框架的選擇 @RunWith(MockitoJUnitRunner.class) @ExtendWith(MockitoExtension.class) 當測試會使用到SprintBoot框架時，應該要使用@ExtendWith(SpringExtension.class)，@MockBean來調用\n若測試不想涉及SprintBoot的時候@ExtendWith(MockitoExtension.class)，以及@Mock, @InjectMocks，並且使用MockMvcBuilders.standaloneSetup來設置獨立測試，以下是Code的示範\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import org.junit.jupiter.api.BeforeEach; import org.junit.jupiter.api.extension.ExtendWith; import org.mockito.InjectMocks; import org.mockito.Mock; import org.mockito.junit.jupiter.MockitoExtension; import org.springframework.test.web.servlet.MockMvc; import org.springframework.test.web.servlet.setup.MockMvcBuilders; /** * @author Hoxton on 2022/11/30 */ @ExtendWith(MockitoExtension.class) public class UserControllerTest { @Mock //Controller調用的Service UserService userService; @InjectMocks //要測試的Cotroller UserController userController; MockMvc mockMvc; //模擬Mvc @BeforeEach public void setMockMvc(){ MockMvcBuilders.standaloneSetup(userController).build(); } } ","date":"2022-11-30T13:30:27+08:00","image":"https://i.imgur.com/4qePz5L.png ","permalink":"https://hoxtonhsu.com/p/%E5%A6%82%E4%BD%95%E5%B0%87junit%E7%9A%84%E6%B8%AC%E8%A9%A6%E7%B2%92%E5%BA%A6%E6%8E%A7%E5%88%B6%E5%9C%A8%E6%9C%80%E5%B0%8F%E5%96%AE%E5%85%83/","title":"如何將Junit的測試粒度控制在最小單元"},{"content":"最近業配公司，讓公司老闆買了IDEA讓我們後端工程師來使用，因此技術分享做了一次IDEA的主題，在這邊把技術分享的一些內容做成文章，分享一下\n推薦的Plugin Plugin名稱 截圖 One Dark Theme\n佈景主題 按鍵提示 Rainbow Brackets\n括弧顏色顯示 Nyan Progress Bar\n讀取條改變 WakaTime\n工作的紀錄 要改的設定 Code Completion\nAlt+.\nSecond Basic Alt+/\nType-Match-Completion\nAlt+;\nRun F10\n就Run Terminal Alt+`\n更改Terminal Bash CMD or Window terminal 更改TODO 模板\n實用的快捷鍵 功能 預覽 sout,souv\n快速印出 搜尋 Shift+shift 快速列出所有可能，快速定位 切換分頁\nCtrl+E 預設快捷鍵，會列出最近開啟的分頁 選擇檔案\nAlt+F1然後按1\n若不想選擇按Esc退回Editor 快速選取區塊\nCtrl+W 快速選取方法\nAlt+↑ 查看根源\nCtrl+B 快速定位錯誤\nF2 查看變數提示\nCtrl+P 修改\nShift+F6 內建GitBlame功能\n對行數右鍵選擇gitBlame 萬能鍵Context Action\n引入變數、錯誤修正\u0026hellip; ","date":"2022-11-10T23:52:33+08:00","image":"https://i.imgur.com/zyn4XVp.png","permalink":"https://hoxtonhsu.com/p/idea%E7%9A%84%E4%BB%8B%E7%B4%B9/","title":"IDEA的介紹"},{"content":"推薦的Plugin Plugin名稱 截圖 One Dark Theme\n佈景主題 按鍵提示 Rainbow Brackets\n括弧顏色顯示 Nyan Progress Bar\n讀取條改變 要改的設定 Code Completion Alt+.\nSecond Basic Alt+/\nRun F10\n就Run Terminal Alt+`\n更改Terminal Bash CMD or Window terminal 更改TODO 模板\n實用的快捷鍵 功能 預覽 搜尋 Shift+shift 快速列出所有可能，快速定位 切換分頁\nCtrl+E 預設快捷鍵，會列出最近開啟的分頁 選擇檔案\nAlt+F1然後按1\n若不想選擇按Esc退回Editor 快速選取區塊\nCtrl+W 快速選取方法\nAlt+↑ 內建GitBlame功能\n對行數右鍵選擇gitBlame ","date":"2022-10-23T20:40:49+08:00","image":"https://i.imgur.com/Fx9nanx.png","permalink":"https://hoxtonhsu.com/p/intellij%E8%88%87eclipse%E7%9A%84%E6%AF%94%E8%BC%83/","title":"IntelliJ與Eclipse的比較"},{"content":"最近在研究C++，但發現我的CLion不知道為什麼只能有一個Main方法，後來網路上查了一下之後發現好像是因為CMake的關係。\n錯誤訊息\n後來研究了一下，發現只要在Project底下的CMakeList.txt加上這段就可以了\n1 2 3 4 5 6 file (GLOB files *.cpp) foreach (file ${files}) string(REGEX REPLACE \u0026#34;.+/(.+)\\\\..*\u0026#34; \u0026#34;\\\\1\u0026#34; exe ${file}) add_executable (${exe} ${file}) message (\\ \\ \\ \\ --\\ src/${exe}.cpp\\ will\\ be\\ compiled\\ to\\ bin/${exe}) endforeach () 完整的圖片如上\n加入之後記得要Reload CMake Project\n","date":"2022-10-17T18:09:43+08:00","image":"https://i.imgur.com/aGwtINt.png","permalink":"https://hoxtonhsu.com/p/clion%E7%9A%84mutilmain/","title":"CLion的MutilMain"},{"content":"前言 一直以來都把GitHub當成自己的筆記本在用，上傳了很多筆記，但最近心血來潮想把這些東西整理起來。最原先的想法是上傳到Medium，但發現Medium居然不支援Markdown的語法，索性放棄，後來某天看到之前高中同學有在用github.io的方式寫blog，於是也稍微研究了一下，原先以為可能一兩天就處理好，但最後發現弄了也快一個禮拜，於是想把這些坑記錄下來。\n創建GitHub Repository submodule是什麼? 從Hugo上下載自己想要的主題(thmem) 如何在本機預覽Hugo頁面 如何新增文章 hugo的檔案結構介紹 如何配置自己想要的模板(config.toml) 關於baseURL的細節 如何自定義文章模板 如何將自己的網站上傳到GitHub上面 如何push上去 在其他台電腦要怎麼clone下來 如何建立留言功能 GitTalk 如何購買自己的DNS Google Domain ","date":"2022-10-08T12:04:44+08:00","image":"https://i.imgur.com/WSwohcu.png ","permalink":"https://hoxtonhsu.com/p/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hugo%E5%9C%A8github%E4%B8%8A%E6%9E%B6%E8%A8%AD%E9%9D%9C%E6%85%8B%E7%B6%B2%E9%A0%81%E5%AE%8C%E6%95%B4%E6%95%99%E5%AD%B8/","title":"如何使用Hugo在Github上架設靜態網頁完整教學"},{"content":"前言 蓋塔生兵\n用蓋塔生兵這個詞彙有點不太準確，比較正確的說法是自動產兵型遊戲，這種類型的地圖一開始會給你一塊地，然後這塊地會隨著時間自動產兵，比如說兩秒產一隻士兵這樣，並且能用殺敵獲得的黃金來升級自己的士兵，不論是單純的加血加甲，或是升級成更高單位的士兵，而這類遊戲最大的樂趣就在於取消了部隊上限，能夠像是全面戰爭那樣，操控50~100多隻的士兵上場殺敵，代表的遊戲類型有：城堡大戰、刺蛇大戰，前者是玩家們分成兩個陣營，有點類似現在的DOTA，有路線有野怪，也有系統自動產生的兵線。後者則是最原汁原味的玩法，有些地圖會是刺蛇或是小狗，看地圖而定。 這個類型的遊戲不算熱門，但是非常好消磨時間，單機的情形下最後造出一堆高階兵種，比如說寒霜翼龍或是狼騎兵輾壓戰場，看著所有士兵車過去的感覺特別爽。\n鬼抓人（吸血鬼復蘇、巨魔與精靈）\n用鬼抓人這個詞彙也不太準確，正確來說比較接近現在的非對稱式生存遊戲。遊戲的玩法是有數名玩家擔任農民，少數玩家扮成鬼，一開始農民先行動，在地圖上找尋合適的地點，開始建立城牆、防衛塔、瞭望塔之類的防禦型設施，防範鬼的入侵。而鬼的玩法則是進攻人類的住所，扛著防衛塔的傷害努力打破城牆，進去殺死人類。以上是比較基本的規則，但隨著遊戲的更新也會增加越來越多功能，比如說鬼也能遠距離攻擊，隔著城牆殺死農民，或是農民死掉後會變成鬼，增加玩家留存率，代表的遊戲有：鬼抓人、樹人與炎魔、巨魔與精靈，這三者都各有特色，但後兩者我忘記具體有什麼差別。這種類型的遊戲也出現過很多變體，比如說貓抓老鼠之類的，但已經是比較後期的事情了。 這應該是我第一次接觸到的魔獸爭霸小遊戲地圖吧，也是我認為最經典的，放到現在看也不過時，非對稱式的遊戲方式與生存、建造的融合，讓這類型的遊戲一直都有人在開發，有件有趣的事情是，當時我記得我可能小二小三吧，那時候在網咖裡面加進去一個房間，地圖就叫做性愛鬼抓人，結果進遊戲之後發現只要有人被抓，畫面就會變成無碼色情圖，然後還會有超大聲的淫叫聲，當時的我也不知道那到底是什麼，玩了一下之後就跳出去了。\n金字塔大逃亡\n個人不知道這是不是台灣人做的地圖，但是應該算是目前還會被提到的魔獸小遊戲吧，知名實況主紹安就是在實況上玩這款遊戲的魔改版《性愛金字塔》，而被圖奇永Ban，從 此之後只要有實況主被ban臺就會被稱作「進金字塔」。 金字塔大逃亡本身是一個小遊戲總集，遊戲的主線就是玩家進場後可以從約30幾種小遊戲裡面選擇約8~10種小遊戲，全部完成後就可以通關這個金字塔。而這些小遊戲包刮但不限於 殺敵生存-玩家們重生在一個小競技場裡，會有各個波次的敵人依序產生，目標就 是活到最後。 機智問答-有點像是視力測驗的小遊戲，畫面上會有各種不同顏色的怪物數隻，隨機地走動 ，當時間結束後，會問你說「請問橘色的食屍鬼有幾隻?」「藍色的鬼魂有幾隻?」。 計步遊戲-一開始玩家會出現在一個類似棋盤的地圖上，接著會有一位系統npc在棋盤式的地圖上位移，而玩家的目標就是記住它是怎麼走的，必須要讓自己的步伐和npc吻合，不然就輸了 這遊戲我玩了很多次，但沒有一次有過關的。\n跳跳球\n「手殘復健專用」。遊戲的視角從魔獸的3D視角變成垂直90度的視角，畫面上看起來就是一款2D遊戲，實際遊玩方式很接近現在的CELESTE，都是在2D的地圖上用跳躍、蹬牆跳 之類的方式到達指定的地點。 雖然說這遊戲的玩法看起來不是特別有創意，但它是一款多人類型的地圖，遊戲裡面死掉後除了等全滅之後的復活外，還可以讓隊友碰觸到你的屍體來復活，我覺得這一點是很有創意的一點，但不知道為什麼沒看到有遊戲發行商做過類似的獨立小品。跳跳球的難體現在三點上，1.遊戲後期會有那種只要沒跳掉，就不會再出現的平台，除非等到所有人重生。2.遊戲會隨著時間，操作越來越延遲。3.手殘\n大屌大戰\n這款我很確定是臺灣玩家的地圖，因為從隊伍選擇裡面就可以看出作者的惡趣味， 藍方「來自東方的大屌」紅方「來自西方的洋屌」。而遊戲方式則是所有人重生在一個 開闊的鬥技場，對戰方式則是以指向技的方式丟擲槌子（遊戲裡叫大屌），如果累積足夠的經驗還可以放大招，丟出一個更巨大的槌子（遊戲裡叫笑傲飛屌）。遊戲裡面也可以購買各種不同的技能，比如說跳斬、大絕之類的，也有現在流行的「配件改變技能」系統，可以購買各種道具，讓自己的大屌解鎖不同的功能，比如說爆炸屌、時空屌、激流屌之類的技能。時不時出現在場上的隨機效果也會令人會心一笑，比如說中樂透（獲得大筆金錢）、動物園動物逃竄（地圖上出現許多動物經過，會有傷害）或是撿到鋼彈（遊戲裡面會有一台鋼彈讓你操作），我覺得最好笑的應該就是固樂沙敏，這個效果觸發後，會有一名玩家跑速變快，而背景音樂也會改成固樂沙敏的廣告「ㄎㄨˊ落，爬起來」。 當初在高中的時候邀身邊的同學一起玩，討論的內容都是「今天要不要玩大屌大戰」「我的屌超準」「我才不要玩，每次都被你的大屌噴死」之類的對話，不知道當時身邊的女同學都在想些什麼呢。\n神奇寶貝防衛戰\n這應該這幾年大家最熟悉的遊戲，Dota自走棋、LoL自走棋、爐石戰場之類的遊戲，都 是源自這款遊戲(應該啦，我也不確定)，遊戲方式就是從許多神奇寶貝裡面選出幾種，然後它們就會自動打怪，我們要做的事情就是升級神奇寶貝、選擇神奇寶貝而已，遊戲裡面的許多神奇寶貝都有獨立建模，印象最深的大概就是鯉魚王吧，因為它每個階段後面都是鯉魚王LV0(警告，這個單位很廢)鯉魚王LV30(警告，這個單位仍然很廢)，直到將它升級成暴鯉龍之後才不會顯示後面的詞綴，強度也是正常的。 神奇寶貝防衛戰當時還很簡陋，大概就像我上面介紹的那樣子，並且在加入一些屬性相剋的系統，後代的一些遊戲比如說爐石會有搭配系統，而神奇寶貝防衛戰就我所知應該是沒有的，使得遊戲一開始很新鮮，但玩久之後就缺乏深度，但是真的很好玩，我記得當初我有個朋友看到名稱叫做「神奇寶貝防衛戰」還萬般排斥，但玩了之後卻直喊真香。\n越獄\n這個遊戲其實算是鬼抓人的變體，但它改了太多的東西。遊戲方式是分成警察組 （兩人）與小偷組（八人），在一個城鎮裡面警察抓小偷，警察一開始擁有遠高小偷的火力，而小偷則是要在整個城市中逃竄，努力壯大自己，比如說去遠方的島嶼學習仙人術，或是進到城鎮底層變成血高傷痛的狂人最後攻進警察總部裡面殺死警察。遊戲裡面的地圖真的做的很棒，公園區、銀行區、森林區、市集區，比較常見的開局就是所有人進場分成搶劫組與修練組，搶劫組一開場就先去搶銀行，然後把金錢分給修練組的玩家，修練組的玩家在趕緊花錢購買裝備、拜師學藝，後面在反殺警察。而我最常的玩法就是偷偷地躲進森林區，利用物件把自己卡進森林裡面，在裡面蓋一個小型市集，當仲介商，負責造錢給其他玩家或是幫忙買東西。\n水之TD、守城遊戲 TD遊戲自從魔獸三沒落後，好長一段時間都沒有什麼類似的遊戲，雖然市場上陸陸續續都有在更新類似的遊戲，但總給人不溫不火的感覺。但在當時，TD類型的遊戲可謂是魔獸的大宗，舉凡元素TD、守望女神TD、害人守塔之類的TD遊戲佔據了小遊戲圖的半邊天。這類型的遊戲就是在固定的路線上製作防禦設施，目標就是在敵軍抵達終點前消滅它們。 而其中我最喜歡的TD守城就是水之TD，單純就只是這款特別簡單而已，而且操作也不複雜，而有其中一小關，我不確定是不是第64關，敵方是一群坦克，每次玩到這關的時候我都會在語音裡面大喊天安門事件。 守城遊戲則是占據了魔獸小遊戲圖的另外半邊天，這種遊戲類型會讓玩家扮演一名英雄，可能是魔獸爭霸裡面的，或者是某些動漫作品裡面，接著敵方會依照波次派遣軍隊過來攻擊我們的主堡，而我們的目標就是守住，地圖上會有商店、野怪、練功區之類的地方，讓玩家可以快速升級刷錢代表類型有：火影忍者的羈絆、神之墓地、守護女神之類的。 說起來好笑，這類型遊戲我覺得最大的樂趣就是無腦，遊戲裡面的角色初期大概就可以學一堆技能，舉凡分身術、劍刃風暴、大玉螺旋丸之類的大範圍高傷害技能，且攻速都快的離譜，每隻角色看起來都像本多開大一樣，所以常常看到自己的角色在練功場刷怪，只要怪一重生就立刻被秒掉，頗有現在免洗手遊的味道在裡面。\n術士大戰\n​ 這應該是這個表單裡面最冷門的一款吧，因為這款出的時候差不多2012，當時GGC的魔 獸房已經不用黃金會員就能擠進去了，玩魔獸的人銳減，使得這款遊戲並沒有獲得太多人的注意。遊戲玩法講簡單一點就是推人出去，地圖會越來越小，只要被推出去就會扣血，而玩家可以用許多技能讓攻擊對手，比如說火球術，被丟中就會後退，或是滾石術，擲出一個巨大的滾石，被擊中後就會被滾石的模組推著往外滾，也有一些技能比如說鎖鏈，可以勾住敵人並且扣血，或是勾住場上的物件讓自己勾回場上，而我發明的一種方式就是用滾石術配上鎖鏈，這樣子敵人一方面被滾石往外推，另一方面又被鎖鏈牽扯住受到持續傷害，四字「高手境界」。 而遊戲裡面還有更多更多的技能與道具可以使用，只可惜玩的人並不多而已。\n侏儸紀公園\n這張地圖也是我之所以想寫這篇文章的原因，這張圖我認為是小遊戲之王也不為過。遊戲方式是一群人降落在一個叢林裡，然後找尋一個適合自己的地方，築起電網、電牆，蓋起機槍哨塔之類的防禦設施，然後發展各種學院，比如說物理學院、機械學院、生物學院之類的，升級成激光哨塔、火箭炮塔、核子電牆之類的，甚至還能養恐龍，或是學習武術技巧與成年雷克斯暴龍PK。我會覺得這張地圖很好玩的原因，是因為這不像是鬼抓人那種類型遊戲，會給妳很多看起來就很適合蓋的地點，在侏儸紀公園裡面，很多時候你蓋的地方可能只有幾棵樹木當成天然屏障，很容易就會有小恐龍穿進縫隙進到你的家園，或是大型恐龍倒地後會使得樹木倒塌，門戶洞開。且遊戲裡面的氛圍營造的很好，大型恐龍在附近的時候會聽到許多恐龍的低吼聲，靠近的時候整個畫面會震動，我記得我小時候玩的時候覺得超恐怖的。而遊戲發展到後期，救援直升機就會抵達叢林，這時候我們就需要用我們之前研究的科技，比如說車輛或是機械部隊，殺出一條血路，搭上直昇機逃離這個侏儸紀公園。 綜合來說，侏儸紀公園是一張結合了生存、發展、營造、合作、探索的超強遊戲，簡陋的畫面仍然無法遮掩它極佳的遊戲性，缺點也是有的，首先成長期實在太久，雖然遊戲的時間可以選擇要30、60還是90分鐘，但過低的遊戲時數基本上沒辦法撐過最後一波的恐龍大進攻，使得玩家通常都是選擇60分鐘為一局，且遊戲裡面的物理學院實在太強，各種高科技設施和防禦工程，使得其他學院的技術就有點娛樂性質，但整體來說絕對是魔獸爭霸小遊戲的王者當之無愧。\n東京甩狗\n​ 太多人說要加東京甩狗了，趁有空的時候打一打。東京甩狗這遊戲有點複雜，其實很像團康遊戲的氣球爆在誰手上。地圖是一個空曠的場地，約有八名玩家，會有其中一名玩家持有球，而地圖上會有一隻「狗」去抓拿球的人，被追到就死了。 而這遊戲叫做東京甩狗的原因就是因為狗的運動方式不是直線，而是有點像甩尾一樣的方式靠近持球者，持球者「甩狗」的時間越久，則接下來把球丟給下一個人的時候，狗的速度就會變超快的衝向下一個人，而且背景也會有龜派氣功的集氣聲，配合上背景音樂的Linkin park -faint ，讓場面充滿緊張刺激的氣氛！\n後語： 這十大遊戲是我心目中的排名，不一定符合大多數人的看法 大概兩年前自走棋剛出來暴紅的時候讓我蠻震驚的，因為我好像十幾年前就玩過類 似的遊戲，當時就覺得怎麼一群人還在玩我小時候玩的遊戲還不亦樂乎？後來回顧了一下許多魔獸爭霸的小遊戲，其實都頗具潛力，比如說跳跳球就可以做成像Fall guys的同樂遊戲，越獄改一改其實也是另一種型態的非對稱競技、蓋塔生兵其實也可以做成像是全戰那種類型的RTS、侏儸紀公園如果用現在的技術重製的話應該也能掀起一波恐龍生存熱潮? 全部看完下來其實還有很多遊戲想要列上去，比如說臺灣人自己開發的EoU(End of Upotia)，也算大作，只可惜最後沒在更新，當時我還有記下我的登入碼。還有各種動漫人物大亂鬥、藍綠大戰、小兵的故事、卡牌大戰、勾肥大戰、亡者之夜、狼與羊、還有最白癡的誰是智障、強者大戰、海綿寶寶溜冰、歐洲大戰、坦克大戰、東京甩狗、神鬼戰士、你畫我猜、達爾文進化島、船難求生、森林大逃亡之類的，每款遊戲放到現在都是遊戲性很高的作品，當初淬鍊重生出來時，我以為會再掀起一波魔獸熱潮，結果淬鍊重生整個大爆死，最後不了了知。 想來寫一下這篇文章，原本是預計做成影片的形式的，但無奈很多地圖我都 已經找不到載點，BattleNet上面也都沒有活人、GGC老早也把連機房停掉了，現在要連的話好像也只能透過中國的平台連，無奈我有點懶得去理解要怎麼註冊，也怕註冊後根本沒人玩這些小遊戲，後來前陣子PTT開放註冊，就決定還是用寫文章的方式紀念一下這個陪伴 我國高中生活的遊戲。\n","date":"2022-10-08T03:13:34+08:00","image":"https://i.imgur.com/RALUdJZ.png ","permalink":"https://hoxtonhsu.com/p/%E5%8D%81%E5%A4%A7%E7%B6%93%E5%85%B8%E9%AD%94%E7%8D%B8%E5%B0%8F%E9%81%8A%E6%88%B2%E5%9C%B0%E5%9C%96/","title":"十大經典魔獸小遊戲地圖"},{"content":"無雷心得： 2013年的作品了，最近特價才把它買回來玩，如果要講無雷心得的話，我會建議遊戲直接開最低難度就好，然後留聲機(遊戲裡面的文本訊息)多收集，沒有字幕，但是點進去會有逐字稿，強烈建議看一下，不要像我一樣什麼都沒看，會有蠻多地方不太清楚的，無雷心得我就講到這邊，因為這遊戲的劇情只要稍微提一下就會有暴雷的成分，遊戲時長約為10小時，算是很短了，推薦嗎？推薦，因為超多人都說劇情很神，300元當作看一場電影也不虧，適合你周末時買來玩。\n有雷心得： ​\t其實原本是想打魂類遊戲心得的，但寫一寫發現怎麼寫都不喜歡，就決定來寫生化奇兵無限的心得，我劇情放在最後講，先講遊戲性的部分。 生化奇兵的遊戲性如果要我給個分數的話，我應該會給40~50分吧，不及格的原因是因爲我在玩的時候沒有一瞬間是覺得戰鬥是有趣的，會覺得不好玩的原因有以下幾點\n遊戲能攜帶的槍枝種類只有兩種\n雖然說大部分的FPS遊戲，能攜帶兩種槍枝算是基本設定，但由於我全程都是以最高難度的過程中，把子彈打空是家常便飯的事情，但遊戲裡面的特殊單位，比如說機甲華盛頓、大猩猩機器人等等，沒什麼難的，就只是血特別多，雖然說機甲華盛頓背後好像有啥弱點可以打的，但敵方目標全程都是鎖定在玩家身上，能繞背的場景真的太少，有時候打一打就沒子彈了，就必須得全場一直撿子彈，但這遊戲也沒有現在遊戲常見的滑鏟或是奔跑等要素，總是會覺得移動起來不夠俐落，很容易就變成靶子被敵人亂槍掃射，這也是為什麼 我會建議遊戲用簡單模式玩就好，痛苦太多，收穫太少，能簡單大家都不想複雜。\n遊戲的魔法都沒啥用\n我不確定這是不是我個人的感覺，但我感覺這遊戲的魔法有用的真的沒幾個，我最常用的應該就是把敵人吹起來的，還有把敵人吹走的，剩下什麼控制心靈、火球術之類的，在魔力條有限的情形下，不如控場住對面然後瞄頭射擊來的更有效率，魔法這個系統，以我自己的觀點來看，雖然沒有到「刪了也沒差」的程度，但確實沒有給我帶來太多顯著性的幫助，我期望的魔法，雖不像Dishonored那樣無所不行，但至少應該也要做到像隻狼的忍具那樣，不用不會怎樣，但用了會很不一樣，有看過人家抱怨，說是這代把魔法系統閹割掉太多，前幾代魔法很有用之類的。\n遊戲的敵方設計不夠有趣\n我破完這遊戲大概快兩個月了，我憑印象想到的敵人，就是普通士兵、機甲華盛頓、猩猩機器人，這三個的差別就是，會開槍；會開槍然後血很厚；會開槍然後血很厚還會衝過來扁你，其實差別並不大，所以我在玩高難度的時候腦袋基本上是放空狀態的，我不太需要知道我眼前的敵人有什麼弱點，或是要怎麼應對，我需要的就是不停開槍而已，講白話一點就是，我在打我的，敵人在打他的，我跟敵人沒有什麼太多互動的機會，我會希望我跟敵人之間更有互動，比如說可以打掉華盛頓的手臂，它的槍砲會掉落，然後會轉身去撿，我可以順便射背後，諸如此類的設計，讓戰鬥過程有點動腦的感覺。\n另外我常常在心得裡面看到有人說，伊莉莎白是他所見過，最栩栩如生的同伴，說她不止會丟補丟槍丟丟銅仔，還會針對場景中的物品互動。有可能是因為我玩的是最高難度，因此伊莉莎白大部分對我的幫助都還好，沒有真正意義上的幫助到我，更多時候她就開場丟了一個補之後就躲在掩體後面，然後掛機看我輸出。我會更希望伊莉莎白能做一些更積極性的行為，讓我感覺到她有在跟我冒險的感覺，說白了一點就是希望她可以像龍族教義的pawn一樣，能輸出能壓制能開戰，或者是像COD一樣會跟著玩家一起站在前線，我「個人」會更喜歡伊莉莎白一點，當然也許伊莉莎白不敢弄髒自己的雙手，只敢把子彈丟給布克叫他開槍，降低自己的罪惡感。\n最後要講的是劇情，我就先講了，我不太滿意，這原因可能有兩個，一個是因為我懶，遊戲裡面，不能說有大量的，但確實是有一定數量的留聲機散落在地圖各處，這些留聲機有的重要，有的又不太重要，在播放的時候也沒中文字幕，只能點進去留聲機裡面才能看到 歷史文本，我「個人」，再次強調我「個人」不太喜歡這種把劇情放進收集要素裡面的系統，因為這種系統一來是很麻煩，沒有提示我又要去找，又可能是反過來，我根本不知道有這個留聲機的存在，變成我每次撿到的留聲機都是隨緣的，他們可能是對於某個歷史事件、或是某個人物的介紹，但因為我漏掉了某個留聲機，我就不能知道這件事情、這個人到底從頭到尾發生了什麼事，比如說遊戲裡面的兄妹的背景故事有很大一部分就是藏在留聲機裡面，也是留聲機揭露出了他們不是兄妹，而是兩個平行時空的同一個人，只是性別不同罷了。\n有些人可能會很喜歡這種自己收集物品來拼湊故事的敘事方式，但我真的很抱歉我不是那麼優秀的人類，我會更希望隨著劇情，他會把那些文本直接丟給我。\n接下來要講結局，誠如我上面說的，我對於劇情，其實應該是說結局不太滿意，我會講一下我認為的好結局（魔女之家以及我個人認為的伏筆應該要怎麼樣會比較好（屍人莊殺人事件），如果有人沒有玩過魔女之家、沒有看過屍人莊殺人事件的朋友也可以先迴避一下。\n平心而論，生化奇兵３的前面鋪成是很好的，至少它解釋了伊莉莎白的能力起源，以及布克夢中的神祕敲門客時，我確實是有感覺到一點東西的，然後當最後伊莉莎白的限制器被解除，剎那間她超脫世界上所有一切，僅用轉瞬之間就洞悉了宇宙的光陰，過去發生的 ，現在存在的，未來注定的一切，全知全能的伊莉莎白。她帶著布克走進了燈塔，然後燈塔裡有更多的布克與伊莉莎白交錯來回走在不同的燈塔裡，「所有的一切都在不停地發生，但每次都會有些許不同」，伊莉莎白帶著布克回顧了故事開始的源頭．．．當布克了解一切後，要求伊莉莎白讓他殺死康斯姆托克，終結這一切，伊莉莎白眼裡閃過一絲猶豫，但最後還是打開了一扇新的大門，回到布克接受洗禮的那一天，布克不解，轉過身後發現有無數個伊莉莎白站在背後「所有的一切都在不停地發生，但每次都有些許的不同，現在的你，當時拒絕了洗禮，選擇背負自己的罪生活下去。但另一個時空的你，選擇忘記這一切，以康斯姆托克之名重生」，接著伊莉莎白們抓住了布克，在初始洗禮池之處淹死了布克，接著就結局。\n我會不滿這個結局的原因是因為，這個結局太快了，幾乎是在講完布克就是康斯姆托克，如果能帶一些畫面，說明康斯姆托克就是布克的一些伏筆會更好。比如說魔女之家的真結局，雖然不是100%相似，但都是在結局最後有一個大爆點，而這個大爆點可以貫穿整個遊戲，解釋所有的一切，當薇奧拉轉頭踢了魔女一腳，並說出「你煩不煩阿，這副身體已 經是我的了」的瞬間，在配合上後面的對白「雖然換了身體，但這棟房子還是知道誰才是真正的主人」，剎那間玩家就會回憶起所有在房子裡看見的「身體轉移祕法」「毒啞人的方法」到底是做什麼用的。但生化奇兵3的結局我並沒有這樣的感覺，遊戲過程中，我感覺不太到康斯姆托克與布克的關聯性在哪裡，他們語氣不同，外貌也不相似，也沒有一些共有的小習慣之類的，換言之，康斯姆托克跟布克的關聯性根本不高，這也有可能是因為遊戲中時不時在暗示你康斯姆托克不僅僅是康斯姆托克，比如說他預言了偽牧羊人、知道伊莉莎白的指頭，使得玩家很容易對他的背景有些預設立場，就有點像是看魔術時，大家的焦點都會注意在那杯被魔術師蓋起來的杯子一樣。我認為的一個好的伏筆，是屍人庄殺人事件，在故事的開頭主角戲水時把身上帶著的懷錶放在涼亭處，並要同學看好它，這件事情就只是一個很日常的描寫而已，但在故事的最後，在抓殺人嫌犯時，大家的報時都是1點32分、2點57分這樣精準的時間時，只有男主是說1點半左右，原因無它，因為旅館房間的時鐘都是電子式的，而當時男主根本不在房間裡，只能透過指針式的懷表查看時間，才會說出1點半這個模糊的答案。\n以上的內容濃縮起來就是，康斯姆托克的身份的伏筆不太好，結局也太快進結局，沒有適當的鋪陳告訴玩家為什麼康斯姆托克要是，且必須是布克。\n回顧整個遊戲，其實最讓我覺得很棒的伏筆是遊戲一開始進入哥倫比亞時，兄妹倆人 會要你猜人頭還是字，當你做出選擇後，哥哥會拿出一個早已畫上許多記號的記分板再加上新的一筆，但當你破完後再回頭看這段，會發現那些計分板上的痕跡，就是許多平行世界的布克都曾經猜過硬幣，都曾經在這計分板上畫上過一筆。 最後講一下結論，心得這種東西因人而異，我講的也只是我的看法而已，大家生長環境的解讀有出入是很正常的事情，我知道很多人都說生化奇兵3的劇情很神之類的，但我玩過之後真的覺得還好，我盡量把我覺得不滿意的地方寫出來，讓大家知道我不滿意的地方 在哪裡，僅代表個人意見而已。很多人覺得很爛的FF15我卻覺得結局很不錯，大家狂推的槍彈辯駁2我也覺得真的很神，綜上所述，如果還是有人對我有意見的話，我只想說「很抱歉，我就是爛，玩魔物獵人、惡魔獵人這種不用動腦的遊戲就好，不應該玩這種劇情遊戲」\n","date":"2022-10-08T03:02:43+08:00","image":"https://i.imgur.com/h13vjaO.png","permalink":"https://hoxtonhsu.com/p/bioshock3%E5%BF%83%E5%BE%97/","title":"Bioshock3心得"},{"content":"最近領到薪水後買了TYPORA後，想找如何上傳圖片的教學，發現網路上的教學蠻少的，台灣好像只有一篇，還是For mac的教學，剩下的都是中國的教學，但他們用的圖床，台灣也很多不能用，後來研究了幾天終於搞懂，所以決定寫一篇看看\n圖片空間有Github跟imgur，就看你想要用哪個就用哪個吧，其實沒差太多，但imgur會稍微簡單一點點點點點點，以下是步驟\n開始 先去安裝node.js，因為會需要裡面的npm https://nodejs.org/en/download/\n安裝好可以用系統管理員身分打開cmd，並輸入\n1 node 如果有成功安裝的話應該會顯示 接著安裝picGo-core\n1 npm install picgo -g 說出現錯誤，要我們執行\n1 npm audit fix -force 執行完之後就安裝好了，接著輸入\n1 picgo 來確認是否有安裝成功，有時候可能會出現\n1 檔案未經數位簽署這個指令碼將不會在系統上執行 之類之類的句子，這時候可以輸入\n1 Set-ExecutionPolicy RemoteSigned 來允許執行，這時候在輸入picgo應該就可以看到這樣子的畫面了\n到這一步本地端的設定已經完成80%了，接下來就是要選擇要使用哪種圖片空間\nGithub 首先先到Github創建一個公開的Repository，名字隨意就好 接著把這個Repository的URL複製下來 1 https://github.com/Hoxton019030/Typora 右上角個人頭像點開，選擇Settings 左側選項最下面有一個Developer settings 選擇Personal access tokens 選擇 Generate new token 輸入這個token的名稱，隨便取就好，Expiration看個人喜好，我很懶，所以我選擇永久，下面的select scopes勾選repo 接著會產生一組ghp開頭的token，這組序號只會在這裡以明碼出現一次，接下來永遠都不會再以明碼的方式呈現所以請好好記起來 然後到Typora的偏好設定裡打開開啟設定檔，通常會是用一個文本編輯器打開，通常都是vscode啦 接著把這串東西複製貼上去 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 { \u0026#34;picBed\u0026#34;: { \u0026#34;current\u0026#34;: \u0026#34;github\u0026#34;, \u0026#34;uploader\u0026#34;: \u0026#34;github\u0026#34;, \u0026#34;github\u0026#34;: { \u0026#34;repo\u0026#34;: \u0026#34;Hoxton019030/Typora\u0026#34;, //這串對應的是使用者名稱+Repo名稱，改成自己的 \u0026#34;token\u0026#34;: \u0026#34;ghp_xxxxxxxxxxxxxxxxxxxx\u0026#34;, //這邊把剛剛產生的token貼上去 \u0026#34;path\u0026#34;: \u0026#34;data/\u0026#34;, //圖片要上傳到哪個資料夾，可以先不用設定， \u0026#34;customUrl\u0026#34;: \u0026#34;https://raw.githubusercontent.com/Hoxton019030/Typora/main\u0026#34;, //把Hoxton019030/Typora改成你自己的repo \u0026#34;branch\u0026#34;: \u0026#34;main\u0026#34; //應該也不用動 } }, \u0026#34;picgoPlugins\u0026#34;: {} } 完成之後應該長這個樣子，接著按存檔 接著回到設定，試著按看看測試圖片上傳 如果成功的話就會出現這樣的畫面\n就代表你成功了！\n如果你在按一次測試圖片上傳，由於上傳的圖片檔名一模一樣，會報錯，這樣是正常現象，請不要驚慌\nimgur 首先先辦帳號 https://api.imgur.com/oauth2/addclient 點擊這個網址 老樣子，名字隨意取就好，然後Authorization type選擇第二個 接著會跳出畫面，會告訴你你的Client ID是什麼，請複製下來 接著到偏好設定裡面打開開啟設定檔，通常會用vscode開啟 接著把這段複製貼上上去 1 2 3 4 5 6 7 8 9 10 11 { \u0026#34;picBed\u0026#34;: { \u0026#34;current\u0026#34;: \u0026#34;imgur\u0026#34;, \u0026#34;uploader\u0026#34;: \u0026#34;imgur\u0026#34;, \u0026#34;imgur\u0026#34;:{ \u0026#34;clientId\u0026#34;: \u0026#34;XXXXXXXXXXX\u0026#34; } }, \u0026#34;picgoPlugins\u0026#34;: {} } 貼上去之後應該會長這個樣子\n然後存檔之後，回到偏好設定，按「測試圖片上傳」 跳出這個就代表成功上傳了！\n小結 這樣子只要在typora裡面貼上圖片，typora就會自動幫我們上傳圖片到圖片空間了。\n","date":"2022-10-08T01:02:04+08:00","image":"https://i.imgur.com/W6FAkN1.png","permalink":"https://hoxtonhsu.com/p/typora-%E5%A6%82%E4%BD%95%E4%B8%8A%E5%82%B3%E5%9C%96%E7%89%87%E6%95%99%E5%AD%B8-%E4%BD%BF%E7%94%A8github-imagur%E4%BD%9C%E7%82%BA%E5%9C%96%E7%89%87%E7%A9%BA%E9%96%93/","title":"TYPORA 如何上傳圖片(教學 使用Github , imagur作為圖片空間)"},{"content":"​\t到底要不要進事務所？\n我想一開始就給出解答\n如果不知道做什麼就進事務所吧！\n​\t如果是會計系的學生，在大學期間一定有想過自己到底要不要進入所謂的四大（勤業、資誠、安侯、安永），我在大學的時候對於這個問題倒是沒太多想法，只覺得進入四大事務所好像很威風，出入信義區，西裝革履的樣子，名稱也是國際上有名公司，怎麼想都覺得很穩，能出什麼問題？\n當然實際進去之後我就後悔了，發現這樣的生活根本不是自己想要的，索性的待到一月，把年終獎金還有到職獎金，以及政府的青年就業補助的錢領一領之後，就趕緊跑回高雄準備轉換跑道，做什麼都行，但這輩子絕對不會在做會計了。\n但離職過後也快一年，轉換工作也算成功，但持續的一直有在Follow會計這個圈子，所以想說來分享一下自己的一些想法，希望可以幫助到一些會計系的學生。\n一份工作一定是有好有壞的，事務所的工作則是將好與壞的那非常極端，這篇文章先來講「我」覺得事務所好的地方，下一篇文章再來講我為什麼離職。\n事務所的名聲 事務所的名聲是我在離職之後最直接的感受，在自我介紹或是之後轉換跑道的面試，第一個被問的問題都是\n「你之前在資誠耶，很好的一間公司？怎麼會想要離職轉換跑道呢？」\n誠然四大在會計系學生的眼中已經是臭到不能再臭的公司，但出了事務所之後，只要待的公司不是太鳥的那種，基本上四大的經歷即使不到亮眼，但也絕對不會是一個看不上眼的經歷。\n事務所是一家很大的公司 在離職之後第二個很深的感受是，四大確實是一間很大的公司，在信義區的精華地段裡有很多層樓的辦公室，有包場的尾牙，會請藝人來唱歌，還有很完善的公司分工制度。我現在的公司就是一家在中山區普通商辦大樓裡面的辦公室，員工數大概也就十來人左右，也沒什麼完整的分工制度，有時候感覺一個人要身兼多職。\n而且我相信很多人離職之後，第二家公司的規模都不會再有四大那樣的規模，所以我覺得可以來四大體驗看看一家員工數破千的公司感覺是怎麼樣的。\n事務所的工作強度 這點其實很諷刺，我之前在的組別是最近很夯的資誠A11 AKA 獨立所疊字組。說實話當時也沒覺得什麼地不地獄的，當你看同事在加班，組長在加班，經理們也在加班，其實當下也會覺得沒什麼，反正大家就一起加班，有時候晚上六點多，同事們相約訂餐的畫面總讓我想起國小在讀安親班的感覺。\n我在事務所的上班的大概就是9月入職然後到1月初離職，唯一接觸到的忙季大概就是十月，那時候星期一到五大概都是9點10點那邊回家，差不多有三天是待到11點才走（11點就可以走是因為資誠是在國貿大樓，國貿大樓11點就要關門，所以才有機會回家Q_Q），星期六大概是10點11點進所內，然後可能晚上8、9點離開，至於星期天我是沒進過所內，快樂的小確幸～\n在這樣中強度的加班強度下，我離職之後，不管待哪家公司我都覺得好爽，這可能也是事務所很諷刺的一個好處吧，畢竟從四大出來的，每個都是見過地獄的人，到哪裡都像是天堂一樣。\n哈哈，可能真的太久沒寫文章了，感覺原本腦中有很多想法，突然要寫就寫不出什麼東西來，自己寫完再回頭來看自己列的這幾點，發現真的是蠻無聊的幾個點，也不構成什麼吸引力，但要問我後悔進入事務所嗎？其實還蠻慶幸我有進入事務所的，因為世界上真的找不太到比那更爛的工作了，我也是在那段期間真的很想離職，有這樣的念頭之後才知道自己到底想做的是什麼，這可能就是所謂的「在極大的痛苦中感覺精神甦醒吧」，總之我想說的是，不管你是台政北或是私科會計，不知道做啥就是選事務所，進去之後就會知道原來有這麼爛的工作，就會強迫自己去想自己到底要做什麼，如果做得下去那也很好，事務所的履歷還是有一點點用的（但我都建議最好是待到組長會比較有用一點）。\n接下來下一篇文章會聊聊我為什麼從事務所離職，應該蠻多可以談的～\n","date":"2022-10-08T00:36:13+08:00","image":"https://i.imgur.com/aHMlhAm.png","permalink":"https://hoxtonhsu.com/p/%E5%BE%9E%E5%85%A5%E8%81%B7%E5%88%B0%E9%9B%A2%E8%81%B7%E4%BA%8B%E5%8B%99%E6%89%80%E7%9A%84%E6%97%A5%E5%AD%90%E4%B9%8B%E8%A9%B2%E9%80%B2%E4%BA%8B%E5%8B%99%E6%89%80%E5%97%8E/","title":"從入職到離職，事務所的日子之《該進事務所嗎？》"},{"content":"目錄 Filter(過濾器)Interceptor(攔截器)AOP(剖面導向程式設計)之差異 Filter Interceptor AspectJ AspectJ 1 2 graph TD; AOP ---\u0026gt; SpringAop \u0026amp; AspectJ AOP (概念) 面向切面編程，利用AOP可以對業務邏輯的各個部分進行隔離，使得業務邏輯各部分之間的耦合度降低，提高程式的可重用性，同時提高開發的效率\n不修改原始碼，從而擴充新功能\nFilter(過濾器)Interceptor(攔截器)AspectJ(AOP)之差異 1 2 3 4 5 6 7 8 9 10 11 flowchart LR; 1((使用者))--發送請求 --\u0026gt;Filter\\n+統一設置編碼\\n+過濾敏感字\\n+登入驗證\\n+URL級別的訪問權限控制\\n+數據壓縮 --\u0026gt;dispatcher --\u0026gt;Interceptor\\n+權限驗證\\n+登入驗證\\n+性能檢測 --\u0026gt;AOP\\n+日誌紀錄 --\u0026gt;2(Controller) -1[粗糙]--能處理request的精細程度----\u0026gt;-2[細緻] Filter 1 2 3 4 5 flowchart LR; 1[瀏覽器]---\u0026gt;2{過濾器}---\u0026gt;3[Web資源] 3[Web資源]--\u0026gt;2{過濾器}--\u0026gt;1[瀏覽器] 在HttpServletRequest到達Servlet之前，過濾、處理一些資訊，本身依賴Sevlet容器，不能獲取SpringBean的一些資訊，它是javax.servlet.FilterChain的項目，不是Springboot\n可以做什麼\n修改Request, Response 防止xss(Cross-Site-SCripting跨網站指令碼)攻擊 包裝二進制流 自定義Filter 以註解方式製作Filter 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 /** * 網路上教學蠻多都是implenments filter，但我建議extend GenericFilterBean * 會比較方便一點，省去implenments init(), distory()的麻煩 */ @Slf4j @Component @WebFilter(filterName = \u0026#34;f1\u0026#34;,urlPatterns = {\u0026#34;*.html\u0026#34;,\u0026#34;*.jsp\u0026#34;,\u0026#34;/\u0026#34;}) //filterName就只是一個名稱可以，隨意就好，urlPattern是用來指定哪些url要經過這個過濾器 public class HiFilter extends GenericFilterBean { @Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException { log.info(\u0026#34;Hello Hoxton\u0026#34;); chain.doFilter(request,response); //代表這個Filter已經作用完畢，可以把request,response交給下一個Filter了 } } 結果如上\n以Java配置方式製作Filter 1 2 3 4 5 6 7 8 9 10 11 12 13 14 @Slf4j /** * 網路上教學蠻多都是implenments filter，但我建議extend GenericFilterBean * 會比較方便一點，省去implenments init(), distory()的麻煩 */ public class HiFilter extends GenericFilterBean { @Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException { log.info(\u0026#34;Hello Hoxton\u0026#34;); chain.doFilter(request,response); //代表這個Filter已經作用完畢，可以把request,response交給下一個Filter了 } } 1 2 3 4 5 6 7 8 9 @Configuration public class FilterConfig { @Bean public FilterRegistrationBean heFilterRegistration() { FilterRegistrationBean registration = new FilterRegistrationBean(new HiFilter()); registration.addUrlPatterns(\u0026#34;/*\u0026#34;); //配置相關的路徑 return registration; } } 一些其他的config設置，僅供參考，與上面釋例無關\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 @Configuration public class FilterConfig { //test @Bean public FilterRegistrationBean\u0026lt;Filter\u0026gt; logProcessTimeFilter() { FilterRegistrationBean\u0026lt;Filter\u0026gt; bean = new FilterRegistrationBean\u0026lt;\u0026gt;(); bean.setFilter(new LogProcessTimeFilter()); //設定想要使用哪一個Filter bean.addUrlPatterns(\u0026#34;/*\u0026#34;); //設置哪些url會觸發Filter，設置成/* 就代表全部都會吃到，/user/*就代表/user開頭的都會吃到 bean.setName(\u0026#34;logProcessTimeFilter\u0026#34;); //設置要叫什麼名字 bean.setOrder(0); //設定過濾器的執行順序 return bean; } @Bean public FilterRegistrationBean\u0026lt;Filter\u0026gt; logApiFilter() { FilterRegistrationBean\u0026lt;Filter\u0026gt; bean = new FilterRegistrationBean\u0026lt;\u0026gt;(); bean.setFilter(new LogApiFilter()); //設定想要使用哪一個Filter bean.addUrlPatterns(\u0026#34;/*\u0026#34;); //設置哪些url會觸發Filter，設置成/* 就代表全部都會吃到，/user/*就代表/user開頭的都會吃到 bean.setName(\u0026#34;logApiFilter\u0026#34;); //設置要叫什麼名字 bean.setOrder(1); //設定過濾器的執行順序 return bean; } @Bean public FilterRegistrationBean\u0026lt;Filter\u0026gt; printResponseRequestFilter() { FilterRegistrationBean\u0026lt;Filter\u0026gt; bean = new FilterRegistrationBean\u0026lt;\u0026gt;(); bean.setFilter(new PrintResponseRequest()); //設定想要使用哪一個Filter bean.addUrlPatterns(\u0026#34;/*\u0026#34;); //設置哪些url會觸發Filter，設置成/* 就代表全部都會吃到，/user/*就代表/user開頭的都會吃到 bean.setName(\u0026#34;printResponseRequestFilter\u0026#34;); //設置要叫什麼名字 bean.setOrder(2); //設定過濾器的執行順序 return bean; } } SpringBoot本身也提供了許多不同的Filter供使用，參考如下\n常用的有以下幾個\nCharacterEncodingFilter(用於處理編碼問題) HiddenHttpMethodFilter(隱藏Http函數) HttpPutFormContentFilter(form表單處理) RequesrtContextFilter(請求上下文) 其他資訊可以詳閱Spring MVC中各个filter的用法\n其中以OncePerRequestFilter最常被使用，這個Filter會去過濾每一個Request請求，且不會重複執行，且這個Filter有一個doFilterInternal()的方法，供我們撰寫Filter邏輯因doFilter()的方法已在OncePerRequestFilter裡面實現了，可以用來做Jwtoken的登入驗證，程式如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 @Component public class JwtAuthenticationFilter extends OncePerRequestFilter { @Autowired private JwtService jwtService; @Autowired private UserDetailsService userDetailsService; //注入JwtService UserDetailsService，分別用來解析Token與查詢使用者詳情 @Override protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException { String authHeader = request.getHeader(HttpHeaders.AUTHORIZATION); if (authHeader != null) { String accessToken = authHeader.replace(\u0026#34;Bearer \u0026#34;, \u0026#34;\u0026#34;); //從請求標頭中取得Authorization欄位中的值 Map\u0026lt;String, Object\u0026gt; claims = jwtService.parseToken(accessToken); //擷取出後面的JWT字串，接著解析它 String username = (String) claims.get(\u0026#34;username\u0026#34;); //從claims物件中取得username欄位的值 UserDetails userDetails = userDetailsService.loadUserByUsername(username); //並透過userDetailService查詢使用者詳情。這也代表JWT的內容(payload)必須包含username這個欄位 //在filter中查詢使用者的目的，是為了將該次請求所代表的驗證後資料(Authentication)帶進security中的Context。 //Context是一種較抽象的概念，可以想像成該次請求的身分狀態 Authentication authentication = new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities()); //為了將這個請求的使用者身分告訴伺服器，我們建立UsernamePasswordAuthenticationToken的物件，其中第三個參數放GrantedAuthority的List， 作為API的授權檢查 //第一個參數(principal)傳入使用者詳請(UserDetails)。 // 而第二個參數是credential，通常是密碼，但不傳入也無訪 //經由傳入principal，我們得以在業務邏輯中從Context輕易獲取使用者身分的資料 SecurityContextHolder.getContext().setAuthentication(authentication); } filterChain.doFilter(request, response); } } 配置完後再將這個Filter加入Security的過濾鍊\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 @EnableWebSecurity public class SecurityConfig extends WebSecurityConfigurerAdapter { @Autowired private UserDetailsService userDetailsService; @Autowired private JwtAuthenticationFilter jwtAuthenticationFilter; /** * 協助帳號密碼認證的東西 * @return */ @Override @Bean public AuthenticationManager authenticationManagerBean() throws Exception { return super.authenticationManagerBean(); } //加入Security的過濾鍊 protected void configure(HttpSecurity http) throws Exception { http.authorizeHttpRequests() .antMatchers(HttpMethod.GET, \u0026#34;/users/**\u0026#34;).hasAuthority(MemberAuthority.SYSTEM_ADMIN.name()) // .antMatchers(HttpMethod.GET,\u0026#34;/h2/**\u0026#34;).hasAuthority(MemberAuthority.SYSTEM_ADMIN.name()) .antMatchers(HttpMethod.GET,\u0026#34;/login/**\u0026#34;).permitAll() // .antMatchers(HttpMethod.POST,\u0026#34;login\u0026#34;).permitAll() // .antMatchers(HttpMethod.POST, \u0026#34;/users\u0026#34;).permitAll() .anyRequest().permitAll() .and() .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class) //於UsernamePasswordAuthenticationFilter進行認證 .sessionManagement() .sessionCreationPolicy(SessionCreationPolicy.STATELESS) .and() .csrf().disable() .formLogin(); http.headers().frameOptions().disable(); //讓spring Security可以和h2建立連線 } /** * * @param auth 配置全局驗證資訊，如Authentication Provider,UserDetailService等等資訊， * authenticationManager會接收到UsernamePasswordAuthenticationToken傳入的資料後 * 調用SecurityConfig中所配置的userDetailsService,passwordEncoder來協助驗證 * * @throws Exception */ protected void configure(AuthenticationManagerBuilder auth) throws Exception { auth.userDetailsService(userDetailsService).passwordEncoder(new BCryptPasswordEncoder()); } } 一些Code的示範\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public class LogProcessTimeFilter extends OncePerRequestFilter { /** * @param request 請求 * @param response 回應 * @param filterChain 過濾鏈 會將現有的filter給串聯起來，當請求進入後端，需要依序經過它們才會達到Controller，相對的，當回應離開Controller，則是按照相反的方向經過那些Filter * @throws ServletException * @throws IOException */ @Override protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException { long startTime = System.currentTimeMillis(); filterChain.doFilter(request, response); //doFilter:相當於將請求送至Controller。 long endTime = System.currentTimeMillis(); long processTime = endTime - startTime; System.out.println(\u0026#34;processTime = \u0026#34; + processTime); } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 /** * Controller收到的請求主體(RequestBody)和回應主體(ResponseBody) * 分別由HttpServletRequest與HttpServletResponse的InputStream、OutputStream轉化而來， * 但資料流只能讀取一次，如果在Filter層就被讀掉，可能會導致後面都收不到資料 * 為了保留主體中的資料，我們將請求主體與回應主體包裝成ContentCachingResponseWrapper ContentCachingRequestWrapper * 再如同往常傳入FilterChain * * 這兩個Wrapper的特色是會在內部備份一個ByteArrayOutputStream，我們只要呼叫這兩個Wrapper的 * getContentAsByteArray就可以無限制地取得主體內容 */ public class PrintResponseRequest extends OncePerRequestFilter { @Override protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException { ContentCachingRequestWrapper requestWrapper = new ContentCachingRequestWrapper(request); ContentCachingResponseWrapper responseWrapper = new ContentCachingResponseWrapper(response); filterChain.doFilter(requestWrapper, responseWrapper); // logApi(request, response); logBody(requestWrapper,responseWrapper); responseWrapper.copyBodyToResponse(); } private void logApi(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { int httpStatus = response.getStatus(); //200,403,404之類的 String httpMethod = request.getMethod(); String uri = request.getRequestURI(); String params = request.getQueryString(); if (params != null) { uri += \u0026#34;?\u0026#34; + params; } System.out.println(String.join(\u0026#34; \u0026#34;, String.valueOf(httpStatus), httpMethod, uri)); } private void logBody(ContentCachingRequestWrapper request, ContentCachingResponseWrapper response) { String requestBody = getContent(request.getContentAsByteArray()); System.out.println(\u0026#34;Request: \u0026#34; + requestBody); String responseBody = getContent(response.getContentAsByteArray()); System.out.println(\u0026#34;Response: \u0026#34; + responseBody); } /** * @param content * @return 返回JSON字串 */ private String getContent(byte [] content){ String body = new String(content); return body.replaceAll(\u0026#34;[\\n\\t]\u0026#34;, \u0026#34;\u0026#34;); //去除換行\\n與定位符號\\t } } Interceptor 本身是AOP的一種應用，其實攔截器跟過濾器是可以互相替換的，功能其實差不多，只是攔截器可以在請求到達Controller或是回應回傳出Contrller時進行攔截，攔截成功時可以實做一些自定義的業務邏輯進行修改，且Interceptor是Springboot下的一個功能org.springframework.web.servlet.HandlerInterceptor\n可以用來\n性能監控：紀錄請求的處理時間，比如說請求處理太久（超過500毫秒） 登入檢測 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 graph LR; request--\u0026gt;id1 id1--\u0026gt;id2--\u0026gt;id4--\u0026gt;id3--\u0026gt;id6--\u0026gt;id5 subgraph 攔截器1 direction TB id1[\u0026#34;preHandle()\u0026#34;] id3[\u0026#34;postHandler()\u0026#34;] id5[\u0026#34;afterCompletion()\u0026#34;] end subgraph 攔截器2 direction TB id2[\u0026#34;preHandle()\u0026#34;] id4[\u0026#34;postHandler()\u0026#34;] id6[\u0026#34;afterCompletion()\u0026#34;] end 要實現interceptor有兩種方式\n實作HandlerInterceptor 繼承HandlerInterceptorAdapter 釋例\n自定義攔截器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 public class LogInterceptor extends HandlerInterceptorAdapter { @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { long startTime = System.currentTimeMillis(); System.out.println(\u0026#34;\\n-------- LogInterception.preHandle --- \u0026#34;); System.out.println(\u0026#34;Request URL: \u0026#34; + request.getRequestURL()); System.out.println(\u0026#34;Start Time: \u0026#34; + System.currentTimeMillis()); request.setAttribute(\u0026#34;startTime\u0026#34;, startTime); return true; } @Override public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception { System.out.println(\u0026#34;\\n-------- LogInterception.postHandle --- \u0026#34;); System.out.println(\u0026#34;Request URL: \u0026#34; + request.getRequestURL()); } @Override public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception { System.out.println(\u0026#34;\\n-------- LogInterception.afterCompletion --- \u0026#34;); long startTime = (Long) request.getAttribute(\u0026#34;startTime\u0026#34;); long endTime = System.currentTimeMillis(); System.out.println(\u0026#34;Request URL: \u0026#34; + request.getRequestURL()); System.out.println(\u0026#34;End Time: \u0026#34; + endTime); System.out.println(\u0026#34;Time Taken: \u0026#34; + (endTime - startTime)); } } 註冊攔截器 1 2 3 4 5 6 7 8 9 10 11 12 @Configuration public class WebConfig implements WebMvcConfigurer { @Override public void addInterceptors(InterceptorRegistry registry) { registry.addInterceptor(new LogInterceptor()); registry.addInterceptor(new OldLoginInterceptor()).addPathPatterns(\u0026#34;/admin/oldLogin\u0026#34;); registry.addInterceptor(new AdminInterceptor()).addPathPatterns(\u0026#34;/admin/*\u0026#34;).excludePathPatterns(\u0026#34;/admin/oldLogin\u0026#34;); } } AspectJ 屬於一種AOP框架\n動態代理(Spring5本身已經封裝了) 有兩種情況的動態代理 有介面(JDK動態代理)\n1 2 3 interface UserDao{ public void login(); } 1 2 3 4 class UserDaoImpl implements　UserDao{ public void login(){ } } 創建UserDao介面實現類的代理對象，代理對象會有被代理對象的所有方法，並且增強\n無介面(CGLIB動態代理)\n1 2 3 4 5 class User{ public void add (){ } } 1 2 3 4 5 class Person extends User{ public void add(){ super.add(); } } AOP(JDK動態代理) 使用JDK的動態代理，要使用Proxy類裡面的方法來創建出代理對象 newProxyInstance(類加載器,增強方法所在的類，這個類實現的介面,實現這個接口(InvocationHandler)\n編寫JDK動態代碼\n1 2 3 4 5 public interface UserDao { public int add (int a,int b); public String update(String id); } 1 2 3 4 5 6 7 8 9 10 11 12 public class UserDaoImpl implements UserDao{ @Override public int add(int a, int b) { System.out.println(\u0026#34;add方法執行了\u0026#34;); return a+b; } @Override public String update(String id) { return id; } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 package com.example.aop; import java.lang.reflect.InvocationHandler; import java.lang.reflect.Method; import java.lang.reflect.Proxy; import java.util.Arrays; /** * @author Hoxton * @version 1.1.0 */ public class JDKProxy { public static void main(String[] args) { Class[] interfaces = {UserDao.class}; UserDaoImpl userDao = new UserDaoImpl(); UserDao dao = (UserDao) Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfaces, new UserDaoProxy(userDao)); //此dao已經不是原本的dao，而是新的代理類dao了 int result = dao.add(1, 2); System.out.println(\u0026#34;result = \u0026#34; + result); } } //創建代理對象的代碼 class UserDaoProxy implements InvocationHandler { //1. 把創建的是誰的代理對象，把誰傳遞進來 // 有參建構子 private Object obj; public UserDaoProxy(Object obj) { this.obj = obj; } //增強的邏輯 @Override public Object invoke(Object proxy, Method method, Object[] methodArgs) throws Throwable { //方法之前 System.out.println(\u0026#34;方法之前執行...\u0026#34; + method.getName() + \u0026#34;傳遞的參數...\u0026#34; + Arrays.toString(methodArgs)); //被增強的方法執行 Object res = method.invoke(obj, methodArgs); //方法之後 System.out.println(\u0026#34;方法之後執行...\u0026#34; + obj); return res; } } AOP專業術語 連接點\n一個類裡面中，能被增強的方法就叫連接點，下面這個類就有四個連接點\n1 2 3 4 5 6 class User{ add(); update(); select(); delete(); } 切入點\n實際被增強的方法，就叫切入點\n通知(增強)\n實際增強的邏輯部分稱為通知(增強)\n通知有多種類型\n前置通知\n在切入點前執行\n後置通知\n在切入點後執行\n環繞通知\n在切入點前後執行\n異常通知\n出現異常時執行\n最終通知\n執行到try\u0026hellip;catch的final時執行\n切面\n是一個動作\n把通知應用到切入點的過程，就叫切面 AOP(準備) Spring 框架一般都是基於AspectJ實現的AOP操作\n什麼是AspectJ\nAspectJ不是Spring的組成部分，是一個獨立的AOP框架， 一般把AspectJ和Spring框架一起使用，進行AOP操作 基於Aspect實現AOP操作\nxml配置文件實現 基於註解方法實現(主要使用) 再專案裡面引入AOP依賴\n切入點表達式\n切入點表達式的作用: 知道對哪個類的哪個方法進行增強\n語法結構:\nexecution( [權限修飾符] [返回類型] [類全路徑] [方法名稱] ( [參數列表] ) )\n權限修飾符: public, private, *(代表不論是public, private 都選)\n返回類型: String, int\n類全路徑: com.hoxton\u0026hellip;\u0026hellip;.\n方法名稱: 就方法名稱\n參數列表: 有哪些參數\n舉例\n對com.hoxton.dao.BookDao類裡面的add方法進行增強\n1 execution(* com.hoxton.dao.BookDao.add(..) ) 對com.hoxton.dao.BookDao類的所有方法進行增強\n1 execution(* com.hoxton.dao.BookDao.*(..)) 對com.hoxton.dao包裡的所有類，類裡面的髓有方法進行增強\n1 excution(* com.hoxton.dao.*.*(..)) within([package名].* )或( [package名]..*)\n舉例\n1. 1.\nAOP操作(Aspect J 註解) 創建類，在類裡面定義方法 1 2 3 4 5 6 public class User { public void add(){ System.out.println(\u0026#34;add\u0026#34;); } } 創建增強類(編寫增強邏輯)\n在增強類的裡面，創建方法，讓不同方法代表不同通知類型\n1 2 3 4 5 public class UserProxy { public void before(){ System.out.println(\u0026#34;before\u0026#34;); } } 進行通知的配置\n在Spring Log4j 2 1 2 3 flowchart TD; 8[\u0026#34;ALL(全輸出不留情)\u0026#34;]---\u0026gt;7[\u0026#34;Trace(更細的除錯資訊，通常用來追蹤城市流程的日誌)\u0026#34;]---\u0026gt;6[\u0026#34;DEBUG(除錯資訊的日志)推薦★\u0026#34;]---\u0026gt;5[\u0026#34;INFO(一般資訊的日志)推薦★\u0026#34;]---\u0026gt;4[\u0026#34;WARN(可能導致錯誤的日志)\u0026#34;]---\u0026gt;3[\u0026#34;ERROR(造成應用錯誤停止的日志)\u0026#34;]---\u0026gt;2[\u0026#34;FETAL(造成應用程式停止的日志)\u0026#34;]---\u0026gt;1[\u0026#34;OFF(不輸出任何日志)\u0026#34;] 參考 https://www.cnblogs.com/itlihao/p/14329905.html\nhttps://blog.csdn.net/fly910905/article/details/86537648\nSpringBoot攔截器(Interceptor)詳解\nSpring Boot使用過濾器和攔截器分別實現REST介面簡易安全認證\n","date":"2022-10-07T22:41:52+08:00","image":"https://i.imgur.com/B7GhSw1.png","permalink":"https://hoxtonhsu.com/p/%E5%9F%BA%E7%A4%8Eaop%E4%BB%8B%E7%B4%B9-filter-interceptor-aspectj/","title":"基礎AOP介紹-Filter Interceptor AspectJ"},{"content":"​\t如果你是好奇死亡擱淺這款遊戲到底好不好玩，擔心對不到電波，怕買了浪費錢的人可以聽看看我的想法\u0026ndash;「我覺得很難歸納出哪種類型的人會喜歡死亡擱淺」 我只能說，會比較推薦給至少能撥出個1、2小時玩遊戲的人才會比較適合玩。\n無雷心得：\n我本身不是小島秀夫的粉絲，他的作品我也只玩過幻痛而已，而且 我覺得幻痛超級無聊，遊戲評分鼓勵你不殺，所以你很多裝備是不能用 的，而且地圖設計也稱不上有趣，荒漠和草原的地形空蕩到很空虛，不太能理解 為什麼硬要做成開放地圖，A任務做完要到B任務就只能自己過去、或是叫直升機等等的。看完了儀式之人的影片後也沒有覺得躍躍欲試的感覺，玩了20個小時後真的撐不下去就 不玩了，所以我在買死亡擱淺前其實猶豫很久，因為我知道我可能會Get不到遊戲有趣的點? 後來還是抱持著是驢是馬遛看看的心情買了下去。\n純論遊戲心得，並且在不暴雷太多重要劇情的情形下，死亡擱淺最大的樂趣在於遊戲一開始剝奪你很多東西，初期會要求你背著大重量的貨物到有一段距離的地方，然後這路上可能有懸崖、陡坡之類的地形阻隔著你，所以初期會對於這些事情覺得很毛躁、等到遊戲中期，開始出現很多東西能輔助你送貨，能裝載更多重量的、加速的，會讓你覺得所有的一切不再那麼痛苦，而後期當你解鎖所有設施、道具之後，你會開始愛上送貨這件事情，我覺得這點蠻神奇的，因為在往常的遊戲裡面跑腿送貨是最無聊的環節，你會用快速旅行直接省略掉這個過程，但在死亡擱淺裡你會體認到，所有的一切都是自己努力而來的，是自己讓這件事情變得輕鬆，變得平易近人，就好比學習一項事物，從排斥到接受，再到學以致用，漸漸地愛上一件事情。\n​\t我記得有一個晚上我就上線，也沒推任何主線劇情，就很單純的從A點接單送到B點，再從B點接單送到C點，然後再從C點接單送到B點這樣往復巡還，聽起來很無聊，但我當時送完貨物跑出結算畫面，看到滿滿的SSS時，真的覺得送貨使我快樂。\n另一點我覺得有趣的是遊戲裡面的線上模式，會讓你的地圖裡出現其他玩家的建物，比如說休息站、涼亭之類的，或者是其他玩家的登山索、樓梯，這點不是死亡擱淺原創，但在這遊戲裡面卻是我最喜歡的一點，在爬山的時候爬著其他玩家的梯子，然後在山頂看到其他玩家撒尿的蘑菇叢、然後在拉著其他玩家的纜繩下山，雖然你無法看到那些玩家的身影，但它們在你的世界留下的足跡卻令他們的形象具體而鮮明，在你在河流底部發現散落的貨品、峽谷下方報廢的摩托車，宛若有一段故事被濃縮成一個小小的物品，而這個小小的物品又經由你的發現而解壓縮成一段送貨之旅，死亡擱淺大部分的遊戲時間都是獨自一人的，但這種設計讓這個世界不在那麼冰冷，而多了些許溫度。\n最後是這個遊戲的氛圍，死亡擱在某些地形出現的時候（比如說高山、平原、裂谷）會撥放一些很空靈感的歌，配合上游戲的畫面、眼前的景象，山姆苗小的身影形成強烈的對比，耳中響起的和聲與山姆亦步亦趨的步伐，行走在一望無際的大草原，所有的一切都是空的，但心中卻被滿滿的感動填滿著。\n死亡擱淺到底適合什麼樣的人，我覺得只有自己玩了才能知道，他就是一款這麼特別的遊戲，看起來很無聊，但玩起來卻比想像中的有趣。\n有雷心得：\n其實玩完之後，我原本是很期待劇情而對遊戲性無感，但玩完後我卻相反過來 ，因為我劇情看不太懂，但遊戲性卻是出乎我意料之外的好。遊戲到尾聲之前我是都看得懂的，大概就是我們要去救艾米莉，但有個叫希格斯的人百般阻饒，然後頑人藏著什麼秘密。但當艾米莉出來之後我就完全看不懂了，我只能理解到一個艾米莉在冥灘、另一個在總統府當總統，但不能理解為什麼她要希格斯又要山姆，也不能理解她是不是好人，因為從結尾畫面上看來，艾米莉是想要毀掉世界的，但當山姆放下槍後她卻又抱著山姆說了一段我不明所以的台詞：\n「我做過無數個夢，我不知道該相信哪一個，所以我才決定跟你和其他人分享我的夢境，但是為了讓點連成一條線，讓一切都弄清楚，你們需要看得更透徹。你們需要時間。時間對我沒有任何意義，我不是一條線，我是單獨存在的點\u0026hellip;(省略)\u0026hellip;你(山姆)找到了共通的線，把所有點串在一起，而且你用唯一可能的方式做到了，也就是努力活好每一天，謝謝你山姆。」 ​\t這邊我看不懂的原因，是因為不能理解為什麼山姆努力活好每一天就能把所有點串成一條線，也不能理解為什麼山姆把所有的點連城線之後就可以進行大滅絕，我聽得出來翻譯的字幕和語音是對的上的，沒有亂翻，但就是不知道到底發生了什麼事情，後來上網看之後發現日文版的意思比較直觀，比如說有一段我也看不太懂，但日文版就比較清楚 (中文版)艾米莉：\n「我是滅絕體，讓我們的種族滅絕是我們的命運，但在那一刻你也成為這個命運的一部分，你變成了回歸者，DOOMS將我們的惡夢擴散到了全世界」 (日文版)艾米莉：「我是滅絕體，為了將我們的種族引往滅絕才誕生的，當時你也成為了我的一部分，你成為了回歸者，而共享我滅絕夢能力的DOOMS能力者也誕生了」\n所以我後面的劇情是破完之後再去找解析影片才知道到底如何，可能是我資質駑鈍，真的看不懂遊戲最後的劇情吧，要看人家解析才看的懂，如果有人要留言說是我自己理解力有問題，他都看得懂的話，那我想跟你說聲抱歉，我是低能兒，我不配玩這個遊戲，發這篇文章真的是很對不起PTT對不起我的爸爸媽媽，生了一個連遊戲劇情都看不懂的小孩。\n原本還想打更多的，但發現該講的都講完，最後一點雞蛋挑骨頭的大概就是地圖可以再大一點點之類的，很多人說撐過第三章就會好玩，但我是到爬雪山的時候才覺得好玩，因為雪山就開始能針對地形攻略，而且你攻略的越透徹，爬起來就越輕鬆，所以我當初在爬的時候就帶了一堆建材，瘋狂蓋纜車，建材一沒就立刻搭纜車回家拿，這樣把雪山道路牽起來，最後結尾的時候我就是一路從雪山搭車搭到基地，連對話都還沒跑完就到家了。\n結尾就是，如果死亡擱淺有出2，我會買，有朋友要我推薦遊戲，我也會推薦死亡擱淺給他們，畢竟這應該是市面上唯一一款用3A規模製作的獨立遊戲風格的大作了。\n","date":"2022-10-07T02:44:36+08:00","image":"https://i.imgur.com/mg2syAL.jpg","permalink":"https://hoxtonhsu.com/p/%E6%AD%BB%E4%BA%A1%E6%93%B1%E6%B7%BA%E5%BF%83%E5%BE%97%E5%89%8D%E9%9D%A2%E7%84%A1%E9%9B%B7%E5%BE%8C%E9%9D%A2%E6%9C%89%E9%9B%B7/","title":"死亡擱淺心得，前面無雷，後面有雷"},{"content":"如果你沒有看過黑暗靈魂1代的任何影片，比如說boss介紹、地圖跑法之類的\n也沒有玩過魂3，那我會覺得黑暗靈魂1代很值得玩 但如果你已經看過很多實況主玩過黑暗靈魂，知道怎麼從傳火祭祀場走到灰燼湖 知道怎麼走到不死鎮底層\u0026hellip;諸如此類的事情，那我會建議你不要玩黑魂 因為黑魂1真正有趣的是地圖探索，如果你地圖都知道怎麼跑 那我不建議你玩魂1\n我先從抱怨的地方開始好了，我以下的抱怨都是針對黑暗靈魂1 大部分我抱怨的事情都在魂3有改善了\n1.打Boss的跑屍路程\n魂1裡面有些boss的跑屍路程我覺得是設計的不錯的，比如說守鐘的石像鬼、翁斯坦與? 摩等等，這種路程落在30秒內，路上的阻礙不會嚴重到殺死你的，我覺得是個合格的跑屍流程，這種長度可以在每次跑屍的路上，想看看上次犯的錯要如何修正、哪些招該怎麼閃之類的。但有些boss的跑屍流程我就覺得有點誇張了，比如說墓王尼特、烏薪王葛溫、 混沌的溫床這類型的，跑屍流程大於30秒，路上又不是說特別好跑，比如說初始火爐卡在橋上的黑騎士，或是溫床路上的楔型石惡魔、墓王尼特要先跑過一堆有的沒的的區域才能進霧門，使得我後期越玩越煩躁，前面剛開始打的時候都覺得還好，越到後面的王跑屍過程就越長。\n2.篝火的傳送點太少\n魂1的篝火每個篝火都能主動傳送，但不是每個篝火都能接受傳送，比如病村的底部下? 道的傳點就不能傳過去，只能選擇從蜘蛛女那邊過去，偏偏病村跑圖又不是件很有趣的 事情，會減弱我中途想要回去探索的慾望\n3.靈活度\n魂1的翻滾只能朝前後左右方向滾，所幸魂1大部分的boss都不太需要斜方移動，但操作 來就是卡卡的，而且負重要低於25%才能讓翻滾動畫像魂3那樣絲滑流暢，所以我幾乎都是裸體在玩的。\n至於魂1的優點，我想先老實說，因為我已經知道大家說黑魂1的地圖設計很神，所以在 的時候已經有主觀認知了，所以在玩的時候沒有真的很驚艷的感覺，不死鎮的電梯下來到祭祀場、病村接飛龍之谷接小隆德接祭祀場，這些我都覺得是很棒的設計，但沒有那種大腦震撼的感覺。當初我在玩空洞騎士的時候，還不知道空洞騎士的地圖探索也做得很強，當我偶然間從心血來潮，不選擇搭車，而是在繼續往右走，走到王國邊界時，真的覺得這遊戲的地圖設計真的太強了，所有的一切都環環相扣。但在魂1裡面我沒有感受到這種 感覺過，唯一一個比較接近的應該就是灰燼湖，我很後悔我是從攻略影片上面得知這個地點，我想如果我是自己偶然間走進樹洞，偶然間撞進幻影牆，順著路一路走，最後進入 灰燼湖，踏上古龍之道的話，我想我對魂1的地圖評價應該會更高，但真的很可惜，我透過Youtube、Twitch等等渠道，已經大略的知道魂1的地圖，所以我對於地圖的感受都已經是二手的，就像張愛玲說的「我們對於生活的體驗往往是第二輪的」，自然而然也沒有那麼感動了。\n但魂1還是有些地點是我覺得很有趣的，比如說賽恩古城、地下墓地。古城被譽為賽恩 快樂城、極限體能王，裡面的道路錯綜複雜、又有許多陷阱、埋伏、但實際在跑圖的時候，能感受到這個古城非常用心，怪物的配置、陷阱的位置都有給玩家對應的空間。地下墓地則是讓我體驗了一次神鬼傳奇的感覺，身後有無數隻骷髏士兵永無止盡的追著自己，而自己就要在這種情況下找到篝火，在這一區域每次找到篝火都會讓我有種鬆了口氣的感覺。\n文章差不多就打到這邊了，就像我一開始說的，如果你沒玩過魂3、也不知道魂1的地圖長啥樣，想體驗看看什麼叫地圖設計，那魂1可以嘗試看看，但如果你玩過魂3、或是知道魂1? 那我就覺得魂1不太適合玩了，畢竟也是十年前的作品有些地方都顯得有點過時，建議看看影片、看看實況補完就好，以我自己實際下去玩的感受，我覺得痛苦太多，收穫太少，有趣的點都因為預先知情而被淡化、無趣的點則因為玩過魂3而被無限放大，以上這些都是? 個人意見，如果版上有黑暗靈魂一代粉絲，我就在這邊說聲抱歉了。\n","date":"2022-10-06T23:16:34+08:00","image":"https://i.imgur.com/jQx4JF5.png","permalink":"https://hoxtonhsu.com/p/%E9%BB%91%E6%9A%97%E9%9D%88%E9%AD%821%E5%BF%83%E5%BE%97/","title":"黑暗靈魂1心得"},{"content":"SpringBoot-Scheduling 用來做定期任務的東西，有兩種\nSpring schedule：只適合處理簡單的計畫任務，不能處理分散式的任務，當任務太多時，可能出現阻塞、崩潰、延遲啟動等問題 Quartz：更強大的一個排程器，能夠配置上百甚至上千的事務。 Spring Schedule 步驟 在啟動類上加上@EnableScheduling 1 2 3 4 5 6 7 @SpringBootApplication() @EnableScheduling public class Application { public static void main(String[] args) { SpringApplication.run(Application.class, args); } } 在方法上加上@Scheduled 1 2 3 4 5 6 7 @Component public class Task { @Scheduled(fixedDelay = 10 * 100) public void printLocalTime() { System.out.println(LocalTime.now().toString()); } } 1 2 3 4 @Scheduled(cron = \u0026#34;1 * * * * ?\u0026#34;,zone = \u0026#34;Asia/Taipei\u0026#34;) public void printPer5second(){ log.info(\u0026#34;cron\u0026#34;); } 1 2 3 4 @Scheduled(cron = \u0026#34;0/1 * * * * ?\u0026#34;,zone = \u0026#34;Asia/Taipei\u0026#34;) public void printPer5second(){ log.info(\u0026#34;cron\u0026#34;); } Cron表達式(七子表達式) 表達式生成工具\nCron語源來自Chronos，是希臘神話中掌管時間的神柯羅諾斯(Chronos)。\n秒 分 時 日 月 周 年(可選) 1 * * * * ? ? 秒：0-59 分：0-59 時 ：0-23 日：1-31 月：0-11或\u0026quot;JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC\u0026quot; 周：1-7或SUN, MON, TUE, WED, THU, FRI,SAT 年 想像一個時鐘\u0026hellip;\n當每次秒針指向一秒時 1 * * * * ? 當每次時針指向12時 * * 12 * * ? 每個月 1 號中午 12 點 0 0 12 1 * ? 1 月每天中午 12 點，每 5 秒 0/5 0 12 * 1 ? 字元 意義 * 表達任意值，所有值都可以匹配 ? 只用在 日 跟 周 的值域，有點表達 don’t care 的概念，無所謂，不關心到底是什麼值 - 指定範圍，前後接數字: 10-12 , 指定離散的選項: 1,5,6,8，或者的概念 / 指定增量，表達 每 的概念: 0/5 意旨從 0 開始每 5 單位 L 用在 月 跟 周 的值域。在月的話表達最後一天，在周的話前面可以加上數字 3L 表示該月最後一個星期二 W 用在日的值域表示距離最近的該月工作日: 15W，距離 15 號最近的工作日，可能往前也可能往後 LW 用在日的值域，表示最後一周的工作日 # 用在周的值域，指定特定周的特定日: “4#2” 表示第二周的星期三 C 用在日跟周的值域，指某特定個日期的後一天: 在日中寫 3C 指該月 3 號的後一天，在周中寫 2C 指該周星期一的後一天 Quartz 是一個開源的任務排程器，幾乎可以整合到任何Java應用程式中。\n它可以用來\n安排每個晚上把資料庫內容轉存到檔案 提供定時提醒服務 族繁不及備載\u0026hellip; 底層數據結構- 堆 介紹 堆是一種特殊的樹，滿足下面兩個條件，就是一個堆\n堆是一顆完全二元樹完整二元樹：除了最後一層以外，其他層的節點數需要達到最大(1,2,4,8. ..) 每個節點所儲存的值，必須要大於小頂堆或小於大頂堆父節點的值 小頂堆\n完整二元樹的一些特性：快速定位父節點\n在排程器的框架中，每一個節點就是一個Job，越頻繁的Job會被放置在越上層的節點\n如何插入元素 尾插法，在尾部插入一個新的元素，然後上浮，浮到符合定義\n除了最後一層以外，其他層的節點數需要達到最大(1,2,4,8. ..)，且最後一層節點都靠左排列 每個節點所儲存的值，必須要大於小頂堆或小於大頂堆父節點的值 如何刪除元素 將尾部(最後一個節點)放置到堆頂，然後下沉\n時間輪算法(Time Wheel) 再刪除元素的時候都需要下沉，當節點數很多時會造成性能延宕\nround 型的時間輪 任務上記錄一個round，遍歷到了就將round減一，為0時取出來執行\n分層時間輪 Cron表達式以及其他排程器所採用的底層架構，分成秒輪、分輪、小時輪、日輪、周輪、月輪、年輪\u0026hellip;，月輪迭代到了，就將任務取出放到天輪中執行\u0026hellip;，以此類推\nCron表達式(七子表達式) 表達式生成工具\nCron語源來自Chronos，是希臘神話中掌管時間的神柯羅諾斯(Chronos)。\n秒 分 時 日 月 周 年(可選) 1 * * * * ? ? 秒：0-59 分：0-59 時 ：0-23 日：1-31 月：0-11或\u0026quot;JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC\u0026quot; 周：1-7或SUN, MON, TUE, WED, THU, FRI,SAT 年 想像一個時鐘\u0026hellip;\n當每次秒針指向一秒時 1 * * * * ? 當每次時針指向12時 * * 12 * * ? 每個月 1 號中午 12 點 0 0 12 1 * ? 1 月每天中午 12 點，每 5 秒 0/5 0 12 * 1 ? 字元 意義 * 表達任意值，所有值都可以匹配 ? 只用在 日 跟 周 的值域，有點表達 don’t care 的概念，無所謂，不關心到底是什麼值 - 指定範圍，前後接數字: 10-12 , 指定離散的選項: 1,5,6,8，或者的概念 / 指定增量，表達 每 的概念: 0/5 意旨從 0 開始每 5 單位 L 用在 月 跟 周 的值域。在月的話表達最後一天，在周的話前面可以加上數字 3L 表示該月最後一個星期二 W 用在日的值域表示距離最近的該月工作日: 15W，距離 15 號最近的工作日，可能往前也可能往後 LW 用在日的值域，表示最後一周的工作日 # 用在周的值域，指定特定周的特定日: “4#2” 表示第二周的星期三 C 用在日跟周的值域，指某特定個日期的後一天: 在日中寫 3C 指該月 3 號的後一天，在周中寫 2C 指該周星期一的後一天 ​\n重要API及概念 記得Job類一定要是public class，不然Scheduler會讀不到\n釋例一：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 public class Quartz { public static void main(String[] args) { MyJob myJob = new MyJob(); JobDetail jobDetail = JobBuilder.newJob(MyJob.class) .withIdentity(\u0026#34;job1\u0026#34;, \u0026#34;group1\u0026#34;) .build(); Trigger trigger = TriggerBuilder.newTrigger() .withIdentity(\u0026#34;trigger1\u0026#34;, \u0026#34;trigger1\u0026#34;) .startNow() .withSchedule(SimpleScheduleBuilder.simpleSchedule().withIntervalInSeconds(1).repeatForever()) .build(); try { Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler(); scheduler.scheduleJob(jobDetail,trigger); scheduler.start(); } catch (SchedulerException e) { throw new RuntimeException(e); } ; } } 1 2 3 4 5 6 public class MyJob implements Job { @Override public void execute(JobExecutionContext jobExecutionContext) throws JobExecutionException { System.out.println(\u0026#34;MyJob execute:\u0026#34; + new Date()); } } 釋例二\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 public class HelloJob { public static void main(String[] args) { try { Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler(); scheduler.start(); JobDetail jobDetail = JobBuilder.newJob(SayHello.class) .withIdentity(\u0026#34;job1\u0026#34;, \u0026#34;group1\u0026#34;) //Job1是名字，具有唯一性，group1是這個Job屬於哪一組，同一組的Job可以共享相同的邏輯來處理Job。需要name與Job才可以組成一個JobKey .usingJobData(\u0026#34;username\u0026#34;, \u0026#34;Hoxton\u0026#34;) .usingJobData(\u0026#34;age\u0026#34;, \u0026#34;20\u0026#34;) .withDescription(\u0026#34;desc-demo\u0026#34;) .build(); SimpleTrigger trigger = TriggerBuilder.newTrigger() .withIdentity(\u0026#34;trigger1\u0026#34;, \u0026#34;group1\u0026#34;) .startNow() .withSchedule(SimpleScheduleBuilder.simpleSchedule().withIntervalInSeconds(1).repeatForever()) .build(); scheduler.scheduleJob(jobDetail,trigger); scheduler.start(); // scheduler.shutdown(); } catch (SchedulerException e) { throw new RuntimeException(e); } } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 @Slf4j @NoArgsConstructor public class SayHello implements Job { @Override public void execute(JobExecutionContext context) throws JobExecutionException { JobDetail jobDetail = context.getJobDetail();//從context中獲取屬性 JobKey key = jobDetail.getKey(); Class\u0026lt;? extends Job\u0026gt; jobClass = jobDetail.getJobClass(); String description = jobDetail.getDescription(); JobDataMap jobDataMap = jobDetail.getJobDataMap(); String username = jobDataMap.getString(\u0026#34;username\u0026#34;); int age = jobDataMap.getIntValue(\u0026#34;age\u0026#34;); log.info(\u0026#34;\\nJobKey : {},\\n JobClass : {},\\n JobDesc : {},\\n username : {},\\n age : {}\u0026#34;, key, jobClass.getName(), description, username, age); } } Scheduler 生命週期由ScheduleFactory建立開始，呼叫shutdown方法結束。\n當Schduler建立，任何關於Schduling相關的事情，都由它控制\n新增 刪除 列出所有Job 暫停觸發器 在Start之前不會做任何事情\nJob 你希望被排程器排程的任務元件介面，定義如何執行，是正在執行的作業例項，一個Job可以建立多個JobDetail，擁有不同的JobDataMap。本身implement了Job類\n1 2 3 graph TD; Job ---\u0026gt; JodDetail1 \u0026amp; JodDetail2 \u0026amp; JodDetail3 \u0026amp; JodDetail... 1 2 3 4 5 6 public class SendEmail implements Job { @Override public void execute(JobExecutionContext jobExecutionContext) throws JobExecutionException { System.out.println(\u0026#34;SendEmail\u0026#34;); } } 當Job的觸發器觸發時，排程程式的工作執行將呼叫excute()方法 該方法接收一個JobExcutionContext物件，為Job提供了豐富的執行時環境，比如schduler,trigger,jobDataMap,job,calender,time 何謂Context(上下文)\n可以理解為環境、容器的意思會比上下文更具體一點，它提供了一個程式中全域性的資訊。\nJobDetail 用於定義Job的各種屬性、各種任務，還可以用來為Job儲存狀態資訊的JobDataMap，是將Job加入scheduler時，所需要創建的一個物件，它包含了各種屬性設置，以及用於存取job實例狀態訊息的JobDataMap，在創建JobDetail時，需要將欲執行的類名傳遞給JobDetail，這樣schedule就知道要執行何種類型的job。\n1 JobDetail jobDetail=JobBulider.newJob(Job.class).bulid(); JobDataMap 實作Map介面，因此具有Key-Value，儲存可序列化資料，供Job在執行時使用。也可以使用usingJobData(key,value)在建構JobDetail的時候傳入資料，使用JobDetail.getDataMap()獲取Map。可以再透過jobDataMap取出裡面的數據\n1 2 3 4 JobDetail job = JobBuilder.newJob(HelloJob.class) .withIdentity(\u0026#34;helloJob\u0026#34;, \u0026#34;hello\u0026#34;)//給job命名並分組 .usingJobData(\u0026#34;jobdd\u0026#34;, \u0026#34;hello job\u0026#34;)//通過JobBuilder的usingJobData方法給JobDataMap中塞入數據 .build(); 1 2 3 4 5 6 7 8 9 10 public class HelloJob implements Job { @Override public void execute(JobExecutionContext context) throws JobExecutionException { System.err.println(context.getJobDetail().getKey());// JobDetail的key又他的name和group組成 System.err.println(context.getTrigger().getKey());// Trigger的key又他的name和group組成 System.err.println(context.getJobDetail().getJobDataMap().get(\u0026#34;jobdd\u0026#34;)); System.err.println(\u0026#34;hello,quartz\u0026#34;); } } 會輸出\n`hello.helloJob\nhello.helloTrigger\nhello job\nhello, quartz\nTrigger 觸發任務執行，觸發器可能具有與Job有關的JobDataMap，以便將觸發器觸發的引數傳遞給Job，Quartz本身提供了幾種觸發器SimpleTrigger和CronTrigger是最常用到的。\nSimpleTriger 用於一次性執行作業或需要在給定的時間觸發一個作業並重複執行N次，且兩次執行時間有Delay。用在具體的時間點，並已指定的間隔時間重複執行若干次，它包含了幾種屬性：\n開始時間 結束時間 重複次數 重複間隔 釋例一：立刻觸發一次，然後停止\n1 2 3 4 5 Date date = new Date(); Trigger trigger1 = TriggerBuilder.newTrigger() .withIdentity(\u0026#34;trigger1\u0026#34;, \u0026#34;group1\u0026#34;) .startAt(date) .build(); 釋例二：指定時間觸發，每隔十秒執行一次，重複10次\n1 2 3 4 5 6 7 8 trigger = newTrigger() .withIdentity(\u0026#34;trigger3\u0026#34;, \u0026#34;group1\u0026#34;) .startAt(myTimeToStartFiring) // if a start time is not given (if this line were omitted), \u0026#34;now\u0026#34; is implied .withSchedule(simpleSchedule() .withIntervalInSeconds(10) .withRepeatCount(10)) // note that 10 repeats will give a total of 11 firings .forJob(myJob) // identify job with handle to its JobDetail itself .build(); 釋例三：5分鐘以後開始觸發，僅執行一次\n1 2 3 4 5 trigger = (SimpleTrigger) newTrigger() .withIdentity(\u0026#34;trigger5\u0026#34;, \u0026#34;group1\u0026#34;) .startAt(futureDate(5, IntervalUnit.MINUTE)) // use DateBuilder to create a date in the future .forJob(myJobKey) // identify job with its JobKey .build(); 釋例四：立即觸發，每個5分鐘執行一次，直到22:00：\n1 2 3 4 5 6 7 trigger = newTrigger() .withIdentity(\u0026#34;trigger7\u0026#34;, \u0026#34;group1\u0026#34;) .withSchedule(simpleSchedule() .withIntervalInMinutes(5) .repeatForever()) .endAt(dateOf(22, 0, 0)) .build(); 釋例五：在下一小時整點觸發，每個2小時執行一次，一直重複：\n1 2 3 4 5 6 7 8 9 10 11 trigger = newTrigger() .withIdentity(\u0026#34;trigger8\u0026#34;) // because group is not specified, \u0026#34;trigger8\u0026#34; will be in the default group .startAt(evenHourDate(null)) // get the next even-hour (minutes and seconds zero (\u0026#34;00:00\u0026#34;)) .withSchedule(simpleSchedule() .withIntervalInHours(2) .repeatForever()) // note that in this example, \u0026#39;forJob(..)\u0026#39; is not called which is valid // if the trigger is passed to the scheduler along with the job .build(); scheduler.scheduleJob(trigger, job); CronTrigger 希望以日期作為觸發任務的板機，就用CronTriger，實務上比較常用這個\n1 2 3 4 CronTrigger trigger2 = TriggerBuilder.newTrigger() .withIdentity(\u0026#34;trigger3\u0026#34;, \u0026#34;group1\u0026#34;) .withSchedule(CronScheduleBuilder.cronSchedule(\u0026#34;0/2 * * * * ?\u0026#34;)) .build(); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 package com.how2java; import static org.quartz.CronScheduleBuilder.cronSchedule; import static org.quartz.JobBuilder.newJob; import static org.quartz.TriggerBuilder.newTrigger; import static org.quartz.SimpleScheduleBuilder.simpleSchedule; import java.util.Date; import org.quartz.CronTrigger; import org.quartz.DateBuilder; import org.quartz.JobDetail; import org.quartz.Scheduler; import org.quartz.SimpleTrigger; import org.quartz.impl.StdSchedulerFactory; public class TestQuartz { public static void main(String[] args) throws Exception{ Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler(); Date startTime = DateBuilder.nextGivenSecondDate(null, 8); JobDetail job = newJob(MailJob.class).withIdentity(\u0026#34;mailJob\u0026#34;, \u0026#34;mailGroup\u0026#34;).build(); CronTrigger trigger = newTrigger().withIdentity(\u0026#34;trigger1\u0026#34;, \u0026#34;group1\u0026#34;).withSchedule(cronSchedule(\u0026#34;0/2 * * * * ?\u0026#34;)) .build(); // schedule it to run! Date ft = scheduler.scheduleJob(job, trigger); System.out.println(\u0026#34;使用的Cron表达式是：\u0026#34;+trigger.getCronExpression()); // System.out.printf(\u0026#34;%s 这个任务会在 %s 准时开始运行，累计运行%d次，间隔时间是%d毫秒%n\u0026#34;, job.getKey(), ft.toLocaleString(), trigger.getRepeatCount()+1, trigger.getRepeatInterval()); scheduler.start(); //等待200秒，让前面的任务都执行完了之后，再关闭调度器 Thread.sleep(200000); scheduler.shutdown(true); } } JobBulider 用來建立JobDetail\n1 2 3 4 5 6 7 8 JobDetail jobDetail = JobBuilder.newJob(某個繼承了Job的類)... JobDetail jobDetail = JobBuilder.newJob(SayHello.class) .withIdentity(\u0026#34;job1\u0026#34;, \u0026#34;group1\u0026#34;) .usingJobData(\u0026#34;username\u0026#34;, \u0026#34;Hoxton\u0026#34;) .usingJobData(\u0026#34;age\u0026#34;, \u0026#34;20\u0026#34;) .withDescription(\u0026#34;desc-demo\u0026#34;) .build(); TriggerBulider\n用於建立Trigger\nIdentity 當Job和Trgger在Quartz排程程式中註冊時，會獲得標示鍵，JobKey和TriggerKey置入group中，易於組織管理，其中name與group必須唯一\n為何要將Job和Trigger分開來? While developing Quartz, we decided that it made sense to create a separation between the schedule and the work to be performed on that schedule. This has (in our opinion) many benefits.\nFor example, Jobs can be created and stored in the job scheduler independent of a trigger, and many triggers can be associated with the same job. Another benefit of this loose-coupling is the ability to configure jobs that remain in the scheduler after their associated triggers have expired, so that that it can be rescheduled later, without having to re-define it. It also allows you to modify or replace a trigger without having to re-define its associated job.\nJob與JobDetail的一些說明 Job是正在執行的作業，JobDetail則是作業的定義 一個Job可以創建多個JobDetail，擁有不同的JobDataMap 舉例來說，今天寫了一個定時寄送信件的Job，叫做SendEmailJob，我們希望這個Job可以寄給客戶，然後在cc給你的主管，所以需要創建兩個不同的JobDetail，比如說SendEmailToClient、SendEmailToAdministor，並透過JobDataMap綁定參數傳遞至JobDetail中，這兩個JobDetail擁有各自獨立的JobDataMap，實現起來會更靈活。\n參考 官方文檔\n任務排程框架Quartz快速入門\nQuartz教學基礎\n觸發器詳細定義\n","date":"2022-10-06T23:14:21+08:00","image":"https://i.imgur.com/9or5BzU.png","permalink":"https://hoxtonhsu.com/p/java%E5%85%A7%E7%9A%84%E6%8E%92%E7%A8%8B%E5%99%A8%E4%BB%8B%E7%B4%B9/","title":"Java內的排程器介紹"},{"content":"author = \u0026ldquo;Hoxton\u0026rdquo; title = \u0026ldquo;資料結構筆記\u0026rdquo; date = \u0026ldquo;2022-10-08T03:02:43+08:00\u0026rdquo; draft = \u0026ldquo;true\u0026rdquo; description = \u0026ldquo;資料結構的筆記\u0026rdquo; tags = [ \u0026quot;\u0026quot; ] categories = [ ] image = \u0026ldquo;https://i.imgur.com/NiqSvey.png\" keyword = [\u0026ldquo;資料結構\u0026rdquo;]\n+++\n學習路線 ","date":"0001-01-01T00:00:00Z","permalink":"https://hoxtonhsu.com/p/","title":""}]