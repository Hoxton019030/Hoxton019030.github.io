<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>程式 on Hoxton</title><link>https://hoxtonhsu.com/categories/%E7%A8%8B%E5%BC%8F/</link><description>Recent content in 程式 on Hoxton</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Mon, 06 Feb 2023 19:50:08 +0800</lastBuildDate><atom:link href="https://hoxtonhsu.com/categories/%E7%A8%8B%E5%BC%8F/index.xml" rel="self" type="application/rss+xml"/><item><title>GitLab-CI/CD筆記</title><link>https://hoxtonhsu.com/p/gitlab-ci/cd%E7%AD%86%E8%A8%98/</link><pubDate>Mon, 06 Feb 2023 19:50:08 +0800</pubDate><guid>https://hoxtonhsu.com/p/gitlab-ci/cd%E7%AD%86%E8%A8%98/</guid><description>&lt;img src="https://i.imgur.com/b9bWXWs.jpg" alt="Featured image of post GitLab-CI/CD筆記" />&lt;p>&lt;a class="link" href="https://youtu.be/-4XT8-znkuc?list=PLBd8JGCAcUAEwyH2kT1wW2BUmcSPQzGcu" target="_blank" rel="noopener"
>參考影片：為你自己學GitLab CICD&lt;/a>&lt;/p>
&lt;h1 id="為何選擇jenkins">為何選擇Jenkins？&lt;/h1>
&lt;p>目前市面上有三種CI/CD的工具，分別是&lt;/p>
&lt;ol>
&lt;li>Github Action&lt;/li>
&lt;li>GitLab CI/CD&lt;/li>
&lt;li>Jenkins&lt;/li>
&lt;/ol>
&lt;p>而他們各自的難易度如下：&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/2Z5xcnD.jpg"
loading="lazy"
alt="image-20230208032100440"
>&lt;/p>
&lt;h2 id="github-action-jenkins-gitlabcicd-三者之比較">Github Action Jenkins GitlabCICD 三者之比較&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Github Action&lt;/th>
&lt;th>GitLab CI/CD&lt;/th>
&lt;th>Jenkins&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>優點&lt;/td>
&lt;td>簡單易用，可以透過組合 Actions 來設定 CI/CD 流程。&lt;br/>集成與 GitHub 相當良好，方便地與其他 GitHub 工具整合。&lt;br/>&lt;/td>
&lt;td>功能齊全，涵蓋了版本控制、需求管理、測試、打包、部署等。&lt;br/>內建了測試覆蓋率分析、版本回溯、網路推送等工具。&lt;br/>支援更多的發佈平臺和語言，可以支援更多不同的開發團隊。&lt;/td>
&lt;td>功能強大，擁有豐富的插件系統，可以滿足多種 CI/CD 需求。&lt;br/>社區活躍，有大量社區插件可以使用。&lt;br/>可以自定義工作流程，靈活應對複雜需求。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>缺點&lt;/td>
&lt;td>設定複雜的流程可能會比較困難。&lt;br/>有些功能，比如說高級的權限管理，可能比較弱。&lt;/td>
&lt;td>較為複雜，可能會花費一些時間來學習和設定。&lt;br/>有些功能，例如高級的安全性，可能會有額外的費用。&lt;/td>
&lt;td>相對較難學習和使用，不如 GitHub Actions 和 GitLab CI/CD 簡單易用。&lt;br/>配置和管理相對複雜，需要一定的技術支持。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>為什麼CI/CD重要，它做了哪些事情？&lt;/p>
&lt;ul>
&lt;li>在還沒有CI/CD的流程之前，部屬一個web大概是這樣&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/Mvw7aN3.png"
loading="lazy"
alt="image-20230208033136666"
>&lt;/p>
&lt;ul>
&lt;li>CI/CD建立完成後，開發人員只需要專注在任務的完成，而不需要做重複的部屬工作&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/I5CQwCE.png"
loading="lazy"
alt="image-20230208033210513"
>&lt;/p>
&lt;h1 id="名詞解析">名詞解析&lt;/h1>
&lt;h2 id="pipeline">Pipeline&lt;/h2>
&lt;p>就是腳本(script)的意思，用來設計CICD的流程，一個常見的pipeline如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># 稱之為階段，可以為每個Job分配階段，常見的比如說有測試階段、打包階段、部屬階段等等，每個job都屬於一個階段&lt;/span>
stages:
- linter
- testing
- building
- deploy
&lt;span class="c1"># 工作流&lt;/span>
workflow:
rules:
- &lt;span class="k">if&lt;/span>: &lt;span class="nv">$CI_COMMIT_BRANCH&lt;/span> &lt;span class="o">==&lt;/span>&lt;span class="s2">&amp;#34;main&amp;#34;&lt;/span> &lt;span class="c1">#若發生什麼事&lt;/span>
when: always &lt;span class="c1">#則做什麼事&lt;/span>
- when: never &lt;span class="c1">#不然則做什麼&lt;/span>
&lt;span class="c1"># 變數，就是那個變數，可以寫在外層的就是全域變數，寫在Job裡面的就是Job變數&lt;/span>
variables:
host_name: &lt;span class="s2">&amp;#34;hoxton&amp;#34;&lt;/span>
&lt;span class="c1"># 稱之為Job&lt;/span>
Helloworld: &lt;span class="c1"># Job名稱&lt;/span>
image: ruby:3.1.2-alpine3.16 &lt;span class="c1">#指定要用什麼image來跑，等同於Executor&lt;/span>
variables: &lt;span class="c1"># Job變數&lt;/span>
my_name: &lt;span class="s2">&amp;#34;hello kitty&amp;#34;&lt;/span>
stage: linter &lt;span class="c1"># 這個Job是什麼階段的&lt;/span>
script: &lt;span class="c1"># 要執行什麼樣的腳本&lt;/span>
- &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;hello world, GitLab! &lt;/span>&lt;span class="nv">$my_name&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
- &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;hello world, GitLab! &lt;/span>&lt;span class="nv">$host_name&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
- chmod +x ./run.sh
- ./run.sh
run_unit_tests: &lt;span class="c1"># Job名稱&lt;/span>
stage: testing &lt;span class="c1"># 這個Job是什麼階段的&lt;/span>
needs: &lt;span class="c1"># 決定Job的順序&lt;/span>
- Helloworld &lt;span class="c1"># 在這些Job完成後才會去做run_unit_tests的Job&lt;/span>
script: &lt;span class="c1"># 要執行什麼樣的腳本&lt;/span>
- &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;執行單元測試&amp;#34;&lt;/span>
before_script: &lt;span class="c1">#在執行腳本之前需要執行什麼腳本&lt;/span>
- &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;安裝套件&amp;#34;&lt;/span>
- &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;設定資料庫連線&amp;#34;&lt;/span>
after_script :#在執行腳本之後需要執行什麼腳本
- &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;刪除不必要的檔案&amp;#34;&lt;/span>
bad_job: &lt;span class="c1"># Job名稱&lt;/span>
stage: testing &lt;span class="c1"># 這個Job是什麼階段的&lt;/span>
script: &lt;span class="c1"># 要執行什麼樣的腳本&lt;/span>
- &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;bad_job&amp;#34;&lt;/span>
build_docker_images: &lt;span class="c1"># Job名稱&lt;/span>
only: &lt;span class="c1"># 指定Job只會在什麼分支執行&lt;/span>
- main
stage: building &lt;span class="c1"># 這個Job是什麼階段的&lt;/span>
script: &lt;span class="c1"># 要執行什麼樣的腳本&lt;/span>
- &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;building docker images&amp;#34;&lt;/span>
deploy_to_production: &lt;span class="c1"># Job名稱&lt;/span>
except: &lt;span class="c1"># 指定Job不在什麼分支執行&lt;/span>
- dev &lt;span class="c1"># 分支名稱&lt;/span>
stage: deploy &lt;span class="c1"># # 這個Job是什麼階段的&lt;/span>
script: &lt;span class="c1"># 要執行什麼樣的腳本&lt;/span>
- &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;deploy to production&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="runner">Runner&lt;/h2>
&lt;p>大概等同於「要用哪台電腦來執行Pipeline」，以下可以證明&lt;/p>
&lt;p>欲執行的script&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">print-location:
tags:
- euno
script:
- &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$HOSTNAME&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/47bZfpT.png"
loading="lazy"
alt="image-20230208114831319"
>&lt;/p>
&lt;p>&lt;strong>若不指定要有用哪台電腦執行，則gitlab會提供，但這時候就是在使用gitlab所提供的服務，免費帳戶每月超過40小時即到達上限，因此需要去註冊一個Runner&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>如何註冊一個Runner&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/TZSQrpa.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/Kumst5b.png"
loading="lazy"
alt="image-20230208113900501"
>&lt;/p>
&lt;h2 id="executor">Executor&lt;/h2>
&lt;p>代表pipeline所運行的環境，可以是shell，也可以是Docker容器，端看目的而定，但千萬要記得，要執行指定的Executor，&lt;strong>也要看自己的電腦或VM有沒有這個環境&lt;/strong>，之前有遇到一個問題是，我在本地起了一個runner，但一直說找不到pwsd的指令，此時要到gitlab-runner安裝的資料夾去調整toml檔案，將shell改成用powershell運行，&lt;strong>因為window下沒有pwsd這個指定&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/z1cqmhL.png"
loading="lazy"
alt="image-20230208115618286"
>&lt;/p>
&lt;h1 id="如何使用gitlab的cicd工具">如何使用GitLab的CI/CD工具&lt;/h1>
&lt;p>在專案底下新增&lt;code>.gitlab-ci.yml&lt;/code>的檔案，裡面的格式長這樣&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/UYbhpbw.png"
loading="lazy"
alt="image-20230205220750491"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="c"># 稱之為狀態&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">stages&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">linter&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">testing&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">building&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">deploy &lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c"># 稱之為Job&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">Helloworld&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">stage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">linter&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">echo &amp;#34;hello world, GitLab!&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">run_unit_tests&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">stage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">testing&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">echo &amp;#34;執行單元測試&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">before_script&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">echo &amp;#34;安裝套件&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">echo &amp;#34;設定資料庫連線&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">after_script&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">echo &amp;#34;刪除不必要的檔案&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">bad_job&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">stage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">testing&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">epaewjdqwe&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">build_docker_images&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">stage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">building&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">echo &amp;#34;building docker images&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">deploy_to_production&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">stage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">deploy&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">echo &amp;#34;deploy to production&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="把image推上gitlab">把Image推上Gitlab&lt;/h1>
&lt;h1 id="問題彙整">問題彙整&lt;/h1>
&lt;h2 id="got-permission-denied-while-trying-to-connect-to-the-docker-daemon-socket-at-unix-">Got permission denied while trying to connect to the Docker daemon socket at unix:/// &amp;hellip;&lt;/h2>
&lt;p>&lt;img src="https://i.imgur.com/qnx1Plu.png"
loading="lazy"
alt="image-20230208005955002"
>&lt;/p>
&lt;p>解決方法：&lt;/p>
&lt;p>在vm中輸入&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">usermod -aG docker gitlab-runner
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&amp;ldquo;usermod -aG docker gitlab-runner&amp;rdquo; 這個指令是用來將 &amp;ldquo;gitlab-runner&amp;rdquo; 用戶加入 &amp;ldquo;docker&amp;rdquo; 群組。 &amp;ldquo;-a&amp;rdquo; 選項用於將用戶附加到指定的群組， &amp;ldquo;-G&amp;rdquo; 選項用於指定群組。&lt;/p>
&lt;p>這通常是為了允許 &amp;ldquo;gitlab-runner&amp;rdquo; 用戶在 GitLab Runner 管理的 CI/CD 流程中執行 Docker 容器。 通過將用戶加入 &amp;ldquo;docker&amp;rdquo; 群組，用戶可以在不需要權限升級的情況下運行 Docker 指令。&lt;/p>
&lt;p>請注意，&amp;ldquo;usermod&amp;rdquo; 指令的確切語法和行為可能因您使用的作業系統而異。 請查閱您的作業系統的文檔以獲取更多信息。&lt;/p>
&lt;h2 id="denied--requested-access-to-the-resource-is-denied">denied : requested access to the resource is denied.&lt;/h2>
&lt;p>八成是你的push沒有寫好，可以參考下面的樣子&lt;/p></description></item><item><title>使用SSH來連動GITSCM</title><link>https://hoxtonhsu.com/p/%E4%BD%BF%E7%94%A8ssh%E4%BE%86%E9%80%A3%E5%8B%95gitscm/</link><pubDate>Sun, 05 Feb 2023 21:06:21 +0800</pubDate><guid>https://hoxtonhsu.com/p/%E4%BD%BF%E7%94%A8ssh%E4%BE%86%E9%80%A3%E5%8B%95gitscm/</guid><description>&lt;img src="https://i.imgur.com/8ocM55M.png " alt="Featured image of post 使用SSH來連動GITSCM" />&lt;h1 id="步驟">步驟&lt;/h1>
&lt;h2 id="產生key的方式">產生key的方式&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">ssh-keygen
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="儲存key的位置">儲存Key的位置&lt;/h2>
&lt;p>&lt;img src="https://i.imgur.com/O7fBG6U.png"
loading="lazy"
alt="image-20230205211256218"
>&lt;/p>
&lt;p>要改就改，不改就是預設的&lt;/p>
&lt;h2 id="是否要針對privatekey設置密碼">是否要針對privateKey設置密碼&lt;/h2>
&lt;p>&lt;img src="https://i.imgur.com/6cq91cE.png"
loading="lazy"
alt="image-20230205211413921"
>&lt;/p>
&lt;p>使用這組Key時需不需要額外使用密碼，不輸入就是空白&lt;/p>
&lt;h2 id="查看產生的key">查看產生的key&lt;/h2>
&lt;p>&lt;img src="https://i.imgur.com/s4Zz9fr.png"
loading="lazy"
alt="image-20230205211703737"
>&lt;/p>
&lt;p>.pub後綴的就代表是pubKey&lt;/p>
&lt;h2 id="進入主機內將private-key加入">進入主機內，將private Key加入&lt;/h2>
&lt;p>在.ssh底下會有一個authorized_keys的檔案
將privateKey放入其中就好&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/xnGrZmN.png"
loading="lazy"
alt="image-20230307235351522"
>&lt;/p>
&lt;p>輸入&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">cat id_rsa.pub
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>來查看&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/eRFOrX4.png"
loading="lazy"
alt="image-20230205211814078"
>&lt;/p>
&lt;p>此時將這串複製下來，貼到GitHub的SSH Key設定&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/JuU3kev.png"
loading="lazy"
alt="image-20230205213904945"
>&lt;/p>
&lt;p>接著只要上傳是使用SSH方式上傳，就不需要再登入github了&lt;/p></description></item><item><title>Docker_Desktop_Starting問題解決</title><link>https://hoxtonhsu.com/p/docker_desktop_starting%E5%95%8F%E9%A1%8C%E8%A7%A3%E6%B1%BA/</link><pubDate>Sat, 21 Jan 2023 00:52:36 +0800</pubDate><guid>https://hoxtonhsu.com/p/docker_desktop_starting%E5%95%8F%E9%A1%8C%E8%A7%A3%E6%B1%BA/</guid><description>&lt;img src="https://i.imgur.com/xgUpP8O.png)" alt="Featured image of post Docker_Desktop_Starting問題解決" />&lt;p>最近在新電腦上安裝了Docker結果發現一直卡在這個畫面&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/cw9mdiw.png"
loading="lazy"
alt="image-20230121005427135"
>&lt;/p>
&lt;p>後來研究了一下發現應該是wsl沒有裝好的原因，後來安裝好之後，在把Window Update要我Update的東西全部更新一次，就可以執行成功了，推測應該是window版本沒更新，導致不支援wsl的關係。&lt;/p></description></item><item><title>實用的Git指令</title><link>https://hoxtonhsu.com/p/%E5%AF%A6%E7%94%A8%E7%9A%84git%E6%8C%87%E4%BB%A4/</link><pubDate>Fri, 06 Jan 2023 14:15:51 +0800</pubDate><guid>https://hoxtonhsu.com/p/%E5%AF%A6%E7%94%A8%E7%9A%84git%E6%8C%87%E4%BB%A4/</guid><description>&lt;img src="https://i.imgur.com/nCGDuUc.png " alt="Featured image of post 實用的Git指令" />&lt;h1 id="前言">前言&lt;/h1>
&lt;p>整理一下工作上有用過，並覺得實用、比較少人提過的一些Git指令。&lt;/p>
&lt;h1 id="git指令">Git指令&lt;/h1>
&lt;ol>
&lt;li>退回到上一個Commit，數字可以更改，1就是上一次，改成三的話就是三次前的Commit&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">git checkout HEAD~1
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/MNnAwmx.gif"
loading="lazy"
alt="demo2"
>&lt;/p>
&lt;ol start="2">
&lt;li>退回上一次的Commit，重複輸入的話會往復循環&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">git checkout -
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/GpQAK2L.gif"
loading="lazy"
alt="demo2"
>&lt;/p>
&lt;ol start="3">
&lt;li>將本次修改合併至上次Commit，如果有漏掉的提交會常用這個指令&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">git commit --amend --no-edit
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Java中的throw,throws,try...catch，受檢例外與非受檢例外</title><link>https://hoxtonhsu.com/p/java%E4%B8%AD%E7%9A%84throwthrowstry...catch%E5%8F%97%E6%AA%A2%E4%BE%8B%E5%A4%96%E8%88%87%E9%9D%9E%E5%8F%97%E6%AA%A2%E4%BE%8B%E5%A4%96/</link><pubDate>Tue, 27 Dec 2022 15:12:58 +0800</pubDate><guid>https://hoxtonhsu.com/p/java%E4%B8%AD%E7%9A%84throwthrowstry...catch%E5%8F%97%E6%AA%A2%E4%BE%8B%E5%A4%96%E8%88%87%E9%9D%9E%E5%8F%97%E6%AA%A2%E4%BE%8B%E5%A4%96/</guid><description>&lt;img src="https://i.imgur.com/dwbYvaF.png" alt="Featured image of post Java中的throw,throws,try...catch，受檢例外與非受檢例外" />&lt;h1 id="開頭">開頭&lt;/h1>
&lt;p>Java中的例外分為受檢例外與非受檢例外(RuntimeExcetption)兩大類，可以先看到這張圖。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/apUx0mu.png"
loading="lazy"
alt="image-20221227160151705"
>&lt;/p>
&lt;p>所謂的&lt;strong>非受檢例外就是指繼承了RuntimeException的Exception&lt;/strong>，這類的Exception發生，而非受檢例外就是指沒有繼承RuntimeException的Exception。可以看下列的圖片&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/FdZYptn.png"
loading="lazy"
alt="image-20221227161807341"
>&lt;/p>
&lt;h1 id="何謂受檢例外與非受檢例外">何謂受檢例外與非受檢例外&lt;/h1>
&lt;p>受檢例外之所以叫受檢例外，就在於這些例外是工程師必須明確檢查並處理的例外，例如讀取檔案時發生的FileNotFoundException，這類的Exception，JVM沒有辦法進行處理，因此需要工程師去做處理。而RumtimeException則是指那些工程師不需要去明確處理的Exception，比如說NullPointerException, ArrayIndexOutOfBoundsException，這類的例外都是繼承自RuntimeException，可以由JVM進行處理，當然要處理也是可以的，比如說這樣&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/9drhRUY.png"
loading="lazy"
alt="image-20221227164624742"
>&lt;/p>
&lt;p>(可以看到左邊第13行的方法，沒有被try..catch包住也沒事，因為該方法拋出的例外是NumberFormatException，這個例外繼承了RuntimeException，因此不用try&amp;hellip;catch處理也沒關係，JVM會自動幫我們處理，如果要放到try&amp;hellip;catch的話，則是在catch段裡去catch NumberFormatException)&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/xsozyoG.png"
loading="lazy"
alt="image-20221227164726651"
>&lt;/p>
&lt;p>將方法放入try&amp;hellip;catch之後，因為catch是抓RuntimeException，所以被抓到後會print出catch error。&lt;/p>
&lt;p>另外比較實務上的說法即是，受檢例外(checked Exception)是可被修復的例外，可以試看看retry，而不可修復的例外就是非受檢例外(RunTimeException)，這種時候就代表程式出了問題，有bug，需要工程師下來進行處理，把問題處理掉&lt;/p>
&lt;p>來源：&lt;a class="link" href="https://medium.com/kuma%E8%80%81%E5%B8%AB%E7%9A%84%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E6%95%99%E5%AE%A4/2021-it-%E9%90%B5%E4%BA%BA-day-09-%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6%E8%88%87%E4%BE%8B%E5%A4%96%E8%99%95%E7%90%86-f571f577f72" target="_blank" rel="noopener"
>2021 IT 鐵人 Day 09 單元測試與例外處理&lt;/a>&lt;/p>
&lt;p>那如果一個method會拋出受檢例外，而在該method中又沒有做處理，則會需要呼叫它的那一個method進行處理。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/mLLBczf.png"
loading="lazy"
alt="image-20221227165544804"
>&lt;/p>
&lt;p>右邊的方法實際上不會拋出IOException，所以會顯示為灰色的，這邊只是作為Demo先寫上去。可以看到畫面左邊的地方，此時IDE跟我們報錯，說這個方法會拋出一個IOException，要我們進行處理，&lt;strong>因為IOException是一個受檢例外&lt;/strong>，JVM本身沒有能力可以進行處理。&lt;/p>
&lt;p>大概先這樣，其他想到後補。&lt;/p></description></item><item><title>淺談測試驅動開發</title><link>https://hoxtonhsu.com/p/%E6%B7%BA%E8%AB%87%E6%B8%AC%E8%A9%A6%E9%A9%85%E5%8B%95%E9%96%8B%E7%99%BC/</link><pubDate>Sun, 04 Dec 2022 22:22:06 +0800</pubDate><guid>https://hoxtonhsu.com/p/%E6%B7%BA%E8%AB%87%E6%B8%AC%E8%A9%A6%E9%A9%85%E5%8B%95%E9%96%8B%E7%99%BC/</guid><description>&lt;img src="https://i.imgur.com/2xteh3C.png" alt="Featured image of post 淺談測試驅動開發" />&lt;h1 id="序言">序言&lt;/h1>
&lt;p>參考資料：&lt;/p>
&lt;p>&lt;a class="link" href="https://youtu.be/t4D6GW2c8G8?list=LL" target="_blank" rel="noopener"
>Agile Hsinchu 2022.11 - 〈你就是不寫測試，才會沒時間〉線上導讀&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://youtu.be/wTpsxjP0t7M" target="_blank" rel="noopener"
>測試有時間再寫？你就是不寫才會沒時間！&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://ithelp.ithome.com.tw/users/20107429/ironman/3897" target="_blank" rel="noopener"
>你就是都不寫測試才會沒時間：Kuma 的 30 天 Unit Test 手把手教學，從理論到實戰 （Java 篇）&lt;/a>&lt;/p>
&lt;p>TDD(Test-Driven Development)是一個軟體開發的模式，它的概念很簡單，就是&lt;strong>先寫測試在寫程式&lt;/strong>，&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/LgOetJJ.png"
loading="lazy"
alt="image-20221205004202805"
>&lt;/p>
&lt;p>這樣的事情會讓我們覺得不可思議，因為我們一直以來寫程式的方式都是先寫程式，而測試則是有時間才再補的東西。那改成先寫測試會有什麼好處呢？這部分我們等等再來談，我們先討論TDD最核心的部分—&lt;strong>單元測試(Unit Test)&lt;/strong>。&lt;/p>
&lt;h1 id="單元測試在tdd的作用是什麼">單元測試在TDD的作用是什麼&lt;/h1>
&lt;p>​ 一開始在認識單元測試的時候，許多人的想法都會認為說，單元測試可以避免Bug，可以提升程式碼的品質。確實這些都是Unit Test的好處，但卻不是最核心的關鍵，單元測試最重要的點在於幫助我們&lt;strong>重構現有的程式架構&lt;/strong>。&lt;/p>
&lt;p>​ 我們在經手一個項目的時候，第二個月的理解一定會比第一個月的理解更深，第三個月的理解也一定會比第二個月的理解更加深刻，可能三個月前所使用的架構，在三個月後，隨著業務規模的擴展、需求的增加，而需要去新增新的程式，或是改變原有的設計，因而漸漸不敷使用，在這樣的情形下，若沒有單元測試的保護支持我們重構，讓我們確保每一步的Design都沒有破壞原有程式的設計，工程師會變得去害怕修改舊有的程式碼，因而導致不敷使用的架構繼續生長下去。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/RUQ0j6E.png"
loading="lazy"
alt="image-20221205010938974"
>&lt;/p>
&lt;p>(▲ 程式能跑，但還能在更好）&lt;/p>
&lt;p>​ 如果只是這樣子還沒什麼問題，畢竟就只是把東西一個接著一個地疊上去，頂多就是不好維護而已。但實際上的開發中，是很常出現改Ａ壞Ｂ這種情況的，在沒有單元測試的保護下，工程師在開發中是不會知道自己更新的這段程式碼會對某些程式造成影響，往往要等到合併後才能出現問題，所以會出現一種情況就是前期開發的都很順利，而越到後面Dead Line，效率就越發下降，&lt;strong>因為工程師在開發的當下不知道自己新增的功能到底會不會對別人造成影響&lt;/strong>。而有了測試的保護，我們可以在寫程式的時候就知道現在程式的運行狀況，今天這樣子的修改會不會導致其他程式跑不起來，如果跑不起來那單元測試就不會過，這樣的回饋是&lt;strong>立即性&lt;/strong>的回應，而不需要等到合併後大家才知道。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/4EMwAcp.png"
loading="lazy"
alt="image-20221205010534318"
>&lt;/p>
&lt;p>(▲ 隨著開發時間的增加，TDD的優勢會更凸顯出來）&lt;/p>
&lt;h1 id="agile與tdd">Agile與TDD&lt;/h1>
&lt;blockquote>
&lt;p>講到Agile就會講到瀑布式開發(WaterFall)，但你知道嗎？其實從來都沒有瀑布式開發這種事情喔。&lt;/p>
&lt;/blockquote>
&lt;p>瀑布式開發是來自於Winston Royce在1970所提出的論文Managing the Development of Larger Software Systems被提出，但事實上這個開發模式在這篇論文的下一行就被Winston Royce否決了。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/6dBbaHc.png"
loading="lazy"
alt="image-20221205012708984"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/61MwhoA.png"
loading="lazy"
alt="image-20221205012720794"
>&lt;/p>
&lt;blockquote>
&lt;p>I believe in this concept, but the implementation described above is risky and inivites failure. The problem is illustrated in Figure 4 .&lt;/p>
&lt;p>我相信這個概念，但照著這上面的流程做的話是高風險且易導致錯誤的，原因就如第四張圖所示&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://i.imgur.com/73usP4Z.png"
loading="lazy"
alt="image-20221205012847815"
>&lt;/p>
&lt;p>​ (▲Figure 4)&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>The testing phase which occurs at the end of the development cycle&lt;/strong> is the first event for which timing, stotage, input/output transfers, etc, are experienced as distinguished from analyzed. These phenomena are not precisely analyzable. There phenomena are not precisely analyzable. They are not the solutions or the satndard partial differential quations of mathematical physics for instatnce. Yet if there phenomena fail to satisfy the various external constraints, then invariablt a major redesign is required . A simple octal patch or redo of some isolated code will not fix there kinds of difficulties. The required design changes are likely to be so disruptive that the software requiremnets upon which the design is based and which provides the rationale for everything are violated. &lt;strong>Either the requirements must be modified, or a substantial change in the design is required.&lt;/strong> &lt;strong>In effect the development process has returned to the origin and one can expect up to a 100-percent overrun in schedule and/or costs&lt;/strong>&lt;/p>
&lt;p>在開發流程的最後一個階段-測試，第一個遇到的事情就是時序、儲存，輸出輸入，這些現象情況無法準確的分析，這些不像數學物理的解答，或是標準偏微方程，然而，如果存在不能滿足各種外部約束的現象，則不可避免地需要進行重大的重新設計，一個簡單的八進制補丁或一些孤立代碼的重做不會解決這些困難，所需的設計更改可能會造成破壞，以至於違反了設計所基於的以及為所有事情提供基本原理的軟件要求。 要么必須修改要求，要么需要對設計進行實質性更改。 實際上，開發過程已經回到原點，預計進度和/或成本會超支 100%。&lt;/p>
&lt;/blockquote>
&lt;p>Winston Royce在瀑布模型提出的當下其實就否認了它的意義，但後續被一些人拿來當作開發的窠臼，也導致了這種開發模式往往會在完工時出現重大的危害。Winston Royce認為，&lt;strong>在最後的測試階段是充滿著未知與不確定性&lt;/strong>，到最後會反覆著在&lt;strong>測試、程式修改、確認需求&lt;/strong>這三個階段來回擺盪，這樣三個階段的來回擺盪是不是有點似曾相似呢？沒錯，就是TDD的概念&lt;/p>
&lt;h1 id="什麼是tdd">什麼是TDD&lt;/h1>
&lt;p>&lt;img src="https://i.imgur.com/Iwmr8mT.png"
loading="lazy"
alt="image-20221207000519492"
>&lt;/p>
&lt;p>TDD&lt;strong>是一個開發模式&lt;/strong>而不是測試模式，TDD的測試模式是由&lt;/p>
&lt;ul>
&lt;li>寫一個會錯的測試&lt;/li>
&lt;li>寫一個剛好會過的程式&lt;/li>
&lt;li>重構&lt;/li>
&lt;/ul>
&lt;p>​ 這三者循環，對應Winston Royce對瀑布模型提出的弊端，也就是&lt;strong>測試、修改程式、確認需求&lt;/strong>，也因此TDD是一個可以讓&lt;strong>問題早期浮上水面的開發方式&lt;/strong>，為什麼？因為這樣的開發方式要求我們對業務邏輯的需求有充分的了解，這樣我們才可以寫測試，一旦需求明確了，那麼寫出程式就只是時間的問題了。&lt;/p>
&lt;p>​ 另一方面，也是因為TDD的開發模式，我們每一個Code都有單元測試的保護，我們可以&lt;strong>隨時重構&lt;/strong>我們的程式碼而毋須擔心程式被我們改錯，是的，沒錯，TDD的一個核心概念就在於&lt;strong>任何時候都可以重構我們的程式碼&lt;/strong>，因為人對於系統的了解，會隨著開發時間的增加而了解的越深刻，半年前的Code到了現在可能越看越不順眼，另一方面，隨著業務規模的提升，我們早期的設計可能也會越不敷使用，若沒有單元測試的保護，我們重構的成本會隨著產品的規模的提升而提升，而發展到一定規模的情況下，&lt;strong>重構變成遙不可及的夢想&lt;/strong>。&lt;/p>
&lt;p>​ 也是因為有單元測試的保護，我們才可以&lt;strong>真正的去設計我們的程式&lt;/strong>，常見的S.O.L.I.D，以及23種設計模式的使用，如何根據不同的情境套用不同的設計模式，這就是工程師有價值的地方，可以說單元測試的撰寫完整了整個物件導向的程式設計。&lt;/p></description></item><item><title>如何將Junit的測試粒度控制在最小單元</title><link>https://hoxtonhsu.com/p/%E5%A6%82%E4%BD%95%E5%B0%87junit%E7%9A%84%E6%B8%AC%E8%A9%A6%E7%B2%92%E5%BA%A6%E6%8E%A7%E5%88%B6%E5%9C%A8%E6%9C%80%E5%B0%8F%E5%96%AE%E5%85%83/</link><pubDate>Wed, 30 Nov 2022 13:30:27 +0800</pubDate><guid>https://hoxtonhsu.com/p/%E5%A6%82%E4%BD%95%E5%B0%87junit%E7%9A%84%E6%B8%AC%E8%A9%A6%E7%B2%92%E5%BA%A6%E6%8E%A7%E5%88%B6%E5%9C%A8%E6%9C%80%E5%B0%8F%E5%96%AE%E5%85%83/</guid><description>&lt;img src="https://i.imgur.com/4qePz5L.png " alt="Featured image of post 如何將Junit的測試粒度控制在最小單元" />&lt;p>在Junit5中，有對一些Junit的測試的註解進行調整&lt;/p>
&lt;p>比如說&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Junit4&lt;/th>
&lt;th>Junit5&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>測試用框架的選擇&lt;/td>
&lt;td>@RunWith(MockitoJUnitRunner.class)&lt;/td>
&lt;td>@ExtendWith(MockitoExtension.class)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>當測試會使用到SprintBoot框架時，應該要使用@ExtendWith(SpringExtension.class)，@MockBean來調用&lt;/p>
&lt;p>若測試不想涉及SprintBoot的時候@ExtendWith(MockitoExtension.class)，以及@Mock, @InjectMocks，並且使用MockMvcBuilders.standaloneSetup來設置獨立測試，以下是Code的示範&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.junit.jupiter.api.BeforeEach&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.junit.jupiter.api.extension.ExtendWith&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.mockito.InjectMocks&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.mockito.Mock&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.mockito.junit.jupiter.MockitoExtension&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.test.web.servlet.MockMvc&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.test.web.servlet.setup.MockMvcBuilders&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * @author Hoxton on 2022/11/30
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@ExtendWith&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MockitoExtension&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">UserControllerTest&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Mock&lt;/span> &lt;span class="c1">//Controller調用的Service
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">UserService&lt;/span> &lt;span class="n">userService&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@InjectMocks&lt;/span> &lt;span class="c1">//要測試的Cotroller
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">UserController&lt;/span> &lt;span class="n">userController&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">MockMvc&lt;/span> &lt;span class="n">mockMvc&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">//模擬Mvc
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="nd">@BeforeEach&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">setMockMvc&lt;/span>&lt;span class="o">(){&lt;/span>
&lt;span class="n">MockMvcBuilders&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">standaloneSetup&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">userController&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Test&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">testMethod_situation_returnWhat&lt;/span>&lt;span class="o">(){&lt;/span>
&lt;span class="n">given&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">someObject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">someMethod&lt;/span>&lt;span class="o">()).&lt;/span>&lt;span class="na">willReturn&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;someting&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// ... 設置
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="n">MockHttpServletResponse&lt;/span> &lt;span class="n">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mvc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">perform&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;someUrl&amp;#34;&lt;/span>&lt;span class="o">)).&lt;/span>&lt;span class="na">andReturn&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getResponse&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">assertThat&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;something&amp;#34;&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">isEqualTo&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;thatThing&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>IntelliJ與Eclipse的比較</title><link>https://hoxtonhsu.com/p/intellij%E8%88%87eclipse%E7%9A%84%E6%AF%94%E8%BC%83/</link><pubDate>Sun, 23 Oct 2022 20:40:49 +0800</pubDate><guid>https://hoxtonhsu.com/p/intellij%E8%88%87eclipse%E7%9A%84%E6%AF%94%E8%BC%83/</guid><description>&lt;img src="https://i.imgur.com/Fx9nanx.png" alt="Featured image of post IntelliJ與Eclipse的比較" />&lt;h2 id="推薦的plugin">推薦的Plugin&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Plugin名稱&lt;/th>
&lt;th>截圖&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>One Dark Theme&lt;br />&lt;img src="https://i.imgur.com/RDwmNyk.png"
loading="lazy"
alt="image-20221109011709066"
>佈景主題&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/rokbaGu.png"
loading="lazy"
alt="image-20221109011724288"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;br />&lt;img src="https://i.imgur.com/DXd3gwi.png"
loading="lazy"
alt="image-20221109011844072"
>按鍵提示&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/tHGPxbO.gif"
loading="lazy"
alt="ShortCutHit"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Rainbow Brackets&lt;br />&lt;img src="https://i.imgur.com/U1YiDG0.png"
loading="lazy"
alt="image-20221109012245196"
>&lt;br />括弧顏色顯示&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/hX6ghuf.png"
loading="lazy"
alt="image-20221109012300415"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Nyan Progress Bar&lt;img src="https://i.imgur.com/puz6Ast.png"
loading="lazy"
alt="image-20221109012330374"
>&lt;br />讀取條改變&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/DwOQ9TA.gif"
loading="lazy"
alt="bar"
>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="要改的設定">要改的設定&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Code Completion Alt+.&lt;br />&lt;br /> &lt;img src="https://i.imgur.com/wI4OJLb.png"
loading="lazy"
alt="image-20221109012657212"
>&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/QDvdM96.gif"
loading="lazy"
alt="code"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Second Basic Alt+/&lt;br /> &lt;img src="https://i.imgur.com/UQP8q4F.png"
loading="lazy"
alt="image-20221109013135689"
>&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/1nIbigD.gif"
loading="lazy"
alt="comple"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Run F10&lt;br />&lt;img src="https://i.imgur.com/GRWVIQD.png"
loading="lazy"
alt="image-20221109013451000"
>&lt;/td>
&lt;td>就Run&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Terminal Alt+`&lt;br />&lt;img src="https://i.imgur.com/mULyQep.png"
loading="lazy"
alt="image-20221109013544910"
> | &lt;img src="https://i.imgur.com/xpIwXjH.gif"
loading="lazy"
> |&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>更改Terminal Bash CMD or Window terminal&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/pfBEHEU.png"
loading="lazy"
alt="image-20221109013734173"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>更改TODO 模板&lt;br />&lt;img src="https://i.imgur.com/fxIxqq0.png"
loading="lazy"
alt="image-20221109013905433"
>&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/omEwjLh.gif"
loading="lazy"
alt="demo"
>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="實用的快捷鍵">實用的快捷鍵&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>功能&lt;/th>
&lt;th>預覽&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>搜尋 &lt;br />Shift+shift&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/VeRXfgk.gif"
loading="lazy"
alt="search2"
>&lt;br />快速列出所有可能，快速定位&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>切換分頁&lt;br /> Ctrl+E&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/T48Dr58.gif"
loading="lazy"
alt="switch2"
>&lt;br />預設快捷鍵，會列出最近開啟的分頁&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>選擇檔案&lt;br /> Alt+F1然後按1&lt;br />若不想選擇按Esc退回Editor&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/o7J2P5D.gif"
loading="lazy"
alt="demo"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>快速選取區塊&lt;br />Ctrl+W&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/sP0SaBd.gif"
loading="lazy"
alt="selectWord"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>快速選取方法&lt;br />Alt+↑&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/4WVURXZ.gif"
loading="lazy"
alt="SelectMethod"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>內建GitBlame功能&lt;br />對行數右鍵選擇gitBlame&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/kvtETsi.gif"
loading="lazy"
alt="GitBlame"
>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>CLion的MutilMain</title><link>https://hoxtonhsu.com/p/clion%E7%9A%84mutilmain/</link><pubDate>Mon, 17 Oct 2022 18:09:43 +0800</pubDate><guid>https://hoxtonhsu.com/p/clion%E7%9A%84mutilmain/</guid><description>&lt;img src="https://i.imgur.com/aGwtINt.png" alt="Featured image of post CLion的MutilMain" />&lt;p>最近在研究C++，但發現我的CLion不知道為什麼只能有一個Main方法，後來網路上查了一下之後發現好像是因為CMake的關係。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/F5hZpXH.png"
loading="lazy"
alt="image-20221017181210022"
>&lt;/p>
&lt;blockquote>
&lt;p>錯誤訊息&lt;/p>
&lt;/blockquote>
&lt;p>後來研究了一下，發現只要在Project底下的CMakeList.txt加上這段就可以了&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">file (GLOB files *.cpp)
foreach (file ${files})
string(REGEX REPLACE &amp;#34;.+/(.+)\\..*&amp;#34; &amp;#34;\\1&amp;#34; exe ${file})
add_executable (${exe} ${file})
message (\ \ \ \ --\ src/${exe}.cpp\ will\ be\ compiled\ to\ bin/${exe})
endforeach ()
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/qKhhlaq.png"
loading="lazy"
alt="image-20221017181342487"
>&lt;/p>
&lt;blockquote>
&lt;p>完整的圖片如上&lt;/p>
&lt;/blockquote>
&lt;p>加入之後記得要Reload CMake Project&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/DrQHwR8.png"
loading="lazy"
alt="image-20221017181404785"
>&lt;/p></description></item><item><title>作業系統筆記</title><link>https://hoxtonhsu.com/p/%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1%E7%AD%86%E8%A8%98/</link><pubDate>Sat, 08 Oct 2022 03:02:43 +0800</pubDate><guid>https://hoxtonhsu.com/p/%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1%E7%AD%86%E8%A8%98/</guid><description>&lt;img src="https://i.imgur.com/HJLk11O.png" alt="Featured image of post 作業系統筆記" />&lt;p>[TOC]&lt;/p>
&lt;h1 id="chapter1-intruduction">Chapter1 Intruduction&lt;/h1>
&lt;p>管理硬體的軟體就是作業系統，硬體包含CPU，Memory，I/O設備等等…作業系統就是負責管理這些硬體的系統。一個電腦系統可以被粗略的劃分成下面四個組件：&lt;/p>
&lt;ul>
&lt;li>硬體(hardware)&lt;/li>
&lt;li>作業系統(operating system)&lt;/li>
&lt;li>應用程式(application programs)&lt;/li>
&lt;li>使用者(user)&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/PZiePn0.png"
loading="lazy"
alt="image-20220918222340597"
>&lt;/p>
&lt;h2 id="hardware">Hardware&lt;/h2>
&lt;p>包括CPU(Central Processing Unit)，記憶體(Memory)，Input/output設備…提供給系統基本的計算資源&lt;/p>
&lt;h2 id="operating-system">Operating System&lt;/h2>
&lt;p>負責協調硬體與應用程式，給不同的使用者&lt;/p>
&lt;h2 id="application-programs">Application Programs&lt;/h2>
&lt;p>例如Word，Excel，Chrome之類的應用程式，來處理使用者的計算問題(Computing Problems)&lt;/p>
&lt;p>補充：&lt;/p>
&lt;ol>
&lt;li>Bare Machine(裸機): 純粹只有硬體組成，沒有OS及System Programs&lt;/li>
&lt;li>Extended Machine: Bare Machine加上OS/system programs&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/inlIZJo.png"
loading="lazy"
alt="image-20221029143145761"
>&lt;/p>
&lt;ul>
&lt;li>In Memory
&lt;ul>
&lt;li>Command Interpreter(命令解譯器)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="multiprogramming-system">Multiprogramming System&lt;/h2>
&lt;ol>
&lt;li>定義：系統允許多個Jobs(Process)同時執行，即是Multiprogramming&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>主要目的：提高CPU Utilization&lt;/li>
&lt;li>作法：透過Job Scheduling or CPU Scheduling技術達成&lt;/li>
&lt;/ul>
&lt;p>example：當執行中的process waiting for I/O completed, 則OS可將CPU切換給另一個process執行，避免CPU idle 。&lt;/p>
&lt;p>即只要系統內有夠多的工作存在，則CPU IDLE的機會就下降&lt;/p>
&lt;ol start="2">
&lt;li>Mulitiprogramming Degree之定義&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>系統內的Process的數目：一般而言，Degree越高，CPU利用率就越高。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>(Note：Virtual Memory Thrashing狀況除外)&lt;/strong>&lt;/p>
&lt;ol start="3">
&lt;li>
&lt;p>多個Process的定義、以及如何執行&lt;/p>
&lt;ol>
&lt;li>Concurrent execution(並行)：一顆CPU，大家一起輪番使用&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/JUSKW04.png"
loading="lazy"
alt="image-20221102220045970"
>&lt;/p>
&lt;ol>
&lt;li>Parallel execution(平行)：多顆CPU或是Multi-core(多核)，各自執行&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/CELncNq.png"
loading="lazy"
alt="image-20221102220202298"
>&lt;/p>
&lt;h2 id="time-sharing-system">Time-Sharing System&lt;/h2>
&lt;p>分時系統&lt;/p>
&lt;p>定義：又叫Multitasking[恐龍本如是說]&lt;/p>
&lt;blockquote>
&lt;p>It&amp;rsquo;s a logical extension of Multiprogeamming system&lt;/p>
&lt;/blockquote>
&lt;p>與Multiprogramming的最大差異：&lt;strong>CPU的切換頻率極高&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Time-Sharing System features&lt;/p>
&lt;ul>
&lt;li>強調對&lt;strong>User Response的時間&lt;/strong>要&lt;strong>短&lt;/strong>(&amp;lt;1秒)&lt;/li>
&lt;li>適用於user interactive的Computing/ Environment&lt;/li>
&lt;li>對每一個process都公平&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Main Frame(主機)&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/dHbi3Pr.png"
loading="lazy"
alt="image-20221102223550343"
>&lt;/p>
&lt;ul>
&lt;li>CPU Scheduling採取RR的排班法則(第四章會介紹)&lt;/li>
&lt;li>使用Virtual Memory的技術，擴展Logical Memory Space&lt;/li>
&lt;li>使用Spooling的技術(不太會考)實現I/O Device的共用，類似現代的Buffering技術，讓每個user，皆以為自己有專屬的的Computer&lt;/li>
&lt;/ul>
&lt;h2 id="multiprocessors-system">Multiprocessors System&lt;/h2>
&lt;p>定義：又叫Multiprocessing or Paraller or Tightly-coupled system(緊密耦合系統)&lt;/p>
&lt;p>faeture：&lt;/p>
&lt;ol>
&lt;li>一個機器(or MotherBoard)內，有多個Processors(or CPUs)&lt;/li>
&lt;li>這些CPUs彼此共享此機器的Memory,Bus,I/O-Device, power-supplier etc&amp;hellip;&lt;/li>
&lt;li>通常受同一Clock之時脈控制&lt;/li>
&lt;li>由同一個OS管理&lt;/li>
&lt;li>processors之間的溝通大都採shared Memory方式&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/hvugyDq.png"
loading="lazy"
alt="image-20221106193948248"
>&lt;/p>
&lt;p>Benefits(好處)：&lt;/p>
&lt;ol>
&lt;li>Increased Throughput：產能增加&lt;/li>
&lt;li>Increased Reliability：可靠度的提升&lt;/li>
&lt;li>Economy Of Scale：運算能力的擴充比較好&lt;/li>
&lt;/ol>
&lt;p>　分析如下：&lt;/p>
&lt;p>&lt;strong>Increased Throughput：&lt;/strong>&lt;/p>
&lt;p>可支持多個工作在不同CPU上平行執行(paraller Computing)，&lt;strong>注意，N顆CPU之產能絕對小於1顆CPU產能xN倍&lt;/strong>，意即CPU數量的提升與產能的提升並非線性成長。原因是因為&lt;/p>
&lt;ol>
&lt;li>Resource Contetion(資源的競爭)&lt;/li>
&lt;li>Processors間的Communication會抵消產能&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Increased Reliability:&lt;/strong>&lt;/p>
&lt;p>某一顆CPU壞了，則System不會因此而停頓，因為其他CPU仍可運作&lt;/p>
&lt;ol>
&lt;li>Graceful degradation(漸進式的滅亡)&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>System不至因為某些Hardward/Software之元件故障而停頓，仍然保有持續運作的能力，這性質就稱為fail-soft&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>
&lt;p>Fault-Tolerant system(容錯系統)&lt;strong>考試不太會考&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>具有graceful degradation性質之系統就叫做Fault-Tolerant system，想要達成容錯的技術需要有兩件事情的支援&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>要有backup的系統，切換也要流暢&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Economy of Scale:&lt;/strong>&lt;/p>
&lt;p>運算能力擴充符合經濟效益&lt;/p>
&lt;ul>
&lt;li>∵N顆CPU在一部機器內，與N部機器相比，成本較便宜∵這些CPUs共享同一機器之Memory, Bus, I/O-Device, etc&lt;/li>
&lt;/ul>
&lt;h3 id="two-subtype-in-multiprocessors-system">Two SubType in Multiprocessors System&lt;/h3>
&lt;ol>
&lt;li>SMP(Symmetric MultiProcessors) 對稱的&lt;/li>
&lt;li>ASMP(Asymmetric MultiProcessors) 非對稱的&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>SMP&lt;/strong>&lt;/p>
&lt;p>定義：每個Processor的工作能力是相同的(Identical)，且每個CPU都有對等、平等的權利來存取資源&lt;/p>
&lt;p>優點：&lt;/p>
&lt;ol>
&lt;li>可靠度較ASMP高，因工作能力相同，即使其中一個cpu掛了也可以被立刻取代&lt;/li>
&lt;li>效能較高&lt;/li>
&lt;/ol>
&lt;p>缺點：&lt;/p>
&lt;ol>
&lt;li>SMP的OS設計開發較為複雜(互斥存取的機制設計,資源的競爭)&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>ASMP&lt;/strong>&lt;/p>
&lt;p>定義：每個Processor之工作能力&lt;strong>不盡相同&lt;/strong>，通常是採取&lt;strong>Master-Slave&lt;/strong>的架構(恐龍本有時候會寫成Boss-Employee&lt;/p>
&lt;p>Master-Processor負責工作分派及資源分配，監督Slaves等管理工作&lt;/p>
&lt;p>Slave Processors負責執行工作&lt;/p>
&lt;p>優點：ASMP的OS設計開發較為Simple，∵與Simple-Cpu Os版類似&lt;/p>
&lt;p>缺點：&lt;/p>
&lt;ol>
&lt;li>可靠度低，Master CPU如果壞了，就會停擺，直到另一顆CPU被Train接手&lt;/li>
&lt;li>效能較低∵Master CPU是瓶頸&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/wo1RhWy.png"
loading="lazy"
alt="image-20221108212149764"
>&lt;/p>
&lt;h3 id="multiprocessors-system-vs-multicores-cpu">Multiprocessors System VS MultiCores CPU&lt;/h3>
&lt;p>從作業系統來看差異不大，主要差異是&lt;strong>硬體的差異(主要)&lt;/strong>，以OS來看，你裝了一顆兩核的CPU，OS會視作兩顆CPU；裝四核的視作四顆CPU&lt;/p>
&lt;ol>
&lt;li>MultiProcessors&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/BhjZbvk.png"
loading="lazy"
alt="image-20221108214627937"
>&lt;/p>
&lt;ol start="2">
&lt;li>MultiCores CPU&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/HNuJgLM.png"
loading="lazy"
alt="image-20221108214639509"
>&lt;/p>
&lt;p>優點&lt;/p>
&lt;ol>
&lt;li>Power Saving：相較MultiProcessor，在一個CPU上提供兩個Core的能源耗損會比在一張板子上提供兩顆CPU的能源耗損還來得低。&lt;/li>
&lt;li>Speed比較快(∵處在同一個晶片內資料傳輸速度較快)&lt;/li>
&lt;/ol>
&lt;h2 id="distribute-system">Distribute System&lt;/h2>
&lt;p>定義：又叫Loosely-Coupled system(鬆散耦合系統)，主要的Feature如下&lt;/p>
&lt;ol>
&lt;li>
&lt;p>多部機器彼此透過Network(or Bus)相互串連&lt;/p>
&lt;/li>
&lt;li>
&lt;p>每部機器之CPU有各自私有的Memory, Bus, I/O-Device, etc 並非共享&lt;/p>
&lt;/li>
&lt;li>
&lt;p>各CPU之Clock時脈控制不一定相同&lt;/p>
&lt;/li>
&lt;li>
&lt;p>各CPU上之OS也不一定相同&lt;/p>
&lt;/li>
&lt;li>
&lt;p>各Processors之間的溝通大都採**&amp;ldquo;Message Passing&amp;rdquo;**方式&lt;/p>
&lt;blockquote>
&lt;p>Message Passing (類似講電話)&lt;/p>
&lt;p>Step&lt;/p>
&lt;ol>
&lt;li>建立Communication Link&lt;/li>
&lt;li>Message 相互傳輸&lt;/li>
&lt;li>釋放Link&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/6gSkGlg.png"
loading="lazy"
alt="image-20221110232152377"
>&lt;/p>
&lt;h3 id="advantage-of-distribute-system">Advantage of Distribute-System&lt;/h3>
&lt;ol>
&lt;li>Increased Throughput(支持Paraller Computing)&lt;/li>
&lt;li>Increased Reliability(一個掛掉，還有其他可以擋)&lt;/li>
&lt;li>Resource Sharing(資源共享因此成本降低)&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>支持&amp;quot;Client-Server&amp;quot; Computing Model之實施&lt;/p>
&lt;ol>
&lt;li>Server(伺服器)：提供某些服務的機器 example: mail server, file server ,DNS,printer server, computing server &amp;hellip;&lt;/li>
&lt;li>Client：本身不提供服務，且它需要某些服務時，則發請求至Server, Server服務完再將結果回傳Client&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Note&lt;/p>
&lt;p>Peer-to-Peer model：peer意指同時具有server及Client的角色，英文意思是同等的、對等的&lt;/p>
&lt;/blockquote>
&lt;ol start="4">
&lt;li>Remote sites Communication的需求被滿足 example：email, FTP via Internet&lt;/li>
&lt;/ol>
&lt;h2 id="real-time-system">Real-Time System&lt;/h2>
&lt;p>(即時系統)&lt;/p>
&lt;p>分成兩種&lt;/p>
&lt;ol>
&lt;li>Hard real-time System&lt;/li>
&lt;li>Soft real-time System&lt;/li>
&lt;/ol>
&lt;h3 id="hard-real-time-system">Hard real-time system&lt;/h3>
&lt;p>定義：This system must ensure the critical tasks complete on time，即工作必須在規定的時間限制內完成，否則即算失敗&lt;/p>
&lt;p>舉例：軍事防衛系統、核能安控系統、工廠自動化生產&amp;hellip;&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/cPuSbro.png"
loading="lazy"
alt="image-20221114224122357"
>&lt;/p>
&lt;p>設計考量：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>所有時間延遲之因素皆須納入考量&lt;/strong> eg：sensor data 傳輸速度、運算速度、Signal的傳輸 etc，確保這些時間的加總能夠滿足時間deadline的要求&lt;/li>
&lt;li>所有會造成處理時間過久或無法預測之設備或機制，盡量少採用或不用 eg：&lt;strong>Disk&lt;/strong>不用或少用、&lt;strong>Virtual Memory 絕對不採用&lt;/strong>&lt;/li>
&lt;li>就CPU Scheduling設計(Ch4)而言，需先考量Schedulable與否，再進行排程(eg rate-monotonic, EDF scheduling)，確定CPU能負荷再進行排程&lt;/li>
&lt;li>&lt;strong>Time Sharing system 無法與之並存(Time sharing是屬於Multitasking，可以同時執行多個程序，並透過一些風勢去優先執行某些程序，而Hard real-time比較像單運算系統，要求在指定時間內完成，因此更專注於單一程序的執行，由於這兩個系統有這樣的差異，因此無法共榮)&lt;/strong>&lt;/li>
&lt;li>OS所造成的Dispatch latency etc. 宜降低(interrupt的處理, system call的請求)，一般實務上，hard-real-time system，鮮少有OS的存在(幾乎不存在)，尤其是embedded real-time system，因需要&lt;strong>及時的響應&lt;/strong>&lt;/li>
&lt;li>現行的商用OS&lt;u>不支援&lt;/u>Hard real-time features 通常都是客製化的特殊設計eg : Linux, Unix, Window, Apple Os, Solaris etc&lt;/li>
&lt;/ul>
&lt;p>​&lt;/p>
&lt;h3 id="soft-real-time-system">Soft real-time system&lt;/h3>
&lt;p>定義：&lt;strong>This system must ensure the real-time process get the hightest priority than the others and retain(維持) this priority level unit it completed&lt;/strong>&lt;/p>
&lt;p>舉例：Multimedia System, Simulation system, VR system, etc&lt;/p>
&lt;p>設計考量：&lt;/p>
&lt;ul>
&lt;li>就 CPU Scheduling 設計(ch4)而言，
&lt;ol>
&lt;li>必須支持preemptive priority scheduling&lt;/li>
&lt;li>&lt;strong>不可提供Aging技術&lt;/strong>(活得越久，priority越高)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>盡量降低kernel的Dispatch latency time&lt;/li>
&lt;li>可支援virtual memory 並存，但前提是real-time-process的全部pages必須皆待在memory中，直到完工，高優先權的Process不要使用virtual memory&lt;/li>
&lt;li>與Time-sharing system 可以並存，eg：solaris&lt;/li>
&lt;li>一般商用OS都支援Soft-real-time system&lt;/li>
&lt;/ul>
&lt;h3 id="batch-system">Batch System&lt;/h3>
&lt;p>定義：將一些較不緊急，定期性、非交談互動性的Job，累積成堆，再分批次，送入系統處理&lt;/p>
&lt;p>舉例：庫存系統、報稅系統、掃毒、磁碟重組、清算系統&amp;hellip;&lt;/p>
&lt;p>主要目的：提高resource utilization，&lt;strong>尤其是在冷門時段&lt;/strong>，不適合用在real-time-system, user-interactive application eg：電腦遊戲&lt;/p>
&lt;h3 id="hand-held--system">Hand Held system&lt;/h3>
&lt;p>定義：單手可掌握操作的系統&lt;/p>
&lt;ul>
&lt;li>Hardware 天生之限制，帶來software必須配合之處&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Hardware天生限制&lt;/th>
&lt;th>Software必須配合之設計&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;u>Slower&lt;/u> processor&lt;br />(背後之限制)&lt;br />1. power 供應的問題，電供不足&lt;br />2. 散熱系統的設計&lt;/td>
&lt;td>運算不能太複雜，要簡單&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Memory空間有限&lt;/td>
&lt;td>程式的Size要小，不用的記憶體要立刻釋放&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DisplayMonitor很小&lt;/td>
&lt;td>顯示的內容要有所刪減&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="chapter2-computer-system-architecture">Chapter2 Computer System Architecture&lt;/h1>
&lt;h2 id="io-operating-and-hardware-resources-protection">I/O Operating And Hardware Resources Protection&lt;/h2>
&lt;ul>
&lt;li>學習路線&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>I/O運作方式&lt;/p>
&lt;blockquote>
&lt;p>Polling I/O&lt;/p>
&lt;p>Interrupted I/O&lt;/p>
&lt;p>DMA&lt;/p>
&lt;/blockquote>
&lt;p>Interrupt機制處理與種類&lt;/p>
&lt;p>HW Resource Protection&lt;/p>
&lt;blockquote>
&lt;p>基礎建設&lt;/p>
&lt;blockquote>
&lt;p>Dual Model Operation&lt;/p>
&lt;p>Privileged Instruction&lt;/p>
&lt;/blockquote>
&lt;p>I/O&lt;/p>
&lt;p>Memory Protection&lt;/p>
&lt;p>CPU&lt;/p>
&lt;/blockquote>
&lt;/blockquote>
&lt;h2 id="io-operating">I/O Operating&lt;/h2>
&lt;h3 id="polling-io-io">Polling I/O I/O&lt;/h3>
&lt;p>Polling(輪巡,詢問式) I/O&lt;/p>
&lt;p>定義：又叫Busy_waiting I/O or Programmed I/O&lt;/p>
&lt;p>步驟如下&lt;/p>
&lt;ol>
&lt;li>I/O Request 給 OS (執行中的Process不會自己做I/O)&lt;/li>
&lt;li>OS收到請求後，(可能)會暫停此Process執行，並執行對應的System Calls.&lt;/li>
&lt;li>Kernel 的 &lt;u>I/O-subsystem&lt;/u>(專門用來處理I/O的請求，只是個過水而已)會Pass此請求給&lt;u>Device driver&lt;/u>&lt;/li>
&lt;li>Divice Driver 依此請求，設定對應的I/O Commands參數給&lt;u>Device Controller&lt;/u>&lt;/li>
&lt;li>Device Controller 啟動監督I/O-Device之I/O運作進行&lt;/li>
&lt;li>在這段時間內，OS(可能)將CPU切給另一個process執行&lt;/li>
&lt;li>&lt;strong>然而，沒人主動去告訴CPU I/O的執行狀況，因此CPU在執行process工作過程中，卻要不斷去Polling Device Controller，已確定I/O運作是否完成或有I/O error&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/PrvPBLP.png"
loading="lazy"
alt="image-20221116231017998"
>&lt;/p>
&lt;p>缺點：&lt;/p>
&lt;ul>
&lt;li>CPU耗費大量時間用於polling I/O Device Controller上，並未全用於process execute上，故&lt;u>CPU utilization低&lt;/u>、&lt;u>throughput不高&lt;/u>&lt;/li>
&lt;/ul>
&lt;h3 id="interrupted-io">Interrupted I/O&lt;/h3>
&lt;p>Interrupted (中斷,中斷式)I/O I/O&lt;/p>
&lt;p>定義：&lt;/p>
&lt;p>步驟如下：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>I/O Request 給 OS (執行中的Process不會自己做I/O)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>OS收到請求後，(可能)會暫停此Process執行，並執行對應的System Calls.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Kernel 的 &lt;u>I/O-subsystem&lt;/u>(專門用來處理I/O的請求，只是個過水而已)會Pass此請求給&lt;u>Device driver&lt;/u>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Divice Driver 依此請求，設定對應的I/O Commands參數給&lt;u>Device Controller&lt;/u>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Device Controller 啟動監督I/O-Device之I/O運作進行&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在這段時間內，OS(可能)將CPU切給另一個process執行&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>當I/O運作完成，Device Controller 會發出 I/O-Completed Interrupt 通知OS(CPU)&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>OS收到中斷後(可能)會暫停目前Process的執行(因有些Interrupt優先權可能很低，可以先暫時不處理)&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>OS必須查詢 &lt;u>Interrupt Vector&lt;/u>，確認何種中斷發生，同時也要找到該中斷的服務處理程式(ISR：Interrupt Service Routine)的位址(每一個中斷都有一個對應的中斷處理服務程式&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Jump to ISR位址 執行ISR&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ISR完成後，return control to &lt;u>kernel&lt;/u>，kernel也許做一些通知工作&lt;/p>
&lt;/li>
&lt;li>
&lt;p>恢復(resume)原先中斷前的工作執行或交由CPU Scheduler決定&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>優點：CPU&lt;u>不須&lt;/u>耗費時間用於Polling I/O-Device，而是可以用於Process execute上，CPU utilization提升，throughout提高，improve the system performance&lt;/p>
&lt;p>缺點：&lt;/p>
&lt;ol>
&lt;li>Interrupt之處理仍需耗費CPU time，如果 I/O運作時間 &lt;strong>小於&lt;/strong> Interrupt處理時間，則使用Interrupt I/O就不划算，不如使用polling I/O&lt;/li>
&lt;li>若&lt;strong>中斷的頻率過高&lt;/strong>，則大量的中斷處理會占用幾乎全部的CPU Time，則&lt;strong>系統效能會很差&lt;/strong>&lt;/li>
&lt;li>CPU仍需耗費一些時間用於監督I/O-Divice與Memory之間的Data Transfer過程&lt;/li>
&lt;/ol>
&lt;h3 id="dma-direct-memory-access-io">DMA (Direct Memory Access) I/O&lt;/h3>
&lt;ul>
&lt;li>定義：DMA Controller 負責 I/O-Device(設備)與Memory 之間的Data transfer(傳輸)工作，&lt;strong>過程中不需CPU之參與監督，因此CPU有更多時間用於Process execute上&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>優點：&lt;/p>
&lt;ol>
&lt;li>CPU Utilization更高&lt;/li>
&lt;li>適合用在&lt;strong>Block-Transfer oriented &lt;strong>I/O-Device上(代表中斷發生的頻率不致於過高 eg:Disk, 磁碟的控制器會和DMA的控制器兩個會相互合作，磁碟控制器會去指揮磁碟的運作，讀出來的資料會通知DMA的控制器，DMA會把資料輸進Memory裡) 不是用於&lt;/strong>Byte-transger oriented I/O-Device&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>缺點：&lt;/p>
&lt;ol>
&lt;li>引進DMA Controller會增加HW設計複雜度(Complicated the HW design)&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>原因：DMA的Controller會跟CPU競爭爭奪Memory(記憶體)、Bus(匯流排)的使用權，若DMC Controller 占用了memory , Bus 時，CPU要被迫等待&lt;/p>
&lt;p>補充：DMA Controller通常採用&amp;quot;Cycle Stealing&amp;quot;技術 (or Interleaving)與CPU 輪番(交替)使用memory跟Bus，如果CPU與DMA Controller發生conflict(同時要用Memory 與 bus)，則會&lt;strong>給DMA較高的的優先權&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;ol start="2">
&lt;li>
&lt;p>通常系統會給予「對該資源需求量、頻率等較&lt;strong>小&lt;/strong>」的對象有較高的優先權，這樣會獲得&lt;/p>
&lt;ol>
&lt;li>平均等待時間較小&lt;/li>
&lt;li>平均產能較高&lt;/li>
&lt;/ol>
&lt;p>的好處&lt;/p>
&lt;/li>
&lt;li>
&lt;p>機器指令的Stages (CPU執行的幾個階段)&lt;/p>
&lt;/li>
&lt;/ol>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>IF&lt;/th>
&lt;th>DE&lt;/th>
&lt;th>FO&lt;/th>
&lt;th>EX&lt;/th>
&lt;th>WM&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;/table>
&lt;ol>
&lt;li>IF：Instruction Fetch &lt;code>抓指令：根據Programming Counter的值，到記憶體去把指令抓出來 &lt;/code>&lt;/li>
&lt;li>DE：Decode &lt;code>解碼：知道這條指令到底做什麼事情&lt;/code>&lt;/li>
&lt;li>FO：Fetch Operands &lt;code>抓取運算元：運算元可能來自記憶體、也可能來自暫存器&lt;/code>&lt;/li>
&lt;li>Ex：Execution　&lt;code>執行&lt;/code>&lt;/li>
&lt;li>WM：Write Result to Memory　&lt;code>將結果寫入記憶體&lt;/code>&lt;/li>
&lt;/ol>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>CPU會不會Memory Access（到記憶體抓東西）&lt;/th>
&lt;th>DMA要用Memory&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>IF&lt;/td>
&lt;td>會&lt;/td>
&lt;td>衝突(Conflict)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DE&lt;/td>
&lt;td>不會（指令已經拿出來放到IR&lt;code>instructor registor&lt;/code>)&lt;/td>
&lt;td>OK，歡迎&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>FO&lt;/td>
&lt;td>可能 (運算元有可能在Registor，也有可能放在Memory)&lt;/td>
&lt;td>OK，或有衝突&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>EX&lt;/td>
&lt;td>不會 (ALU去做了)&lt;/td>
&lt;td>OK，歡迎&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>WM&lt;/td>
&lt;td>可能 (結果有可能寫回Memory也有可能是暫存器)&lt;/td>
&lt;td>OK，或有衝突&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Cycle Stealing：當CPU會使用或不會使用Memory Access時，DMA都會去爭奪Memory的使用權，亦為Stealing(偷)，因為DMA擁有最高使用權。&lt;/p>
&lt;h3 id="dma-six-steps">DMA Six Steps&lt;/h3>
&lt;p>&lt;code>(早:中央、清華、交大)&lt;/code>&lt;/p>
&lt;ol>
&lt;li>Device Driver &lt;code>User Process 告訴 I/O subsystem(kernel)告訴 Device Driver&lt;/code>is told to transfer Disk data to Buffer address X&lt;/li>
&lt;li>Device Driver tells disk controller to transfer C bytes from disk to Buffer at address X&lt;code>從磁碟讀C byte的量，分配到記憶體位址X的地方&lt;/code>&lt;/li>
&lt;li>Disk controller initiates DMA Transfer&lt;/li>
&lt;li>Disk controller sends each byte to DMA controller&lt;/li>
&lt;li>DMA transfer bytes to Buffer X in creasing memory address and decreasing Counter utill Counter =0&lt;/li>
&lt;li>When C=0, DMA interrupts CPU to signal transfer compeletion&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/0T7eX0t.png"
loading="lazy"
alt="image-20221119122438718"
>&lt;/p>
&lt;h3 id="life-cycle-of-io-request-via-interrupted-io">Life cycle of I/O-request via Interrupted I/O&lt;/h3>
&lt;p>&lt;img src="https://i.imgur.com/nDEmUKK.png"
loading="lazy"
alt="image-20221119161000584"
>&lt;/p>
&lt;h3 id="blocking-and-non-blocking-io">Blocking and Non-Blocking I/O&lt;/h3>
&lt;p>Blocking(會暫停的) and Non-Blocking(不會暫停的)I/O&lt;/p>
&lt;blockquote>
&lt;p>所謂的Blocking的意思是，當User process發出I/O請求之後，接下來這個prcess就會suspend，直到這個I/O被完成&lt;/p>
&lt;/blockquote>
&lt;h4 id="blocking-io">Blocking-I/O:&lt;/h4>
&lt;p>(等於Synchronous)：Process suspended until I/O completeed&lt;/p>
&lt;ul>
&lt;li>優：Easy to use and understand, process在waiting的時候，可以把CPU放出去給其他process做使用&lt;/li>
&lt;li>缺：Insufficient for some needs&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/WXgFJ0f.png"
loading="lazy"
alt="image-20221119221052160"
>&lt;/p>
&lt;h4 id="non-blocking-io">Non-Blocking I/O：&lt;/h4>
&lt;p>I/O calls returns as much as available &lt;strong>I/O請求發出去後，控制權立刻返回給user process&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>example：user interface, data copy&lt;/li>
&lt;li>Implemented via multi-threading&lt;/li>
&lt;li>&lt;strong>Returns quickly with count of Bytes read or written&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h4 id="asynchronous-io">Asynchronous-I/O:&lt;/h4>
&lt;p>(屬於Non-blocking)：Process runs while, I/O executes&lt;/p>
&lt;ul>
&lt;li>Difficult to use&lt;/li>
&lt;li>I/O subsystem signals process when I/O-completed&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/Z3p4rBK.png"
loading="lazy"
alt="image-20221119221104281"
>&lt;/p>
&lt;h4 id="asynchronous與non-blocking的小差異">Asynchronous與Non-Blocking的小差異&lt;/h4>
&lt;p>Asynchronous I/O：整個I/O完成，才通知Process&lt;/p>
&lt;p>Non-Blocking I/O：I/O完成Data return as much as possible (能回傳就回傳， 少量即可回傳)&lt;/p>
&lt;p>舉例說明：userProcess發出100 byte的I/O請求&lt;/p>
&lt;ul>
&lt;li>Asynchronous的方式，會將100byte的I/O做完後，才告訴Process做完了&lt;/li>
&lt;li>Non-Blocking的方式，每讀25Byte就通知一次， 逐步回報給Process，會發出比較多次的Interrupt&lt;/li>
&lt;/ul>
&lt;h2 id="interrupt-policy-and">Interrupt Policy and&lt;/h2>
&lt;ol>
&lt;li>當Interrupt發生，OS之處理Steps如下：
&lt;ol>
&lt;li>OS收到中斷後(若此中斷要被立即處理，則OS會暫停目前Process之執行，且保存其Status and Registers Contents)&lt;/li>
&lt;li>OS會依照Interrupt ID(No.)查詢Interrupt Vector中斷向量表，確認何種Interrupt發生，且找出其ISR的位址&lt;/li>
&lt;li>Jump to ISR 位址，執行ISR&lt;/li>
&lt;li>ISR完成後，控制權返回Kernel&lt;/li>
&lt;li>OS會恢復(resume)中斷之前Process之執行&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/fWGVXob.png"
loading="lazy"
alt="image-20221121000410540"
>&lt;/p>
&lt;ol start="2">
&lt;li>
&lt;p>Interrupt種類&lt;/p>
&lt;ol>
&lt;li>
&lt;p>早期恐龍分為三種&lt;/p>
&lt;ol>
&lt;li>External Interrupt：CPU以外的周邊設備、控制卡、etc，所發出的中斷&lt;/li>
&lt;/ol>
&lt;p>例：I/O-Completed, I/O-error, Machine-check,&lt;/p>
&lt;ol start="2">
&lt;li>Internal Interrupt：CPU在執行Process過程中，遭遇重大錯誤而引發&lt;/li>
&lt;/ol>
&lt;p>例：Divide-by-zero除以零、執行非法的特權指令、etc&lt;/p>
&lt;ol start="3">
&lt;li>Software Interrupt：user process 在執行中，若須要OS提供服務時，發出此類型的中斷，目的是&lt;strong>通知作業系統&lt;/strong>，請它執行對應的服務請求&lt;/li>
&lt;/ol>
&lt;p>例：I/O-request &lt;code>好比是KTV的服務鈕，按下去就會有人過來問你要幹嘛&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>現在恐龍分為兩種&lt;/p>
&lt;ol>
&lt;li>Interrupt：硬體所產生就叫Interrupt&lt;/li>
&lt;li>Trap：軟體所產生的就叫Trap&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/Gw1lwWA.png"
loading="lazy"
alt="image-20221121003713007"
>&lt;/p>
&lt;p>例：設備發出I/O-Completed,I/O-Error,Machine-check,etc及Time-out by Timer&lt;/p>
&lt;p>用途主要有二&lt;/p>
&lt;ul>
&lt;li>Catch the arithematic error&lt;/li>
&lt;/ul>
&lt;p>例：Divide-by-zero, 執行非法特權指令, illegal memory access&lt;/p>
&lt;ul>
&lt;li>user process 執行需要OS提供服務時，也會發trap通知OS&lt;/li>
&lt;/ul>
&lt;p>例：I/O　Request&lt;/p>
&lt;ol start="3">
&lt;li>分成兩類&lt;code>背後哲學：中斷之間也有優先權高低之分&lt;/code>
&lt;ol>
&lt;li>Maskable Interrupt遮罩：此類中斷發生後，可被Ignored或&lt;strong>延後處理不一定要馬上處理&lt;/strong>
&lt;ul>
&lt;li>例如：Software-interrupt&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Non-Maskable不可遮罩：此類中斷必須立刻處理
&lt;ul>
&lt;li>Internal interrupt(重大error), I/O-error,etc&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h2 id="hardware-resources-protection">Hardware Resources Protection&lt;/h2>
&lt;ul>
&lt;li>基礎建設
&lt;ul>
&lt;li>Dual-modes operation(雙重模式)&lt;/li>
&lt;li>Privilege instructions&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="dual-modes-operation">Dual-modes operation&lt;/h3>
&lt;p>定義：System之運作模式&lt;strong>至少&lt;/strong>(可再往下分，依照系統設計的必要性)可被區分為2種modes&lt;/p>
&lt;ol>
&lt;li>kernel mode&lt;/li>
&lt;li>user mode&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>kernel mode&lt;/strong>&lt;/p>
&lt;p>又叫做system mode, supervisor mode, privileged mode, monitor mode(早期有，現移除)，代表此刻是kernel取得系統控制(取得CPU執行權)，&lt;strong>允許&lt;/strong>privilege instructions(特權指令)在此mode下執行&lt;/p>
&lt;p>&lt;strong>user mode&lt;/strong>&lt;/p>
&lt;p>代表user process取得CPU執行，在此mode,&lt;strong>不允許&lt;/strong>執行privilege instructions(特權指令)，若執行則會發生trap的重大錯誤&lt;/p>
&lt;p>此外，&lt;strong>Dual-modes必須要有HW的支持&lt;/strong>，才可實現&lt;/p>
&lt;p>例如：CPU內會有Mode Bit，用以區分現在是哪個mode&lt;code>當CPU在執行機器指令時，IF、DE...之類的階段，若解碼完發現是個特權指令，這時候Control unit就要檢查目前的mode bit，判斷是否可不可以執行，若不行就丟出一個interrupt，不允許執行&lt;/code>&lt;/p>
&lt;h3 id="priveleged-instruction特權指令">Priveleged instruction(特權指令)&lt;/h3>
&lt;p>定義：任何可能會造成系統重大危害的指令，可設為特權指令(端看工程師如何設計)，&lt;strong>只可以&lt;/strong>在Kernel Mode去執行，不可以再User mode下執行，一旦在User Mode下執行，會發&lt;strong>Trap&lt;/strong>通知OS，將此user process terminates.&lt;/p>
&lt;p>&lt;code>如果把所有的指令設為特權指令，好處就只有超級安全，因為這些指令都只有OS可以做，如果user想做就只能委託OS執行，但這樣performance會很差，因為所有事情都要給OS處理&lt;/code>&lt;/p>
&lt;p>例如：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Turn-off(Disable) interrupt, clear memory, I/O instruction(for I/O protection),Timer值 set/change (for CPU protect)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Base/Limit register 修改/set (for memory protection)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Change mode from user mode to kernel mode&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-markdown" data-lang="markdown">1). Set value of Timer
2). Read the clock
3). Claer memory
4). Turn-off interrupt
5). Switch from user to monitor mode
哪些是特權指令?
1,3,4,5
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">1. Change to user mode
2. Change to monitor mode
3. Read from monitor memory
4. Write into monitor memory
5. Fetch an instruction from memory
6. Turn on timer interrupt
7. Turn off timer interrupt
哪些是特權指令?
2,4,7
詳解：
6. 本身就是打開的，因為要做CPU的保護
7. 但關掉不是
有爭議的部分
3. user process去讀kernel process的資料，恐龍認為是，因為kernel裡面掌管所有Process的information，而process間不應該各個process的狀態
5. 從Monitor memory(Kernel)裡面去讀指令出來，恐龍認為不是，因為就算抓了，但你的mode不是Privilege instruction就會把你擋掉
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="為什麼dual-mode跟privilege-isntruction可以構成保護基礎">為什麼Dual-mode跟Privilege Isntruction可以構成保護基礎&lt;/h3>
&lt;p>所有會危害OS的操作都是在Kernel 發生，因此不可以放任user可以直接操作Kernel&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/ouBgLdK.png"
loading="lazy"
alt="image-20221122221832833"
>&lt;/p>
&lt;h3 id="io-protection">I/O-Protection&lt;/h3>
&lt;p>目的：由於I/O運作較為繁瑣複雜，為了&lt;strong>降低user processes 操控I/O之複雜度&lt;/strong>`，讓user processes去處理應用的問題，I/O則交由OS去處理；及避免user process對I/O-Devices之不當操作，胡搞瞎搞，因此才有I/O protection。簡單來講就是不要讓user processes去操作I/O&lt;/p>
&lt;p>作法：把所有I/O指令皆設為privileged instruction配合Dual-modes, 一律讓user process委託 kernel執行I/O運作&lt;/p>
&lt;h3 id="memory-protection">Memory Protection&lt;/h3>
&lt;p>目的：防止user process 存取其他user processes 之 memory area 及 kernel memory area&lt;/p>
&lt;p>作法：(以 contiguous Memory Allocatation 為例) 針對每個Process, kernel會提供一套Registers：叫base/limit register, 其中&lt;/p>
&lt;ul>
&lt;li>Base register紀錄Process之&lt;strong>起始位址&lt;/strong>&lt;/li>
&lt;li>Limit register紀錄Process之&lt;strong>大小&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>將來Process執行，會進行下列的Checking&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/Ys8xRSh.png"
loading="lazy"
alt="image-20221122234041249"
>&lt;/p>
&lt;blockquote>
&lt;p>為什麼Address的判斷是由Hardware來做而不是OS來做呢？&lt;/p>
&lt;p>因為交給OS來做就會產生中斷interrupt，又因程式在執行的時候對記憶體的存取是很頻繁的，兩個影響之下會導致你的CPU一直被interrupt打擾，因此交給Hardware來做會比較符合成本一點。&lt;/p>
&lt;/blockquote>
&lt;p>並且，還要將 Base與Limit register 值之set/change須設為&amp;quot;Privilege Code(特權指令)&amp;quot;，避免user Process把Base跟Limit的位址直接改成無限，這樣就完成了Memory的&lt;strong>Protection&lt;/strong>&lt;/p>
&lt;h3 id="cpu-protection">CPU Protection&lt;/h3>
&lt;p>目的：防止user process無限期/長期佔用CPU而不釋放&lt;/p>
&lt;p>作法：利用&lt;strong>Timer&lt;/strong>實施，同時OS會規定Process使用CPU time之最大配額值(MAX. Time Quantum)&lt;/p>
&lt;p>當process 取得CPU後，Timer初值即設為Max Time Qauntum值，隨著Process執行 time增加, &lt;strong>Timer值會逐步遞減&lt;/strong>，直到Timer值為0, Timer會發出 &lt;strong>Time-out&lt;/strong>的interrupt通知OS，OS便可強迫此process放掉CPU，此外，Timer值之set/change 也須設為特權指令&lt;/p>
&lt;h2 id="os-structure-operating-system">OS Structure Operating-System&lt;/h2>
&lt;blockquote>
&lt;p>OS之Development&lt;/p>
&lt;blockquote>
&lt;p>OS應提供的服務項目&lt;/p>
&lt;p>OS之&lt;strong>服務元件&lt;/strong>種類&lt;/p>
&lt;p>&lt;strong>System Calls之介紹&lt;/strong>(使用者程式跟OS之間溝通的介面)&lt;/p>
&lt;p>OS之Structure種類&lt;/p>
&lt;blockquote>
&lt;p>Simple&lt;/p>
&lt;p>More Complex than simple&lt;/p>
&lt;p>Layered Approach&lt;/p>
&lt;p>&lt;strong>Microkernel&lt;/strong>&lt;/p>
&lt;p>Module&lt;/p>
&lt;p>Hybrid(混合?)&lt;/p>
&lt;/blockquote>
&lt;p>設計原則：Policy與Mechanism &lt;code>policy管行為,比較常變，例如數值的變動; mechanism負責處理how,比較不會變,例如邏輯的判斷 &lt;/code>&lt;/p>
&lt;p>Virtual Machine介紹&lt;/p>
&lt;/blockquote>
&lt;/blockquote>
&lt;h3 id="system-call">System Call&lt;/h3>
&lt;p>定義：作為執行中user process與kernel之間的溝通界面，當user process需要OS提供某種服務時，會先trap通知OS，並帶入&lt;strong>System call&lt;/strong> ID(No)及&lt;strong>所需參數&lt;/strong>，然後OS執行對應的System call&lt;/p>
&lt;blockquote>
&lt;p>It&amp;rsquo;s a programming Interface to the services privided by the OS&lt;/p>
&lt;/blockquote>
&lt;p>用舉例來講的話&lt;/p>
&lt;ul>
&lt;li>Trap = 服務紐&lt;/li>
&lt;li>System call = 服務項目&lt;/li>
&lt;/ul>
&lt;p>System Call的種類(中央考過類似的題目)&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>Process Control eg：建立、終止、暫停、恢復執行process, set/read attribute&lt;/li>
&lt;li>File Management eg：建立、read, write, open, close, delete &amp;hellip;&lt;/li>
&lt;li>Device Management eg：建立、read, write, open, close, delete &amp;hellip;&lt;/li>
&lt;li>Information of Maintenance eg：取得系統日期/時間、取得Process屬性 etc&lt;/li>
&lt;li>Communications eg: Processes之間的通訊而且只針對Message Processing方式提供服務&lt;/li>
&lt;li>Protection　eg: Hw resources protection, File access contorller, etc&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>&lt;img src="https://i.imgur.com/VvdLNs0.png"
loading="lazy"
alt="image-20221124224120796"
>&lt;/p>
&lt;p>System Call的參數(Parameters)傳遞方式：3種方式&lt;/p>
&lt;ol>
&lt;li>利用暫存器(&lt;strong>Registers&lt;/strong>)保存參數
&lt;ul>
&lt;li>優點：
&lt;ol>
&lt;li>最簡單&lt;/li>
&lt;li>存取速度最快( without memory access)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>缺點:
&lt;ol>
&lt;li>不適用於大量參數之情況&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>利用&lt;strong>Memory&lt;/strong>，以一個Block(Table)儲存這些參數，並將這些表格的起始位址置於1個Register中，Pass給OS
&lt;ul>
&lt;li>優點:
&lt;ol>
&lt;li>適用於大量參數&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>缺點:
&lt;ol>
&lt;li>存取速度較慢，且操作較為麻煩&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>利用&lt;strong>Stack&lt;/strong>將參數push入此Stack, OS再pop from stack, 以取得參數
&lt;ul>
&lt;li>優點:
&lt;ol>
&lt;li>適用於大量參數之情況&lt;/li>
&lt;li>也很簡單&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>缺點:
&lt;ol>
&lt;li>Stack的空間須要預先準備，避免stackoverflow&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="os之系統架構分類">OS之系統架構分類&lt;/h3>
&lt;p>OS之Structure種類&lt;/p>
&lt;blockquote>
&lt;p>Simple: MS-DOS系統&lt;/p>
&lt;p>More Complex than simple: UNIX系統&lt;/p>
&lt;ul>
&lt;li>Limited by Hardware functionality&lt;/li>
&lt;li>The original UNIX had limited structuring&lt;/li>
&lt;li>The UNIX 包含兩個Separate parts
&lt;ol>
&lt;li>System Programs&lt;/li>
&lt;li>The Kernel&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/luyuYF4.png"
loading="lazy"
alt="image-20221125013311284"
>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Beyond simple but not fully layered&lt;/strong>(分層)&lt;/li>
&lt;/ul>
&lt;p>Layered Approach&lt;/p>
&lt;ul>
&lt;li>
&lt;p>定義：採取&lt;strong>Top-Down&lt;/strong>方式，切割系統功能/元件，以降低複雜度。元件/模組之間呼叫關係分層&lt;/p>
&lt;p>即&lt;strong>上層可以使用下層的功能，但下層不可以使用上層的功能&lt;/strong>。完成後要使用&lt;strong>Bottom-up&lt;/strong>方式進行測試，debugging(由底層一路往外測)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>層次的劃分沒有明確規定&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/dkCQyVV.png"
loading="lazy"
alt="image-20221125014733544"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>優點：&lt;/p>
&lt;ul>
&lt;li>降低設計複雜度&lt;/li>
&lt;li>有助於分工&lt;/li>
&lt;li>測試、除錯、維護容易&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>缺點：&lt;/p>
&lt;ul>
&lt;li>很難做到精準的分層劃分&lt;/li>
&lt;li>若Layer數太多，則System performance is very poor( 切到四層剛好、五層太多，極限中的極限是七層)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Microkernel&lt;/strong>(微核心)：由CMU(卡內基-美隆大學)率先提出，代表產品：&lt;strong>Mach o.s&lt;/strong>。它們認為UNIX的服務項目太多、太龐大，不利移植&lt;/p>
&lt;ul>
&lt;li>定義：將Kernel中一些Non-essential services&lt;code>(比較不是那麼基本、重要、必要)&lt;/code>，自Kernel當中移除，改成在User Mode(Site)提供這些服務，以System programs方式存在，如此一來，可以得到一個比較小的kernel，稱之為microkernel, 一般而言，Microkernel提供下列三個minimum service：&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>Porcess Controll&lt;/li>
&lt;li>Memory Management(不包括Virtual memory)&lt;/li>
&lt;li>Process Communications(提供message Processing服務而已)&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/R7XWIb1.png"
loading="lazy"
alt="image-20221126165547853"
>&lt;/p>
&lt;ul>
&lt;li>Benefits(好處)&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>Easier to extend a microkernel
&lt;ul>
&lt;li>服務的增加/刪除是容易的，&lt;strong>因為這些服務是在user site執行&lt;/strong>，所以服務的增、刪不需要牽扯到Kernel也要變更，即使要，也是少量&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Easier to port the OS to new architectures
&lt;ul>
&lt;li>因為Kernel很小，所以移植到新的硬體平台之更改幅度不大(因為只有三個服務run在kernel)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>More Reliable
&lt;ul>
&lt;li>萬一某一個服務在執行中掛掉了，充其量只是相當於一個user process死掉而已，所以對HW, kernel, 其他user process沒有不良影響，因為把大部分的服務移到user mode去做了，因此更加安全、可靠&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>More secure
&lt;ul>
&lt;li>萬一某一個服務在執行中掛掉了，充其量只是相當於一個user process死掉而已，所以對HW, kernel, 其他user process沒有不良影響，因為把大部分的服務移到user mode去做了，因此更加安全、可靠&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>缺點&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>Performance overhead of user space to kernel space communication(效能較差)，因為process Communication充斥大量訊息傳遞&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>Note：microkernel的&lt;strong>相反詞&lt;/strong>：&lt;strong>Monolithic kernel&lt;/strong>&lt;/p>
&lt;p>定義：所有的Services皆須Run in kernel mode，大部分的商用OS幾乎都是Monolithic kernel，因為如果把所有的service移到user site去做，那它的控制就會很低。當這個控制力很低的時候，user或program就可以自己去Inhence一些東西，影響OS&lt;/p>
&lt;p>優點、缺點：和microkernel相反&lt;/p>
&lt;/blockquote>
&lt;p>Module&lt;/p>
&lt;ul>
&lt;li>Many OS implement &lt;strong>loadable&lt;/strong>(有需要才載入) kernel modules&lt;/li>
&lt;li>use Object-oriented approach&lt;/li>
&lt;li>Each core component is &lt;strong>separate&lt;/strong>&lt;/li>
&lt;li>Each talks to the others over known interface&lt;/li>
&lt;li>Each is loadable as heeded within the Kernel&lt;/li>
&lt;li>簡而言之：similar to Layers but with &lt;strong>more flexible, 效能更好&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/epQ0WDz.png"
loading="lazy"
alt="image-20221126173047816"
>&lt;/p>
&lt;p>例如：Linux, solaris, etc &amp;hellip;&lt;/p>
&lt;p>Hybrid(混合?)：現在作業系統很難純粹歸屬於某一型&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Linux&lt;/strong>(中央考過) and Solaris 是 Monolithic (所有東西都run在kernel mode)，且也是&lt;strong>Modular for dynamic loading&lt;/strong>&lt;/li>
&lt;li>例：windows mostly monolithic，有時針對不同客戶需求，會再加上microkernel for subsystem&lt;/li>
&lt;li>例：Apple Mac Os 也是混合的&lt;/li>
&lt;/ul>
&lt;p>kernel 包含&lt;/p>
&lt;blockquote>
&lt;p>Mach microkernel&lt;/p>
&lt;p>部分的BSD UNIX&lt;/p>
&lt;p>I/O Kit&lt;/p>
&lt;p>&lt;strong>dynamic Loadable module(叫做 kernel extension)&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://i.imgur.com/5JwG18g.png"
loading="lazy"
alt="image-20221126175630716"
>&lt;/p>
&lt;/blockquote>
&lt;h3 id="virtual-machine">Virtual Machine&lt;/h3>
&lt;p>定義：利用sofeware技術模擬出一份與底層HW一模一樣的功能介面之抽象代理器(abstract machine)，稱之Virtual Machine&lt;code>模擬的方式類似於CPU schdueling &lt;/code>&lt;/p>
&lt;p>名詞解析：&lt;/p>
&lt;p>&lt;strong>Host&lt;/strong>：undelying hardware system, os&lt;/p>
&lt;p>&lt;strong>VMM(Virtual Machine Manage)或Hypervisor&lt;/strong>：creates and managing/ runs virtual machines&lt;/p>
&lt;p>&lt;strong>Guest&lt;/strong>：process provided with virtual copy of the host&lt;/p>
&lt;blockquote>
&lt;p>恐龍本之其他英文&lt;/p>
&lt;ul>
&lt;li>Abstract hardware of a single computer into several different execution environments&lt;/li>
&lt;li>Similar to layered approach, But layer crates virtual machine(VM)&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>優點&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>作為測試開發中的OS，提供一個良好的負載平台，具有下列好處：&lt;/p>
&lt;ol>
&lt;li>其他user, user processes工作，仍可持續運作，不須暫停&lt;/li>
&lt;li>萬一測試中的OS不穩定、掛掉/失敗了，也不會影響host Hw, OS, 其他user processes 之工作，因為只是相當於一個user process fails而已，不會對system有重大危害&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/cxdDMTi.png"
loading="lazy"
alt="image-20221126221141028"
>&lt;/p>
&lt;ol start="3">
&lt;li>
&lt;p>同一部Host Hardware上可以執行多個OS running on 多個virtual machines，&lt;strong>這樣可以節省成本&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Consolidation(合併)&lt;/strong>：在 Cloud computing environment，我們會用&lt;strong>有限的&lt;/strong>機器，建立為數注眾多的virtual machines，我們可以依VM上的Applications之執行負擔輕重，&lt;strong>調用Host machines資源，做因應的支援&lt;/strong>，有需要就在加開，沒需要就關掉，做資源的合併與調度&lt;/p>
&lt;/li>
&lt;li>
&lt;p>VM較為安全(如果VM被病毒入侵，不致擴散，因為各VM之間是相互獨立的)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可以Freeze, suspend, running VM, 及Clone(複製) VM&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/wQovoui.png"
loading="lazy"
alt="image-20221126223550540"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>VMM的Implementation&lt;/strong>&lt;/p>
&lt;p>&lt;code>Hypervisor : 虛擬機管理程式&lt;/code>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Type0 Hypervisor(硬體層次)：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Hardware&lt;/strong>-based solutions via firmware
&lt;ul>
&lt;li>例如：IBM LPARS and Oracle LDOMs&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Type1 Hypervisor(Kernel Mode層次)&lt;/p>
&lt;ol>
&lt;li>
&lt;p>OS-like software&lt;/p>
&lt;ul>
&lt;li>例：&lt;strong>VMware ESX&lt;/strong>, Joyent SmartOS, Crtrix XenServer&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>general purpose OS that provide VMM functions (services)&lt;/p>
&lt;ul>
&lt;li>例如Microsoft Window Server with HyperV, Redhat Linux with KVM&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Type2 Hypervisor(user mode層次)：&lt;/p>
&lt;ol start="3">
&lt;li>
&lt;p>&lt;strong>Applications&lt;/strong> level provides VMM functionality&lt;/p>
&lt;p>eg. &lt;strong>Paraller&lt;/strong> &lt;strong>Desktop&lt;/strong>, Oracle VirtualBox&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>還有一些其他的&lt;strong>變形&lt;/strong>&lt;code>上面那三類都是要創造跟底層硬體(Host HW)一樣的Virtual Machine，但下面這些卻不是&lt;/code>&lt;/p>
&lt;ol start="4">
&lt;li>
&lt;p>&lt;strong>Paravirtualization☆考試重點&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>The guest OS need modify to work in cooperation with VMM to optimize performance&lt;/li>
&lt;li>&lt;strong>presents guest(run 在virtual Machine上的都叫guest) with similar but Not identical to Host Hardware&lt;/strong>&lt;/li>
&lt;li>Guest &lt;strong>must be modified(必須要被修改才可以用)&lt;/strong> to Run ON Paravirtualization virtual hardware&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Programming-environment virtualization&lt;/p>
&lt;ul>
&lt;li>
&lt;p>VMMs do not virtualize, HW but instead &lt;strong>create on optimized virtual system .&lt;/strong>(創造全新的Virtual Machine)&lt;/p>
&lt;p>eg. Java virtual machine(JVM), Microsoft .NET&lt;/p>
&lt;p>&lt;strong>JVM is a SPECification(規格), not an implementation&lt;/strong>&lt;/p>
&lt;p>規範&lt;/p>
&lt;ol>
&lt;li>Class Loader(把bype code load下來)&lt;/li>
&lt;li>Class verifier(驗證器，驗證byte Code安不安全，比如是否包含pointer)&lt;/li>
&lt;li>Java interpreter(執行byte code)&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/gZivz4w.png"
loading="lazy"
alt="image-20221128233907844"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Emulators&lt;/strong>：Allow application written for one HW to run on a very different HW such as different type of CPU。例：PS4模擬器、3DS模擬器&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Application containment (底層沒有Virtual Machine，而是 創造執行環境，而不是模擬)&lt;/strong>&lt;/p>
&lt;p>eg. Oracle Solaris Zones BSD Jails, IBM AIX WPARs application&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/EVk8fjP.png"
loading="lazy"
alt="image-20221127130242062"
>&lt;/p>
&lt;p>&lt;strong>Policy(政策、策略 ) 與 Mechanism&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Policy定義&lt;/p>
&lt;ol>
&lt;li>&lt;strong>&amp;ldquo;What&amp;rdquo; to be proovided&lt;/strong>&lt;/li>
&lt;li>&lt;strong>經常改變、朝令夕改&lt;/strong>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Mechanism定義&lt;/p>
&lt;ol>
&lt;li>&lt;strong>How to do that&lt;/strong>&lt;/li>
&lt;li>The underlying(基本的) mechanism甚少改變或不變&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>設計原則：&lt;/p>
&lt;p>Policy與Mechanism宜separate，以增進system flexibility&lt;/p>
&lt;/li>
&lt;li>
&lt;p>舉例&lt;/p>
&lt;ol>
&lt;li>&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>運用Timer作為CPU protection &amp;gt; Mechanism&lt;/li>
&lt;li>Max.Time Quantum大小制定 &amp;gt; Policy&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>CPU排版採Priority Scheduling 排班 &amp;gt; Mechanism&lt;/li>
&lt;li>Priority大小之定義 &amp;gt; Policy&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h1 id="chapter-3-system-structure">Chapter 3 System Structure&lt;/h1>
&lt;p>這個部分和第二章寫在一起了&lt;/p>
&lt;h1 id="chapter4--process-management-and-thread-management">Chapter4 Process Management And Thread Management&lt;/h1>
&lt;blockquote>
&lt;p>Process 定義與Progeam比較&lt;/p>
&lt;p>&lt;strong>PCB內容 考試重點&lt;/strong>&lt;/p>
&lt;p>&lt;strong>Process State Transition Diagram (S.T.D)考試重點&lt;/strong>&lt;/p>
&lt;p>Scheduler的種類(解釋名詞)&lt;/p>
&lt;blockquote>
&lt;p>長期&lt;/p>
&lt;p>短期&lt;/p>
&lt;p>中期&lt;/p>
&lt;/blockquote>
&lt;p>Context Switching (解釋名詞)&lt;/p>
&lt;p>Dispatcher, Dispatch latency(較少考)&lt;/p>
&lt;p>&lt;strong>Process Controller Operations(UNIX, System Call為主的程式追蹤) 考試重點&lt;/strong>&lt;/p>
&lt;p>&lt;strong>評估CPU Scheduling 效能的好或不好的5個Criteria(清大喜歡考)&lt;/strong>&lt;/p>
&lt;p>&lt;strong>各種CPU 排班法則(7個)介紹及相關名詞(Starvation,Aging,Preemptive,Non-preemptive,Convoy effect) 考試重點&lt;/strong>&lt;/p>
&lt;p>特定System的排班設計&lt;/p>
&lt;blockquote>
&lt;p>MultiProcessors System&lt;/p>
&lt;p>Real-time System&lt;/p>
&lt;blockquote>
&lt;p>Soft (考申論題)&lt;/p>
&lt;p>Hard(考計算題)&lt;/p>
&lt;/blockquote>
&lt;/blockquote>
&lt;p>Thread Management&lt;/p>
&lt;/blockquote>
&lt;h2 id="process-definition">Process Definition&lt;/h2>
&lt;p>定義：A program in execution[恐]&lt;/p>
&lt;ul>
&lt;li>Process 建立後，其主要組成有：
&lt;ul>
&lt;li>&lt;strong>Process No(ID)&lt;/strong>: Process被生成出來時，會有一個Process Id，作為識別&lt;/li>
&lt;li>Process State&lt;/li>
&lt;li>Code Section, Data Section：Process占用的 Memory Space&lt;/li>
&lt;li>Programming Counter(PC)：程式計數器，告訴我們現在這個Process執行到哪裡，裡面放下一條指令的位址&lt;/li>
&lt;li>Stack&lt;/li>
&lt;li>CPU Register value&lt;/li>
&lt;li>是OS 分配 **Resource(CPU,I/O-Divice, Memory) **之對象單位：跟Thread的差別&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>與Program(程式)的比較&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Process&lt;/th>
&lt;th>Program&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>執行中的程式&lt;/td>
&lt;td>Just a &lt;strong>File&lt;/strong> stored in storage device&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;ldquo;Active&amp;rdquo; entity(活動中、執行中)&lt;/td>
&lt;td>&amp;ldquo;Passive&amp;rdquo; entity(沒有活動的)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="process-control-block">Process Control Block&lt;/h2>
&lt;p>(PCB內容)&lt;/p>
&lt;p>定義：OS為了管理所有Processes，會在Kernel memory中，替每個Process，各自準備一個Block(Table, 表格)，用來記錄Process之所有相關資訊&lt;/p>
&lt;p>&lt;strong>PCB的主要內容有(要背，考選擇)：&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Process No(ID)：是Unique(唯一的)&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Process state：eg. ready, running, wait, etc&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Programming Counter：內放 the next instruction&amp;rsquo;s address&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>**CPU Registers：eg. 紀錄使用到的暫存器的值 eq. Accumulator, PSW(Process Status Word), Stack Top ,etc **&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>CPU Scheduling Info：eg. Process 的優先權，First-In First-Out(FIFO)&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Memory Management Info(隨OS的記憶體管理方法不同，紀錄不同資訊)：eg. Base/Limit register或 Page Table 或 Segment Table&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Accounting Info：eg. Process已使用了多少CPU Time, 哪些資源, 還剩多少資源,多少CPU Time可以用&lt;/strong>
Note：目的&lt;/p>
&lt;blockquote>
&lt;p>計算使用量，記帳、收＄&lt;/p>
&lt;p>Administrator 調教Performance的依據&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>I/O Status Info：eg. process已經發出多少I/O-Request, 完成 狀況如何，占用那些I/O Resource(目前還沒釋放的)&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="process-state-transition-diagram">Process State Transition Diagram&lt;/h2>
&lt;p>狀態轉換圖(S.T.D)&lt;/p>
&lt;p>目的：描述Process之Life Cycle，用來記錄Process建立，到它被終止之間，所發生的事&lt;/p>
&lt;p>各個版本的STD定義都不太一樣&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>[恐] 5個State的STD&lt;/li>
&lt;li>[Stalling]7個State STD (比恐龍多兩個狀態)&lt;/li>
&lt;li>[Stalling] UNIX的STD&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;h3 id="5-steps-of-state-transition-diagram">5 Steps of State Transition Diagram&lt;/h3>
&lt;p>要會畫，會說明，超基礎，考出來是送分題&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/WlbrMCp.png"
loading="lazy"
alt="image-20221204010203958"
>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>State&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>New(Create)&lt;/td>
&lt;td>Process被建立，已分得PCB的空間，&lt;strong>尚未載入記憶體、未取得記憶體資源&lt;/strong>，因應Batch的系統&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Ready&lt;/td>
&lt;td>Process在記憶體了，且OS已經把它&lt;strong>放到Ready Queue內，且具有資格爭奪CPU&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Running&lt;/td>
&lt;td>Process取得CPU 執行中&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Wait(Block)&lt;/td>
&lt;td>表示Process待在waiting Queue中，Waiting For I/O-Completed or event occurs, &lt;strong>不會與其他Processes 競爭CPU&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Exit(Terminate)(Zombie)(Abort)&lt;/td>
&lt;td>Process完成工作，&lt;strong>正常結束&lt;/strong>或&lt;strong>異常終止&lt;/strong>，可能其PCB尚未回收，因為要等其&lt;strong>父親(Parent Process)Collect 該子process之成果後&lt;/strong>，才會回收PCB Space其他資源(Memory, CPU, I/O-Devices)已回收&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Transition&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1.&lt;/td>
&lt;td>也叫Admit，當Memory Space足夠時，可由&lt;strong>Long-term Scheduler(in Batch System，因為放在Job Queue裡頭)，決定將此Job載入到Memory中&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2.&lt;/td>
&lt;td>也叫&lt;strong>Dispatch&lt;/strong>,由short-term scheduler(CPU Scheduler)決定，讓高優先權的Process取得CPU控制權&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3.&lt;/td>
&lt;td>也叫&lt;strong>Time-Out/Interrupt&lt;/strong>，執行中的Process會因某些事件發生而&lt;strong>被迫放棄(不是自願的)CPU，回去Ready Queue, eg. Time-Out, Interrupt發生,更高優先權的Process到達，插隊&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4.&lt;/td>
&lt;td>叫wait for I/O-Completed or event occurs(自願放棄CPU)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5.&lt;/td>
&lt;td>I/O-Completed 或 Event occurs&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>6.&lt;/td>
&lt;td>Process完工或異常終止 (自願放棄CPU)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="7-steps-of-state-transition-diagramstalling">7 Steps of State Transition Diagram[Stalling]&lt;/h3>
&lt;p>&lt;code>補上Middel Term Scheduler&lt;/code>&lt;/p>
&lt;p>為了解決一個問題&lt;/p>
&lt;p>&lt;code>當記憶體被占滿了，有一個更高優先權的Process近來，該如何處理？&lt;/code>&lt;/p>
&lt;p>把wait狀態的process踢出去，放到磁碟去保存&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/3fqSWLb.png"
loading="lazy"
alt="image-20221204120509402"
>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>State&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Blocked/Suspend&lt;/td>
&lt;td>Process被Swap Out到 Disk中暫存，即Blocked(asleep) in Disk&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Ready/Suspend&lt;/td>
&lt;td>event occurs or I/O-Completed, &lt;strong>READY IN DISK&lt;/strong>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Transition&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Suspend(Swap Out)&lt;/td>
&lt;td>當Memory空間不足，又有其他高優先度的Process需更多Memory空間時，會由Medium-Term Scheduler決定將Blocked Process或低優先權的Process Swap out到Disk，以空出Memory Space&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Activate(Swap In)&lt;/td>
&lt;td>當Memory space有空，Medium-term scheduler可將它們Swap In回memory中，Ready for execution&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Suspend(Swap Out)&lt;/td>
&lt;td>支持此Transition之理由有二&lt;br />1.所有Blocked Processes皆Swap out後，Memory Space仍不足時&lt;br />2. 所有Blocked State Processes之優先權，皆高於Ready State Process時&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;img src="https://i.imgur.com/t6Albzn.png"
loading="lazy"
alt="image-20221204120421430"
>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Transition&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>把從在磁碟睡覺的process拉到記憶體裡面睡覺，&lt;code>This is a poor design，但仍可支持，理由如下：若所有&lt;/code>Blocked/suspend` state之Processes優先權皆高於ready/ suspend processes, 且OS believes them will become ready soon |&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>It&amp;rsquo;s also a poor design 但可支持之理由如下：若有一個高優先權的process從blocked/suspend變成ready/suspend時，則OS可以強迫低優先權但已執行的process放棄CPU的使用以及Memory的空間，供高優先權使用&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="unix-stdstalling">UNIX STD[Stalling]&lt;/h3>
&lt;p>&lt;img src="https://i.imgur.com/OWW8dof.png"
loading="lazy"
alt="image-20221204131334041"
>&lt;/p>
&lt;h2 id="scheduler-typeimportant">Scheduler Type(Important)&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>
&lt;p>Long-term Scheduler&lt;/p>
&lt;ul>
&lt;li>定義：又叫Job Scheduler，目的是從Job Queue中挑選一些Jobs載入到Memory中&lt;/li>
&lt;li>特色：
&lt;ol>
&lt;li>執行頻率最低，所以才叫長期&lt;/li>
&lt;li>可以調控Multiprogramming Degree&lt;/li>
&lt;li>可以調控 I/O-Bound Job與CPU-Bound Job之混合比例(下面有解釋)&lt;/li>
&lt;li>Batch System採用，但是real-time system以及time-sharing不會採用這種機制。因為real-time系統處理的process都是比較緊急的，因此就需要直接丟進memory去執行。而time-sharing系統要求對每一個user公平，沒有優先度需要處理，如果memory不夠則調用virtual memory，因此time-sharing系統只存在medium-term以及short-term&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Short-term Scheduler：&lt;/p>
&lt;ul>
&lt;li>定義：又叫&lt;strong>CPU Schduler&lt;/strong>或&lt;strong>Process Scheduler&lt;/strong>，目的是從&lt;strong>Ready Queue&lt;/strong>中挑出一個高優先權的process，分派CPU，給CPU執行&lt;/li>
&lt;li>特色：
&lt;ol>
&lt;li>執行速度是三者裡面最高的&lt;/li>
&lt;li>&lt;strong>無法調控Multiprogramming Degree，因為它不是負責將程式load進memory與Swap out出去的人&lt;/strong>&lt;/li>
&lt;li>&lt;strong>無法調控I/O-Bound Job與CPU-Bound Job之混合比例，頂多決定誰要先做，不能決定比例&lt;/strong>&lt;/li>
&lt;li>&lt;strong>所有的 System採用&lt;/strong>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Medium-term Scheduler(最常被考)：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>定義：&lt;strong>Time-Sharing System採用&lt;/strong>，當&lt;strong>Memory空間不足&lt;/strong>，且&lt;strong>又有其他高優先權Processes需要Memory Space時&lt;/strong>，此Scheduler會啟動，它會挑選一些Processes(eg. Blocked Process, 低優先Process) 將其Swap Out到Disk中，保存，以空出Memory Space，供其他Process使用，將來等到有足夠的Memory Space released後，此Scheduler可再將它們Swap In 回Memory, ready for execution&lt;/p>
&lt;/li>
&lt;li>
&lt;p>特色：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>執行速度是三者裡面居中的&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>可以調控Multiprogramming Degree，因為它不是負責將程式load進memory與Swap out出去的人&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>可以法調控I/O-Bound Job與CPU-Bound Job之混合比例，頂多決定誰要先做，不能決定比例&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Time-Sharing System採用&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>&lt;code>Multiprogramming Degree：系統內的Process的數目：一般而言，Degree越高，CPU利用率就越高。&lt;/code>&lt;/p>
&lt;h3 id="io-bound-job與cpu-bound-job">I/O-Bound Job與CPU-Bound Job&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>I/O-Bound(受限) Job&lt;/p>
&lt;p>定義：此類型工作大都是需要大量的I/O operation(resource)，但對於CPU Time(Computation)需求很少，&lt;strong>因為其工作效能受限於I/O-Device之速度，稱之I/O-Bound&lt;/strong>，對CPU有最高優先權，因為它占用CPU的時間最短&lt;/p>
&lt;p>例如：Data Base Management, 財報的處理列印&lt;/p>
&lt;/li>
&lt;li>
&lt;p>CPU-Bound(受限) Job&lt;/p>
&lt;p>定義：需要大量的CPU計算，產生數筆資料，對I/O有最高優先權，因為它占用CPU的時間最短&lt;/p>
&lt;p>例如：氣象預估、科學模擬&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>如果OS發現I/O-Bound過多，則會透過Schduler來調控兩者之間的比例&lt;/strong>&lt;/p>
&lt;h2 id="context-switching">Context Switching&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>定義：當CPU要從Running Process切給另一個Process使用之前，Kernel必須**保存(Store) Running Process的目前狀態資訊(eg. Programming Counter的值，Stack的值，CPU Register的值，etc)，即存回此Process之PCB **。且要載入(restore)另一個Process之狀態資訊from此Process PCB，&lt;strong>這樣的行為就叫做Context Switching&lt;/strong>，Context Switch本身是一個額外的負擔，因為需要花CPU的時間去做切換，不能用在Process的執行上，因此時間大多取決於硬體的因素居多(eg. Register的數量夠不夠，Memory存取指令速度&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如何將低Context Switching負擔&lt;/p>
&lt;ol>
&lt;li>如果Register的數量足夠多，則可以讓每一個Process皆有自己的(Private) Register Set，OS只要切換Point指向另一個process之Register Set 即可完成Context Swtitching without memory store/restore ，因為速度夠快。但這個方法不太切實際，因為Register的成本關係&lt;/li>
&lt;li>使用&lt;strong>Multithreading&lt;/strong>機制。&lt;/li>
&lt;li>讓System process及User Process各自擁有自己的Register set，如此兩者之切換只要Registers Set的Pointer即可&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h2 id="dispatcher-and-dispatch-latency">Dispatcher And Dispatch Latency&lt;/h2>
&lt;p>&lt;code>分派器與分派延遲&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>定義：Dispatcher，此一模組的目的是要將CPU控制權授予經由CPU Scheduler依據CPU排班法則所選出之Process，選好後CPU Scheduler會將工作交給CPU Dispatcher，主要的工作項有下列三項&lt;/p>
&lt;ol>
&lt;li>Context Switching&lt;/li>
&lt;li>Change Mode from to Kernel mode to User Mode&lt;/li>
&lt;li>Jump to the execution entry of that selected proces&lt;/li>
&lt;/ol>
&lt;p>上述這三個工作所耗費的時間總和就是&lt;strong>Dispatch Latency&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>希望&lt;strong>Dispatch Latency越短越好&lt;/strong>，這些Process可以盡早開工&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="process-control-operations">Process Control Operations☆☆☆☆☆&lt;/h2>
&lt;h3 id="lession-1-theory">Lession 1 Theory&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>定義：Process建立、終止、暫停、恢復執行、設定／修改／讀取 Process Attributes值 etc.&lt;/p>
&lt;p>&lt;strong>上述這些皆是OS應該提供的服務(i.e System Call)&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Procss是可以建立自己的Process(Child Process)，&lt;strong>目的是要Child Process做工作&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Child Process所做的工作，可以分為2類：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>與Parent 相同的工作(子承父業)&lt;/strong>&lt;/li>
&lt;li>特定工作(與Parent不同)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Parent與Child之間的互動關係為：&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>Concurrent execution(交錯使用，通常是執行第一類的工作(子承父業))&lt;/li>
&lt;li>Parent waits for Child until child terminated(等著收割Child的成果)&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>Child Process 所須的資源由何處取得?&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>&lt;strong>OS供應&lt;/strong>(這種情況OS會去限制每個process最大可產生多少個Child Process)&lt;/li>
&lt;li>Parent供應(整個家族Process的資源都是共享，Parent Process的Sharing Time有一小時，那麼整個家族的Sharing Time 就是一個小時&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>Parent 若終止，則Child Process會如何處理?&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>一併終止(最常被使用)&lt;/strong> ：稱之為Cascading(層疊的) termination&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Parent Process死了，但Child Process存活，那Child的資源由以下兩者提供&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>
&lt;p>向OS取得資源&lt;/p>
&lt;/li>
&lt;li>
&lt;p>向祖先Process取得資源&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;h3 id="lession-2-example---unix-system-call">Lession 2 Example - UNIX System Call&lt;/h3>
&lt;ul>
&lt;li>fork()：此System call. 用以建立 Child Process，而fork()之傳回結果，對象如下&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>失敗：因為資源不足&lt;code>(記憶體不夠，PCB也不夠)&lt;/code>，無法建立，&lt;strong>會傳回負值(-1)給OS, then Pass to parent process&lt;/strong>，通常失敗的話，OS也會順便把Parent process砍死&lt;/p>
&lt;p>成功：OS會傳回一個值，用以區分child or parent：&lt;/p>
&lt;blockquote>
&lt;p>0值：給child process&lt;/p>
&lt;p>.&amp;gt; 0值：給Parent，且此值為Child Process ID&lt;/p>
&lt;/blockquote>
&lt;/blockquote>
&lt;p>&lt;img src="https://i.imgur.com/Hkeq0GX.png"
loading="lazy"
alt="image-20221205225943369"
>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>wait()：此System Call用以&lt;strong>暫停&lt;/strong>Process execute, 直到某個事件發生，eg. 父等子直到子終止 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>exit()：此System Call用以終止Process的執行，回收其資源&lt;code>但PCB的空間可能還留著，直到父把子的結果回收回來才回收&lt;/code>通常exit(0)表示正常終止，&lt;strong>exit(-1)表示異常終止&lt;/strong>。&lt;strong>子Process做完工作後，子Process要自己發出一個exit的System Call，讓OS來殺掉子Process。&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>execlp()&lt;code>或exec(), execve()&lt;/code>：此system call用於請OS載入特定的binary code(可執行的檔案)，來執行。這個System call可以交由子process執行，讓子process執行特定的工作，&lt;strong>去執行之後就不會再回來執行原程式下面的指令了，因為已經去執行特定的工作了&lt;/strong>&lt;/p>
&lt;p>eg. execlp(&amp;ldquo;目錄名稱&amp;rdquo;,&amp;ldquo;檔名&amp;rdquo;,參數)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>getpid()：此System Call用以取得Prcess的Id&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>​ 說明：&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/73BPWL6.png"
loading="lazy"
alt="image-20221205232325242"
>&lt;/p>
&lt;p>​ OS會配置child process memory space, 此空間是占用不同的記憶體空間，且子process的Data section 及 code section內容均來自父process的copy, initially。&lt;/p>
&lt;p>​ &lt;strong>若子process所作之工作與父process相同，則fork()完，就已經達成目的。&lt;/strong>&lt;/p>
&lt;p>​ &lt;strong>若子process要做特定工作(與父process不同)，則子process必須執行execlp()這個system call&lt;/strong>&lt;/p>
&lt;p>​ &lt;img src="https://i.imgur.com/FVrCZfE.png"
loading="lazy"
alt="image-20221205233942669"
>&lt;/p>
&lt;h3 id="lession3-programming">Lession3 Programming&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="c1">//例題1；建立Child process執行ls命令檔，且父等子完成後才列印Child completed
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">pid&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="n">pid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;fork fails &lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//爸爸自己自殺
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>&lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span> &lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="c1">//兒子要做的事情
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">execlp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/bin/ls&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s">&amp;#34;ls&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">null&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">exit&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">//這段code不會執行，原因是因為execlp()會把process指向/bin/ls的binary code，接著就是去執行那段binary code了，就不會回來執行這個exit();
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>&lt;span class="k">else&lt;/span> &lt;span class="c1">//pid &amp;gt;0{
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//爸爸要做的事情
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">wait&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">//父Process子Process直到子Process終止 子Process做完工作後，子Process要自己發出一個exit的System Call，讓OS來殺掉子Process。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;child Completed&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">exit&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="c1">//不管怎樣都會執行的地方
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/lNzxZM0.png"
loading="lazy"
alt="image-20221206002505232"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="c1">//例題2 假設Parent, child 之process ID為2600, 2603 求line A, B, C, D 印出值
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="n">pid&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">t&lt;/span> &lt;span class="n">pid&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pid1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//pid-t: 一個名為pid 的type，就是整數，是C語言的寫法
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">pid&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">//pid 放的是子process的ID， pid1放的是自己process的ID
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">pid1&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">getpid&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//A 0
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pid1&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//B 2603
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>&lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span> &lt;span class="o">&amp;gt;&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">pid1&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">getpid&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//C 2603
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pid1&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//D 2600
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/3vEaYqb.png"
loading="lazy"
alt="image-20221212233944674"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-C" data-lang="C">&lt;span class="c1">//例題3 問A的值value是多少
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="n">pid&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">t&lt;/span> &lt;span class="n">pid&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">pid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span> &lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">value&lt;/span> &lt;span class="o">+=&lt;/span>&lt;span class="mi">15&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>&lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span> &lt;span class="o">&amp;gt;&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">null&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//A=5 就算是global的變數，也是只能在自己的process作用
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="c1">//例題4 求列印結果
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">1.&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="n">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">pid&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">pid&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;A&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>&lt;span class="k">else&lt;/span> &lt;span class="c1">//pid &amp;gt;0{
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;B&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nl">Ans&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="err">父與子是並行的，因為父&lt;/span>&lt;span class="n">process沒有wait&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="err">因此答案可能是&lt;/span>&lt;span class="n">AB或BA&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="mf">2.&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="n">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">pid&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">pid&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;A&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>&lt;span class="k">else&lt;/span> &lt;span class="c1">//pid &amp;gt;0{
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;B&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">wait&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;C&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nl">Ans&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">ACBC&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">ABCC&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">BACC&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="c1">//例題5 假設Count，是一個父與子Process的共享變數 ，初值為5
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">1.&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="n">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">pid&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">pid&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">count&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>&lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span> &lt;span class="o">&amp;gt;&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">wait&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">count&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">Ans&lt;/span>&lt;span class="mf">.6&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="mf">2.&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">//父與子並行
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="n">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">pid&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">pid&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">count&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>&lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span> &lt;span class="o">&amp;gt;&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">count&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">Ans&lt;/span>&lt;span class="p">.&lt;/span> &lt;span class="mi">45&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">54&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">55&lt;/span> &lt;span class="c1">//這是基本情況
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">//以高階程式語言的角度來看，count++實際上是兩條code
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//count+1跟count=count+1
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//先加然後再附值
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//如果以組合語言的角度來看，就是三行code
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//LOAD R1, Count
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//INC R1, 1;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//STORE Count,R1
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//但Process沒有辦法保證這三條Code會連續做完，有可能做到一半就被另一個Process搶走了
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//所以還有一種情況是+1完之後，還來不及Assign，CPU就被另一個Process搶走了
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="n">Ans&lt;/span>&lt;span class="mf">.66&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">44&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">46&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">64&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/PScmSWQ.png"
loading="lazy"
alt="image-20221213223929951"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-C" data-lang="C">&lt;span class="c1">//例題6
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">1.&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">How&lt;/span> &lt;span class="n">mant&lt;/span> &lt;span class="n">processes&lt;/span> &lt;span class="n">are&lt;/span> &lt;span class="n">created&lt;/span>&lt;span class="o">?&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">include&lt;/span> &lt;span class="n">main&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="n">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">Ans&lt;/span>&lt;span class="mf">.8&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="mf">2.&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="n">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fork&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span> &lt;span class="c1">//等同於 pid=fork(); if(pid ==0) ....
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">Ans&lt;/span>&lt;span class="mf">.10&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="mf">3.&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="n">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fork&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>&lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fork&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">Ans&lt;/span>&lt;span class="mf">.14&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="mf">4.&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="n">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fork&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">Ans&lt;/span>&lt;span class="mf">.729&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="mf">5.&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="n">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fork&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>&lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fork&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fork&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="mf">6.&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="n">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">a&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fork&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">a&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="n">a&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">.)&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">共做了幾次&lt;/span>&lt;span class="o">?&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="n">ii&lt;/span>&lt;span class="p">.)&lt;/span>&lt;span class="err">印出&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="err">的有幾次&lt;/span>&lt;span class="o">?&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="n">iii&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">印出&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="err">的有幾次&lt;/span>&lt;span class="o">?&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="n">iiii&lt;/span>&lt;span class="p">.)&lt;/span>&lt;span class="err">印出&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="err">的有幾次&lt;/span>&lt;span class="o">?&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>例題1&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/P7KPC3a.png"
loading="lazy"
alt="image-20221213224958887"
>&lt;/p>
&lt;p>例題2&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/sxHVION.png"
loading="lazy"
alt="image-20221213230321504"
>&lt;/p>
&lt;p>例題3&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/928uNym.png"
loading="lazy"
alt="image-20221213231138167"
>&lt;/p>
&lt;p>例題4&lt;/p>
&lt;p>parse1&lt;img src="https://i.imgur.com/B8YeFxw.jpg"
loading="lazy"
alt="image-20221213233229409"
>&lt;/p>
&lt;p>parse2&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/z5Udxxt.jpg"
loading="lazy"
alt="image-20221213233442414"
>&lt;/p>
&lt;p>parse3&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/jBQDnnR.png"
loading="lazy"
alt="image-20221213233645680"
>&lt;/p>
&lt;p>例題5&lt;/p>
&lt;p>parse1&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/QNOoXgC.png"
loading="lazy"
alt="image-20221213235008337"
>&lt;/p>
&lt;p>parse2,3&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/VLdy9Wu.png"
loading="lazy"
alt="image-20221213235124681"
>&lt;/p>
&lt;p>例題6&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/vNkpGIt.jpg"
loading="lazy"
alt="image-20221214001735125"
>&lt;/p>
&lt;h2 id="evalue-cpu-scheduling-performance-5-criteria">Evalue CPU Scheduling Performance 5 criteria&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>
&lt;p>CPU utilization：cpu花在Process exec time / CPU &lt;strong>total time(process exec time + context switching time+ idle time)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>舉例：Process平均花5ms在exec上 ,context switching = 1ms,則CPU utilization = 5/5+1 =5/6&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Throughput(產能)：單位時間內完成的Job數目&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Waiting Time(等待時間，考試重點)&lt;/strong>：process花在ready queue中等待獲得CPU之等待時間加總&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/owdeLYf.png"
loading="lazy"
alt="image-20221214224920098"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Turnaround Time(完成時間)：從Process進入(到達)到它工作完成的這段時間差值&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/1F9T30z.png"
loading="lazy"
alt="image-20221214225625777"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Response Time(回應時間)：自user(user process) input 命令/Data 給系統到系統產生&lt;strong>第一個回應&lt;/strong>的時間差，沒有一個特定的量法去量它，稱之Time-sharing system, user-mteractive, &lt;strong>application特別重視這一塊&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>由上述得知，排班的目標必是，**利用度越高、產能越高，時間相關的東西越短越好 **&lt;/p>
&lt;h2 id="cpu排班法則行為介紹">CPU排班法則行為介紹&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>FIFO&lt;/li>
&lt;li>SJF&lt;/li>
&lt;li>SRTF&lt;/li>
&lt;li>Priority&lt;/li>
&lt;li>RR&lt;/li>
&lt;li>Multilevel Queues&lt;/li>
&lt;li>Multilevel Feedback Queues (MFQs)&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;h3 id="fifo法則">FIFO法則&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>定義：到達時間最小的process，優先取得CPU&lt;/p>
&lt;/li>
&lt;li>
&lt;p>例如：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Process&lt;/th>
&lt;th>CPU(burst) Time 要花的CPU time&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>P1&lt;/td>
&lt;td>24&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P2&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P3&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>到達時間皆為0(從一開始就到了)&lt;/p>
&lt;p>到達順序為：P1, P2, P3(擺到ready queue的順序)&lt;/p>
&lt;p>Question&lt;/p>
&lt;ol>
&lt;li>畫出Gantt Chart&lt;/li>
&lt;li>求Avg. waiting time&lt;/li>
&lt;li>求Avg. Turnaround Time&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/5S4T8z9.png"
loading="lazy"
alt="image-20221214235730530"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>分析&lt;/p>
&lt;ol>
&lt;li>
&lt;p>排班效能最差，即&lt;strong>Waiting time &amp;amp; Turnaround time 最長&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可能會有**Convoy Effect(護衛效應：許多Processes 均在等待一個需要很長CPU time之process 完成工作，才能取得CPU，造成Avg waiting time 很長之不良效應) **&lt;/p>
&lt;/li>
&lt;li>
&lt;p>公平&lt;/p>
&lt;/li>
&lt;li>
&lt;p>No Starvation&lt;/p>
&lt;ul>
&lt;li>(沒有&lt;strong>飢餓現象：Process因為長期無法取得完工所需各式資源，導致它遲遲無法完工，形成Indefinite Blocking 現象，稱之Starvation，容易發生在不公平對待之環境，若再加上Preemptive機制，則更是容易發生，補償方案：&amp;ldquo;Aging(老化)&amp;ldquo;技術，隨著Process待在System內的時間逐漸增加，我們也逐步提高此process的優先權，故可取得Process Resources完工，因為不會Starvation&lt;/strong>。注意：Soft real-time System不採用Aging，因為Soft real-time system是為了確保real-time process取得最高優先權，如果加入Aging機制，就有可能有process的priority高於real time process)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Non-preemptive(不可插隊；不可搶奪)法則&lt;/p>
&lt;ul>
&lt;li>
&lt;p>版本1(白話文)&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Non-preemptive法則&lt;/p>
&lt;ul>
&lt;li>定義：除非執行中的process&lt;strong>自願放掉CPU&lt;/strong>，其他Process才會有機會取得CPU，否則就只能wait，不可逕自搶奪CPU&lt;/li>
&lt;li>例如：完成工作、Wait for I/O-completed after issue I/O-request&lt;/li>
&lt;li>優點：
&lt;ol>
&lt;li>Context Switching的次數比較少，因為不可插隊，所以Switching的頻率小很多&lt;/li>
&lt;li>process之完工時間點較可預期(Predictable)，因為不可插隊&lt;/li>
&lt;li>比較不會有Race Condition Problem&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>缺點：
&lt;ol>
&lt;li>排班的效能較差，因為可能有Convoy effect&lt;/li>
&lt;li>不適合用在Time-sharing System, Real time System，因為這兩個都需要插隊的機制&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Preemptive法則&lt;/p>
&lt;ul>
&lt;li>定義：執行中的Process有可能&lt;strong>被迫放棄CPU&lt;/strong>，回到ready Queue，將CPU切給別人使用，eg. Time-out, interrupt etc&lt;/li>
&lt;li>優點：
&lt;ol>
&lt;li>排班效益較佳，平均waiting/ turnound Time較小，可以把耗時較長的Process Preemptive掉&lt;/li>
&lt;li>適用於Real-time sysem(要能夠把real time 的process插入進去) 及Time-Sharing System&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>缺點：
&lt;ol>
&lt;li>完工時間較不可預期&lt;/li>
&lt;li>Context Switching次數多，負擔較重&lt;/li>
&lt;li>須注意Race Condition之發生&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>版本2：從CPU排班決策(啟動)之時機點來做區分(可以參考 State Transition，以下是五種情況做解說)&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>Running &amp;mdash;&amp;gt; Block eg: wait for I/O completed [自願放棄]&lt;/li>
&lt;li>Running &amp;mdash;&amp;gt; Ready eg: time-out [被迫放棄]&lt;/li>
&lt;li>Wait &amp;mdash;&amp;gt; Ready eg: I/O-completed [尊爵不凡的process醒來了，所以要啟動CPU scheduling，獲得CPU，低優先權的process被迫放棄CPU]&lt;/li>
&lt;li>Running &amp;mdash;&amp;gt; Exit eg:完成工作 [自願放棄]&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>所以若排班決策之啟動點只包含1,4，未包含2,4，則為Non-preemptive,否則preempt。&lt;/p>
&lt;p>Note：凡是 xxx &amp;mdash;&amp;gt; ready 皆列入preemptive元素(選項)，所以&lt;/p>
&lt;p>ready/suspend &amp;mdash;&amp;gt; ready&lt;/p>
&lt;p>New &amp;mdash;&amp;gt; Ready&lt;/p>
&lt;p>皆列入preemptive&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h3 id="sjfshortest-job-first法則">SJF(Shortest Job First)法則&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>定義：具有最小的CPU TIME之Process，優先取得CPU，若都一樣小，則採FIFO。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>例如：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Process&lt;/th>
&lt;th>CPU Time&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>P1&lt;/td>
&lt;td>6&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P2&lt;/td>
&lt;td>8&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P3&lt;/td>
&lt;td>7&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P4&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Process到達時間皆為0，求Avg waiting time&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/VKxulnL.png"
loading="lazy"
alt="image-20221217132504544"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>分析：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>排班效益最佳(optimal)，即Avg waiting/ turnaround time最小&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>說明：Why optimal?&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/tZPVenF.png"
loading="lazy"
alt="image-20221217133256469"
>&lt;/p>
&lt;p>因為Short Job所減少的等待時間必定&amp;gt;= Long-Job所增加的等待時間，因為平均等待時間會最小&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>不公平，偏好short Job&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>可能會Starvation(for long Job)&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可以分成&lt;/p>
&lt;blockquote>
&lt;p>Non-preemptive &amp;mdash;&amp;gt; SJF做代表&lt;/p>
&lt;p>Preemptive &amp;mdash;&amp;gt; 另外&lt;strong>叫做SRTF法則&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>較不適合用在Short-term scheduler(比較不恰當啦，但你要用也是可，因為Short-term scheduler執行頻率太高，所以很難在極短的時間間隔內去預估出精確的CPU Burst time for each process 且排出最小值，不易真正呈現出SJF之行為，反倒是&lt;strong>適合用long-term scheduler&lt;/strong>&lt;/p>
&lt;p>&lt;code>Short time scheduler是指專門負責處理短暫的工作的計劃程序。這些工作通常會在短短的時間內完成，並且有許多工作要求同時進行。在這種情況下，使用short job first（SJF）法則來處理工作可能不是最佳選擇。這是因為SJF法則是基於工作預計完成時間的，並假設工作的預計完成時間是可以預先知道的。但是，在short time scheduler中，大多數工作的預計完成時間都是未知的，因此無法準確地應用SJF法則。另一個原因是，SJF法則會將短工作放在優先執行的位置，因此會把許多短工作排在一起。在short time scheduler中，這可能會導致許多短工作之間的競爭，從而導致效率降低。總的來說，short time scheduler更適合使用其他計劃策略，例如基於先進先出（FIFO）或基於最短剩餘時間（SRT）的策略，來處理短暫的工作。)&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>如何評估process之the next cpu burst time?&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>公式(加權指數平均公式)&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/oysceoz.png"
loading="lazy"
alt="image-20221217153209006"
>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>t0&lt;/th>
&lt;th>t1&lt;/th>
&lt;th>t2&lt;/th>
&lt;th>t3&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>實際值&lt;/td>
&lt;td>20&lt;/td>
&lt;td>10&lt;/td>
&lt;td>40&lt;/td>
&lt;td>20&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>預估值&lt;/td>
&lt;td>&lt;strong>20&lt;/strong>(一開始還沒預估，所以都是抓t0的值)&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>?&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>T0&lt;/td>
&lt;td>T1&lt;/td>
&lt;td>T2&lt;/td>
&lt;td>T3&lt;/td>
&lt;td>T4&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;img src="https://i.imgur.com/8wvBUc8.png"
loading="lazy"
alt="image-20221217154217150"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>意義:　&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/Gx7aClO.png"
loading="lazy"
alt="image-20221217160852665"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h3 id="srtfsrjfsrtn-shortest-remaining-time-job-firstnext">SRTF,SRJF,SRTN( Shortest Remaining-Time Job First(Next))&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>定義：&lt;strong>即為Preemptive-SJF法則&lt;/strong>，即剩餘CPU Burst Time(CPU完成一次短時間工作所需的時間)最小的 Process，取得CPU。也就是若新到達的Process其CPU Burst TIme 小於目前執行中process剩下的CPU time, 則新到達之Process可以**插隊(preemption)**執行。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>舉例：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Process&lt;/th>
&lt;th>到達時間&lt;/th>
&lt;th>CPU Time&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>P1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>8&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P2&lt;/td>
&lt;td>1&lt;/td>
&lt;td>4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P3&lt;/td>
&lt;td>2&lt;/td>
&lt;td>9&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P4&lt;/td>
&lt;td>3&lt;/td>
&lt;td>5&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>求Avg waiting Time for&lt;/p>
&lt;ol>
&lt;li>
&lt;p>SRTF&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/enr3uhw.png"
loading="lazy"
alt="image-20221217234802588"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>SJF(不可插隊)&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/mMRP8xo.png"
loading="lazy"
alt="image-20221217235757038"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>FIFO&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/rVUHVGE.png"
loading="lazy"
alt="image-20221217235808248"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>分析：&lt;/p>
&lt;ol>
&lt;li>與SJF相比，SRTF之平均waiting/Turnaround time會比較小(SRTF是SJF的一個子類，因為SRTF&lt;strong>可插隊&lt;/strong>，所以會有最小的waiting time, 但是付出較大的Context Switching的overhead(負擔)&lt;/li>
&lt;li>不公平，偏好Short remaining-time Job&lt;/li>
&lt;li>會有Starvation的問題&lt;/li>
&lt;li>Preemptive法則&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h3 id="priority法則">Priority法則&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>定義：&lt;strong>可參數化的法則&lt;/strong>，具有Highest Priority之Process，優先取得CPU，若多個Process權值相同，則以&lt;strong>FIFO&lt;/strong>為準，也有分成Non-preemptive, Preemptive的差異。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>舉例：不可插隊&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Process&lt;/th>
&lt;th>CPU time&lt;/th>
&lt;th>Priority No.&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>P1&lt;/td>
&lt;td>10&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P2&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P3&lt;/td>
&lt;td>2&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P4&lt;/td>
&lt;td>1&lt;/td>
&lt;td>4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P5&lt;/td>
&lt;td>5&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>且，Priority No越小，優先權越大The Smaller Priority No. Implies the higher priority。求Avg waiting Time&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>分析：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>是一個具參數化的法則，即給予不同的priority高低定義，可展現出不同的排班行為。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Priority定義&lt;/th>
&lt;th>行為&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>抵達時間越早，優先權更高&lt;/td>
&lt;td>FIFO&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CPU　Time越小，優先權越高&lt;/td>
&lt;td>SJF&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>剩餘時間越小，優先權越高&lt;/td>
&lt;td>SRTF&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>因此FIFO, SJF, SRTF都是屬於Priority的一種&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不公平&lt;/p>
&lt;/li>
&lt;li>
&lt;p>會有Starvation (可用Aging去解決)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>分為Non-preemptive, preemptive兩種&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h3 id="rrround-robin法則考試重點">RR(Round Robin)法則(考試重點)&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>定義：&lt;strong>Time-Sharing System採用&lt;/strong>，OS會規定一個CPU time Quantun(or Slice)，當Process取得CPU執行後，若未能在此Quantum內完成工作，則Timer會發出&amp;quot;Time-out&amp;rdquo; interrupt通知OS，OS會&lt;strong>強迫&lt;/strong>此process放掉CPU，且回到ready queue中，等待下一輪再取得CPU執行，每一輪之中，process是以FIFO排隊方式取得CPU&lt;/p>
&lt;/li>
&lt;li>
&lt;p>舉例1：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Process&lt;/th>
&lt;th>Cpu time&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>P1&lt;/td>
&lt;td>8&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P2&lt;/td>
&lt;td>4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P3&lt;/td>
&lt;td>9&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P4&lt;/td>
&lt;td>5&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>到達時間皆為0，順序是P1~P4, 使用RR(Quantum=4), 求Avg waiting time&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/RLPckKA.png"
loading="lazy"
alt="image-20221218124859568"
>&lt;/p>
&lt;p>舉例2:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Process&lt;/th>
&lt;th>Arrival Time&lt;/th>
&lt;th>Cpu Time&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>P1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>10&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P2&lt;/td>
&lt;td>2&lt;/td>
&lt;td>5&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P3&lt;/td>
&lt;td>7&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P4&lt;/td>
&lt;td>13&lt;/td>
&lt;td>8&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;img src="https://i.imgur.com/enClm5v.png"
loading="lazy"
alt="image-20221218130748491"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>舉例3:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Process&lt;/th>
&lt;th>Arrival time&lt;/th>
&lt;th>行為&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>P1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>5CPU+6I/O+4CPU&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P2&lt;/td>
&lt;td>3&lt;/td>
&lt;td>15CPU&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P3&lt;/td>
&lt;td>8&lt;/td>
&lt;td>3CPU+10I/O+9CPU&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P4&lt;/td>
&lt;td>14&lt;/td>
&lt;td>8CPU&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Quantum= 5，問turnaound time ? waiting time ?&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/l8iAsbF.png"
loading="lazy"
alt="image-20221218200907489"
>&lt;/p>
&lt;ul>
&lt;li>注意：有些題目是&lt;strong>有爭議的&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>​ eg.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Process&lt;/th>
&lt;th>到達&lt;/th>
&lt;th>CPU time&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>P1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>6&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P2&lt;/td>
&lt;td>4&lt;/td>
&lt;td>9&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P3&lt;/td>
&lt;td>8&lt;/td>
&lt;td>6&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>​ 採RR(Q=4)&lt;/p>
&lt;p>​ &lt;img src="https://i.imgur.com/n0mJ6DI.png"
loading="lazy"
alt="image-20221218201710742"
>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>分析：&lt;/p>
&lt;ol>
&lt;li>Time-sharing System 採用&lt;/li>
&lt;li>也是一個可參數化的法則(ie. Quantum)&lt;/li>
&lt;li>公平&lt;/li>
&lt;li>No starvation&lt;/li>
&lt;li>preemptive法則(Real-Time, Time-Sharing適用，RR超過Quantum time後會&lt;strong>被迫&lt;/strong>回到ready&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>舉例2&lt;/p>
&lt;p>Quantum=∞&lt;/p>
&lt;p>則RR會變成&lt;strong>FIFO&lt;/strong>法則&amp;mdash;&amp;gt; 排班效能很差&lt;/p>
&lt;p>注意：也因此，FIFO屬於RR的一種&lt;/p>
&lt;/li>
&lt;li>
&lt;p>舉例3&lt;/p>
&lt;p>Quantum =極小值&lt;/p>
&lt;p>則Context Switching太頻繁，CPU Utilization會很低&lt;/p>
&lt;p>依經驗法則，若Quantum值能讓**80%**的Job在Quantum內完成，效能較佳。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>補充：RR雖然是公平的，但也可支持差異化(優先權差異)之實現，How do you achieve this?&lt;/p>
&lt;p>Ans.&lt;/p>
&lt;ol>
&lt;li>針對高優先權Process在ready Queue中&lt;strong>置入多個PCB pointer 指向此Process&lt;/strong>，使得每一輪當中，它有多次取得CPU之機會&lt;/li>
&lt;li>針對&lt;strong>高優先權Process給予較大的Time Quantum&lt;/strong>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h3 id="multilevel-queues多層佇列法則">MultiLevel Queues(多層佇列)法則&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>定義：&lt;/p>
&lt;ol>
&lt;li>將原本單一一條ready queue變成多條ready queues且高、低優先權不同&lt;/li>
&lt;li>Queues之間的排班法則，通常採取&lt;strong>Preemptive and Priority&lt;/strong>法則&lt;/li>
&lt;li>每個Queue 可以有自己的排班法則 eg. RR&lt;/li>
&lt;li>Process一旦被置入於某個Queue中，&lt;strong>就不可(不允許)在不同ready queues之間移動&lt;/strong>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>舉例：I/O-Bound與CPU-Bound Job你會置於哪個Queue中?&lt;/p>
&lt;p>Ans：&lt;strong>I/O-Bound Job &amp;mdash;&amp;gt;Q1&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>​ 　　　&lt;strong>CPU-Bound Job &amp;mdash;&amp;gt;Q3&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>分析：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>可參數化的項目眾多&lt;/strong>&lt;code>1. Queue的數目 2. Queue之間的排班法則 3. 每個Queue自己的排班法則 4. Process被放入哪個Queue之Criteria &lt;/code>，有助於排班設計及效能調校之Flexibility&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>不公平&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>有&lt;strong>Starvation(被放在Q3 的Process永世不得翻身，因為Process一旦被置入於某個Queue中，就不可(不允許)在不同ready queues之間移動☆☆☆☆☆&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Preemptive&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h3 id="multilevel-feedback-queuesmfqs多層回饋佇列">MultiLevel Feedback Queues(MFQs)(多層回饋佇列)&lt;/h3>
&lt;ul>
&lt;li>定義：與MultiLevel Queue相似，&lt;strong>差別：允許Process 在不同Queues 之間移動，可採取類似Aging技術&lt;/strong>，甚至可以搭配降級的做法，來&lt;strong>避免Starvation&lt;/strong>&lt;/li>
&lt;li>分析：
&lt;ol>
&lt;li>&lt;strong>可參數化的項目眾多&lt;/strong>&lt;code>1. Queue的數目 2. Queue之間的排班法則 3. 每個Queue自己的排班法則 4. Process被放入哪個Queue之Criteria 5.Process在不同佇列之間移動的規則&lt;/code>，有助於排班設計及效能調校之Flexibility&lt;/li>
&lt;li>&lt;strong>不公平&lt;/strong>&lt;/li>
&lt;li>不會有&lt;strong>Starvation(被放在Q3 的Process永世不得翻身，因為Process一旦被置入於某個Queue中，就不可(不允許)在不同ready queues之間移動☆☆☆☆☆&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Preemptive&lt;/strong>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h3 id="小結">小結&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>哪些是Non-preemptive法則&lt;/p>
&lt;p>Ans. FIFO,SJF,SRTF, Non-preemptive priority&lt;/p>
&lt;/li>
&lt;li>
&lt;p>哪些是No Starvation&lt;/p>
&lt;p>Ans. FIFO, RR, MFQs&lt;/p>
&lt;/li>
&lt;li>
&lt;p>哪些包含於(∊)關係是錯的&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>​ A. FIFO ∊ Priority&lt;/p>
&lt;p>​ B. SJF ∊ Priority&lt;/p>
&lt;p>​ C. FIFO ∊ RR&lt;/p>
&lt;p>​ D. SJF ∊ RR&lt;/p>
&lt;p>​ E. RR ∊ MFQs &lt;code>是喔，MFQs的參數可以設定成一條Queue&lt;/code>&lt;/p>
&lt;p>​ Ans. (D)&lt;/p>
&lt;h3 id="補充-cpu-utilization計算">補充 CPU Utilization計算&lt;/h3>
&lt;p>例1.&lt;/p>
&lt;p>假設採RR排班&lt;/p>
&lt;p>Time Quantum值= &lt;strong>Q&lt;/strong>&lt;/p>
&lt;p>Context Switch Time = S&lt;/p>
&lt;p>Process 平均執行每隔&lt;strong>T&lt;/strong>時間會發出I/O-request, 求下列Case之CPU Utilization&lt;code>(cpu花在Process exec time / CPU **total time(process exec time + context switching time+ idle time)** )&lt;/code>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>0 &amp;lt; S &amp;lt; T &amp;laquo;Q&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/mGdVm6a.png"
loading="lazy"
alt="image-20221219205831174"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>0&amp;lt;S&amp;lt;Q&amp;laquo;T&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>​ &lt;img src="https://i.imgur.com/QyGgbtd.png"
loading="lazy"
alt="image-20221219210325226"
>&lt;/p>
&lt;ol start="3">
&lt;li>
&lt;p>0&amp;lt;S=Q &amp;laquo;T&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/9ZIQrps.png"
loading="lazy"
alt="image-20221219211653789"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Q非常小&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/vmguH7P.png"
loading="lazy"
alt="image-20221219211707198"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>例2. [恐] (看不懂)&lt;/p>
&lt;p>10個I/O-Bound Tasks(很花I/O)&lt;/p>
&lt;p>1 個CPU-Bound Tasks(很花CPU)&lt;/p>
&lt;p>I/O-Bound task執行每隔1ms 發出 I/O-request，每個I/O-運作花10ms&lt;/p>
&lt;p>Context Switching Time = 0.1 ms, 求CPU utilization, 採&lt;strong>RR&lt;/strong>法則&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Quantum = 1ms&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/DW7jDRF.png"
loading="lazy"
alt="image-20221219215757814"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Quantum = 10ms&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/qr7YiH4.png"
loading="lazy"
alt="image-20221219220609086"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>​ 寫完之後會發現有個info沒有用到「每個I/O-運作花10ms 」，因為有CPU-Bound的存在，所以不存在idle Time，如果不存在CPU-Bound，則可能存在idle的情形，就需要考慮這種情形&lt;/p>
&lt;h2 id="特殊系統之排班設計考量">特殊系統之排班設計考量&lt;/h2>
&lt;h3 id="multiprocessors-system-1">Multiprocessors System&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>Multiprocessors分為&lt;/p>
&lt;ol>
&lt;li>
&lt;p>ASMP(非對稱的，Master-slave架構) &amp;mdash;&amp;gt; 沒有什麼特殊設計，嘻嘻，因為只有Master這個CPU去看ready queue以及job的assign，所以其實沒啥特殊設計&lt;/p>
&lt;/li>
&lt;li>
&lt;p>SMP(對稱式) &amp;mdash;&amp;gt;&lt;/p>
&lt;ol>
&lt;li>
&lt;p>每個CPU&lt;strong>共享&lt;/strong>同一條Ready Queue，當CPU完成某Process後，就去存取ready Queue，取走一個Process執行。&lt;strong>設計重點：必須提供ready queue的互斥存取機制，若未提供，則可能發生Process重複執行或Process被ignored(無人執行)之錯誤&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/DSHiQrv.png"
loading="lazy"
alt="image-20221220225037817"
>&lt;/p>
&lt;p>例如：CPU去取得Process之工作如下&lt;/p>
&lt;ol>
&lt;li>取得(read) Ready Queue, Frond End的process之PCB Pointer&lt;/li>
&lt;li>刪除此Process Pointer from Queue&lt;/li>
&lt;/ol>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>CPU1&lt;/th>
&lt;th>CPU2&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>T1: step1: 取得P1 PCB pointer&lt;/td>
&lt;td>T2:step1取得P1 PCB pointer&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>T3: Dequeue執行&lt;/td>
&lt;td>T4: Dequeue執行&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>設計重點：&lt;/p>
&lt;ol>
&lt;li>必須提供ready Queue的互斥存取機制&lt;/li>
&lt;li>不須考量Load Balancing&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>每個CPU有&lt;strong>自己&lt;/strong>的Ready Queue&lt;/p>
&lt;p>每個CPU只會檢查自己的ready Queue, 有工作就執行，無工作就idle&lt;/p>
&lt;p>設計重點：&lt;/p>
&lt;ol>
&lt;li>不須有互斥存取的考量，一旦發生idle，則把其他CPU的queue調整過來&lt;/li>
&lt;li>需考量Load Balancing，避免有CPU沒事，有CPU很忙。通常使用兩種機制來調整CPU Loading
&lt;ol>
&lt;li>Push migration(移轉)&lt;/li>
&lt;li>Pull migration(移轉)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h3 id="processor-affinity">Processor affinity&lt;/h3>
&lt;ul>
&lt;li>定義：在multiprocessors system中，當process已決定某CPU上執行，則在他執行過程當中，盡&lt;strong>量不要將之移轉到其他CPU上執行&lt;/strong>(除非有其必要，eg. processor BAD, load Balancing, etc)避免CPU內之cache等內容要複製，且刪除，影響到效能表現，可以有
&lt;ol>
&lt;li>Hard affinity：規定process不可移轉&lt;/li>
&lt;li>Soft affinity：盡可能不轉，但不強制限制，若有需要還是可以轉&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h2 id="real-time-system排班設計考量">Real-Time System排班設計考量&lt;/h2>
&lt;h3 id="hard-real-time-system-1">Hard real-time system&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>排班設計考量&lt;/p>
&lt;p>Step&lt;/p>
&lt;ol>
&lt;li>
&lt;p>先確定這些工作是否schedulable(可排程化，CPU可以負荷的了)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>確定可schedulable後，然後在考慮是否可以滿足各工作的DeadLine&lt;/p>
&lt;p>兩個排班法則&lt;/p>
&lt;ol>
&lt;li>Rate-Montonic scheduling&lt;/li>
&lt;li>EDF(Earliest Deadline First)法則&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Schedulable與否之判斷公式：&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/YGIRHX0.png"
loading="lazy"
alt="image-20221221220452472"
>&lt;/p>
&lt;p>例：有下列4個Real-time event. 其CPU burst time,Period Time 分別是：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>CPU Burst Time&lt;/th>
&lt;th>Period Time&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>20ms&lt;/td>
&lt;td>80ms&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>50ms&lt;/td>
&lt;td>100ms&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>30ms&lt;/td>
&lt;td>30ms&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Xms&lt;/td>
&lt;td>1Sec&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>，則在Schedulable要求下，x不可超過?ms&lt;/p>
&lt;p>Ans&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/Uz4llsU.png"
loading="lazy"
alt="image-20221221222752875"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>怎麼排程以滿足個工作DeadLine after Schedulable?&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Rate-Monotonic法則&lt;/p>
&lt;ol>
&lt;li>
&lt;p>採取Static priority(一旦process的優先權高低順序訂定了，就不會再改變) 且 preemptive 法則&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Period Time愈小，優先權越高&lt;/p>
&lt;/li>
&lt;li>
&lt;p>舉例&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Process&lt;/th>
&lt;th>Period Time&lt;/th>
&lt;th>CPU time&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>P1&lt;/td>
&lt;td>50&lt;/td>
&lt;td>20&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P2&lt;/td>
&lt;td>100&lt;/td>
&lt;td>35&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Q1. schedulable與否?&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/b4Hvzog.png"
loading="lazy"
alt="image-20221221233303344"
>&lt;/p>
&lt;p>Q2. 若規定P2的優先高，且preemptive, 這樣是否滿足DeadLine?&lt;code>這題感覺怪怪的，不懂&lt;/code>&lt;/p>
&lt;p>​ &lt;img src="https://i.imgur.com/kspYKY2.png"
loading="lazy"
alt="image-20221222001538807"
>&lt;/p>
&lt;p>Q3. 採用Rate-Monotonic, 是否滿足Deadline?&lt;/p>
&lt;p>​ &lt;img src="https://i.imgur.com/W1WG2Gm.png"
loading="lazy"
alt="image-20221222001627140"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>分析：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>並不保證可以滿足DeadLine&lt;/strong>&lt;/li>
&lt;li>&lt;strong>在Static priority要求下，它是Optimal(若它無法滿足DeadLine,其他Static priority 法則也是無法滿足&lt;/strong>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>EDF(Earliest Deadline First)&lt;/p>
&lt;ul>
&lt;li>
&lt;p>定義：採用Dynamic priority 且Preemptive&lt;/p>
&lt;/li>
&lt;li>
&lt;p>規定：DeadLine越小(早)優先權越高&lt;/p>
&lt;/li>
&lt;li>
&lt;p>舉例：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Process&lt;/th>
&lt;th>Period&lt;/th>
&lt;th>CPU Time&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>P1&lt;/td>
&lt;td>50&lt;/td>
&lt;td>25&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P2&lt;/td>
&lt;td>80&lt;/td>
&lt;td>35&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>是否滿足Deadline?&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Rate-Monotonic&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/37nWeoT.png"
loading="lazy"
alt="image-20221222222736843"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>EDF&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/RMT98Qy.png"
loading="lazy"
alt="image-20221222231738347"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>分析：&lt;/p>
&lt;ol>
&lt;li>EDF保證是optimal in the schedulable case(任何工作都可以滿足 DeadLine)&lt;/li>
&lt;li>理論上，CPU utilization 可達100%，&lt;strong>但實際上不可能&lt;/strong>，因為有Context switching, interrupt handling 等額外負擔&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="soft-real-time-system-1">Soft real-time system&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>定義：這個系統要確保real-time的process取得最高優先權，同時，這個real-time的process priority不能做衰減&lt;/p>
&lt;/li>
&lt;li>
&lt;p>就CPU Scheduling Design 而言，必須&lt;/p>
&lt;ol>
&lt;li>支援preemptive-priority&lt;/li>
&lt;li>不支援Aging技術&lt;/li>
&lt;li>盡可能降低Kernel Dispatch latency time, 使得real-time process可以及早開工&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>降低kernel Dispatch latency&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>困難度(緣由) ：&lt;strong>大部分的OS，皆不允許當kernel正在執行System Call or 其他System processes時，被user process任意插隊(preemption)，目的是為了確保kernel Data Structures的正確性(即不要有Race Condition)，然而此種做法，對於Soft real-time system極為不利&lt;/strong>&lt;/p>
&lt;p>eg. 假設目前kernel 正在執行一個Long-time system call(eg. I/O operation)，而此時real-time process到達/fork(),它必須等到kernel完成此long-time system call後，才能取得CPU，&lt;strong>所以&lt;/strong>&lt;/p>
&lt;p>&lt;strong>Dispache latency太長，要解決此一問題，原則是: 必須插隊kernel 且要保障kernel Data Structure之正確性&lt;/strong>&lt;/p>
&lt;p>方法&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Preemption Point：&lt;/p>
&lt;ul>
&lt;li>定義：在此System calls code中，加入一些Preemption Point(在此時點插隊時，Kernel是安全的)將來，&lt;strong>System call執行時若遇到Preemption Point ，System call會先暫停，Kernel會檢查此時是否還有real-time process存在/到達，若有，則Kernel system call暫停執行，CPU分派給real-time Process使用&lt;/strong>，若無，則System Call繼續執行，直到遇見下一個Preemption Point&lt;/li>
&lt;li>缺點：System Call中可以加入的Preemption Point數目不夠多，因為Dispatch Latency仍然很長。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Kernel可隨時被real-time process插隊，但要對於Kernel的共享Data Structure/resoruce提供嚴謹的互斥存取(Synchronization 機制)，以確保資料之正確性(當P1對某個Data進行操作，執行到一半時被real-time process給搶走，此時會把該Data給Lock住，不讓real-time process操作該Data，以保護資料)&lt;/p>
&lt;ul>
&lt;li>
&lt;p>缺點：可能造成Priority Inversion問題(優先權反轉)，高優先權的Process所須的共享Data/resources恰好被一些低優先權的Process&lt;u>把持&lt;/u>，無法存取(所以互斥存取控制之故)，造成高優先權等待低優先權Process之情況(即高process要等低process釋放這些共享Data/resource)&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/tJ80NeW.png"
loading="lazy"
alt="image-20221225000043643"
>&lt;/p>
&lt;p>當高優先權的Process因為遲遲等不到Lock解除，會因為time-out的關係而放棄CPU，此時可能有其他中優先權的Process取得CPU的使用權，因此低優先權的Process完成不了，進而完成對共享Data/resources之使用進而Release, 所以高優先權process被迫要等一段很久的時間&lt;/p>
&lt;/li>
&lt;li>
&lt;p>解決方法：Priority Inheritance&lt;/p>
&lt;ul>
&lt;li>定義：讓低優先權的Process暫時&lt;strong>繼承&lt;/strong>高優先權之權值，使得低優先權Process可以很快取得CPU完成對共享Data/Resouce之使用，並release them. 同時，也立刻恢復其原本的低權值&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h3 id="real-time-system之dispatch-latency-組成">Real-time system之Dispatch Latency 組成&lt;/h3>
&lt;p>&lt;img src="https://hoxtonhsu.com/C:%5cUsers%5cza546%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20221225005405637.png"
loading="lazy"
alt="image-20221225005405637"
>&lt;/p>
&lt;p>Dispatch Latency有兩個phase組成&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Conflict Phase：&lt;/strong>
&lt;ol>
&lt;li>&lt;strong>Preempts kernel&lt;/strong>&lt;/li>
&lt;li>&lt;strong>低優先權realse高優先權所需之Data/resource&lt;/strong>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;strong>Dispatch Phase&lt;/strong>
&lt;ol>
&lt;li>&lt;strong>Context Switching&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Change mode to user Mode&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Jump&lt;/strong>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h2 id="thread-management貝多芬">Thread Management(貝多芬)&lt;/h2>
&lt;blockquote>
&lt;p>Thread( or Multithreading)定義、優點&lt;/p>
&lt;p>Process(Single-Threaded) vs Thread (Multithreading)&lt;/p>
&lt;p>user-level thread 與 kernel-level thread&lt;/p>
&lt;p>Multithreading Model(3種)&lt;/p>
&lt;p>Multithreading issue&lt;/p>
&lt;blockquote>
&lt;p>fork()&lt;/p>
&lt;p>signal delivery&lt;/p>
&lt;p>Threads pool&lt;/p>
&lt;/blockquote>
&lt;p>程式追蹤(PThread library)&lt;/p>
&lt;/blockquote>
&lt;h3 id="thread">Thread&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>定義：又叫lightweight-process(傳統的process就叫heavyweight process)，是OS&lt;strong>分配CPU time&lt;/strong> 之對象單位**(恐：It&amp;rsquo;s a basic unit of CPU Library)**&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Thread 建立後，其私有的(private)內容組成包含有(都是與執行相關的)&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Programming Counter&lt;/strong>&lt;/li>
&lt;li>&lt;strong>CPU registers value&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Stack&lt;/strong>&lt;/li>
&lt;li>Thread ID, State, etc &amp;hellip;(Note: record in TCB[Thread Control Block])此外，同一個Process內不同之Threads彼此共享此Process的
&lt;ol>
&lt;li>&lt;strong>Code Section(合稱Memory space, address space)&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Data Section(合稱Memory space, address space)&lt;/strong>&lt;/li>
&lt;li>&lt;strong>other OS resources eg. open files, I/O resources ,singal, etc &amp;hellip;&lt;/strong>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>圖示&lt;/p>
&lt;ol>
&lt;li>
&lt;p>MultiThreading Model&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/bJe15zy.png"
loading="lazy"
alt="image-20221225124253929"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Process = Single-Threaded Model&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/gXamqw8.png"
loading="lazy"
alt="image-20221225125053668"
>&lt;/p>
&lt;p>Note: 類比&lt;/p>
&lt;p>Process &amp;mdash;&amp;gt; 汽車&lt;/p>
&lt;p>Thread &amp;mdash;&amp;gt; 引擎&lt;/p>
&lt;p>汽車會有一個引擎，也可以有很多，MutliThread就像是一部車子有多個引擎，然後共享車子有的配件(儀表板、方向盤等等)。CPU Time是以Thread為對象在畫分&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>優點(Benefits)&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Responsiveness&lt;/strong>：當Process內執行中的Thread被Blocked，則CPU可以切給此Process內其他available Threads 執行，&lt;strong>故整個Process不會被Blocked&lt;/strong>，仍持續Going, 所以Multithreading用在user-interactive application, 可增加對User 之回應程度&lt;/li>
&lt;li>&lt;strong>Resource Sharing&lt;/strong>：因為Process內之多條Threads 共享此Process code section，所以在同一個Memory space上可有多個工作同時執行&lt;/li>
&lt;li>&lt;strong>Economy&lt;/strong>：因為同一個Process內之不同Threads彼此共享此Process的memory 及 other OS resources, 因為&lt;strong>Thread 之 私有成分量&lt;/strong>少，故&lt;strong>Thread之Creation, Context Switching fast, Thread management cost is cheap&lt;/strong>(fork一個Process的成本遠大於複製一個Thread)&lt;/li>
&lt;li>&lt;strong>Scalability(Utilization of Multiprocessors Architecture)&lt;/strong>：可以做到同一個Process內之不同Threads可以在不同CPUs上平行執行，所以可以增加對Multiprocessors System之效益(平行程度)提升&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h3 id="process-vs-thread">Process Vs Thread&lt;/h3>
&lt;blockquote>
&lt;p>其實是在比Singal Thread and MultiThread&lt;/p>
&lt;/blockquote>
&lt;p>Thread的的優點&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Process&lt;/th>
&lt;th>Thread&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Heavyweight process&lt;/td>
&lt;td>Lightweight process&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Single-Threaded Model&lt;/td>
&lt;td>MultiThreading Model&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>是OS分配Resource之對象單位&lt;/td>
&lt;td>是OS分配CPU Time之對象單位&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>不同的Process不會有共享的Memory及Other Resources (除了Shared Memory溝通之外)&lt;/td>
&lt;td>同一個Process內之Threads彼此共享此Process之memory 及Other Resources&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>若Process內的single Thread is Blocked, 則整個Process亦Blocked&lt;/td>
&lt;td>只要Process內尚有Available Thread可執行，則整個Process不會被Blocked&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Process之Creation context Switching慢，管理成本高&lt;/td>
&lt;td>Thread快，成本低&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>對於MultiProcessors架構之效益發揮較差&lt;/td>
&lt;td>較佳&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Thread的的缺點&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Process&lt;/th>
&lt;th>Thread&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Process無此議題(除非是採用Shared Memory溝通)&lt;/td>
&lt;td>因為同一個Process內之Threads彼此共享此process Data Section，因此必須對共享的Data 提供互斥存取機制，防止race Condition&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="philosophy">Philosophy&lt;/h3>
&lt;p>&lt;strong>Process與Thread沒有功能差異，只有效能差異&lt;/strong>(你會的，我也可以，你不會的，我也不會)。&lt;/p>
&lt;p>哪些工作適合用MultiThreads?&lt;/p>
&lt;p>Ans. &lt;strong>一個時間點有多個工作要執行。例：Client-server Model(同時有人過來要檔案，看檔案)&lt;/strong>&lt;/p>
&lt;p>哪些工作不適合用MultiThreads?&lt;/p>
&lt;p>Ans. 一個時間點最多只有一個工作可以做。例：命令解譯器(eg. UNIX 之 Shell)&lt;/p>
&lt;h2 id="thread分類user-thread與kernel-thread">Thread分類：user-Thread與Kernel-Thread&lt;/h2>
&lt;p>區分角度：**Thread Management工作(如：Thread Creation, Destroy, Suspend, wakeup, Scheduling, Context Switching, etc)**由誰負責&lt;/p>
&lt;ol>
&lt;li>
&lt;p>User-Level Thread&lt;/p>
&lt;ul>
&lt;li>定義：Thread Management是由在User Site之Thread Library提供APIs, 供User Process呼叫使用，進而管理，稱之&lt;/li>
&lt;li>Kernel 完全不知道(is Unaware of) Use-Level Threads 之存在Note：只知有Process(Singal-Threaded)&lt;img src="https://i.imgur.com/E6QHraV.png"
loading="lazy"
alt="image-20221227215115098"
>&lt;/li>
&lt;li>Thread management不須Kernel介入干預**(kernel unware user-thread)**&lt;/li>
&lt;li>優點：There creation, context switching 等，Management is fast 成本較低&lt;/li>
&lt;li>缺點：
&lt;ol>
&lt;li>當Process內某條執行中的user-thread is blocked(eg. i/o)，會導致整個Process亦被Blocked(即使process內還有其他available threads)&lt;code>這個process都是user Thread，發出一個blocking的system call, kernel會認為是這個Single process發出的請求，因為kernel不知道process裡頭還有其他user Thread的存在，於是就把整個process block住，CPU切到其他process去執行&lt;/code>&lt;/li>
&lt;li>&lt;strong>MultiProcessors架構效益發揮較差&lt;/strong>(因為無法做到process內之多條user-threads平行執行，但這樣也是有好處的，整個thread的管理不需要kernel的干預，不需要再user, kernel間切換，降低管理的成本)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>例：舉凡Thread library皆是user-threads(eg. POSIX 的 PThread library&lt;code>是規格，只在UNIX系統上&lt;/code>, Mach的C-Thread Library, Solaris2以上的 UI Thread Library及Green Thread Library).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Kernel-Level Thread&lt;/p>
&lt;ul>
&lt;li>
&lt;p>定義：Thread Management完全由kernel負責，Kernel知道每一條Thread之存在並進行管理&lt;/p>
&lt;/li>
&lt;li>
&lt;p>優缺點與user-thread相反&lt;/p>
&lt;/li>
&lt;li>
&lt;p>例：大部分OS皆支援 (Windos系列 etc. 2000, Xp, UNIX, LINUX, Solaris)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>舉例：[Module版]&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/3WceJA7.png"
loading="lazy"
alt="image-20221227221417715"
>&lt;/p>
&lt;ul>
&lt;li>CPU Time依分配對象數，平均分配(10個人就分10%，20個人就分5%)&lt;/li>
&lt;li>則Pa, Pb各分到?%CPU Time，if All Threads are
&lt;ol>
&lt;li>User Thread：kernel只知道有兩個Process要來搶CPU，來分CPU Time，Pa,Pb各分50%&lt;/li>
&lt;li>Kernel Thread：kernel知道有5條Thread要分CPU time，1條分20%，Pa分到3條，所以是60%, Pb是40%&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="multithreading-model-恐龍本獨有">MultiThreading Model [恐龍本獨有]&lt;/h2>
&lt;p>恐龍本用來詮釋user Thread跟Kernel Thread的見解&lt;/p>
&lt;p>[user thread mapping kernel thread的數目]&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>Many-to-One Model&lt;/li>
&lt;li>One-to-One Model&lt;/li>
&lt;li>Many-to-Many Model&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;ol>
&lt;li>Many-to-One&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/xsaND6K.png"
loading="lazy"
alt="image-20221228220250841"
>&lt;/p>
&lt;ul>
&lt;li>定義：This model maps &lt;strong>many&lt;/strong> use threads to one kernel Thread. Thread Management is done in &lt;strong>use space&lt;/strong>&lt;/li>
&lt;li>優、缺點：如同user thread&lt;/li>
&lt;li>例：thread library皆是&lt;/li>
&lt;li>圖示：&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/sqCg5Xc.png"
loading="lazy"
alt="image-20221228220049555"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/lhpbH4A.png"
loading="lazy"
alt="image-20221229212527117"
>&lt;/p>
&lt;ol start="2">
&lt;li>One-to-One Model&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>定義：This model maps &lt;strong>each&lt;/strong> use Threads to &lt;strong>a&lt;/strong> kernel Thread. Thread Management is done in &lt;strong>use space&lt;/strong>&lt;/li>
&lt;li>優點：同kernel thread&lt;/li>
&lt;li>缺點：
&lt;ol>
&lt;li>Slower&lt;/li>
&lt;li>Process每建立一條user-thread, system就必須配合生一條kernel thread與之，所以user thread數目眾多，系統負擔會很重，耗資源&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>例：Window NT, Window2000, OS/2, &lt;strong>Linux&lt;/strong>(個人電腦系列幾乎都是ONE-TO-ONE)&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/IGGT876.png"
loading="lazy"
alt="image-20221229220124154"
>&lt;/p>
&lt;ol start="3">
&lt;li>Many to Many&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>定義：This model maps &lt;strong>many&lt;/strong> use Threads to &lt;strong>a small or equal number of&lt;/strong> kernel Thread. Thread Management is done in &lt;strong>use space&lt;/strong>&lt;/li>
&lt;li>優點：同前述kernel thread, 負擔也不像one to one的model來的重&lt;/li>
&lt;li>缺點：1. slower 2. 製作設計上，較為複雜&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/suqnx3Q.png"
loading="lazy"
alt="image-20221229222340644"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/9IyKGLf.png"
loading="lazy"
alt="image-20221229224155328"
>&lt;/p>
&lt;h2 id="multithreading-issue">MultiThreading Issue&lt;/h2>
&lt;p>原本Single Thread沒這問題&lt;/p>
&lt;ol>
&lt;li>fork() issue&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/7BGxfOx.png"
loading="lazy"
alt="image-20221229230232766"
>&lt;/p>
&lt;ol start="2">
&lt;li>
&lt;p>Signal delivery(傳送) issue&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Signal：it is used in UNIX to notify(通知) the &lt;u>process&lt;/u> that a particular event has occurred&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/yqINM2g.png"
loading="lazy"
alt="image-20221229231422602"
>&lt;/p>
&lt;p>當process收到signal通知後，它必須處理(可由process自己處理或交給default signal handler處理)&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/g1UOlQ6.png"
loading="lazy"
alt="image-20221229232030659"
>&lt;/p>
&lt;ol start="2">
&lt;li>
&lt;p>Signal的種類&lt;/p>
&lt;ol>
&lt;li>Synchronous signal[自作自受，這件事情是由你這個Process發生的，所以Signal就是發給你]eg. Divide-by-zero, illegal memory access,&lt;/li>
&lt;li>Asynchronous signal[池魚之殃，事情不是你做的，但別人發出，卻是砍你] eg. ctrl-c by administrator, time-out by timer&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/gXweQBH.png"
loading="lazy"
alt="image-20221229233929050"
>&lt;/p>
&lt;ol start="3">
&lt;li>
&lt;p>Signal Delivery issue&lt;/p>
&lt;p>4個options&lt;/p>
&lt;ol>
&lt;li>發給那個thread&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/3sQwWIo.png"
loading="lazy"
alt="image-20221230220600034"
>&lt;/p>
&lt;ol start="2">
&lt;li>
&lt;p>發給大家&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/ug5ei8O.png"
loading="lazy"
alt="image-20221230220706683"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>發給一些threads&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/2KO94EM.png"
loading="lazy"
alt="image-20221230220735243"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>發給一個thread，這個thread再把signal轉派給大家&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/sZLZfZc.png"
loading="lazy"
alt="image-20221230220744830"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Threads Pool&lt;/p>
&lt;ul>
&lt;li>緣由：在Client-Server Model中，當Server 收到Client&amp;rsquo;s request後，Server才&lt;strong>建立Thread去服務&lt;/strong>此一請求，然而&lt;strong>Thread creation 仍須耗用一些時間&lt;/strong>，所以對client 之回應&lt;strong>不是那麼迅速&lt;/strong>&lt;/li>
&lt;li>解法：採用Thread pool機制，process(server)先建立一些Threads，置於threads pool中，當收到Client&amp;rsquo;s request後，就從Thread pool中指派一條 available thread去服務此請求，不須creation回應較fast，當此Thread 完成工作以後，再回到Threads pool中Stand By 如果Threads Pool中無可用的Threads，&lt;u>則Client&amp;rsquo;s request 須等待&lt;/u>&lt;/li>
&lt;li>缺點：
&lt;ol>
&lt;li>萬一Process事先生出過多的Threads in the Thread pool, 對System resource耗用很高，&lt;code>Note:通常ＯＳ會限制Threads pool size&lt;/code>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="thread程式追蹤">Thread程式追蹤&lt;/h2>
&lt;p>(以PThread library為例)&lt;/p>
&lt;p>例：P4-49&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;Pthread.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">sum&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nf">runner&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">param&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">sum&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;=&lt;/span>&lt;span class="n">upper&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">sum&lt;/span>&lt;span class="o">+=&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">Pthread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//thraed終止
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="n">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="n">Pthread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">t&lt;/span> &lt;span class="n">tid&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//tid就代表Thread的id
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Pthread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">attr_t&lt;/span> &lt;span class="n">arrt&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//代表attribute屬性 Thread attributes set
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">...&lt;/span>
&lt;span class="n">Pthread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">attr&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">attr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">;&lt;/span>&lt;span class="c1">//取得attr 初始值
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="err">★&lt;/span>&lt;span class="n">Pthread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">tid&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">attr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">runner&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]);&lt;/span> &lt;span class="c1">//根據attr 屬性值建立一條Thread，Id記在tid中，執行runner()副程式
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Pthread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tid&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//main() thread 在此等待，直到tid thread結束
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sum&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/E96wJWE.png"
loading="lazy"
alt="image-20230101163345552"
>&lt;/p>
&lt;p>例：P4-50 程式二&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">pid&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="n">pthread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">t&lt;/span> &lt;span class="n">tid&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">Pthread_arrt_t&lt;/span> &lt;span class="n">attr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">pid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">//create child process
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span> &lt;span class="c1">//子prcess要做的事情
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">pthread_create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">tid&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">attr&lt;/span> &lt;span class="p">,&lt;/span> &lt;span class="n">runner&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//子Process去create一條thread
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//line C
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>&lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">wait&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//line P
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nf">runner&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">pthread_exit&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/RN22I2X.png"
loading="lazy"
alt="image-20230101164807174"
>&lt;/p>
&lt;p>例 p4-70&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">shared by threads
A. static local variables(共享)
B. program text/exec, binary (code sec)共享
C. register value of CPU(私有)
D. heap memory (code+ Data sec memory space)共享
E. Programming Counter (私有)
F. Stack memory(私有)
G. Open Files(共享)
H. I/O resources(共享)
I. local variable(私有)
J. Global variables(共享)
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="chapter-5-deadlock">Chapter 5 DeadLock&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>定義：&lt;strong>成立的四個必要條件&lt;/strong>，例子, &lt;strong>與Starvation做比較&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Deadlock的處理方法&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>Deadlock Prevention ★★★★&lt;/li>
&lt;li>Deadlock Avoidance(Banker&amp;rsquo;s Algo★★★★★)&lt;/li>
&lt;li>Deadlock Detection and Recovery★★&lt;/li>
&lt;li>Ignores it .&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>定理★★★★★：&lt;/p>
&lt;/li>
&lt;li>
&lt;p>相關圖形&lt;/p>
&lt;blockquote>
&lt;p>Resource Allocation Graph(RAG)+3點結論★★★★★&lt;/p>
&lt;p>Claim edgy+RAG(for Avoidance)&lt;/p>
&lt;p>wait for Graph(for Detection)★&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;h2 id="deadlock">DeadLock&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>定義：系統中存在一組Processes彼此形成&lt;strong>循環等待&lt;/strong>之情況，造成這些Processes皆&lt;strong>無法往下執行(和starvation不同，Starvation還有一絲可能會做到)&lt;/strong>，並降低Throughput之現象。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>死結成立的4個必要條件(4 necessary condition)，即缺一個，死結就不會發生. Ex. if there 4 conditions are true, then the deadlock &lt;strong>will&lt;/strong> arise. Ans. &lt;strong>False&lt;/strong>，都有不代表一定會發生&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Mutual Exclusion&lt;/strong>&lt;/p>
&lt;p>互斥性質，&lt;strong>這是對Resource(正在搶奪的資源)而言&lt;/strong>，具有此性質的Resouce，&lt;strong>在任何時間點最多只允許一個Process持有使用&lt;/strong>，不可多個process同時持有/使用。&lt;/p>
&lt;p>例：大多數的資源皆具此性質，eg. CPU, Memory, Disk, printer, etc &amp;hellip;&lt;/p>
&lt;p>例：read-only file：不具互斥性質&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Hold &amp;amp; wait&lt;/strong>&lt;/p>
&lt;p>&lt;strong>持有並等待，Process持有部分資源，且又在等待其他Process持有的資源&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>No preemption&lt;/strong>&lt;/p>
&lt;p>不可搶奪，**Process不可以任意剝奪其他Process所持有的資源，**必須等到對方釋放資源後才有機會取得資源&lt;code>若可Preemption，則必無DeadLock，頂多只有Starvation&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Circular Waiting&lt;/strong>&lt;/p>
&lt;p>循環等待，系統中存在一組Processes形成循環等待之情況，eg.&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/KZA7hIH.png"
loading="lazy"
alt="image-20230102162108560"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>恐龍本：4 implies 2&lt;/p>
&lt;p>其他版本：4 implies 1,2,3eeeee&lt;/p>
&lt;p>ex. Why Singl-process不會造成DeadLock?&lt;/p>
&lt;p>A：因為Circular waiting 不存在，只少要有兩個process才可以形成循環等待，因此四個必要條件有一個不符合，即不會造成DeadLock&lt;/p>
&lt;/li>
&lt;li>
&lt;p>例子：&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/dAckLzV.png"
loading="lazy"
alt="image-20230102163619321"
>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>與Starvatiom比較&lt;/p>
&lt;p>不同點：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>DeadLock&lt;/th>
&lt;th>Starvation&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>一組Processes形成Circular waiting，造成這些Processes皆無法往下執行，&lt;strong>Waiting forever&lt;/strong>&lt;/td>
&lt;td>Process因為長期無法取得完工所需的各式資源，造成它遲遲無法完工，&lt;strong>有完工的機會喔，只是機會渺茫&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>會連帶造成throughput低落&lt;/td>
&lt;td>與throughput高低無關&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>有4個必要條件，其中一定是No preemptive&lt;/td>
&lt;td>容易發生在Preemption的環境(沒有一定，只是容易)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>解法有prevention, Avoidance, Detection &amp;amp; recovery&lt;/td>
&lt;td>採用Aging技術防止&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>相同點：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>DeadLock 7 Starvation&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>皆是資源分配管理機制設計不恰當相關。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="resource-allocation-graphrag">Resource Allocation Graph(R.A.G)&lt;/h2>
&lt;blockquote>
&lt;p>資源分配圖&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>定義：令Ｇ=&amp;lt;V,E&amp;gt; 有向圖代表RAG，其中&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Vertex(頂點)：有兩個類型：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Process：以O來表示&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Resource：以&lt;img src="https://i.imgur.com/EnZNLpN.png"
loading="lazy"
alt="image-20230102171928690"
>表示&lt;/p>
&lt;p>其中&amp;rdquo;·&amp;ldquo;數目代表The Number of instances&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Edge(邊)：分為２種edge：&lt;/p>
&lt;ol>
&lt;li>Allocation Edge：&lt;img src="https://i.imgur.com/dpQ8jWe.png"
loading="lazy"
alt="image-20230102172625471"
>&lt;/li>
&lt;li>Requset Edge：&lt;img src="https://i.imgur.com/8JBHEw8.png"
loading="lazy"
alt="image-20230102172716745"
>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>例子 ：&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/7QY3f61.png"
loading="lazy"
alt="image-20230102173423507"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="rag的三點結論必考">RAG的三點結論☆☆☆☆☆必考&lt;/h2>
&lt;ol>
&lt;li>No Cycle則No DeadLock&lt;/li>
&lt;li>有Cycle&lt;strong>不一定&lt;/strong>有死結 例：&lt;img src="https://i.imgur.com/9d3b4lv.png"
loading="lazy"
alt="image-20230102175224638"
>因為P3一定可以完工，會釋放1個R2, 可佩給P2，此時圖無Cycle，No DeadLock&lt;/li>
&lt;li>除非(若)每一類型的資源，皆為Single instance(單一數量)，則有Cycle必為死結&lt;/li>
&lt;/ol>
&lt;h2 id="deadlock處理方式">DeadLock處理方式&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>DeadLock Prevention&lt;/li>
&lt;li>DeadLock Avoidance(避免) Banker&amp;rsquo;s Algo&lt;/li>
&lt;li>DeadLock Detection &amp;amp; Recovery&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>1.2&lt;/p>
&lt;ul>
&lt;li>
&lt;p>優點：&lt;/p>
&lt;ol>
&lt;li>保證System is Deadlock free (or never enters the deadlock state)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>缺點：&lt;/p>
&lt;ol>
&lt;li>對Resource的使用/取得限制多，因為resource utilization 偏低，連帶throughput 也偏低&lt;/li>
&lt;li>&lt;strong>可能造成Starvation&lt;/strong>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;p>3&lt;/p>
&lt;ul>
&lt;li>優點：
&lt;ol>
&lt;li>Resources utilization相對較高. throughput也連帶較高&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>缺點：
&lt;ol>
&lt;li>System有可能進入DeadLock state&lt;/li>
&lt;li>Detection &amp;amp; Recovery之cost相當高&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h2 id="deadlock-prevention">DeadLock Prevention&lt;/h2>
&lt;ul>
&lt;li>原則：破除4個必要條件之其中一個，則死結必不發生&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>破除 &amp;ldquo;Mutual Exclusion&amp;rdquo; -&amp;gt; 兩個字「&lt;strong>辦不到&lt;/strong>」！因為這是Resource&lt;strong>與生俱來&lt;/strong>(inheritance)的性質&lt;/p>
&lt;/li>
&lt;li>
&lt;p>破除 &amp;ldquo;Hold &amp;amp; wait &amp;quot; - &amp;gt; 兩個方法(protocols)可用，想辦法讓Hold不成立，或是讓Wait不成立&lt;/p>
&lt;ol>
&lt;li>OS實施規定：&lt;strong>除非Process可一次取得全部所需資源，才准許持有資源，否則不得持有任何資源&lt;/strong>，但這樣子會有資源利用度低的問題(明明可用，但卻要等到全部都可以用才可以使用)&lt;/li>
&lt;li>OS實施規定：Process可先持有部分資源，但當Process要申請其他資源時，必須Release持有的全部資源(不再Hold)，才可提出申請。但資源利用率一樣很低，因為有可能會把即將要使用的資源釋放出去&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>破除&amp;quot;No preemption&amp;rdquo;　-&amp;gt; 改為&amp;quot;preemption&amp;rdquo; 即可, eg. based on priority-level&lt;/p>
&lt;/li>
&lt;li>
&lt;p>☆☆☆☆☆破除&amp;quot;Circular waiting&amp;quot; -&amp;gt; 方法叫做&amp;quot;resource ordering&amp;quot; ，&lt;/p>
&lt;ol>
&lt;li>
&lt;p>OS會賦予每一個類型資源一個Unique(唯一的)Resource id&lt;/p>
&lt;/li>
&lt;li>
&lt;p>OS會規定Process必須按照Resource Id Ascending(遞增、遞減都行，你爽就好)的方式對資源提出申請&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>持有的&lt;/th>
&lt;th>欲申請的&lt;/th>
&lt;th>允許或不允許&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>R1&lt;/td>
&lt;td>R3&lt;/td>
&lt;td>允許&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>R5&lt;/td>
&lt;td>R3&lt;/td>
&lt;td>必須先放到R5，才可提R3(因為不符合遞增)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>R1,R5&lt;/td>
&lt;td>R3&lt;/td>
&lt;td>必須先放到R5，才可提R3(因為不符合遞增)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>WHY?&lt;/p>
&lt;p>pf：假設在這樣的規定下，系統仍存在一組Processes形成Circular waiting如下&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/vWfXi5r.png"
loading="lazy"
alt="image-20230103215842475"
>&lt;/p>
&lt;p>依規定，我們可以推導出資源ID大小關係如下&lt;/p>
&lt;p>r0 &amp;lt; r1 &amp;lt; r2 &amp;lt; &amp;hellip; &amp;lt;rn &amp;lt; r0&lt;/p>
&lt;p>竟推出 r0 &amp;lt;r此一矛盾式子，因此Circular waiting必不存在&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h2 id="deadlock-avoidance">Deadlock Avoidance&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>定義：當某個Process提出某些資源申請時，則OS必須執行&lt;strong>Banker&amp;rsquo;s Algorithm&lt;/strong>，以確定&lt;strong>倘若分配給process其申請資源後，System未來處於safe state&lt;/strong>，若Safe則核准其申請，否則(unsage)則否決其申請，process必須等一段時間後，再重提申請。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/TG6PUR9.png"
loading="lazy"
alt="image-20230103223800287"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Deadlock是unsafe之subset&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="bankers-algo-">Banker&amp;rsquo;s Algo ☆☆☆☆☆&lt;/h2>
&lt;p>&lt;code>本章的計算題都在這 Banker's Alog and Safety Algo&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>定義：使用的Data Structures&lt;/p>
&lt;/li>
&lt;li>
&lt;p>看不懂的話直接看下面範例比較快&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">假設
n：process個數
m: resource種類數
1. Request i ：［1..m］of int
-&amp;gt; Pi提出之各式資源申請量
2. Allocation : n*m martrix
-&amp;gt; 各個process目前持有的各式資源數量
3. MAX: n*m martrix
-&amp;gt; 各process完工所需之各式資源最大數量
4. Need：n*m martrix(自己算)
-&amp;gt; 各process尚須(欠)各式資源數量才能完工，因此Need= MAX -Allocation
5. Avaliable：[1..m]of int
-&amp;gt; 系統目前可用的，各式資源數量，因此Available=資源總量-Allocation
舉例說明：假設有人來貸款3,000萬，那麼Requesti =3000萬、Allocation就是自己的存款，假設這邊是2,000萬，想買一棟9,000萬的房子，這9,000萬就是他的MAX，那麼Need= 9,000-2,000= 7,000萬，Available 就是銀行目前金庫裡能借給你的錢，這邊假設是10,000萬。
Step1. Check Request &amp;lt;= Need ?若成立，則往下執行，若不成立，則終止Process。
Request=3,000萬，Need= 7,000萬。這樣就是合理的，但假設你今天需求7,000萬，可是卻貸了3,000兆，遠超於你的需求，那就有問題了
Step2. Check Request &amp;lt;=Available?若成立，則往下執行，若不成立，則Pi waits until resouce availalbe
概念就是你去貸3,000萬，可是銀行金庫目前的錢不夠，需要你稍等一下
Step3 (試算)
假設貸款成功
Allocation = Allocation + Request
Need = Need - Request
Available = Available - Request
Step4 依上述試算值，必須執行 &amp;#34;safety&amp;#34; algo，若回傳&amp;#34;Safe&amp;#34; state則核准Pi此次申請。若回傳&amp;#34;unsafe&amp;#34; state，則否決Pi此次申請。Pi必須等一段時間再重提申請
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="safety-algorithm">Safety Algorithm&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Data Structures used 除上述之外，另外加入&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Work:[1..m] of int -&amp;gt; 表系統目前可用Resources之累計數量&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Finish:[1..m] of Boolean -&amp;gt; 針對Process&lt;/p>
&lt;p>Finish[i]=&lt;/p>
&lt;p>True: 表Pi可完工&lt;/p>
&lt;p>False: 表Pi尚未完工&lt;/p>
&lt;p>∀1&amp;lt;=i&amp;lt;=n&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Procedures&lt;/p>
&lt;p>Step&lt;/p>
&lt;ol>
&lt;li>
&lt;p>設定初值&lt;/p>
&lt;p>Work = Available&lt;/p>
&lt;p>Finish[i]皆為False&lt;/p>
&lt;p>∀1&amp;lt;=i&amp;lt;=n&lt;/p>
&lt;/li>
&lt;li>
&lt;p>看可否找到Pi滿足：&lt;/p>
&lt;ol>
&lt;li>Finish[i]為False且&lt;/li>
&lt;li>Needi &amp;lt;= Work (我所需要的資源，)&lt;/li>
&lt;/ol>
&lt;p>若可找到，則進3,否則則進4&lt;/p>
&lt;/li>
&lt;li>
&lt;p>設定Finish[i]=True，且Work= Work + Allocationi, then, 回到2&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Check Finish Array, 若皆為True，則傳回Safe State，否則傳回Unsafe state&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>範例&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">5個Process(P0,P1,P2,P3,P4)
3種resource(A,B,C)
資源量(A,B,C) = (10,5,7)
1. 求出Need及Available
2. P1提出(A,B,C)= (1,0,2)申請，是否核准?Why?
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Ans.&lt;/p>
&lt;ul>
&lt;li>Allocation-各個Process身上所持有的資源&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>A&lt;/th>
&lt;th>B&lt;/th>
&lt;th>C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>P0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P1&lt;/td>
&lt;td>2&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P2&lt;/td>
&lt;td>3&lt;/td>
&lt;td>0&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P3&lt;/td>
&lt;td>2&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P4&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>MAX- Process完成工作最多所需要的資源數量分別是多少&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>A&lt;/th>
&lt;th>B&lt;/th>
&lt;th>C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>P0&lt;/td>
&lt;td>7&lt;/td>
&lt;td>5&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P1&lt;/td>
&lt;td>3&lt;/td>
&lt;td>2&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P2&lt;/td>
&lt;td>9&lt;/td>
&lt;td>0&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P3&lt;/td>
&lt;td>2&lt;/td>
&lt;td>2&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P4&lt;/td>
&lt;td>4&lt;/td>
&lt;td>3&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>Need= &lt;strong>MAX-Allocation&lt;/strong>&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>A&lt;/th>
&lt;th>B&lt;/th>
&lt;th>C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>P0&lt;/td>
&lt;td>7-0=7&lt;/td>
&lt;td>5-1=4&lt;/td>
&lt;td>3-0=3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P1&lt;/td>
&lt;td>3-2=1&lt;/td>
&lt;td>2-0=2&lt;/td>
&lt;td>2-0=2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P2&lt;/td>
&lt;td>6&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P3&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P4&lt;/td>
&lt;td>4&lt;/td>
&lt;td>3&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>Available= 系統目前還剩的可用資源數，資源總量()-已經配置出去的(Allocation出去的)&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>A&lt;/th>
&lt;th>B&lt;/th>
&lt;th>C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>10-(2+3+2)=3&lt;/td>
&lt;td>5-(1+1)=3&lt;/td>
&lt;td>7-(2+1+2)=2&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Request=(1,0,2), Banker&amp;rsquo;s Algo&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Check Request &amp;lt;= Need ? (你所要求的小於你真正需要的，亦即你買東西只要500，不能跟銀行借到500萬)&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/5QkkGo9.png"
loading="lazy"
alt="image-20230107115630812"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Check Request &amp;lt;= Available (你要的借的錢是否小於銀行本身所持有的錢，亦即如果你要借1億，但銀行只有一百萬)?&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/rEVlV70.png"
loading="lazy"
alt="image-20230107120047287"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>(試算)&lt;/p>
&lt;p>P1:&lt;/p>
&lt;p>Allocation = &amp;lt;2,0,0&amp;gt;+&amp;lt;1,0,2&amp;gt;(申請量) = &lt;strong>&amp;lt;3,0,2&amp;gt;&lt;/strong>&lt;/p>
&lt;p>Need = &amp;lt;1,2,2&amp;gt; - &amp;lt; 1,0,2&amp;gt;(申請量) = &lt;strong>&amp;lt;0,2,0&amp;gt;&lt;/strong>&lt;/p>
&lt;p>Available = &amp;lt;3,3,2&amp;gt; - &amp;lt;1,0,2&amp;gt;(申請量) = &lt;strong>&amp;lt;2,3,0&amp;gt;&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>依上述調整值，來執行&amp;quot;Safety&amp;quot; Algo&lt;/p>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Allocation&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>A&lt;/th>
&lt;th>B&lt;/th>
&lt;th>C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>P0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P1(要調整)&lt;/td>
&lt;td>&lt;u>&lt;strong>3&lt;/strong>&lt;/u>&lt;/td>
&lt;td>&lt;strong>&lt;u>0&lt;/u>&lt;/strong>&lt;/td>
&lt;td>&lt;u>&lt;strong>2&lt;/strong>&lt;/u>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P2&lt;/td>
&lt;td>3&lt;/td>
&lt;td>0&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P3&lt;/td>
&lt;td>2&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P4&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>MAX&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>A&lt;/th>
&lt;th>B&lt;/th>
&lt;th>C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>P0&lt;/td>
&lt;td>7&lt;/td>
&lt;td>5&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P1&lt;/td>
&lt;td>3&lt;/td>
&lt;td>2&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P2&lt;/td>
&lt;td>9&lt;/td>
&lt;td>0&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P3&lt;/td>
&lt;td>2&lt;/td>
&lt;td>2&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P4&lt;/td>
&lt;td>4&lt;/td>
&lt;td>3&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>Need&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>A&lt;/th>
&lt;th>B&lt;/th>
&lt;th>C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>P0&lt;/td>
&lt;td>7&lt;/td>
&lt;td>4&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P1(要調整)&lt;/td>
&lt;td>0&lt;/td>
&lt;td>2&lt;/td>
&lt;td>&lt;strong>0&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P2&lt;/td>
&lt;td>6&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P3&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P4&lt;/td>
&lt;td>4&lt;/td>
&lt;td>3&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>Available&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>A&lt;/th>
&lt;th>B&lt;/th>
&lt;th>C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>3&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Safety Algo&lt;/p>
&lt;ol>
&lt;li>
&lt;p>初值的設定&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Work = Abailable = &amp;lt;2,3,0&amp;gt;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Finish&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>0&lt;/th>
&lt;th>1&lt;/th>
&lt;th>2&lt;/th>
&lt;th>3&lt;/th>
&lt;th>4&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>F&lt;/td>
&lt;td>F&lt;/td>
&lt;td>F&lt;/td>
&lt;td>F&lt;/td>
&lt;td>F&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul>
&lt;p>尋找有沒有Process還沒完成工作，並且它的needi &amp;lt;= work的&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可找到P1滿足Finish[i]= False且Need &amp;lt;=work&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>​ &lt;img src="https://i.imgur.com/9uFiGp9.png"
loading="lazy"
alt="image-20230107123442941"
>&lt;/p>
&lt;ol start="3">
&lt;li>設定Finish[i]=True，且Work= Work+Allocation = (2,3,0) + (3,0,2) = (5,3,2) , then goto 2&lt;/li>
&lt;li>work = &lt;del>(2,3,0)&lt;/del> &amp;gt; (5,3,2)&lt;/li>
&lt;/ol>
&lt;p>​ &lt;img src="https://i.imgur.com/qn6JXjh.png"
loading="lazy"
alt="image-20230107123951216"
>&lt;/p>
&lt;ol start="5">
&lt;li>
&lt;p>選擇P3滿足 Need&amp;lt;= Work，且Finish[i] = False&lt;/p>
&lt;/li>
&lt;li>
&lt;p>設定Finishj[3]=True，且Work=(5,3,2) +(2,1,1) = (7,4,3), then goto 2&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&amp;hellip; 以此類推，P0, P2, P4皆可Finish，直到大家都Finish，因此大家都滿足了。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Check Finish陣列，因為皆為True，所以&lt;strong>傳回Safe State&lt;/strong>，&lt;strong>因此核准P1此次的申請&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>列出上述其中一組&lt;strong>Safe Sequence&lt;/strong>&lt;code>Safe Sequence/ Safe State定義：至少可以找到&amp;gt;=1組，Safe Sequence，成為Safe State，否則unsafe state。代表OS未來依此Processes順序可分配各Process所need的資源，使得大家皆可順利完工&lt;/code>&lt;/p>
&lt;p>Ans. P1,P3,P0,P2,P4&lt;/p>
&lt;/li>
&lt;li>
&lt;p>依現在狀況，若P4提出(3,3,0)申請，是否核准?why? &lt;strong>(練習題)&lt;/strong>&lt;/p>
&lt;p>Ans. Banker&amp;rsquo;s algo&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Check Request (3,3,0) &amp;lt;= Need(4,3,1) &lt;strong>通過&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Need&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>A&lt;/th>
&lt;th>B&lt;/th>
&lt;th>C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>P0&lt;/td>
&lt;td>7&lt;/td>
&lt;td>4&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>2&lt;/td>
&lt;td>&lt;strong>0&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P2&lt;/td>
&lt;td>6&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P3&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P4&lt;/td>
&lt;td>4&lt;/td>
&lt;td>3&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>​ 2. Check Request4(3,3,0) &amp;lt;= Available (2,3,0)?&lt;/p>
&lt;p>​ 不成立，因為無法核准，&lt;strong>可用資源不足&lt;/strong>&lt;/p>
&lt;ol start="11">
&lt;li>
&lt;p>依現在情況，若P0提出(0,2,0)，是否核准? Ｗhy?&lt;/p>
&lt;p>Ans. Banker&amp;rsquo;s Algo&lt;/p>
&lt;ol>
&lt;li>
&lt;p>快速跑過，確認可以過，資源分配改變如下&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Allocation&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>A&lt;/th>
&lt;th>B&lt;/th>
&lt;th>C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>P0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>3&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P1&lt;/td>
&lt;td>3&lt;/td>
&lt;td>0&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P2&lt;/td>
&lt;td>3&lt;/td>
&lt;td>0&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P3&lt;/td>
&lt;td>2&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P4&lt;/td>
&lt;td>0&lt;/td>
&lt;td>2&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>Need&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>A&lt;/th>
&lt;th>B&lt;/th>
&lt;th>C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>P0&lt;/td>
&lt;td>7&lt;/td>
&lt;td>2&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>2&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P2&lt;/td>
&lt;td>6&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P3` | 0 | 1 | 1 |&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P4&lt;/td>
&lt;td>4&lt;/td>
&lt;td>3&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>Available&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>A&lt;/th>
&lt;th>B&lt;/th>
&lt;th>C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>執行Safety&amp;rsquo;s algo&lt;/p>
&lt;ol>
&lt;li>設定初值，Work=(2,1,0)&lt;/li>
&lt;li>找尋是否有符合Needi &amp;lt;= Work 的Process，且還有Process為False**(不通過)**，所以unsafe&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>範例二&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Allocation&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>A&lt;/th>
&lt;th>B&lt;/th>
&lt;th>C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>P0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>3&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P1&lt;/td>
&lt;td>3&lt;/td>
&lt;td>0&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P2&lt;/td>
&lt;td>3&lt;/td>
&lt;td>0&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P3&lt;/td>
&lt;td>2&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P4&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>Need&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>A&lt;/th>
&lt;th>B&lt;/th>
&lt;th>C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>P0&lt;/td>
&lt;td>7&lt;/td>
&lt;td>2&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>2&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P2&lt;/td>
&lt;td>6&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P3&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P4&lt;/td>
&lt;td>4&lt;/td>
&lt;td>3&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>Available&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>A&lt;/th>
&lt;th>B&lt;/th>
&lt;th>C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>1&lt;/td>
&lt;td>&lt;strong>x&lt;/strong>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul>
&lt;p>求x的最小值，使其成為Safety&lt;/p>
&lt;ol>
&lt;li>設置初值，work= (2,1,x)&lt;/li>
&lt;li>找尋 Need &amp;lt;= work&lt;/li>
&lt;li>找到了，P3，先暫定x=1 (2,1,1)&lt;/li>
&lt;li>P3因為可以完成，完成後資源就可以釋放出來，因此work (2,1,1) &amp;gt; (4,2,2)&lt;/li>
&lt;li>繼續找尋Need &amp;lt;=work&lt;/li>
&lt;li>找到了，P1&lt;/li>
&lt;li>P1因為可以完成，完成後資源就可以釋放出來，因此work(4,2,2) &amp;gt; (7,2,4)&lt;/li>
&lt;li>&amp;hellip;往復循環，以此類推&lt;/li>
&lt;/ol>
&lt;p>​&lt;/p>
&lt;p>x= 1;&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/mo7FIyC.png"
loading="lazy"
alt="image-20230107194309689"
>&lt;/p>
&lt;h2 id="bankers-algo-之-time-complexity">Banker&amp;rsquo;s Algo 之 Time Complexity&lt;/h2>
&lt;p>先講結論，&lt;strong>複雜度就是O(n^2*m)&lt;/strong>&lt;/p>
&lt;p>(n: Process 數目, m:resource 種類數)&lt;/p>
&lt;p>Banker&amp;rsquo;s Algo Time Complexity&lt;/p>
&lt;p>Step&lt;/p>
&lt;ol>
&lt;li>O(m)&lt;code>Check Request &amp;lt;= Need &lt;/code>&lt;/li>
&lt;li>O(m)&lt;code> Check Request &amp;lt;=Available&lt;/code>&lt;/li>
&lt;li>O(m)&lt;code>試算&lt;/code>&lt;/li>
&lt;li>Run safety algo&lt;/li>
&lt;li>設置初值work -&amp;gt; 1~m的一維陣列，因此複雜度為O(m)。Finish -&amp;gt;1~n的一維陣列，因此複雜度為 O(n)&lt;/li>
&lt;li>先來看看Safety&amp;rsquo;s algo的步驟&lt;img src="https://i.imgur.com/sIe7W3D.png"
loading="lazy"
alt="image-20230109221851317"
>&lt;/li>
&lt;/ol>
&lt;p>​ 第一次最多會檢查n次，再來第二次檢查n-1次&amp;hellip;&lt;/p>
&lt;p>​ =(n+1)n/2個Processes。每次檢查Need &amp;lt;=Work 花O(m)的時 間，最多花O(n^2*m) time&lt;/p>
&lt;ol start="7">
&lt;li>花O(n) Check Finish&lt;/li>
&lt;/ol>
&lt;p>因此&lt;strong>複雜度就是O(n^2*m)&lt;/strong>&lt;/p>
&lt;h2 id="針對每一項類型資源皆為single-instance情況下有較簡易的avoidance作法">針對每一項類型資源，皆為Single-instance情況下，有較簡易的Avoidance作法&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>利用RAG，搭配&lt;strong>Claim edge(宣告邊)使用&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Claim edge:&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/DbUNSBR.png"
loading="lazy"
alt="image-20230110213506269"
>&lt;/p>
&lt;p>代表Pi未來會對Rj提出申請(即表MAX/NEED之意義)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Steps：&lt;/p>
&lt;p>&lt;code>當Pi提出Rj申請後&lt;/code>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>檢查有無Pi對Rj的這條宣告邊(Claim edge)存在，若有，則goto2否則，終止Pi&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Check Rj是否Available，若是，則goto3，否則&lt;strong>Pi waits&lt;/strong>(變成申請邊)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>(試算)暫時把宣告邊改為配置邊&lt;img src="https://i.imgur.com/45EmEs2.png"
loading="lazy"
alt="image-20230110234601069"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>執行safety&amp;rsquo;s Algo, check 圖中是否有cycle存在&lt;/p>
&lt;p>若沒有，則為safe -&amp;gt; 可核准&lt;/p>
&lt;p>有Cycle，則為unsafe -&amp;gt; 否決&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>例：&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/aTNbxz5.png"
loading="lazy"
alt="image-20230110233244192"
>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>若P1提出R2之申請，是否核准?&lt;/p>
&lt;p>Ans.&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/sE32Vh1.png"
loading="lazy"
alt="image-20230110235023904"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>若P2提出R2之申請，是否核准?&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/VDS6Lz1.png"
loading="lazy"
alt="image-20230111000113366"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>補充：&lt;strong>Deadlock是unsafe之subset(或unsafe有可能導致死結，也有可能不會導致死結)&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/BSN7MhD.png"
loading="lazy"
alt="image-20230111001212290"
>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>可能&lt;strong>不會&lt;/strong>死結&lt;/p>
&lt;p>ans. 搞不好P1在提出R2的申請時，就使用完R1了，這時就不會有死結。或是P2在P1提出申請之前就使用完R2了，此時也不會有死結。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可能&lt;strong>會有&lt;/strong>死結&lt;/p>
&lt;p>ans. P1立刻對R2提出申請，此時RAG有Cycle，且資源都是Single Instance&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>也就是說死結產生與否取決於宣告邊在哪個moment提出申請&lt;/p>
&lt;p>​&lt;/p>
&lt;h2 id="定理">定理&lt;/h2>
&lt;p>系統若有&lt;u>n&lt;/u>個processes，m個resource量(單一種類)滿足下列2個條件：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>1≦MAXi≦m(每個process的最大需求量至少要有1個，最多不超過m)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>且所有n個process的Maxi加總，小於n+m&lt;/p>
&lt;p>$$
\sum_{i=1}^nMAXi&amp;lt;(n+m)
$$&lt;/p>
&lt;p>則System is &lt;strong>Deadlock free&lt;/strong>.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>例1. 有6部printers被process使用，每個process最多需要2部printers才可以完工，則System 最多允許?個process執行以確保deadlock Free?&lt;/p>
&lt;p>ans. m=6, Max=2&lt;/p>
&lt;p>開始跑定理&lt;/p>
&lt;ol>
&lt;li>
&lt;p>1 ≦ Maxi ≦ m -&amp;gt; 1 ≦ 2 ≦ 6成立&lt;/p>
&lt;/li>
&lt;li>
&lt;p>$$
\sum_{i=1}^nMaxi&amp;lt;(n+m)
$$&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>​ 所以2n&amp;lt;n+6，n&amp;lt;6，Ans:　最多５個processes&lt;/p>
&lt;p>​&lt;/p>
&lt;p>詳解&lt;/p>
&lt;ol>
&lt;li>
&lt;p>所謂死結的發生，就是系統已經將所有的資源都投入下去，但依然沒有產出，不會有一個系統是佔據著資源不分配，看著底下的Process進入Deadlock還很開心&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/60Ndyr2.png"
loading="lazy"
alt="image-20230112221927497"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>應此將資源分配下去後，就是長這樣&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/9rc68RH.png"
loading="lazy"
alt="image-20230112222025831"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Process取得2個Resource後就可以執行，執行完後又釋放2個Resource給其他的Process使用&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/VDXlZBP.png"
loading="lazy"
alt="image-20230112222203015"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>持續的把Resource分配給Process&amp;hellip; 往復循環，即可完成。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>若很不幸的是，如果今天是6個Process，就會發生死結&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/k3fiqJr.png"
loading="lazy"
alt="image-20230112222340478"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>推導公式，若今天題目改成，每個Process需要3台印表機，現在有10部列表機，最多能允許幾個Process(MAX=3, m=10)&lt;/p>
&lt;p>&lt;code>3n&amp;lt;n+10&lt;/code>&lt;/p>
&lt;p>&lt;code>=2n&amp;lt;10&lt;/code>&lt;/p>
&lt;p>&lt;code>=n&amp;lt;5&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>​ ans. n=4&lt;/p>
&lt;p>例2. 證明：&lt;/p>
&lt;p>​ proof：假設資源全部配置出去&lt;/p>
&lt;p>$$
即\sum_{i=1}^n Allocationi = m
$$&lt;/p>
&lt;p>​ 又因為&lt;/p>
&lt;p>$$
\sum_{i=1}^nNeedi = \sum_{i=1}^nMaxi-\sum_{i=1}^n Allocationi(Banker&amp;rsquo;s Algo) \&lt;br>
= \sum_{i=1}^nMaxi-m \&lt;br>
∴\sum_{i=1}^nMaxi=\sum_{i=1}^nNeedi+m
$$&lt;/p>
&lt;p>​&lt;/p>
&lt;p>​ 再依據條件(2)&lt;/p>
&lt;p>$$
\sum_{i=1}^nMaxi &amp;lt; (n+m) \&lt;br>
∴\sum_{i=1}^nNeedi+m&amp;lt;(n+m) \&lt;br>
$$&lt;/p>
&lt;p>​ 得出這個結論&lt;/p>
&lt;p>$$
∴ \sum_{i=1}^nNeedi &amp;lt; n
$$&lt;/p>
&lt;p>​ 此事代表至少有&amp;gt;=1個Process之Needi為0，代表Process可以完工，且Pi至少會Release出&amp;gt;=1個Resource**(∵條件(1) -&amp;gt; MAX&amp;gt;=1,而Needi=0 ∴Allocation &amp;gt;=1)**使得剩下的Process當中又會有&amp;gt;=1個process之Need為0又可以完工。使得剩下的process中又會有&amp;gt;=1個Process之Need為0又可以完工，依此類推，所有Process皆可完工，∴Deadlock Free&lt;/p>
&lt;p>解釋的數學式子如下，類似離散的鴿籠原理&lt;/p>
&lt;p>$$
\sum_{i=1}^{n-1}Needi&amp;lt;n-1
$$&lt;/p>
&lt;h2 id="deadlock-detection--recovery">Deadlock Detection &amp;amp; Recovery&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>如果放任resource使用較無限制，雖然Utilization高，&lt;strong>但是System有可能進入死結而不自知。&lt;strong>因為需要有一個&lt;/strong>死結偵測演算法&lt;/strong>，及萬一偵測出有死結，如何破除這個死結(recovery)的作法。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Recovery做法：&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Kill&lt;/strong> Process in the deadlock&lt;/p>
&lt;blockquote>
&lt;p>方法一：&lt;strong>Kill All Processes in the deadlock&lt;/strong>寸草不生，眼不見為淨&lt;/p>
&lt;p>缺點：成本太高，先前的工作成果全部作廢。&lt;/p>
&lt;p>方法二：&lt;strong>Kill processes one by one&lt;/strong>，&lt;strong>Kill一個之後，須再跑偵測Algo，若死結仍存在，再Repeat上述步驟&lt;/strong>&lt;/p>
&lt;p>缺點：&lt;strong>成本太高&lt;/strong>，Loop次數*偵測成本&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>Resource Preemption&lt;/p>
&lt;blockquote>
&lt;p>步驟一：選擇&amp;quot;Victim&amp;quot; process(假設此Process擁有資源A,B,C)&lt;/p>
&lt;p>步驟二：剝奪他們身上的資源(剝奪B，保留A,B，這是最基本的情況)&lt;/p>
&lt;p>步驟三：&lt;strong>回復此Victim process當初未取得此剝奪資源的狀態(這一步非常困難，成本極高，也不一定做得好，此外也可能有Starvation的問題)&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;/li>
&lt;/ol>
&lt;h2 id="deadlock-detection-algorithm考比較多的是bankerdetection稍微知道就好">Deadlock Detection Algorithm(考比較多的是Banker,Detection稍微知道就好)&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Data Structures used&lt;/p>
&lt;p>n：process數&lt;/p>
&lt;p>m：resource種類&lt;/p>
&lt;ol>
&lt;li>Allocation：n*m matrix&lt;/li>
&lt;li>Availavle：[1&amp;hellip;m] of int &lt;code>目前可用資源數量&lt;/code>&lt;/li>
&lt;li>Work: [1&amp;hellip;m] of int&lt;/li>
&lt;li>Finish：[1&amp;hellip;n] of Boolean&lt;/li>
&lt;li>&lt;strong>Request：n*m matrix&lt;/strong>，各process目前提出之各式資源申請量&lt;/li>
&lt;/ol>
&lt;p>Note：&lt;/p>
&lt;ol>
&lt;li>Avoidance(Banker&amp;rsquo;s Algo)含有&lt;u>未來(Future)&lt;/u>info(MAX,Need)&lt;/li>
&lt;li>Detection：只有現在(Current)info&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Procedures&lt;/p>
&lt;p>步驟一：初值設定&lt;/p>
&lt;p>Work=Available&lt;/p>
&lt;p>Finish[i]= True: &lt;strong>if Allocation ==0&lt;/strong>&lt;/p>
&lt;p>​ False: **if Allocation ≠0 **&lt;/p>
&lt;p>步驟二：看可否找到Pi滿足：&lt;/p>
&lt;ol>
&lt;li>Finish[i]為False&lt;/li>
&lt;li>Requesti ≦ Work&lt;/li>
&lt;/ol>
&lt;p>若&lt;strong>找到&lt;/strong>，則進入步驟三，否則進入步驟四&lt;/p>
&lt;p>步驟三：設定Finish[i]=True，且Work=Work+Allocationi, then 回到步驟二，找不到則回到第四步&lt;/p>
&lt;p>步驟四：Check Finish Array，若皆為True，&lt;strong>因此目前無死結&lt;/strong>，否則則有死結，且Finish[i]= False者，即為陷入死結中&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Time：O(n^2 *m) &amp;ndash;&amp;gt; 死結偵測一次，cost很高，再加上&lt;strong>乘以偵測頻率&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>範例1：&lt;/p>
&lt;ul>
&lt;li>Allocation&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>A&lt;/th>
&lt;th>B&lt;/th>
&lt;th>C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>P0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P1&lt;/td>
&lt;td>2&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P2&lt;/td>
&lt;td>3&lt;/td>
&lt;td>0&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P3&lt;/td>
&lt;td>2&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P4&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>Request&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>A&lt;/th>
&lt;th>B&lt;/th>
&lt;th>C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>P0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P1&lt;/td>
&lt;td>2&lt;/td>
&lt;td>0&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P2&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P3&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>P4&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>Available&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>A&lt;/th>
&lt;th>B&lt;/th>
&lt;th>C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>偵測目前有哪些死結?&lt;/p>
&lt;p>若有，那些process in the Deadlock&lt;/p>
&lt;p>Ans.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Work = Available = (0,0,0)&lt;/p>
&lt;p>Finish&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>0&lt;/th>
&lt;th>1&lt;/th>
&lt;th>2&lt;/th>
&lt;th>3&lt;/th>
&lt;th>4&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>F&lt;/td>
&lt;td>F&lt;/td>
&lt;td>F&lt;/td>
&lt;td>F&lt;/td>
&lt;td>F&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>因為Allocation皆≠(0,0,0)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>∵可以找到P0滿足Finish[0]為F，且Request≤work ∴到第三步驟&lt;/p>
&lt;/li>
&lt;li>
&lt;p>設定Finish[0]為True，且Work=(0,0,0)+(0,1,0)=(0,1,0)，回到第二步驟&lt;/p>
&lt;/li>
&lt;li>
&lt;p>∵可以找到P2滿足Finish[2]為F，且Request2 ≤ Work，∴到第三步驟&lt;/p>
&lt;/li>
&lt;li>
&lt;p>設定Finsh[2]為True，且Work=(0,1,0)+(3,0,3)=(3,1,3)，回到第三步驟&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在步驟二與步驟三之間抽插，往復循環，P1, P3, P4皆可Finished&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Check Finish Array ∵皆為True，∴目前無死結&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="若每一類型資源資源皆為single-instance則有較簡化的detection作法-使用wait-for-graph">若每一類型資源資源皆為Single-instance，則有較簡化的Detection作法-使用Wait-For Graph&lt;/h2>
&lt;ul>
&lt;li>定義：令G=&amp;lt;V,E&amp;gt;有向圖，代表Wait-For Graph，其中&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>Vertex：只有Process Only，沒有Resource頂點&lt;/li>
&lt;li>Edge：Pi &lt;code>等待&lt;/code>&amp;mdash;&amp;gt;Pj，稱之為wait edge&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>是從RAG簡化而得&lt;/strong>，即若RAG中存在：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">graph LR;
Pi --申請--&amp;gt; R --配置--&amp;gt; Pj
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>則在Wait-For Graph 以&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">graph LR;
Pi --等待--&amp;gt; Pj
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>呈現&lt;/p>
&lt;/li>
&lt;li>
&lt;p>偵測作法：&lt;strong>在Wait-For Graph中，若有Cycle，則目前有死結，否則目前無死結&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>例：RAG如下&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/8OxjTRA.png"
loading="lazy"
alt="image-20230115163340361"
>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>化成Wait-For Graph&lt;/p>
&lt;/li>
&lt;li>
&lt;p>目前有無死結&lt;/p>
&lt;p>Ans.∵有Cycle，∴&lt;strong>目前有死結&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/Fq0Ku1V.png"
loading="lazy"
alt="image-20230115163349303"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h1 id="chapter-6-process-synchronization">Chapter 6 Process Synchronization&lt;/h1>
&lt;p>&lt;code>Process Communication&lt;/code>,&lt;code>Inter Processes Communication; IPC&lt;/code>&lt;/p>
&lt;p>Process的關係就兩種&lt;/p>
&lt;ol>
&lt;li>Independent&lt;/li>
&lt;li>&lt;strong>Cooperating&lt;/strong>(有資訊交換的需求)&lt;/li>
&lt;/ol>
&lt;p>何謂同步(Synchronization)？Process在執行的過程當中，因為某件事情的發生或沒有發生，導致它必須停下來，等對方完成，才可以接著往下做，符合這些事情的就是同步。&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>
&lt;p>Process Communication兩大方式&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Shared Memory&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Message Passing&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Race Condition Problem&lt;/p>
&lt;/li>
&lt;li>
&lt;p>解決Race Condition之兩大策略&lt;/p>
&lt;ol>
&lt;li>Disable interrupt&lt;/li>
&lt;li>Critical section design&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>C.S.Design 必須滿足的3個Criteria(Mutual Exclustion, Progress, Bounded Waiting)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>C.S Design 方法(架構)&lt;/p>
&lt;ul>
&lt;li>SoftWare Solutions&lt;/li>
&lt;li>HardWare Instructions Support(Test-and-Set, SWAP)&lt;/li>
&lt;li>&lt;strong>semaphore☆☆☆☆☆&lt;/strong>(號誌)&lt;/li>
&lt;li>&lt;strong>Monitor&lt;/strong>&lt;/li>
&lt;li>解決著名的同步問題
&lt;ul>
&lt;li>Producer-Consumer Problem&lt;/li>
&lt;li>Reader/Writer Problem
&lt;ol>
&lt;li>First&lt;/li>
&lt;li>Second&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>The Sleeping Barber problem&lt;/li>
&lt;li>The Dining-Philosophers Problem&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Message Passing 溝通方式(較少考)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="process-communication之兩大方式">Process communication之兩大方式&lt;/h2>
&lt;h3 id="shared-memory本篇重點">Shared Memory(本篇重點)&lt;/h3>
&lt;p>定義：Processes透過共享變數(shared Variable)之存(Write)取(Read)達到溝通(Info exchange)之目的&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/sklBx0M.png"
loading="lazy"
alt="image-20230122193004264"
>&lt;/p>
&lt;p>分析：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>適用於大量Data(message)傳輸之狀況&lt;/strong>&lt;/li>
&lt;li>&lt;strong>傳輸速度較快(因為不須kernel介入干預/支持，Shared memory是Programmer的責任，Programmer要負責去處理互斥的問題)&lt;/strong>&lt;/li>
&lt;li>&lt;strong>不適合用於Distributed System&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Kernel不需提供額外的支援(頂多供應Shared memory space)&lt;/strong>&lt;/li>
&lt;li>&lt;strong>是Programmer的負擔，必須寫額外的程式碼防止Race Condition的發生&lt;/strong>&lt;/li>
&lt;/ol>
&lt;h3 id="message-passing">Message Passing&lt;/h3>
&lt;p>定義：Process雙方要溝通必須遵循下列Steps&lt;/p>
&lt;ol>
&lt;li>建立Communication Link&lt;/li>
&lt;li>訊息可雙向傳輸&lt;/li>
&lt;li>傳輸完畢，必須Release&lt;/li>
&lt;/ol>
&lt;p>分析：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>適用於少量Data(message)傳輸之情況&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>傳輸速度較慢(因為需要kernel支持)&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>適合用於Distribute System&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Kernel必須提供額外的支援&lt;/strong>&lt;/p>
&lt;p>&lt;strong>例：send/recevice system call, Communication Link管理，Message lost之偵測、例外狀況之處理&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Programmer沒有什麼負擔，只要會用send/receive的System Call就好&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="race-condition-problem">Race Condition problem&lt;/h2>
&lt;p>in shared memory Communication&lt;/p>
&lt;p>定義：&lt;strong>In shared memory Communication, 若未對共享變數存取提供任何互斥存取控制之Synchronization機制，則會造成&amp;quot;共享變數的最終結果值會因為Process之間的執行順序不同而有不同的結果值&amp;quot;&lt;/strong>，此種Data inconsistency情況，稱之為Race Condition&lt;/p>
&lt;p>例子：Ｃ是共享變數，初值=5，此時有2個Process&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Pi&lt;/th>
&lt;th>Pj&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&amp;hellip;&lt;/td>
&lt;td>&amp;hellip;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>C=C+1&lt;/td>
&lt;td>C=C-1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;hellip;&lt;/td>
&lt;td>&amp;hellip;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;hellip;&lt;/td>
&lt;td>&amp;hellip;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Pi，Pj各執行一次，則C的最終值&lt;strong>可能是5 or 4 or 6&lt;/strong> ，這種稱之為Race Condition&lt;/p>
&lt;ul>
&lt;li>
&lt;p>結果為5，執行順序可能為&lt;/p>
&lt;p>T1= Pi = C =C+1&lt;/p>
&lt;p>T2= Pj = C =C -1&lt;/p>
&lt;p>or&lt;/p>
&lt;p>T1 = Pj = C = C - 1&lt;/p>
&lt;p>T2 = Pi = C = C + 1&lt;/p>
&lt;/li>
&lt;li>
&lt;p>結果為4，執行順序可能為&lt;/p>
&lt;p>T1：Pi執行C+1，得到6，但尚未Assign給C，只是先放在一個佔存器&lt;/p>
&lt;p>T2：Pj執行C-1，得到4，尚未Assign回C&lt;/p>
&lt;p>T3：Pi 6 assign回C&lt;/p>
&lt;p>T4：Pj 4 assign回C&lt;/p>
&lt;p>C的結果為4&lt;/p>
&lt;/li>
&lt;li>
&lt;p>結果為6，執行順序可能為&lt;/p>
&lt;p>T1：Pi執行C+1，得到6，但尚未Assign給C，只是先放在一個佔存器&lt;/p>
&lt;p>T2：Pj執行C-1，得到4，尚未Assign回C&lt;/p>
&lt;p>T3：Pj 4 assign回C&lt;/p>
&lt;p>T4：Pi 6 assign回C&lt;/p>
&lt;p>結果為6&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>範例1&lt;/p>
&lt;p>x, y 是共享變數，初值x=5, y=7&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Pi&lt;/th>
&lt;th>Pj&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>x= x+y&lt;/td>
&lt;td>y=x*y&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Pi,Pj各作一次，求(x,y)之可能值&lt;/p>
&lt;p>Ans.&lt;/p>
&lt;p>(x,y) = (12,84)&lt;/p>
&lt;p>(x,y) = (40,35)&lt;/p>
&lt;p>&lt;strong>(x,y) = (12,35)&lt;/strong>&lt;/p>
&lt;p>範例2&lt;/p>
&lt;p>x=0是共享變數，i 是區域變數&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Pi&lt;/th>
&lt;th>Pj&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>for(i=1;i&amp;lt;=3;i++)x=x+1&lt;/td>
&lt;td>for(i=1;i&amp;lt;=3;i++)x=x+1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Pi,Pj各作一次，求(x)之可能值&lt;/p>
&lt;p>提示&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Pi&lt;/th>
&lt;th>Pj&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>第一次&lt;/td>
&lt;td>x=x+1&lt;/td>
&lt;td>x=x+1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>第二次&lt;/td>
&lt;td>x=x+1&lt;/td>
&lt;td>x=x+1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>第三次&lt;/td>
&lt;td>x=x+1&lt;/td>
&lt;td>x=x+1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Ans.(3,4,5,6)&lt;/p>
&lt;p>範例3&lt;/p>
&lt;p>x=0是共享變數，i 是區域變數&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Pi&lt;/th>
&lt;th>Pj&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>for(i=1;i&amp;lt;=3;i++)x=x+1&lt;/td>
&lt;td>for(i=1;i&amp;lt;=3;i++)x=x-1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Pi,Pj各作一次，求(x)之可能值&lt;/p>
&lt;p>(-3,-2,-1,0,1,2,3)&lt;/p>
&lt;h2 id="解決race-condition之兩大策略">解決Race Condition之兩大策略&lt;/h2>
&lt;h3 id="disable-interrupt">Disable Interrupt&lt;/h3>
&lt;p>&lt;code>對CPU下手&lt;/code>&lt;/p>
&lt;p>定義：&lt;strong>Process在對共享變數存取之前，先Disable Interrupt，等到完成共享變數的存取後再才Enable Interrupt。如此一來可以保證Process在存取共享變數的期間CPU不會被Preempted&lt;/strong>，即此一存取是&lt;strong>Atomically Executed&lt;/strong>&lt;/p>
&lt;p>例&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Pi&lt;/th>
&lt;th>Pj&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&amp;hellip;Disable interrupt&lt;/td>
&lt;td>&amp;hellip; Disable Interrupt&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>C=C+1&lt;/td>
&lt;td>C=C-1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Enable Interrupt &amp;hellip;&lt;/td>
&lt;td>Enable Interrupt &amp;hellip;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>優點：&lt;/p>
&lt;ol>
&lt;li>Simple, Easy implementation&lt;/li>
&lt;li>適用於Uniprocessor System(單一CPU)&lt;/li>
&lt;/ol>
&lt;p>缺點：&lt;/p>
&lt;ol>
&lt;li>不適合用於Multiprocessor的系統當中，&lt;strong>只Disable 單一CPU的Interrupt，是無法防止Race Condition&lt;/strong>(因為其他CPUs上執行的Process仍可存取共享變數)，必須要Disable掉&lt;strong>全部的&lt;/strong>CPU&amp;rsquo;s Interrupt才可防止Race Condition，但這樣會大幅降低Performance(因為無法平行執行)&lt;/li>
&lt;li>風險很高，因為必須信任user process在Disable interrupt後，在很短的時間可以在Enable Interrupt，否則CPU never come back to kernel。&lt;strong>注意，通常Disable Interrupt做法是不會開放給user Process的，它通常只存在於kernel的製作中&lt;/strong>(只有OS Developers可以用，因為開發者也要避免kernel內部的Race Condition)&lt;/li>
&lt;/ol>
&lt;h3 id="critical-section臨界區間-design">Critical section(臨界區間) Design&lt;/h3>
&lt;p>&lt;code>對共享Data下手&lt;/code>&lt;/p>
&lt;p>&lt;code>恐龍誤用Spinlock, Busy-waiting&lt;/code>&lt;/p>
&lt;p>&lt;code>是一個概念&lt;/code>&lt;/p>
&lt;p>定義：對&lt;strong>共享變數之存取&lt;/strong>進行管制，當Pi取得共享變數存取權利，在它尚未完成的期間，即使別的Process取得CPU，任何其他Process也無法存取共享變數。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Critiacal Section：Process中對共享變數進行存、取的敘述之集合&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Remainder Section(RS)：Process中除了Critical Section以外的區間，統稱為Remainder Section&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Process內容：&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/wnFMYbJ.png"
loading="lazy"
alt="image-20230123191840993"
>&lt;/p>
&lt;p>每個CS的前後，Programmer須設計/加入額外的控制碼，叫Entity Section，即Exit Section&lt;/p>
&lt;/li>
&lt;li>
&lt;p>而&lt;strong>CS Design不是在設計臨界區間，因為臨界區間是個概念，CS Design是在設計Entry Sec及Exit Sec的Code&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>一個process可以擁有不只一個CS 只是範例都是只畫一個而已，要注意&lt;/code>,&lt;code>進入C=C+1後，CPU可以被Pj搶走，但Pj想要對C操作時，Pj的Enrty Section就會把它擋下來。&lt;/code>&lt;img src="https://i.imgur.com/EMZilhy.png"
loading="lazy"
alt="image-20230123193312033"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>C.S Design 與 Disable Interrupt相比(spinlock, Busy waiting)&lt;/p>
&lt;p>優點：適用於Multiprocessors system&lt;/p>
&lt;p>缺點：&lt;/p>
&lt;ol>
&lt;li>設計較為複雜&lt;/li>
&lt;li>較不適合用在uniprocessor&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h2 id="busy-waiting-skillor-spinlock">Busy-Waiting Skill(or Spinlock)&lt;/h2>
&lt;ul>
&lt;li>定義：透過使用looping相關敘述(eg. for, while, repeat &amp;hellip; util)，達到讓process&lt;strong>暫時等待之效果&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">條件式&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="o">//&lt;/span>&lt;span class="err">不做事，只是讓它跑&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>當條件式為True時，process就被卡在while中，無法離開while，如此達到Process暫停的效果，直到條件式變為False，process才會離開while，往下執行。&lt;/p>
&lt;p>Note：&lt;/p>
&lt;ol>
&lt;li>&lt;img src="https://i.imgur.com/9OPWIvY.png"
loading="lazy"
alt="image-20230125012255548"
>&lt;/li>
&lt;li>[恐]誤用：因為在C.S Design Entry section中經常是使用Busy waiting的技巧(或叫Spinlock)，因此恐龍會把spinlock &amp;amp; busy waiting 視作C.S Design，來去跟Disable Interrupt比較&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>
&lt;p>分析：&lt;/p>
&lt;p>缺點：&lt;strong>等待中的Process，會跟其他的Processes競爭CPU，將搶到的CPU time浪費掉，用於做無實質進展的迴圈測試上&lt;/strong>。因此，若此Process要等很長的時間才能exit迴圈，則&lt;strong>此舉非常浪費CPU time&lt;/strong>&lt;/p>
&lt;p>優點：若Process卡在Loop的時間很短(i.e 小於Context Switcing time)，則Spinlock十分有利，因為Loop的時間很短，浪費的時間也不會太短。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>另一種Non-Busy-waiting Skill&lt;/p>
&lt;p>定義：當Process因為同步事件被卡住，且如要卡很久的時間，&lt;strong>則可以使用Block(p)的System call&lt;/strong>，將p暫停，即讓p進入Blocked的狀態，如此一來，P就不會與其他Processes競爭CPU，直到同步事件發生了，才wakeup(p) system call，將P從blocked變成ready state。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/03E2Ny9.png"
loading="lazy"
alt="image-20230125020111751"
>&lt;/p>
&lt;p>優點：&lt;strong>等待當中的Process不會與別人競爭CPU，不會浪費CPU Time&lt;/strong>&lt;/p>
&lt;p>缺點：額外付出Context Switch的事件&lt;code>幹 這真的算缺點嗎&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="cs-design應該滿足的3個性質">C.S Design應該滿足的3個性質&lt;/h2>
&lt;ol>
&lt;li>Mutual exclusion&lt;/li>
&lt;li>Progress&lt;/li>
&lt;li>Bounded waiting&lt;/li>
&lt;/ol>
&lt;p>分述如下&lt;/p>
&lt;h3 id="mutual-exclusion相互排斥">Mutual exclusion(相互排斥)&lt;/h3>
&lt;p>定義：最重要的一點，如果沒這點的話談個屁的C.S Design，Race Condition都處理不了了。在任何時間點，最多只允許一個Process進入它自己的CS，不可有多個Process分別進入&amp;quot;各自&amp;quot;的CS&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/h07zzPH.png"
loading="lazy"
alt="image-20230125023324542"
>&lt;/p>
&lt;h3 id="progress進展">Progress(進展)&lt;/h3>
&lt;ul>
&lt;li>定義：須&lt;strong>滿足以下兩點才算Progress&lt;/strong>
&lt;ol>
&lt;li>不想進入C.S的Process(亦即在Ramaid Section活動)，不可以阻礙其他Process進入C.S(或不參與進入C.S之決策)&lt;code>不想進去的process不會阻礙別人進入&lt;/code>&lt;/li>
&lt;li>&lt;strong>從那些想進入C.S的Processes中，決定誰可以進入C.S的決策時間是有限的(不可以無窮，也就是No Deadlock likes waitgin forever 大家都無法進入CS)&lt;/strong>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h3 id="bounded-waiting有限的等待">Bounded waiting(有限的等待)&lt;/h3>
&lt;ul>
&lt;li>定義：以個別process的角度來看，自某progress提出申請到核准進入C.S的等待時間是&lt;strong>有限的&lt;/strong>，即若有n個Process想進入CS，則任一Process至多等(n-1)次後，即可進入CS，即&lt;strong>No Startvation&lt;/strong>，&lt;strong>須公平對待&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="cs-design的方法架構圖重要">C.S Design的方法(架構圖)重要&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th style="text-align:left">&lt;/th>
&lt;th>關注的焦點&lt;/th>
&lt;th>補充&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>高階&lt;/td>
&lt;td style="text-align:left">Monitor定義、應用、種類、製作方式&lt;/td>
&lt;td>同步問題之解決(&lt;strong>應用&lt;/strong>)&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>中階&lt;/td>
&lt;td style="text-align:left">Semaphore(號誌)定義、應用、種類、製作方式&lt;/td>
&lt;td>C.S Degign正確與否，同步問題之解決&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>基礎&lt;/td>
&lt;td style="text-align:left">Software solutions, Hardware Insturctions support&lt;/td>
&lt;td>C.S Degign正確與否&lt;/td>
&lt;td>同位階的還有Disable Interrupt&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="software-solutions">Software Solutions&lt;/h2>
&lt;!--https://youtu.be/72tnIO2Lvrk?list=PLGRcV7rvSdTYY0i6Sm-YQJqQerk1mQlgg&amp;t=3450-->
&lt;ul>
&lt;li>
&lt;p>特色&lt;/p>
&lt;ol>
&lt;li>
&lt;p>2個Processes(Pi,Pj)(P0,P1)&lt;/p>
&lt;blockquote>
&lt;p>Algo1 x&lt;/p>
&lt;p>Algo2 x&lt;/p>
&lt;p>Algo3 o = Peterson&amp;rsquo;s solution&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>n個Processes&lt;/p>
&lt;blockquote>
&lt;p>Peterson&amp;rsquo;s Solution(n個Processes)[不太會考了，因為真的很爛]&lt;/p>
&lt;p>&lt;strong>Bankery&amp;rsquo;s Algo&lt;/strong>[麵包店取號碼牌的演算法，恐龍移掉了，但真的很重要，要學]&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h2 id="2個processes之cs-designpipjij">2個Processes之C.S Design(Pi,Pj,i≠j)&lt;/h2>
&lt;h3 id="algo1">Algo1&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>共享變數宣告如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">turn: int 值為i或為j
意義：權杖，turn值為i，就是只能讓Pi進入(只有Pi有資格進入)，反之亦然
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>程式&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/hIwkE4O.png"
loading="lazy"
alt="image-20230125222327372"
>&lt;/p>
&lt;ol start="3">
&lt;li>&lt;/li>
&lt;/ol>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>CS Design要滿足的條件&lt;/th>
&lt;th>滿足與否&lt;/th>
&lt;th>解析&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Mutual Exclusion&lt;/td>
&lt;td>O&lt;/td>
&lt;td>因為turn值不會同時為i且為j，只會為i或j的其中一個，因此只有Pi或Pj其中一個可以進入CS，不會兩個同時進入C.S&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Progress&lt;/td>
&lt;td>X&lt;/td>
&lt;td>假設目前Pi在RS(Pi不想進入CS)，且Turn值為i，若此時Pj想進入CS卻無法進入，被Pi阻礙，因為唯有仰賴Pi才能將Turn的值改為j，Pj才能進入CS，但此時Pi並不會去做此設定&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Bounded Waiting&lt;/td>
&lt;td>O&lt;/td>
&lt;td>假設目前turn為i，且Pi已先於Pj進入CS，而Pj等待中，當Pi離開CS後，又立刻想再進入CS，但因Pi會在離開CS後，將turn的值設為j，使得Pi無法先於Pj進入CS，所以Pj至多等一次後即可進入CS&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="algo2">Algo2&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>共享變數宣告如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">flag[i..j] of boolean;
初值皆為False
意義：flag[i] ={
True:Pi有意進C.S
False:Pi無意進C.S
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>程式：&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/efUReYc.png"
loading="lazy"
alt="image-20230126182421298"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>分析&lt;/p>
&lt;/li>
&lt;/ol>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>CS Design要滿足的條件&lt;/th>
&lt;th>滿足與否&lt;/th>
&lt;th>解析&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Mutual Exclusion&lt;/td>
&lt;td>O&lt;/td>
&lt;td>兩個人確實都不會同時進去，但有可能會兩個都想進去，卡住彼此，參照下面&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Progress&lt;/td>
&lt;td>X&lt;/td>
&lt;td>第二點不符合，會&lt;strong>形成Deadlock&lt;/strong>，Pi,Pj可能接無法進入C.S&lt;code>解析在下面&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Bounded Waiting&lt;/td>
&lt;td>O&lt;/td>
&lt;td>兩個都進不去，是deadlock，不是stravation&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>解析：&lt;img src="https://i.imgur.com/RJq3tIi.png"
loading="lazy"
alt="image-20230126183442922"
>&lt;/p>
&lt;h3 id="algo3">Algo3&lt;/h3>
&lt;p>&lt;code>Peterson's solution&lt;/code>&lt;/p>
&lt;p>&lt;code>混合Algo1,Algo2做撒尿牛丸&lt;/code>&lt;/p>
&lt;p>algo1只考慮誰有資格，沒考慮意願。algo2只考量意願，但會造成死結。因此結合百家之長，不只考量資格也考量意願&lt;/p>
&lt;ol>
&lt;li>
&lt;p>共享變數宣告如下&lt;/p>
&lt;ol>
&lt;li>Flag[i&amp;hellip;j] of Boolean初值皆為False &lt;code>表意願&lt;/code>&lt;/li>
&lt;li>Turn：值為i或j only &lt;code>表資格&lt;/code>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>程式&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/RdgEoJs.png"
loading="lazy"
alt="image-20230126220525905"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>分析&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>CS Design要滿足的條件&lt;/th>
&lt;th>滿足與否&lt;/th>
&lt;th>解析&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Mutual Exclusion&lt;/td>
&lt;td>O&lt;/td>
&lt;td>&lt;code>相互排斥，不會有兩個process同時進入C.S&lt;/code>：若Pi，Pj皆想進入C.S，代表flag[i]跟flag[j]結為True， 當雙方皆做到while測試的時候(也就是交錯)，表示雙方已分別執行過Turn=i, Trun=j之設定，差別只是先後順序不同而已。&lt;strong>若Pi執行比較快，把Turn改成J，接著Pj因為執行比較慢，又把Turn改成i，所以Turn的值只會為i(或j其中一個)，不會同時為兩者&lt;/strong>，所以只有Pi或Pj一個Process得以進入CS，因此符合Mutual Exclustion&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Progress&lt;/td>
&lt;td>O&lt;/td>
&lt;td>因為progress有兩個情況，因此分別討論之。&lt;br />1.&lt;code>不想進去的process不會阻礙別人進入&lt;/code>： 假設turn值為i，且Pi不想進入C.S，代表Flag[i]為False，若此時Pj想進去則Pj必可離開while(因為Flag[i]==False)，&lt;strong>而進入CS，因為Pi不會阻礙Pj進CS&lt;/strong>&lt;br />2.&lt;code>不產生Deadlock&lt;/code>：若Pi,Pj皆想進入C.S，則在有限的時間內必可決定出Turn值為i或為j，讓Pi or Pj進入，兩者不會waiting forever&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Bounded Waiting&lt;/td>
&lt;td>O&lt;/td>
&lt;td>&lt;code>先進去的process出來後，不會立刻再進去，亦即不會有Starvation的情形&lt;/code>：假設turn為i，Pi已先於Pj進入CS，而Pj等待進入中，Flag[i]==[j]==True，若Pi離開CS之後，又立刻想進入CS，則Pi必定會做一件事情，就是**~~把Flag[i]自己設為False~~，把Turn設成=j**，一定是Pj進入CS，因為Pj至多等一次後即可進入CS。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ol>
&lt;h2 id="n個processes-cs-design">N個Processes C.S Design&lt;/h2>
&lt;h3 id="bankerys-algo麵包店取號碼牌">Bankery&amp;rsquo;s Algo(麵包店取號碼牌)&lt;/h3>
&lt;p>&lt;code>解決Race Condition&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>觀念：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>客人(Process)要先取得號碼牌，才可入店內(CS)&lt;/strong>&lt;/li>
&lt;li>&lt;strong>店內(CS)一次只容一人(Process)進入&lt;/strong>&lt;/li>
&lt;li>&lt;strong>號碼最小的客人或同為最小號碼之多個客人中ID最小的(PID)，得以優先進入店(CS)&lt;/strong>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>共享變數宣告如下：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Choosing[0&amp;hellip;n-1] of Boolean 初值皆為False。&lt;/p>
&lt;p>意義：choosing[i]=&lt;/p>
&lt;ul>
&lt;li>True：&lt;strong>Pi正在取得號碼牌&lt;/strong>，尚未確定號碼&lt;/li>
&lt;li>False：
&lt;ul>
&lt;li>Pi取得號碼牌&lt;/li>
&lt;li>初值&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Number [0&amp;hellip;n-1] of int 代表號碼牌&lt;/p>
&lt;p>意義：代表P0~Pn-1，n個Process之&lt;strong>號碼牌值&lt;/strong>，初值皆為0。&lt;/p>
&lt;p>number[i]：&lt;/p>
&lt;ul>
&lt;li>0：表Pi&lt;strong>無意願&lt;/strong>進入CS&lt;/li>
&lt;li>.&lt;strong>&amp;gt;0：表Pi有意願進入CS&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>數學函數used&lt;/p>
&lt;ol>
&lt;li>MAX(&amp;hellip;)：取最大值(用來&lt;strong>決定號碼牌的值&lt;/strong>)&lt;/li>
&lt;li>(a,b)&amp;lt;(c,d)若要成立，則&lt;strong>必須滿足下列兩個條件之其中一個&lt;/strong>
&lt;ol>
&lt;li>a&amp;lt;c&lt;/li>
&lt;li>a==c and b&amp;lt;d&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Pi之程式如下：&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="n">repeat&lt;/span>
&lt;span class="n">chosing&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">True&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//表明正在取得號碼牌
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Number&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">MAX&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Number&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]...[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//決定號碼牌是幾號
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">choosing&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">False&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//表示已取得號碼牌
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span> &lt;span class="c1">// 此for-loop去檢測所有process
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">choosing&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]){&lt;/span>&lt;span class="k">do&lt;/span> &lt;span class="n">noting&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="c1">//若別人pj正在取號碼牌中，則稍等一下，若都沒有被卡住，可以順利跑完，則進入CS
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">number&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">number&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">number&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)){&lt;/span>&lt;span class="k">do&lt;/span> &lt;span class="n">noting&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="c1">//i代表自己，j代表別人。Pj有意願進入CS，並取Pj號碼小於我或跟我同好，Pj Id j &amp;lt;Pi ID i，則我等待。
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="n">C&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">S&lt;/span>
&lt;span class="n">Number&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">R&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">S&lt;/span>
&lt;span class="n">untill&lt;/span> &lt;span class="n">False&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h4 id="經典問題">經典問題&lt;/h4>
&lt;h5 id="為何會有很多個processes取得相同的number值">為何會有很多個Processes取得相同的Number值？&lt;/h5>
&lt;p>Ans. 假設MAX(Number [0]~[n-1]值為k，Pi,Pj(i≠j) 2個Processes之交錯執行順序如下：&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/4yOA23W.png"
loading="lazy"
alt="image-20230211150854314"
>&lt;/p>
&lt;h5 id="正確性證明">正確性證明？&lt;/h5>
&lt;p>Ans.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Mutual Exclusion：OK&lt;/p>
&lt;p>Case1. 假設Number值皆不同(&amp;gt;0)，則具有最小的Number值之Process，得以優先進入CS，其餘Process wait而最小值必唯一&lt;/p>
&lt;p>Case2. 有多個Processes具最小Number值，則以Processes之PID最小者得以進入CS，而ProcessID具備Unique性質，因為最小值必定唯一。&lt;/p>
&lt;p>藉由Case1, Case2知道唯一性確定，互斥確保&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Progress：OK&lt;/p>
&lt;p>Case1. 假設Pj不想進入CS，代表Number[j]為0，若此時Pi想進入CS則Pi檢查到Pj，Pi必定不會被Pj所阻礙，可以exits for中第二個While(因為while(number[j]&amp;gt;0 )，這個條件判斷不成立)&lt;/p>
&lt;p>Case2. 若P0~Pn1-1，n個Processes皆想進入CS，則在有限的時間內，必有一個Proess(其Number最小或同號中ProcessID最小)，可以順利跑完for loop進入CS，&lt;strong>因為No Deadlock&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Bouned waiting：OK&lt;/p>
&lt;p>Case1. 假設P0~Pn-1 n個Processes皆想進入CS，另Pi具有最大的，number值為=K(number[i]=K)，因此Pi會是最後進去的，其他(n-1)個Processes:Pj(j≠i)，必定皆先於Pi進入CS。若Pj離開C.S後，又立刻想再進入C.S，則Pj取得的號碼牌之值Number[j]必定大於K，所以Pj不會再度先於Pi進入CS，因此Pi頂多等(n-1)次後即可進入CS&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h5 id="設計問題">設計問題&lt;/h5>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">choosing&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]){&lt;/span>
&lt;span class="c1">// do noting
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">number&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">number&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">number&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)){&lt;/span> &lt;span class="c1">//問題，既然這邊都會把不符合的Process攔下來，娜何還需要上面的choosing[j]來卡住呢?是不是可以把choosing[j]刪掉，這樣的邏輯對嗎?會出現什麼問題嗎
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// do noting
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>解釋：&lt;/p>
&lt;p>違反了&lt;strong>互斥&lt;/strong>。&lt;/p>
&lt;p>例：令　目前Number[0,n-1]&lt;code>都還沒領到號碼牌&lt;/code>值皆為0，Pi，Pj2個Processes(i≠j)想進入CS，且假設ProcessID是i&amp;lt;j&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/9MHjI6c.png"
loading="lazy"
alt="image-20230211181602704"
>&lt;/p>
&lt;p>​ 就好比一個阿婆跟一個年輕妹妹一起去麵包店，年輕人先取完號碼牌，老太婆還沒取完。這時候妹妹領完後，老太婆還沒領，原本的設計下，妹妹會等阿婆領完才執行下一步，但這種情況下，即使阿婆還沒取，妹妹也會直接進入麵包店裡。接著阿婆取完號碼牌，發現跟妹妹同號(Race Condition)，此時他也想進入CS，這時候阿婆的身分證號碼(UID)比妹妹小，所以阿婆也可以進入CS，這種情況下，有兩個Process同時進入CS裡，違反了互斥(Mutual Exclustion)&lt;/p>
&lt;h2 id="hardware-solution---cpu-instructions-support">Hardware Solution - CPU Instructions Support&lt;/h2>
&lt;p>若CPU有提供下列指令之一&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>Test-and-Set (Lock)&lt;/li>
&lt;li>SWAP(a,b)&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>則Programmer可以運用在CS Design&lt;/p>
&lt;h3 id="test-and-setlock-指令">Test-and-Set(Lock) 指令&lt;/h3>
&lt;p>定義：此CPU Instruction之功能為，傳出Lock參數值&lt;code>Lock的資料型別為boolean&lt;/code>且將Lock參數設為True(1)，且CPU保證此指令是&lt;strong>☆☆☆&amp;quot;Atomically Executed&amp;quot;☆☆☆&lt;/strong>，&lt;/p>
&lt;p>範例：以Ｃ語言說明此指令功能：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="n">Test&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">and&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">Set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">Lock&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">temp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">Lock&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">Lock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">temp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>用在C.S Design上&lt;/p>
&lt;h3 id="algo1ｘ不可以用">[Algo1]：Ｘ不可以用&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>共享變數如下：&lt;/p>
&lt;p>Lock：boolean = False&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Pi程式如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="n">repeat&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Test&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">and&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">Set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Lock&lt;/span>&lt;span class="p">)){&lt;/span>
&lt;span class="c1">// do nothing
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="n">C&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">S區塊&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">Lock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">False&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">R&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">S&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">Utill&lt;/span> &lt;span class="n">False&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>分析：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Mutual Exclustion：OK&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/XtJJRuB.png"
loading="lazy"
alt="image-20230211192216510"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Progress：OK&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>不想進去的人就待在RS裡面，不會去搶&lt;/li>
&lt;li>避免死結，總有一個人會搶到Test-and-Set(Lock)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Bounded Waiting：違反&lt;/strong>&lt;/p>
&lt;p>假設Pi已先於Pj進入CS，且Pj等待中，當Pi離開CS後，若想在立刻進去CS，則&lt;strong>Pi是有機會在優先進去搶到Test-and-set之執行&lt;/strong>，因此Pj 有可能Starvation&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h3 id="algo2-穩的可以用">[Algo2] ：穩的，可以用&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>共享變數如下：&lt;/p>
&lt;ol>
&lt;li>Lock：boolean = False; &lt;code>Test and Set會用到的變數&lt;/code>&lt;/li>
&lt;li>waiting[0 ..n-1] of boolean初值皆為False，若為True則代表有意進入區間，若為False則代表初值，或準備進入C.S&lt;/li>
&lt;/ol>
&lt;p>意義：&lt;/p>
&lt;p>waiting[i]有兩種，若為&lt;/p>
&lt;p>True：&lt;strong>表Pi有意進入CS，且正在等待中&lt;/strong>&lt;/p>
&lt;p>False：&lt;strong>代表初值，或是表示Pi不需要再等了，可以進入CS&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Pi之程式如下： [034 17 02 CH6 P 6 71時24分02秒 17:57]&lt;/p>
&lt;p>區域變數&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Key：boolean;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>j: int&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="n">repeat&lt;/span>
&lt;span class="n">waiting&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="n">True&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//Pi有意，且等待中...
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">True&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">waiting&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">key&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Test&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">and&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Lock&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//--------------------分隔線--------------
&lt;/span>&lt;span class="c1">//在還沒離開while前，waiting[i]的值不可能為False，Process i 個人而言不可能把waiting[i]值改成False進入CS。因此只剩Key可以動了
&lt;/span>&lt;span class="c1">// 又因TestAndSet(Lock)方法會返回Lock的Boolean值，並將Lock設為True，也因此，惟有第一個搶到CPU的Process，才會有False的Key值
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">waiting&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">False&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//☆☆☆☆☆表明Pi不用等了，可以進入CS了☆☆☆☆☆
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">C&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">S&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">j&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//n是陣列長度, j 是指i的下一個element of array
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="err">≠&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">not&lt;/span> &lt;span class="n">waiting&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]){&lt;/span> &lt;span class="c1">//若j=i，則表示已經繞了一圈。waiting表意願，True代表想，False代表不想
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//找出下一個想進入C.S之Pj
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">//搭配下面的case2，代表都沒人想進入CS，並且因為 Test-and-Set(Lock)會將Lock設為True(可參照上面)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Lock&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="n">False&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//因為都沒人想進去，因此就把鎖打開
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="n">waiting&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">False&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//Pj不用等了，換你進CS
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="n">R&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">S&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">utill&lt;/span> &lt;span class="n">False&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Case1.&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/yLoFE11.jpg"
loading="lazy"
alt="S__16056339"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/qdgQnel.jpg"
loading="lazy"
alt="S__16056339"
>&lt;/p>
&lt;p>Case2：當Pi執行完後，發現外面都沒任何人想進來，只好再把Lock設回False，一切重新ReSet&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/5Dc47tS.png"
loading="lazy"
alt="image-20230214225719635"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/tRwC3p0.png"
loading="lazy"
alt="image-20230214232435547"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Q1：證明正確性&lt;/p>
&lt;p>Ans．&lt;/p>
&lt;p>[1] Mutual Exclusion：OK&lt;/p>
&lt;p>pf： Pi可進入C.S之條件有兩種可能&lt;/p>
&lt;p>case1. Key值為False&lt;/p>
&lt;p>代表Pi是第一個搶到Test-and-Set(Lock)執行者，如此才能將Key改為False，==&lt;strong>因此唯一性確立&lt;/strong>==&lt;/p>
&lt;p>case2. waiting[i]為False&lt;/p>
&lt;p>代表Pi在離開while之前，是&lt;strong>不會&lt;/strong>將waiting[i]改為False,==&lt;strong>只會將它設為True，只有在CS的Proces當它離開CS後，才能改變其他processes中之一個process的waiting值變False，在CS中的Process只有一個，出來CS後也只改變一個Process之waiting值為False，因此唯一性也確立。換言之，一個process不會自己把自己的waitiing值設成False，一定都是別的process來設的，因此唯一性確立&lt;/strong>==&lt;/p>
&lt;p>因此由case1及2得知，互斥成立&lt;/p>
&lt;p>[2] Progress：OK&lt;/p>
&lt;p>pf：==&lt;strong>若Pi不想進入C.S，其waiting[i]為False，而且Pi不會跟其他Process競爭Test-and-Set(Lock)的執行&lt;/strong>，且從CS離開之Process，也不會改變Pi之waiting值，因此Pi不會參與進行CS之決策。==&lt;/p>
&lt;p>若n個Process都想進入CS，則在有限的時間內必定會決定出第一個搶到Tetst-and-Set()執行，並進入CS。它從CS離開後，也會在&lt;strong>有限的&lt;/strong>時間內讓下一個想進入CS之Process進入CS或Lock設False。&lt;/p>
&lt;p>==不會有Deadlock==&lt;/p>
&lt;p>[3]Bounded Waiting：OK&lt;/p>
&lt;p>pf：假設P&lt;sub>0&lt;/sub>~P&lt;sub>n-1&lt;/sub>等n個Processes皆想進入C.S表示waiting[0]~[n-1]皆為True&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/Xk4eZu4.png"
loading="lazy"
alt="image-20230216003256885"
>&lt;/p>
&lt;p>令Pi是&lt;strong>第一個&lt;/strong>搶到Test-and-Set執行之Process，率先進入CS當Pi離開CS後，會將P&lt;sub>(n+1)%n&lt;/sub>之waiting值改為False，讓P&lt;sub>(n+1)%n&lt;/sub>進入cs，依此類推，Process會依P&lt;sub>i&lt;/sub>,P&lt;sub>(i+1)%n&lt;/sub>,P&lt;sub>(i+2)%n&lt;/sub>&amp;hellip;P&lt;sub>(i-1)%n&lt;/sub>FIFO 順序依據進入CS，故不會有Starvation&lt;/p>
&lt;h2 id="swapab指令">SWAP(a,b)指令&lt;/h2>
&lt;ul>
&lt;li>定義：&lt;strong>此CPU指令是將a,b兩值互換，且CPU保證它是==Atomically executed==&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>若以C語言描述，功能如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="nf">swap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">temp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">temp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>用在C.S design上&lt;/li>
&lt;/ul>
&lt;p>[algo1]：Ｘ&lt;/p>
&lt;p>共享變數如下&lt;/p>
&lt;p>Lock：boolean=False;&lt;/p>
&lt;p>區域變數如下：&lt;/p>
&lt;p>key：boolean&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">repeat;
key=True;
{repeat;
swap(Lock,key);
utill(key==False)} ; //成立才離開
C.S
Lock=False;
R.S
until False;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/MBKeMjT.png"
loading="lazy"
alt="image-20230216233043091"
>&lt;/p>
&lt;p>分析：&lt;/p>
&lt;p>[Algo1]同Test-and-Set&lt;/p>
&lt;p>Mutual Exclustion= ok&lt;/p>
&lt;p>progress= ok&lt;/p>
&lt;p>&lt;strong>Bounded waiting= No，只有設成Fales而已，還是無法避免無限等待&lt;/strong>&lt;/p>
&lt;p>[Algo2] 正確的&lt;/p>
&lt;p>將Test-and-set的[algo2]中&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">...
while(...){
// key=test-and-set(Lock);
swap(Lock,key); //改成這樣即可
}
...
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>綜合練習&lt;/p>
&lt;p>在Test-and-set[Algo2]中&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">while(waiting[i] and key){
key = Test-and-Set(Lock);
}
waiting[i] = False; //Pi不用等了，可進入CS
CS
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>若把&lt;code>waiting[i] = False; &lt;/code>這行刪掉，此行removed是否正確?explain in details&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/nYiqTti.png"
loading="lazy"
alt="image-20230217001954998"
>&lt;/p>
&lt;p>Ans.&lt;/p>
&lt;p>&lt;strong>違反Progress&lt;/strong>，不想進入的progress參與決策，並且會發生死結，兩件事情都會發生&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/e6tghIj.png"
loading="lazy"
alt="image-20230217005154344"
>&lt;/p>
&lt;h2 id="semaphore號誌">Semaphore(號誌)&lt;/h2>
&lt;p>學習地圖&lt;/p>
&lt;blockquote>
&lt;p>定義&lt;/p>
&lt;p>應用&lt;/p>
&lt;blockquote>
&lt;p>CS Design (臨界區間設計)&lt;/p>
&lt;p>synchronization problem solution(解決同步問題)&lt;/p>
&lt;/blockquote>
&lt;p>種類&lt;/p>
&lt;blockquote>
&lt;p>Binary semaphore vs counting semaphore&lt;/p>
&lt;p>spinlock semaphore vs non-busy waiting semaphore&lt;/p>
&lt;/blockquote>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>定義：令Ｓ為Semaphore type變數，架構在integer type針對S，提供兩個&lt;strong>Atomica operations&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>wait(S)&lt;code>或P(S)&lt;/code> &lt;code>因為是荷蘭人，所以用荷蘭命名&lt;/code>&lt;/li>
&lt;li>signal(S)&lt;code>或V(S)&lt;/code> &lt;code>因為是荷蘭人，所以用荷蘭命名&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>定義如下&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="waits">wait(S)：&lt;/h3>
&lt;p>==若S為0則卡住，若S不為0則通過==&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">while(S≦０){do no-op;} //若semaphore的值為0，則卡在這邊
S=S-1; //退出後semaphore值-1
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="signals">signal(S)：&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">S=S+1;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>note：因為Atomical, 所以S不會有race condition&lt;/p>
&lt;ul>
&lt;li>應用：主要用在CS Design，及同步問題之解決&lt;/li>
&lt;/ul>
&lt;h3 id="cs-design使用如下">&lt;strong>CS Design使用如下&lt;/strong>&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>共享變數宣告如下&lt;/p>
&lt;p>mutex&lt;code>常見的變數名稱，代表mutual exclustion的意思&lt;/code>：semaphore= 1; //初值為1&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Pi程式如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">repeat :
wait(mutex);
C.S
signal(mutex);
RS
untill False;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Pi&lt;/th>
&lt;th>Pj&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>T1：wait(mutex);&lt;br />因為mutex = 1&lt;br />所以Pi可以離開while，then,mutex值在減1變0，then Pi進入CS&lt;/td>
&lt;td>T2：wait(mutex)，因為此時mutex=0，這時候Pj會卡住。符合&lt;strong>Mutual exclustion&lt;/strong>&lt;br />&lt;strong>Progress也符合&lt;/strong>&lt;br />&lt;strong>Bounded waiting也符合&lt;/strong>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ol>
&lt;h3 id="解決簡單的synchronization-problem">&lt;strong>解決簡單的Synchronization problem&lt;/strong>&lt;/h3>
&lt;p>​ 何謂Synchronization? Process因為某些事件發生(or未發生)而被迫等待，無法往下執行，直到其他Processes do something才得以往下&lt;/p>
&lt;p>範例1：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Pi&lt;/th>
&lt;th>Pj&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&amp;hellip;&lt;/td>
&lt;td>&amp;hellip;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>A;&lt;/td>
&lt;td>B;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;hellip;&lt;/td>
&lt;td>&amp;hellip;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>規定：A必須在B之前執行，試用Semaphore達到此需求&lt;/p>
&lt;p>Ans. 宣告一共享變數&lt;/p>
&lt;p>S= Semaphore=0;
&lt;img src="https://i.imgur.com/gFkvUDs.png"
loading="lazy"
alt="image-20230218153218428"
>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Pi&lt;/th>
&lt;th>Pj&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&amp;hellip;&lt;/td>
&lt;td>&amp;hellip;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>A;&lt;br />signal(S);&lt;/td>
&lt;td>wait(S);&lt;br />B;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;hellip;&lt;/td>
&lt;td>&amp;hellip;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>==Note：semaphore的初值是具有某些意義的，並且初值不一定要是０或１，其實都可以，只是都用０跟１做舉例==&lt;/p>
&lt;ul>
&lt;li>初值為1：用作互斥控制&lt;/li>
&lt;li>初值為0：用作強迫等待&lt;/li>
&lt;/ul>
&lt;p>例2：&lt;/p>
&lt;p>S1：Semaphore= 0;&lt;/p>
&lt;p>S2：Semaphore= 0;&lt;/p>
&lt;p>規定執行順序為A -&amp;gt; C -&amp;gt; B 該如何完成?&lt;/p>
&lt;p>Ans：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Pi&lt;/th>
&lt;th>Pj&lt;/th>
&lt;th>Pk&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>wait(s2)&lt;/td>
&lt;td>wait(s1)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>A&lt;/td>
&lt;td>B;&lt;/td>
&lt;td>C;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>signal(s1)&lt;/td>
&lt;td>&lt;/td>
&lt;td>signal(s2)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Ex2：希望達成 &lt;u>A,B,C,&lt;/u>&lt;u>A,B,C,&lt;/u>&lt;u>A,B,C&lt;/u> repeatly execuction&lt;/p>
&lt;p>承上性質，S1,S2 semaphore=0;S3 semaphore=1&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Pi&lt;/th>
&lt;th>Pj&lt;/th>
&lt;th>Pk&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>wait(s3)&lt;/td>
&lt;td>wait(s1)&lt;/td>
&lt;td>wait(s2)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>A;&lt;/td>
&lt;td>B;&lt;/td>
&lt;td>C;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>signal(s1)&lt;/td>
&lt;td>signal(s2)&lt;/td>
&lt;td>signal(s3)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Ex3：C是共享變數，初值為3，請寫出最後C的值為多少&lt;/p>
&lt;ul>
&lt;li>第一小題&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Pi&lt;/th>
&lt;th>Pj&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>C=C*2&lt;/td>
&lt;td>C=C+1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>7或8或4或6&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>第二小題&lt;/li>
&lt;/ul>
&lt;p>s= semaphore=1&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Pi&lt;/th>
&lt;th>Pj&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>wait(s)&lt;/td>
&lt;td>wait(s)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>c=c*2&lt;/td>
&lt;td>c=c+1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>signal(s)&lt;/td>
&lt;td>singal(s)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>7或8&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>第三小題&lt;/li>
&lt;/ul>
&lt;p>s= semaphore = 0&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Pi&lt;/th>
&lt;th>Pj&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>wait(s)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>c=c*2&lt;/td>
&lt;td>c=c+1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>signal(s)&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>7&lt;/strong>&lt;/p>
&lt;p>EX4&lt;/p>
&lt;p>S1：Semaphore = 1;&lt;/p>
&lt;p>S2：Semaphore = 0;&lt;/p>
&lt;p>求ABC可能執行順序&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Pi&lt;/th>
&lt;th>Pj&lt;/th>
&lt;th>Pk&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>wait(s1)&lt;/td>
&lt;td>wait(s2)&lt;/td>
&lt;td>wait(s1)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>A;&lt;/td>
&lt;td>B;&lt;/td>
&lt;td>C;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>signal(s2)&lt;/td>
&lt;td>signal(s1)&lt;/td>
&lt;td>signal(s1)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Ans：把不可能的刪除就好&lt;/p>
&lt;p>ABC,&lt;/p>
&lt;p>&lt;del>ACB,&lt;/del>&lt;/p>
&lt;p>&lt;del>BAC,&lt;/del>&lt;/p>
&lt;p>&lt;del>BCA,&lt;/del>&lt;/p>
&lt;p>CAB,&lt;/p>
&lt;p>&lt;del>CBA&lt;/del>&lt;/p>
&lt;h3 id="semaphore之誤用所造成之問題">semaphore之誤用所造成之問題&lt;/h3>
&lt;p>違反互斥、形成死結&lt;/p>
&lt;p>例1&lt;/p>
&lt;p>s= Semaphore=1&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Pi&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>singal(s)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CS&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Wait(s)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&amp;mdash;&amp;gt; 違反mutual exclusion&lt;/p>
&lt;p>例2&lt;/p>
&lt;p>s= semaphore = 2&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Pi&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>wait(s)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>cs&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>wait(s)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>rs&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&amp;mdash;&amp;gt; 形成死結&lt;/p>
&lt;p>例3&lt;/p>
&lt;p>S1,S2 = Semaphore = 1;&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Pi&lt;/th>
&lt;th>Pj&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>T1:wait(s1)&lt;/td>
&lt;td>T2:wait(s2)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>T3:wait(s2)&lt;/td>
&lt;td>T4:wait(s1)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;hellip;&lt;/td>
&lt;td>&amp;hellip;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>signal(s1)&lt;/td>
&lt;td>signal(s2)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>signal(s2)&lt;/td>
&lt;td>signal(s1)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>可能形成deadlock，如果Pi，Pj依照T1~T4之順序交錯執行&lt;/p>
&lt;h3 id="著名的synchronization-problem之解決">著名的Synchronization Problem之解決&lt;/h3>
&lt;p>&lt;strong>想看看何時會停下來&lt;/strong>&lt;/p>
&lt;h4 id="producer-consumer-problem生產者消費者問題">Producer-Consumer Problem(生產者消費者問題)&lt;/h4>
&lt;p>Producer：此process專門產生資訊供別人使用&lt;/p>
&lt;p>Consumer：此process專門消耗別人產生的成果&lt;/p>
&lt;p>在sharrd memory溝通方式底下，會準備一個buffer&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/Ms4bWcB.png"
loading="lazy"
alt="image-20230219133538935"
>&lt;/p>
&lt;p>細分為兩個類型的問題&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Bounded Buffer Producer-Consumer(Buffer有限)&lt;/p>
&lt;p>有兩個情況會被迫等待&lt;/p>
&lt;ol>
&lt;li>當Buffer滿了，Producer被迫等待&lt;/li>
&lt;li>當Buffer空了，Consumer被迫等待&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Unbounded Buffer Producer-Consumer(Buffer無限)&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h5 id="algo1-1">algo1&lt;/h5>
&lt;p>共享變數宣告如下&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Buffer: [0..n-1] of items;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>in,out: int = 0;&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Producer 程式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">repeat:
produce an item in nextp;
while((in+1)%n==out) {do noting}; //當buffer滿的話，就卡在while中
Buffer[in] =nextp;
in = (in+1)%n;
until false;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Consumer程式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">repeat
while(in == out ){ do nothing} //buffer為空
nextc= Buffer[out];
out=(out+1) % n;
...
consumes the item in nextc;
until false;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/BkZNIb6.png"
loading="lazy"
alt="image-20230219174042582"
>&lt;/p>
&lt;p>此時producer 無法在加item，因為(in+1)%n == out, 即buffer已經滿了，因此最多利用(n-1)格&lt;/p>
&lt;h5 id="algo2-1">algo2&lt;/h5>
&lt;p>共享變數宣告如下&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Buffer: [0..n-1] of items;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>in,out: int = 0;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>==&lt;strong>count:int =0&lt;/strong>==&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>這個count值有可能導致race condition，因此不完全正確&lt;/strong>&lt;/p>
&lt;p>Producer 程式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">repeat:
produce an item in nextp;
while(count==n) {do noting}; //當buffer滿的話，就卡在while中
Buffer[in] =nextp;
in = (in+1)%n;
count = count +1;
until false;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Consumer程式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">repeat
while(count ==0 ){ do nothing} //buffer為空
nextc= Buffer[out];
out=(out+1) % n;
count = count -1;
...
consumes the item in nextc;
until false;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="用semaphore解producer-consumer-problem">用semaphore解producer-consumer problem&lt;/h4>
&lt;p>共享變數宣告如下：&lt;/p>
&lt;ol>
&lt;li>empty : semaphore = n . 代表buffer內空格數，若空格數變為0，代表滿了&lt;/li>
&lt;li>full : semaphore=0. 代表buffer區中，填入item之格數，若為0，表buffer為空&lt;/li>
&lt;li>mutex：semaphore=1; 對buffer, in , out , count做互斥控制，防止&lt;strong>race condition&lt;/strong>&lt;/li>
&lt;/ol>
&lt;h4 id="semaphore的設計哲學">semaphore的設計哲學&lt;/h4>
&lt;blockquote>
&lt;ol>
&lt;li>滿足同步條件之號誌變數&lt;code>empty, full&lt;/code>&lt;/li>
&lt;li>互斥控制防止race condition之號誌 &lt;code>mutex&lt;/code>&lt;/li>
&lt;li>先測同步在測互斥，不然會造成死結&lt;/li>
&lt;li>&lt;strong>==共享變數取存之前都需要經過互斥的處理==&lt;/strong>&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>producer&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">repeat
produce on item in nextp;
wait(empty) ; //若無空格則P被迫等待
wait(mutex);
add nextp into Bufffer; //濃縮很多程式在這行裡面喔
signal(mutex);
signal(full); //填入item之格數加1，maybe拯救Consumer
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>consumer&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">repeat
wait(full);
wait(mutex);
remove item from Buffer in nextc
signal(mutex);
singal(empty)
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="readwrite-problem">Read/write Problem&lt;/h4>
&lt;p>&lt;img src="https://i.imgur.com/J4nkQh8.png"
loading="lazy"
alt="image-20230222215707149"
>&lt;/p>
&lt;p>&lt;strong>基本的同步條件&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Reader write要互斥&lt;/strong>&lt;/li>
&lt;li>&lt;strong>writer,writer也要互斥&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>此外，這問題再細分成兩類&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>First read/writer problem&lt;/strong>&lt;/p>
&lt;p>-&amp;gt; 對Reader有利，對writer不利，因此writer可能starvation&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Second read/writer problem&lt;/strong>&lt;/p>
&lt;p>-&amp;gt; 對writer有利，對reader不利，因此reader可能startvation&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="first-readerwriter-problem">First Reader/Writer Problem&lt;/h4>
&lt;p>何謂「對Reader有利，Writer不利」?&lt;/p>
&lt;p>只要有源源不絕的Reader，則W1可能Starvation&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/P4FyOhL.png"
loading="lazy"
alt="image-20230222223611353"
>&lt;/p>
&lt;p>共享變數宣告如下：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>wrt：semaphore =1&lt;/p>
&lt;blockquote>
&lt;p>提供R/W 及 W/W互斥控制，並&lt;strong>兼差對Writer不利的控制&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>readcnt：int = 0;&lt;/p>
&lt;blockquote>
&lt;p>統計Reader個數，直到沒有Reader，才可以放writer進去&lt;/p>
&lt;p>Reader到-&amp;gt;Readcnt +1&lt;/p>
&lt;p>Reader走 -&amp;gt;Readcnt -1&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>mutex：semaphore=1&lt;/p>
&lt;blockquote>
&lt;p>由於readcnt是一共享變數，會有Race Condition之問題，故需額外宣告一變數Mutex做互斥控制&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ol>
&lt;p>程式：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>writer&lt;/th>
&lt;th>reader&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&amp;hellip;&lt;br />wait(wrt)&lt;br />執行寫入作業&lt;br />signal(wrt)&lt;br />&amp;hellip;&lt;/td>
&lt;td>&amp;hellip;&lt;br />wait(mutex) ;&lt;br />readcnt = readcnt +1&lt;br />if(readcnt==1)&lt;code>代表你是第一個Reader&lt;/code> then wait(wrt)&lt;code>要去偵測是否有writer存在。若有則卡住，若無則通過，也順便卡住writer&lt;/code>&lt;br />signal(mutex);&lt;br />執行reading工作 &lt;br />wait(mutex);&lt;br />readcnt = readcnt -1 //reader走，reader-1&lt;br />if(readcnt=.=0) then signal(wrt) //No reader，放writer進去&lt;br />singal(mutex)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>練習：&lt;/p>
&lt;p>若目前W1已在寫入中&lt;/p>
&lt;ol>
&lt;li>R1到，則R1會卡在wrt 裡，此時readcnt=1&lt;/li>
&lt;li>R2又到，則R2會卡在mutex，此時readcnt=1&lt;/li>
&lt;li>R3到，則R3會卡在mutex，此時readcnt=1&lt;/li>
&lt;/ol>
&lt;h4 id="second-reader-writer-problem">Second Reader/ writer problem&lt;/h4>
&lt;p>何謂對Writer 有利，&lt;strong>對Reader不利&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/beObzlW.png"
loading="lazy"
alt="image-20230306001249076"
>&lt;/p>
&lt;p>T6：w1離開，&lt;strong>優先&lt;/strong>放W2近來(並非R1)&lt;/p>
&lt;p>T7：w2離開，&lt;strong>優先&lt;/strong>放W2近來(並非R1)&lt;/p>
&lt;p>&amp;hellip;(以此類推)&lt;/p>
&lt;p>只要Writer離開，發現尚有waiting writer在，那就會優先放writer近來，所以R1有可能Startvation&lt;/p>
&lt;p>&lt;strong>共享變數之宣告&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>readcnt：int=0 ：統計reader個數&lt;/p>
&lt;/li>
&lt;li>
&lt;p>wrtcnd：int=0：統計writer個數&lt;/p>
&lt;/li>
&lt;li>
&lt;p>x：semaphore：１　//用來對readcnt做互斥控制，防止race condition&lt;/p>
&lt;/li>
&lt;li>
&lt;p>y：semaphore：１ //用來對wrtcnd做互斥控制，防止race condition&lt;/p>
&lt;/li>
&lt;li>
&lt;p>z：semaphore：１　//有的版本會有，有的版本不會有。作為對reader之入口控制(讓它卡多一些關卡，讓reader slower)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>rsem：semaphore=1　//作為對reader不利之控制&lt;/p>
&lt;/li>
&lt;li>
&lt;p>wsem：semephore=1 //提供R/W及W/W互斥控制&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>程式&lt;/strong>：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>writer&lt;/th>
&lt;th>reaeder(以First reader程式為主，再加入控制)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>wait(y)&lt;br />wrtcnt = wrtcnt+1;&lt;br />if(wrtcnt=&lt;!---->=1) then(wait(rsem)) //第一個writer ，要負責築起對reader不利之控制&lt;br />signal(y);&lt;br />wait(wsem) //&lt;br />執行writing工作&lt;br />&lt;br />wait(y)&lt;br />wrtcnt = wrtcnt-1&lt;br />if(wrtcnt==0) then signal(resm) //解除對reader不利之控制&lt;br />signal(wsem) //解除 R/W W/W互斥&lt;br />signal(y)&lt;/td>
&lt;td>wait(z)&lt;br />wait(rsem) //通過對reader不利之控制?&lt;br />wait(x)&lt;br />readcnt = readcnt +1;&lt;br />if(readcnt ==1) then wait(wsem) //R/W互斥&lt;br />signal(x)&lt;br />signal(rsem)&lt;br />signal(z)&lt;br />(執行reading工作)&lt;br />&lt;br />wait(x);&lt;br />readcnt = readcnt -1&lt;br />if(readcnt ==0) then signal(wsem) //解除R/W互斥&lt;br />signal(x)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="the-sleeping-barbers-problem">The Sleeping Barbers Problem&lt;/h4>
&lt;p>&lt;strong>描述&lt;/strong>：有一個barber，一張BarberChair，n張waitingChair。並且有客人。&lt;/p>
&lt;p>客人的行為如下&lt;/p>
&lt;blockquote>
&lt;p>waiting chairs 坐滿(n個等待客人)：不入店&lt;/p>
&lt;p>waiting chairs 尚未坐滿：入店內，坐在waitingChair，通知(喚醒)barber&lt;/p>
&lt;p>客人睡覺(wait) if barber is busy now&amp;hellip; 直到Barber叫他起床剪髮，剪完髮Exit&lt;/p>
&lt;/blockquote>
&lt;p>理髮師的行為如下&lt;/p>
&lt;blockquote>
&lt;p>睡覺 if no 客人&lt;/p>
&lt;p>直到有客人喚醒(通知)他&lt;/p>
&lt;p>叫醒客人剪髮&lt;/p>
&lt;p>剪完髮後如果還有客人，則叫醒客人剪髮&lt;/p>
&lt;p>剪完髮後如果沒有客人，則繼續睡，繼續水時間&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>共享變數宣告：&lt;/strong> &lt;strong>==共享變數取存之前都需要經過互斥的處理==&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>Customer：semaphore=0 ：用來卡住理髮師 if no &lt;strong>客人&lt;/strong>&lt;/li>
&lt;li>Barber：semaphore=0：用來卡住客人的 if Barber is busy&lt;/li>
&lt;li>waiting：int=0 // 坐在等待椅上的客人數目。何時+1?何時-1?客人入店，坐上椅子。Barber叫客人起來剪髮，會有race condition的問題&lt;/li>
&lt;li>mutex：semaphore=1 //防止waiting值race condition&lt;/li>
&lt;/ol>
&lt;p>程式：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Barber&lt;/th>
&lt;th>Customer&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>repeat&lt;br />wait((Customer))&lt;br />wait(mutex)&lt;br />waiting = waiting -1;&lt;br />signal(Barber)&lt;br />signal(mutex)&lt;br />剪客人頭髮();&lt;br />until False&lt;/td>
&lt;td>wait(mutex);&lt;br />if(waitng&amp;lt;n){waiting=waiting+1;&lt;br />signal(Customer) //叫醒、通知barber&lt;br />signal(mutex);&lt;br />wait(barber);&lt;br />被理髮()&lt;br />}else{ signal(mutex)}&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>客人是沒有repear &amp;hellip; until false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="the-dining-philosophers-problems">The Dining-Philosophers Problems&lt;/h4>
&lt;p>描述&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/Qxdepnt.png"
loading="lazy"
alt="image-20230306233039022"
>&lt;/p>
&lt;p>&lt;code>注意：1. 吃中餐：奇數、偶數哲學家皆可&lt;/code>&lt;/p>
&lt;p>&lt;code>2. 吃西餐：偶數位才可以（刀叉一副&lt;/code>&lt;/p>
&lt;p>&lt;strong>共享變數之宣告&lt;/strong>&lt;/p>
&lt;p>chopstick：[0,1,2,3,4] of semaphore；初值皆為1，對5根筷子做互斥控制。&lt;/p>
&lt;p>&lt;strong>i號哲學家(i=0~4)哲學家Pi之狀況&lt;/strong>(這程式是有問題的)&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">repeat...
hugry now;
wait(chopstick[i]);
wait(chopstick[(i+1)%5])
eating now;
signal(chopstick[i]);
signal(chopstick[(i+1)%5]);
think now;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>此Solution有問題，可能會形成Deadlock!!&lt;/p>
&lt;p>若每位哲學家都拿起自己左邊的筷子，則每位哲學家都卡住，皆無法取得右筷，形成circular waiting&lt;/p>
&lt;p>&lt;strong>解法一&lt;/strong>&lt;/p>
&lt;p>一次最多讓4位哲學家上桌&lt;/p>
&lt;p>m=5根,Maxi=2&lt;/p>
&lt;ol>
&lt;li>
&lt;p>1≦Maxi≦m成立&lt;/p>
&lt;/li>
&lt;li>
&lt;p>$$
\sum_{i=1}^nMaxi &amp;lt; n+m,因此2n&amp;lt;n+5, n&amp;lt;5。最多4位
$$&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>保證DeadLock Free-&amp;gt; 可額外加入另一個號誌 No:semaphore=4，做入口控制&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">repeat...
wait(No);
hugry now;
wait(chopstick[i]);
wait(chopstick[(i+1)%5])
eating now;
signal(chopstick[i]);
signal(chopstick[(i+1)%5]);
think now;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>解法二&lt;/strong>&lt;/p>
&lt;p>除非&lt;strong>哲學家可同時取得左右兩邊筷子&lt;/strong>，才准許持有筷子，否則不得持有任何筷子。否則不得持有任何筷子&lt;/p>
&lt;p>破除Hold&amp;amp;wait 條件&lt;/p>
&lt;p>&lt;strong>解法三&lt;/strong>&lt;/p>
&lt;p>相鄰哲學家之取筷順序不同，創造&lt;strong>Asymmetric mode&lt;/strong>，例如：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>奇數號&lt;/th>
&lt;th>偶數號&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>先取左，再取右&lt;/td>
&lt;td>先取右，再取左&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>破除Circular waiting條件&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/M9uGAQg.png"
loading="lazy"
alt="image-20230307231842002"
>&lt;/p>
&lt;p>Note：等同於西餐，大家規定：先取刀再取叉&lt;/p>
&lt;h4 id="cigarette-smokers-problem">cigarette smokers problem&lt;/h4>
&lt;p>很少考，從50年前就沒考過了。Pass&lt;/p></description></item><item><title>資料結構筆記</title><link>https://hoxtonhsu.com/p/%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B%E7%AD%86%E8%A8%98/</link><pubDate>Sat, 08 Oct 2022 03:02:43 +0800</pubDate><guid>https://hoxtonhsu.com/p/%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B%E7%AD%86%E8%A8%98/</guid><description>&lt;img src="https://i.imgur.com/NiqSvey.png" alt="Featured image of post 資料結構筆記" />&lt;h1 id="學習路線">學習路線&lt;/h1>
&lt;h2 id="ch1algorithm-recursion-and-performance-analysisspace--time">Ch1Algorithm, Recursion and Performance Analysis(space + Time)&lt;/h2>
&lt;h2 id="ch3-stack--queue">Ch3 Stack &amp;amp; Queue&lt;/h2>
&lt;h2 id="ch5-tree-and-binary-tree">Ch5 Tree And Binary Tree&lt;/h2>
&lt;h2 id="ch9-advanced-trees">Ch9 Advanced Trees&lt;/h2>
&lt;h2 id="ch7-search-and-usortingu">Ch7 Search and &lt;u>Sorting&lt;/u>&lt;/h2>
&lt;h2 id="ch8-hasing">CH8 Hasing&lt;/h2>
&lt;h2 id="ch6-graph">Ch6 Graph&lt;/h2>
&lt;h2 id="ch2ch4-arraylinked-list">Ch2/Ch4 Array&amp;amp;Linked List&lt;/h2>
&lt;h1 id="ch1-algorith-recursion-and-performance-analysis">Ch1 Algorith, Recursion and Performance Analysis&lt;/h1>
&lt;blockquote>
&lt;p>Algo定義(5個Criteria)&lt;/p>
&lt;p>Recursion(遞迴)☆☆☆☆☆&lt;/p>
&lt;blockquote>
&lt;p>定義&lt;/p>
&lt;p>種類&lt;/p>
&lt;p>與 Non-Recursion比較考型及來源&lt;/p>
&lt;/blockquote>
&lt;p>效能分析&lt;/p>
&lt;blockquote>
&lt;p>Space(較少考)&lt;/p>
&lt;p>Time(較常考)☆☆☆☆☆&lt;/p>
&lt;/blockquote>
&lt;/blockquote>
&lt;h2 id="algorithm演算法">Algorithm(演算法)&lt;/h2>
&lt;ul>
&lt;li>定義：為了解決特定問題之有限個敘述／步驟／指令所構成之集合，且必須滿足下列&lt;strong>５&lt;/strong>個Criteria：&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>Input：輸入的資料量&amp;gt;=0個即可&lt;/li>
&lt;li>Output：至少要有&amp;gt;=1個輸出量&lt;/li>
&lt;li>Definiteness(明確性)：每個敘述／步驟／指令必須是Clear且unambiauous(不可混淆不清)。&lt;code>3之要求在於Algo之寫作格式無一致標準之規範 &lt;/code>&lt;/li>
&lt;li>Finiteness(有限性)：必須在執行／追蹤有限個步驟後，必能夠終止&lt;/li>
&lt;li>Effectiveness(有效性)：人可以用紙和筆追蹤／執行每一個步驟，即每一個Step is baisc enough to be carried。&lt;code>當log完成，你如何確定它是正確的&lt;/code>&lt;/li>
&lt;/ol>
&lt;h2 id="recurtion遞迴">Recurtion(遞迴)&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>定義：(以Direct Recursion為例)，Algo/program中含有==&lt;strong>self-calling(自我呼叫)&lt;/strong>==敘述存在者，稱之遞迴&lt;/p>
&lt;/li>
&lt;li>
&lt;p>種類：&lt;/p>
&lt;ol>
&lt;li>Direct：直接遞迴&lt;/li>
&lt;li>Indirect：間接遞迴&lt;/li>
&lt;li>Tail：尾端遞迴&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>分述如下&lt;/p>
&lt;ol>
&lt;li>
&lt;p>直接遞迴：方法中直接呼叫自己&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="n">function&lt;/span> &lt;span class="nf">A&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="c1">// do something
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(...)&lt;/span> &lt;span class="n">then&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">//重複自己
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">else&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="c1">// do something
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>間接遞迴：多個Module之間彼此形成Calling Cycle，&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="n">function&lt;/span> &lt;span class="nf">A&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="c1">//something
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Call&lt;/span> &lt;span class="n">B&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">//相互呼叫
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//something
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="n">function&lt;/span> &lt;span class="nf">B&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="c1">//something
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Call&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">//相互呼叫
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//something
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>尾端遞迴：是Direct Recustion 之一種，recursive call發生在程式即將結束之前一行&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="n">function&lt;/span> &lt;span class="nf">A&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="c1">//do something
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">xxx&lt;/span>&lt;span class="p">){}&lt;/span> &lt;span class="n">then&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">//程式的最後一行 優點是Complier或工程師方便改寫成非遞迴的形式(降低時間複雜度
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>任何problem之解決，必定存在兩種形式之Algo&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>遞迴&lt;/li>
&lt;li>非遞迴(Interation)&lt;/li>
&lt;/ol>
&lt;p>eq. 求n! 求費氏數列&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/dIbSOTs.png"
loading="lazy"
alt="image-20230212130259106"
>&lt;/p>
&lt;p>比較圖如下&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Recursion&lt;/th>
&lt;th>Non-Recursion&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>程式碼較為精簡&lt;/strong>&lt;/td>
&lt;td>冗長&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>較少，或沒有使用區域變數&lt;/td>
&lt;td>使用到區域變數來保存中間值，Loop控制等等&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>程式碼占的儲存空間&lt;/strong>比較少&lt;/td>
&lt;td>程式碼占用的儲存空間較多&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>表達力較強(powerful)&lt;/td>
&lt;td>表達力較弱(weak)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>==&lt;strong>執行的時間較久，較沒效率&lt;/strong>==&lt;/td>
&lt;td>執行時間較短，較有效率&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>==&lt;strong>需要額外的stack space支持&lt;/strong>==&lt;/td>
&lt;td>不需要這東西&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>補充&lt;/li>
&lt;/ul>
&lt;p>在complier或程式語言的課程裡面，會&lt;strong>討論如何處理recursion?&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>當遇到Recursive call的時候，&lt;/p>
&lt;ol>
&lt;li>必須先保存當時執行狀況，push這些東西&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;ol>
&lt;li>參數值&lt;/li>
&lt;li>區域/占存 變數值&lt;/li>
&lt;li>返回位址(return address)&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>到System &lt;strong>stack&lt;/strong>&lt;/p>
&lt;ol start="2">
&lt;li>Jump to 程式開端執行&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>若遇到程式結束(END)敘述時&lt;code>遞迴條件不符合，繼續往下執行，遇到程式的END，要判斷是某一次的遞迴結束，還是整個都結束了。判斷的依據是查看Stack區是否為空，若為空則代表只是一次的遞迴結束，若Stack為空，則代表整個程式結束&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">stack&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">empty&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">then&lt;/span> &lt;span class="err">整個結束&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="n">pop&lt;/span> &lt;span class="n">stack&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//取出當時保存的參數或區域變數以及返回位置(return address) then go to &amp;#34;return address&amp;#34;執行
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//所謂的return address(返回位址，就是指遞迴結束完後，下一個會執行的程式碼)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="n">function&lt;/span> &lt;span class="nf">A&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">a&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">xxx&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">then&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//recursive call
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">else&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="c1">//do something
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="n">x&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="err">這就是返回位址&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/7uzIEQg.png"
loading="lazy"
alt="image-20230212135153292"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/7JDHEkJ.png"
loading="lazy"
alt="image-20230212135446234"
>&lt;/p>
&lt;h3 id="考型及來源">考型及來源&lt;/h3>
&lt;p>考型：&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>給一個Probleam，寫下Recursive algo/code&lt;/li>
&lt;li>給Recursive algo/code，要我們追蹤結果 etc&amp;hellip;&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>來源：&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>數學類：階層&lt;/li>
&lt;li>往後章節(二元樹的追蹤、圖形的追蹤、排序的追蹤&amp;hellip;)&lt;/li>
&lt;li>其他&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;ol>
&lt;li>Tower fo Hanoi&lt;/li>
&lt;li>permutation printing&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;/blockquote>
&lt;h4 id="數學類">數學類&lt;/h4>
&lt;ol>
&lt;li>寫下一個非遞迴的求階層方法&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="nf">fac&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>&lt;span class="k">else&lt;/span> &lt;span class="c1">// n&amp;gt;0{
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">S&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;=&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">S&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">S&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">S&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>
&lt;p>寫下一個用遞迴處理的求階程式&lt;/p>
&lt;p>==關鍵點：記下數學遞迴定義式==&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/taUXn8C.png"
loading="lazy"
alt="image-20230212145854185"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="nf">fac&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">fac&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>以2的Code為題目&lt;/p>
&lt;ol>
&lt;li>
&lt;p>求Fac(3)&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/5TgPcuk.png"
loading="lazy"
alt="image-20230212145917501"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>共呼叫Fac函數?次，含Fac(3)這次&lt;code>這影響到了時間複雜度，以及會調用幾次pop&lt;/code>&lt;/p>
&lt;p>4次，&lt;code>Fac(n)共呼叫幾次=n+1次&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>write a recursive algo for sum(n)= 1+2+&amp;hellip;+n, and sum(0)=0;&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/7JkNHxN.png"
loading="lazy"
alt="image-20230212150912005"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="nf">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>Fibonacci Number(費氏數列)&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/T5k9DFx.png"
loading="lazy"
alt="image-20230212151908181"
>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>n&lt;/th>
&lt;th>0&lt;/th>
&lt;th>1&lt;/th>
&lt;th>2&lt;/th>
&lt;th>3&lt;/th>
&lt;th>4&lt;/th>
&lt;th>5&lt;/th>
&lt;th>6&lt;/th>
&lt;th>7&lt;/th>
&lt;th>8&lt;/th>
&lt;th>9&lt;/th>
&lt;th>10&lt;/th>
&lt;th>11&lt;/th>
&lt;th>12&lt;/th>
&lt;th>13&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Fn&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>2&lt;/td>
&lt;td>3&lt;/td>
&lt;td>5&lt;/td>
&lt;td>8&lt;/td>
&lt;td>13&lt;/td>
&lt;td>21&lt;/td>
&lt;td>34&lt;/td>
&lt;td>55&lt;/td>
&lt;td>89&lt;/td>
&lt;td>144&lt;/td>
&lt;td>233&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Q：F98 = ? + ? = ? - ? = ? - ?&lt;/p>
&lt;ol>
&lt;li>F97+F96;&lt;/li>
&lt;li>F99-F97;&lt;/li>
&lt;li>F100-F99;&lt;/li>
&lt;/ol>
&lt;p>Q：不超過500之費氏數列&lt;/p>
&lt;p>​ A. F14 = 377&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Write a recursive algo/code for Fibonacci&lt;/p>
&lt;ol>
&lt;li>遞迴解法&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">int Fib(int n){
if(n==0){ return 0;}
if(n==1){return 1;}
return Fib(n-1)+Fib(n-2);
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>非遞迴解法&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="nf">Fib&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="p">}&lt;/span>&lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="p">}&lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">c&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="n">b&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Fo&lt;/th>
&lt;th>F1&lt;/th>
&lt;th>F2&lt;/th>
&lt;th>F3&lt;/th>
&lt;th>&amp;hellip;&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>a=0&lt;/td>
&lt;td>b=1&lt;/td>
&lt;td>c=a+b&lt;br />a=b&lt;br />b=c&lt;/td>
&lt;td>c=a+b&lt;br />a=b&lt;br />b=c&lt;/td>
&lt;td>&amp;hellip;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>依(1)之code，(i)求出Fib(5)之值(ii)呼叫次數?次(iii)Fib(10)的呼叫次數呢?&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">int Fib(int n){
if(n==0){ return 0;}
if(n==1){return 1;}
return Fib(n-1)+Fib(n-2);
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>ans .&lt;/p>
&lt;p>(i) 5&lt;/p>
&lt;p>(ii)&lt;img src="https://i.imgur.com/9rkgJtk.png"
loading="lazy"
alt="image-20230220000219053"
>&lt;/p>
&lt;p>(iii)&lt;img src="https://i.imgur.com/ed9zsLC.png"
loading="lazy"
alt="image-20230220001353812"
>&lt;/p>
&lt;ol start="4">
&lt;li>
&lt;p>令T&lt;sub>(n)&lt;/sub>代表求Fin(n)時之呼叫次數，即T(0)=T(1)=1次，(i)寫出T(n)之Recursive definition(ii)Based on (i)，求出T(10)之值&lt;/p>
&lt;p>ans . (i) T(n) = T(n-1)+T(n-2)+1 且 T(0) =T(1) = 1;&lt;/p>
&lt;p>​ (ii)&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>0&lt;/th>
&lt;th>1&lt;/th>
&lt;th>2&lt;/th>
&lt;th>3&lt;/th>
&lt;th>4&lt;/th>
&lt;th>5&lt;/th>
&lt;th>6&lt;/th>
&lt;th>7&lt;/th>
&lt;th>8&lt;/th>
&lt;th>9&lt;/th>
&lt;th>10&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>3&lt;/td>
&lt;td>5&lt;/td>
&lt;td>9&lt;/td>
&lt;td>15&lt;/td>
&lt;td>25&lt;/td>
&lt;td>41&lt;/td>
&lt;td>67&lt;/td>
&lt;td>109&lt;/td>
&lt;td>177&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>求Fib(5)時，則Fib(0),Fib(1),Fib(2),Fib(3),Fib(4),Fib(5),分別被呼叫?次&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Fib(n)&lt;/th>
&lt;th>0&lt;/th>
&lt;th>1&lt;/th>
&lt;th>2&lt;/th>
&lt;th>3&lt;/th>
&lt;th>4&lt;/th>
&lt;th>5&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>呼叫幾次&lt;/td>
&lt;td>3&lt;/td>
&lt;td>5&lt;/td>
&lt;td>3&lt;/td>
&lt;td>2&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>5只會自己生自己，4只會由5產生，3會由4跟5產生(1+1)，2則是由3跟4產生(2+1)，1會由2跟3產生(3+5)，但0只會由2產生，不會由0產生。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>接續上題，那Fib(10)呢?&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Fin(n)&lt;/th>
&lt;th>0&lt;/th>
&lt;th>1&lt;/th>
&lt;th>2&lt;/th>
&lt;th>3&lt;/th>
&lt;th>4&lt;/th>
&lt;th>5&lt;/th>
&lt;th>6&lt;/th>
&lt;th>7&lt;/th>
&lt;th>8&lt;/th>
&lt;th>9&lt;/th>
&lt;th>10&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>呼叫幾次&lt;/td>
&lt;td>34&lt;/td>
&lt;td>55&lt;/td>
&lt;td>34&lt;/td>
&lt;td>21&lt;/td>
&lt;td>13&lt;/td>
&lt;td>8&lt;/td>
&lt;td>5&lt;/td>
&lt;td>3&lt;/td>
&lt;td>2&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>令T(n)代表求Fib(n)時之加法次數&lt;/p>
&lt;p>(i)求出T(n)之recursive definition&lt;/p>
&lt;p>(ii)求T(5)之值 based on(i)&lt;/p>
&lt;p>ans&lt;/p>
&lt;p>(i) T(n)=T(n-1)+T(n-2)+1，且T(0)=0,T(1)=0&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Fib(n)&lt;/th>
&lt;th>0&lt;/th>
&lt;th>1&lt;/th>
&lt;th>2&lt;/th>
&lt;th>3&lt;/th>
&lt;th>4&lt;/th>
&lt;th>5&lt;/th>
&lt;th>6&lt;/th>
&lt;th>7&lt;/th>
&lt;th>8&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>呼叫幾次&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>2&lt;/td>
&lt;td>4&lt;/td>
&lt;td>7&lt;/td>
&lt;td>12&lt;/td>
&lt;td>20&lt;/td>
&lt;td>33&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>code如下，求F(5)之值&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">int Fib(int n){
if(n==0 || n==1){return 1}
return F(n-1)+F(n-2)
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Fib(n)&lt;/th>
&lt;th>0&lt;/th>
&lt;th>1&lt;/th>
&lt;th>2&lt;/th>
&lt;th>3&lt;/th>
&lt;th>4&lt;/th>
&lt;th>5&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>值&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>2&lt;/td>
&lt;td>3&lt;/td>
&lt;td>5&lt;/td>
&lt;td>8&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>code如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">int Fib(int n){
if(n&amp;lt;1){return 0}
if(n&amp;lt;3){return 1}
return Fib(n-1)+Fin(n-2)
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>(i)求Fib(5)之值&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Fib(n)&lt;/th>
&lt;th>0&lt;/th>
&lt;th>1&lt;/th>
&lt;th>2&lt;/th>
&lt;th>3&lt;/th>
&lt;th>4&lt;/th>
&lt;th>5&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>值&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>2&lt;/td>
&lt;td>3&lt;/td>
&lt;td>5&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>(ii)呼叫Fib函數?次(含Fib(5))&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/cR8M7qZ.png"
loading="lazy"
alt="image-20230220214503733"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Binomical coe(二項式係數)&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>​&lt;/p>
&lt;p>$$
{C_m}^n =(\underset{m}{\overset{n}{{}}})=\frac{n!}{m!(n-m)!}
$$&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>​&lt;/p>
&lt;p>$$
(i)write a recursive algo / code 求 (\underset{m}{\overset{n}{{}}})之值
$$&lt;/p>
&lt;p>ans. 關鍵，==&lt;strong>必背&lt;/strong>==&lt;/p>
&lt;p>$$
(\underset{m}{\overset{n}{{}}})=&lt;br>
\begin{cases}
&amp;amp; 1, \text{ if } (n = m \text{ or } m = 0) \&lt;br>
&amp;amp; (\underset{m}{\overset{n-1}{{}}})+(\underset{m-1}{\overset{n-1}{{}}})
\end{cases}
$$&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">int Bin(int n , int m){
if(n==m || m==0){return 1}
else{
return Bin(n-1,m)+Bin(n-1,m-1)
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>(ii) based on (i) code 求Bin(5,3)之值及呼叫次數&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/8VKJjX9.png"
loading="lazy"
alt="image-20230220232145991"
>&lt;/p>
&lt;p>ans 10 ,19次&lt;/p>
&lt;p>Note ：計算時有些撇步&lt;/p>
&lt;p>$$
(\underset{3}{\overset{5}{{}}}) = \frac{5\times4\times3}{1\times2\times3}=10
$$&lt;/p>
&lt;p>$$
(\underset{4}{\overset{8}{{}}}) = \frac{8\times7\times6\times5}{1\times2\times3\times4}=70
$$&lt;/p>
&lt;ol start="12">
&lt;li>GCD(A,B) 求A,B兩數之最大公因數，寫出recursive algo/code&lt;/li>
&lt;/ol>
&lt;p>==&lt;strong>☆☆☆☆☆☆☆☆☆要背☆☆☆☆☆☆☆☆☆☆☆☆&lt;/strong>==&lt;/p>
&lt;p>$$
GCD(A,B)=\ \begin{cases}
&amp;amp; B, \text{ if } (A modsB)=0 \&lt;br>
&amp;amp;GCD(B,AmodsB), other wise
\end{cases}
$$&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">int GCD(int A,int B){
if (A%B==0) {return B}
else return GCD(B,A%B)
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>依上述code，試求(1)求GCD(18,33)之值(2)呼叫GCD?次&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/JkzUfwK.png"
loading="lazy"
alt="image-20230221000814907"
>&lt;/p>
&lt;ol start="13">
&lt;li>Ackerman&amp;rsquo;s Function &lt;code>一坨大便，幹破你娘&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>$$
A(m,n) = \begin{cases}
n+1, &amp;amp; \text{if } m=0\&lt;br>
A(m-1,1), &amp;amp; \text{if } n=0\&lt;br>
A(m-1,A(m,n-1)), &amp;amp; \text{otherwise}
\end{cases}
$$&lt;/p>
&lt;p>(i) A(2,2)=?&lt;/p>
&lt;p>ans.&lt;/p>
&lt;p>A(2, 2) =7&lt;/p>
&lt;p>(ii) A(10,10)
ans.&lt;/p>
&lt;p>A(10, 10) = A(9, A(10, 9))
= A(9, A(9, A(10, 8)))
= A(9, A(9, A(9, A(10, 7))))
= A(9, A(9, A(9, A(9, A(10, 6)))))
= A(9, A(9, A(9, A(9, A(9, A(10, 5))))))
= A(9, A(9, A(9, A(9, A(9, A(9, A(10, 4)))))))
= A(9, A(9, A(9, A(9, A(9, A(9, A(9, A(10, 3))))))))
= A(9, A(9, A(9, A(9, A(9, A(9, A(9, A(9, A(10, 2)))))))))
= A(9, A(9, A(9, A(9, A(9, A(9, A(9, A(9, A(9, A(10, 1))))))))))
= A(9, A(9, A(9, A(9, A(9, A(9, A(9, A(9, A(9, A(9, 1))))))))))
≈ 2.1216 x 10^19728&lt;/p>
&lt;p>(iii)A(1,3)&lt;/p>
&lt;p>A(1, 3) = A(0, A(1, 2))
= A(0, A(0, A(1, 1)))
= A(0, A(0, A(0, A(1, 0))))
= A(0, A(0, A(0, A(0, 1))))
= A(0, A(0, A(0, 1)))
= A(0, A(0, 2))
= A(0, 3)
= 4&lt;/p>
&lt;p>&lt;strong>常考排行&lt;/strong>&lt;/p>
&lt;p>A(2,2) = 7&lt;/p>
&lt;p>A(2,1) = 5&lt;/p>
&lt;p>A(1,2) = 4&lt;/p>
&lt;p>A(2,3)= 9&lt;/p>
&lt;ol start="14">
&lt;li>求x&lt;sup>n&lt;/sup>，其中x,n是integer，且n ≧ 0 , write a recursive algo/ code&lt;/li>
&lt;/ol>
&lt;p>ans&lt;/p>
&lt;p>$$
x^n=
\begin{cases}
1&amp;amp;\text {if}(n==0) \
x \times x^{n-1}&amp;amp;\text {if} (n&amp;gt;0)
\end{cases}
$$&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">int exp(int x,int n){
if (n==0){return 1}
else{
return Exp(x,n-1)*x
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="15">
&lt;li>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">f&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="n">f&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">x&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>(i) 求foo(2,5)值&lt;/p>
&lt;p>​ &lt;img src="https://i.imgur.com/GvgDjdH.png"
loading="lazy"
alt="image-20230223220045068"
>&lt;/p>
&lt;p>(ii)求foo(x,n)之功能&lt;/p>
&lt;p>​ 求x&lt;sup>n&lt;/sup>&lt;/p>
&lt;p>(iii)求foo(x,n)之Time Complexity&lt;/p>
&lt;p>​ O(log&lt;sub>n&lt;/sub>)&lt;/p>
&lt;h4 id="河內塔towers-of-hanai">河內塔(Towers of Hanai)&lt;/h4>
&lt;p>&lt;img src="https://i.imgur.com/dj1RFAh.png"
loading="lazy"
alt="image-20230223232944377"
>&lt;/p>
&lt;p>程式如下：&lt;/p>
&lt;p>Hanoi(n,x,y,z);&lt;/p>
&lt;p>n：盤數&lt;/p>
&lt;p>x：來源&lt;/p>
&lt;p>y：占存地&lt;/p>
&lt;p>z：目的地&lt;/p>
&lt;p>Step1 Hanoi(n-1,A,C,B);&lt;/p>
&lt;p>Step2 Hanoi(1,A,B,C);&lt;/p>
&lt;p>Step3 Hanoi(n-1,B,A,C);&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="kt">void&lt;/span> &lt;span class="nf">Hanoi&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">Char&lt;/span> &lt;span class="n">B&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Char&lt;/span> &lt;span class="n">C&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;move disk %d from %c to %c &lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">C&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>&lt;span class="k">else&lt;/span> &lt;span class="c1">//n&amp;gt;1{
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Hanoi&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">C&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;move disk %d from %c &lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">C&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">Hanoi&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">C&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="permutation列印">Permutation列印&lt;/h4>
&lt;p>將[a,b,c]以不同的排列組合印出來&lt;/p>
&lt;p>如&lt;/p>
&lt;p>abc&lt;/p>
&lt;p>acb&lt;/p>
&lt;p>bac&lt;/p>
&lt;p>bca&lt;/p>
&lt;p>cba&lt;/p>
&lt;p>cab&lt;/p>
&lt;p>有3!=6種寫法&lt;/p>
&lt;p>以遞迴的概念來理解&lt;/p>
&lt;h1 id="ch5-tree-and-binary-tree-1">Ch5 Tree and Binary Tree&lt;/h1>
&lt;p>&lt;strong>Tree跟BinaryTree不一樣&lt;/strong>&lt;/p>
&lt;h2 id="學習路線-1">學習路線&lt;/h2>
&lt;blockquote>
&lt;p>Tree Def 相關術語&lt;/p>
&lt;p>Tree的表示方法(4種)☆☆&lt;/p>
&lt;p>Binary Tree之 Def 與 &lt;u>Tree不同比較☆☆☆☆☆&lt;/u>&lt;/p>
&lt;p>B.T的3個基本定理☆☆☆☆☆☆&lt;/p>
&lt;p>B.T的種類(4種)☆☆&lt;/p>
&lt;p>B.T的表示方式(2種)☆☆&lt;/p>
&lt;p>B.T Traversal (前中後序及level-order)及其應用☆☆&lt;/p>
&lt;p>&lt;strong>Binary Search Tree(BST)☆☆☆☆☆&lt;/strong>&lt;/p>
&lt;p>&lt;strong>Heap☆☆☆☆☆&lt;/strong>&lt;/p>
&lt;p>Thread Binary Tree(有效利用空鏈結，但非考試重點)☆☆&lt;/p>
&lt;p>Tree化成B.T,Forest化成BT&lt;/p>
&lt;p>N個Node所形成的不同B.T Structures ☆☆☆&lt;/p>
&lt;p>Disjoint Sets定義、表示、應用及Union(i,j) , Find(x)運作&lt;/p>
&lt;/blockquote>
&lt;h2 id="tree樹">Tree(樹)&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>定義：是由&amp;gt;0個Node所構成之集合，&lt;strong>不可以為空&lt;/strong>，滿足以下的條件&lt;/p>
&lt;ol>
&lt;li>至少會有一個特定Node叫做&lt;strong>Root(樹根)&lt;/strong>&lt;/li>
&lt;li>其餘的Node分成T1~Tm個互斥集合，T1~Tm稱之為Root之子樹(subtrees)&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/iwSOSZh.png"
loading="lazy"
alt="image-20230201220412599"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>術語&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Node&amp;rsquo;s Degree&lt;/strong>：該節點的子樹個數&lt;/p>
&lt;p>Ａ之Degree：３&lt;/p>
&lt;p>Ｂ之Degree：２&lt;/p>
&lt;p>Ｅ之Degree：０&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Leaf(樹葉)&lt;/strong>：Degree=0的Node&lt;/p>
&lt;p>例如：E,F,G,H,I,J&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Non-Leaf(非樹葉)：非樹葉的點(Degree&amp;gt;0的點)&lt;/p>
&lt;p>例如：Ａ,B,C,D&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Child與Parent&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Sibling(兄弟)：具有共同父點的Node，即為Sibling&lt;/p>
&lt;p>&lt;strong>eg. B,C,D是sibling&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Ancestors(先祖)：沿著父節點往上延伸的Node即為Ancestors&lt;/p>
&lt;p>eg. E之Ancestors{B,A}&lt;/p>
&lt;p>​ I之Ancestors{D,A}&lt;/p>
&lt;blockquote>
&lt;p>Note：Descendents(後代)&lt;/p>
&lt;p>eg. B之後代={E,F}&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>Node&amp;rsquo;s Level值：各家定義不盡相同，有以下幾種，&lt;strong>差異在於Root是0還是1&lt;/strong>。&lt;/p>
&lt;ul>
&lt;li>定義：
&lt;ol>
&lt;li>Root Level = 1;&lt;/li>
&lt;li>若 Parent 之 level=i，則it children level = i+1&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Tree&amp;rsquo;s Degree：MAx{Node&amp;rsquo;s Degree}&lt;/p>
&lt;p>eg. Tree&amp;rsquo;s Degree = 3&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Tree&amp;rsquo;s Height (or Depth) ：Max{Node&amp;rsquo;s Level}&lt;/p>
&lt;p>eg. Tree高度=3(假設root為1)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Forest(森林)&lt;/strong>：由≥0棵互斥Trees所形成之集合，&lt;strong>Forest可以為空&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h2 id="tree的表示方式">Tree的表示方式&lt;/h2>
&lt;p>方法一：LinkedList直接表示&lt;/p>
&lt;p>作法：假設Tree&amp;rsquo;s Degree=K，Node數=n，則Node Structure如下&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/jCq1OHY.png"
loading="lazy"
alt="image-20230201224708128"
>&lt;/p>
&lt;p>分析：&lt;/p>
&lt;p>&lt;strong>缺點:極度浪費Link空間&lt;/strong>，共準備n*K條Link，&lt;strong>☆☆☆☆☆有用的非Nil之Link有n-1條☆☆☆☆☆&lt;/strong>(扣掉樹根不用，概念類似相通的無向圖)，所以Nil Links(浪費的)有nk-(n-1)條，因為浪費比例&lt;/p>
&lt;p>$$
\frac{n&lt;em>k-(n-1)}{n&lt;/em>k} = \frac{nk-n+1}{nk}=\frac{k-1}{k} =0.99
$$&lt;/p></description></item><item><title>基礎AOP介紹-Filter Interceptor AspectJ</title><link>https://hoxtonhsu.com/p/%E5%9F%BA%E7%A4%8Eaop%E4%BB%8B%E7%B4%B9-filter-interceptor-aspectj/</link><pubDate>Fri, 07 Oct 2022 22:41:52 +0800</pubDate><guid>https://hoxtonhsu.com/p/%E5%9F%BA%E7%A4%8Eaop%E4%BB%8B%E7%B4%B9-filter-interceptor-aspectj/</guid><description>&lt;img src="https://i.imgur.com/B7GhSw1.png" alt="Featured image of post 基礎AOP介紹-Filter Interceptor AspectJ" />&lt;h1 id="目錄">目錄&lt;/h1>
&lt;ul>
&lt;li>&lt;a class="link" href="#Filter%28%e9%81%8e%e6%bf%be%e5%99%a8%29Interceptor%28%e6%94%94%e6%88%aa%e5%99%a8%29AOP%28%e5%89%96%e9%9d%a2%e5%b0%8e%e5%90%91%e7%a8%8b%e5%bc%8f%e8%a8%ad%e8%a8%88%29%e4%b9%8b%e5%b7%ae%e7%95%b0" >Filter(過濾器)Interceptor(攔截器)AOP(剖面導向程式設計)之差異&lt;/a>
&lt;ul>
&lt;li>&lt;a class="link" href="#Filter" >Filter &lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#Interceptor" >Interceptor&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#AspectJ" >AspectJ&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="aspectj">AspectJ&lt;/h1>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">graph TD;
AOP ---&amp;gt; SpringAop &amp;amp; AspectJ
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="aop-概念">AOP (概念)&lt;/h2>
&lt;p>面向切面編程，利用AOP可以對業務邏輯的各個部分進行隔離，使得業務邏輯各部分之間的耦合度降低，提高程式的可重用性，同時提高開發的效率&lt;/p>
&lt;p>不修改原始碼，從而擴充新功能&lt;/p>
&lt;h1 id="filter過濾器interceptor攔截器aspectjaop之差異">Filter(過濾器)Interceptor(攔截器)AspectJ(AOP)之差異&lt;/h1>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">flowchart LR;
1((使用者))--發送請求
--&amp;gt;Filter\n+統一設置編碼\n+過濾敏感字\n+登入驗證\n+URL級別的訪問權限控制\n+數據壓縮
--&amp;gt;dispatcher
--&amp;gt;Interceptor\n+權限驗證\n+登入驗證\n+性能檢測
--&amp;gt;AOP\n+日誌紀錄
--&amp;gt;2(Controller)
-1[粗糙]--能處理request的精細程度----&amp;gt;-2[細緻]
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/6rnsYg4.png"
loading="lazy"
alt="image-20220913095403747"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/vO1K7ew.png"
loading="lazy"
alt="image-20220912164304013"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/jQ4pF5v.png"
loading="lazy"
alt="image-20220913100841950"
>&lt;/p>
&lt;h2 id="filter">Filter&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">
flowchart LR;
1[瀏覽器]---&amp;gt;2{過濾器}---&amp;gt;3[Web資源]
3[Web資源]--&amp;gt;2{過濾器}--&amp;gt;1[瀏覽器]
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在HttpServletRequest到達Servlet之前，過濾、處理一些資訊，本身依賴Sevlet容器，不能獲取SpringBean的一些資訊，它是&lt;code>javax.servlet.FilterChain&lt;/code>的項目，&lt;strong>不是Springboot&lt;/strong>&lt;/p>
&lt;p>可以做什麼&lt;/p>
&lt;ul>
&lt;li>修改Request, Response&lt;/li>
&lt;li>防止xss(Cross-Site-SCripting跨網站指令碼)攻擊&lt;/li>
&lt;li>包裝二進制流&lt;/li>
&lt;/ul>
&lt;h4 id="自定義filter">自定義Filter&lt;/h4>
&lt;ul>
&lt;li>以註解方式製作Filter&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="cm">/**
&lt;/span>&lt;span class="cm">* 網路上教學蠻多都是implenments filter，但我建議extend GenericFilterBean
&lt;/span>&lt;span class="cm">* 會比較方便一點，省去implenments init(), distory()的麻煩
&lt;/span>&lt;span class="cm">*/&lt;/span>
&lt;span class="nd">@Slf4j&lt;/span>
&lt;span class="nd">@Component&lt;/span>
&lt;span class="nd">@WebFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">filterName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;f1&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">urlPatterns&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="s">&amp;#34;*.html&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="s">&amp;#34;*.jsp&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="s">&amp;#34;/&amp;#34;&lt;/span>&lt;span class="o">})&lt;/span> &lt;span class="c1">//filterName就只是一個名稱可以，隨意就好，urlPattern是用來指定哪些url要經過這個過濾器
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">HiFilter&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">GenericFilterBean&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">doFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ServletRequest&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ServletResponse&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">FilterChain&lt;/span> &lt;span class="n">chain&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">IOException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ServletException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">info&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Hello Hoxton&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">chain&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">doFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">response&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//代表這個Filter已經作用完畢，可以把request,response交給下一個Filter了
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/R9tNv8y.png"
loading="lazy"
alt="image-20220912151657403"
>&lt;/p>
&lt;p>結果如上&lt;/p>
&lt;ul>
&lt;li>以Java配置方式製作Filter&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Slf4j&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm">* 網路上教學蠻多都是implenments filter，但我建議extend GenericFilterBean
&lt;/span>&lt;span class="cm">* 會比較方便一點，省去implenments init(), distory()的麻煩
&lt;/span>&lt;span class="cm">*/&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">HiFilter&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">GenericFilterBean&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">doFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ServletRequest&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ServletResponse&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">FilterChain&lt;/span> &lt;span class="n">chain&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">IOException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ServletException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">info&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Hello Hoxton&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">chain&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">doFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">response&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//代表這個Filter已經作用完畢，可以把request,response交給下一個Filter了
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">FilterConfig&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">FilterRegistrationBean&lt;/span> &lt;span class="nf">heFilterRegistration&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">FilterRegistrationBean&lt;/span> &lt;span class="n">registration&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">FilterRegistrationBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">HiFilter&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">registration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addUrlPatterns&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/*&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//配置相關的路徑
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">registration&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>一些其他的config設置，僅供參考，與上面釋例無關&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">FilterConfig&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//test
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">FilterRegistrationBean&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Filter&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">logProcessTimeFilter&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">FilterRegistrationBean&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Filter&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">bean&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">FilterRegistrationBean&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="n">bean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">LogProcessTimeFilter&lt;/span>&lt;span class="o">());&lt;/span> &lt;span class="c1">//設定想要使用哪一個Filter
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">bean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addUrlPatterns&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/*&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//設置哪些url會觸發Filter，設置成/* 就代表全部都會吃到，/user/*就代表/user開頭的都會吃到
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">bean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;logProcessTimeFilter&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//設置要叫什麼名字
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">bean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setOrder&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//設定過濾器的執行順序
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">bean&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">FilterRegistrationBean&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Filter&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">logApiFilter&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">FilterRegistrationBean&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Filter&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">bean&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">FilterRegistrationBean&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="n">bean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">LogApiFilter&lt;/span>&lt;span class="o">());&lt;/span> &lt;span class="c1">//設定想要使用哪一個Filter
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">bean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addUrlPatterns&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/*&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//設置哪些url會觸發Filter，設置成/* 就代表全部都會吃到，/user/*就代表/user開頭的都會吃到
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">bean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;logApiFilter&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//設置要叫什麼名字
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">bean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setOrder&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//設定過濾器的執行順序
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">bean&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">FilterRegistrationBean&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Filter&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">printResponseRequestFilter&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">FilterRegistrationBean&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Filter&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">bean&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">FilterRegistrationBean&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="n">bean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">PrintResponseRequest&lt;/span>&lt;span class="o">());&lt;/span> &lt;span class="c1">//設定想要使用哪一個Filter
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">bean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addUrlPatterns&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/*&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//設置哪些url會觸發Filter，設置成/* 就代表全部都會吃到，/user/*就代表/user開頭的都會吃到
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">bean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;printResponseRequestFilter&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//設置要叫什麼名字
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">bean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setOrder&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">2&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//設定過濾器的執行順序
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">bean&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/blockquote>
&lt;p>SpringBoot本身也提供了許多不同的Filter供使用，參考如下&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/nKZ6Hy1.png"
loading="lazy"
alt="image-20220912153023872"
>&lt;/p>
&lt;p>常用的有以下幾個&lt;/p>
&lt;ul>
&lt;li>CharacterEncodingFilter(用於處理編碼問題)&lt;/li>
&lt;li>HiddenHttpMethodFilter(隱藏Http函數)&lt;/li>
&lt;li>HttpPutFormContentFilter(form表單處理)&lt;/li>
&lt;li>RequesrtContextFilter(請求上下文)&lt;/li>
&lt;/ul>
&lt;p>其他資訊可以詳閱&lt;a class="link" href="https://blog.csdn.net/qyp1314/article/details/42023725" target="_blank" rel="noopener"
>Spring MVC中各个filter的用法&lt;/a>&lt;/p>
&lt;p>其中以&lt;strong>OncePerRequestFilter&lt;/strong>最常被使用，這個Filter會去&lt;strong>過濾每一個Request請求，且不會重複執行&lt;/strong>，且這個Filter有一個doFilterInternal()的方法，供我們撰寫Filter邏輯&lt;code>因doFilter()的方法已在OncePerRequestFilter裡面實現了&lt;/code>，可以用來做Jwtoken的登入驗證，程式如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Component&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">JwtAuthenticationFilter&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">OncePerRequestFilter&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">JwtService&lt;/span> &lt;span class="n">jwtService&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">UserDetailsService&lt;/span> &lt;span class="n">userDetailsService&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">//注入JwtService UserDetailsService，分別用來解析Token與查詢使用者詳情
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">doFilterInternal&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpServletRequest&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">HttpServletResponse&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">FilterChain&lt;/span> &lt;span class="n">filterChain&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">ServletException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">IOException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">authHeader&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getHeader&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpHeaders&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">AUTHORIZATION&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">authHeader&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">accessToken&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">authHeader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">replace&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Bearer &amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//從請求標頭中取得Authorization欄位中的值
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">claims&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">jwtService&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">parseToken&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">accessToken&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//擷取出後面的JWT字串，接著解析它
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">username&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">claims&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;username&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//從claims物件中取得username欄位的值
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">UserDetails&lt;/span> &lt;span class="n">userDetails&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">userDetailsService&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">loadUserByUsername&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//並透過userDetailService查詢使用者詳情。這也代表JWT的內容(payload)必須包含username這個欄位
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//在filter中查詢使用者的目的，是為了將該次請求所代表的驗證後資料(Authentication)帶進security中的Context。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//Context是一種較抽象的概念，可以想像成該次請求的身分狀態
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="n">Authentication&lt;/span> &lt;span class="n">authentication&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">UsernamePasswordAuthenticationToken&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">userDetails&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">userDetails&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getAuthorities&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="c1">//為了將這個請求的使用者身分告訴伺服器，我們建立UsernamePasswordAuthenticationToken的物件，其中第三個參數放GrantedAuthority的List， 作為API的授權檢查
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//第一個參數(principal)傳入使用者詳請(UserDetails)。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 而第二個參數是credential，通常是密碼，但不傳入也無訪
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//經由傳入principal，我們得以在業務邏輯中從Context輕易獲取使用者身分的資料
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">SecurityContextHolder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getContext&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">setAuthentication&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">authentication&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">filterChain&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">doFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>配置完後再將這個Filter加入Security的過濾鍊&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@EnableWebSecurity&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">SecurityConfig&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">WebSecurityConfigurerAdapter&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">UserDetailsService&lt;/span> &lt;span class="n">userDetailsService&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">JwtAuthenticationFilter&lt;/span> &lt;span class="n">jwtAuthenticationFilter&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 協助帳號密碼認證的東西
&lt;/span>&lt;span class="cm"> * @return
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">AuthenticationManager&lt;/span> &lt;span class="nf">authenticationManagerBean&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kd">super&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">authenticationManagerBean&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//加入Security的過濾鍊
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">protected&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">configure&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpSecurity&lt;/span> &lt;span class="n">http&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">http&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">authorizeHttpRequests&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">antMatchers&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpMethod&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">GET&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;/users/**&amp;#34;&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">hasAuthority&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MemberAuthority&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">SYSTEM_ADMIN&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">name&lt;/span>&lt;span class="o">())&lt;/span>
&lt;span class="c1">// .antMatchers(HttpMethod.GET,&amp;#34;/h2/**&amp;#34;).hasAuthority(MemberAuthority.SYSTEM_ADMIN.name())
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">antMatchers&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpMethod&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">GET&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="s">&amp;#34;/login/**&amp;#34;&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">permitAll&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="c1">// .antMatchers(HttpMethod.POST,&amp;#34;login&amp;#34;).permitAll()
&lt;/span>&lt;span class="c1">// .antMatchers(HttpMethod.POST, &amp;#34;/users&amp;#34;).permitAll()
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">anyRequest&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">permitAll&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">and&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">addFilterBefore&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">jwtAuthenticationFilter&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">UsernamePasswordAuthenticationFilter&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="c1">//於UsernamePasswordAuthenticationFilter進行認證
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">sessionManagement&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">sessionCreationPolicy&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SessionCreationPolicy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">STATELESS&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">and&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">csrf&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">disable&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">formLogin&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">http&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">headers&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">frameOptions&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">disable&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">//讓spring Security可以和h2建立連線
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * @param auth 配置全局驗證資訊，如Authentication Provider,UserDetailService等等資訊，
&lt;/span>&lt;span class="cm"> * authenticationManager會接收到UsernamePasswordAuthenticationToken傳入的資料後
&lt;/span>&lt;span class="cm"> * 調用SecurityConfig中所配置的userDetailsService,passwordEncoder來協助驗證
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * @throws Exception
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">configure&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">AuthenticationManagerBuilder&lt;/span> &lt;span class="n">auth&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">auth&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">userDetailsService&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">userDetailsService&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">passwordEncoder&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">BCryptPasswordEncoder&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>一些Code的示範&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">LogProcessTimeFilter&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">OncePerRequestFilter&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * @param request 請求
&lt;/span>&lt;span class="cm"> * @param response 回應
&lt;/span>&lt;span class="cm"> * @param filterChain 過濾鏈 會將現有的filter給串聯起來，當請求進入後端，需要依序經過它們才會達到Controller，相對的，當回應離開Controller，則是按照相反的方向經過那些Filter
&lt;/span>&lt;span class="cm"> * @throws ServletException
&lt;/span>&lt;span class="cm"> * @throws IOException
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">doFilterInternal&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpServletRequest&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">HttpServletResponse&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">FilterChain&lt;/span> &lt;span class="n">filterChain&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">ServletException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">IOException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">long&lt;/span> &lt;span class="n">startTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentTimeMillis&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">filterChain&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">doFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//doFilter:相當於將請求送至Controller。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">endTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentTimeMillis&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="kt">long&lt;/span> &lt;span class="n">processTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">endTime&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">startTime&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;processTime = &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">processTime&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Controller收到的請求主體(RequestBody)和回應主體(ResponseBody)
&lt;/span>&lt;span class="cm"> * 分別由HttpServletRequest與HttpServletResponse的InputStream、OutputStream轉化而來，
&lt;/span>&lt;span class="cm"> * 但資料流只能讀取一次，如果在Filter層就被讀掉，可能會導致後面都收不到資料
&lt;/span>&lt;span class="cm"> * 為了保留主體中的資料，我們將請求主體與回應主體包裝成ContentCachingResponseWrapper ContentCachingRequestWrapper
&lt;/span>&lt;span class="cm"> * 再如同往常傳入FilterChain
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * 這兩個Wrapper的特色是會在內部備份一個ByteArrayOutputStream，我們只要呼叫這兩個Wrapper的
&lt;/span>&lt;span class="cm"> * getContentAsByteArray就可以無限制地取得主體內容
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">PrintResponseRequest&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">OncePerRequestFilter&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">doFilterInternal&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpServletRequest&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">HttpServletResponse&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">FilterChain&lt;/span> &lt;span class="n">filterChain&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">ServletException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">IOException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ContentCachingRequestWrapper&lt;/span> &lt;span class="n">requestWrapper&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ContentCachingRequestWrapper&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">ContentCachingResponseWrapper&lt;/span> &lt;span class="n">responseWrapper&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ContentCachingResponseWrapper&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">response&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">filterChain&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">doFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">requestWrapper&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">responseWrapper&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// logApi(request, response);
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">logBody&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">requestWrapper&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">responseWrapper&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">responseWrapper&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">copyBodyToResponse&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">logApi&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpServletRequest&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">HttpServletResponse&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">ServletException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">IOException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">httpStatus&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getStatus&lt;/span>&lt;span class="o">();&lt;/span> &lt;span class="c1">//200,403,404之類的
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">httpMethod&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getMethod&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">uri&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getRequestURI&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">params&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getQueryString&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">params&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">uri&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="s">&amp;#34;?&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">params&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">join&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">valueOf&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">httpStatus&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="n">httpMethod&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">uri&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">logBody&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ContentCachingRequestWrapper&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ContentCachingResponseWrapper&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">requestBody&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getContent&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getContentAsByteArray&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Request: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">requestBody&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">responseBody&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getContent&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getContentAsByteArray&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Response: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">responseBody&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * @param content
&lt;/span>&lt;span class="cm"> * @return 返回JSON字串
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">getContent&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">byte&lt;/span> &lt;span class="o">[]&lt;/span> &lt;span class="n">content&lt;/span>&lt;span class="o">){&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">body&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">content&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">body&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">replaceAll&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;[\n\t]&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//去除換行\n與定位符號\t
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="interceptor">Interceptor&lt;/h2>
&lt;p>本身是AOP的一種應用，其實攔截器跟過濾器是可以互相替換的，功能其實差不多，只是&lt;strong>攔截器可以在請求到達Controller或是回應回傳出Contrller時進行攔截&lt;/strong>，攔截成功時可以實做一些自定義的業務邏輯進行修改，且Interceptor是Springboot下的一個功能&lt;code>org.springframework.web.servlet.HandlerInterceptor&lt;/code>&lt;/p>
&lt;p>可以用來&lt;/p>
&lt;ul>
&lt;li>性能監控：紀錄請求的處理時間，比如說請求處理太久（超過500毫秒）&lt;/li>
&lt;li>登入檢測&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/1qACg6a.png"
loading="lazy"
alt="image-20220912164539364"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">graph LR;
request--&amp;gt;id1
id1--&amp;gt;id2--&amp;gt;id4--&amp;gt;id3--&amp;gt;id6--&amp;gt;id5
subgraph 攔截器1
direction TB
id1[&amp;#34;preHandle()&amp;#34;]
id3[&amp;#34;postHandler()&amp;#34;]
id5[&amp;#34;afterCompletion()&amp;#34;]
end
subgraph 攔截器2
direction TB
id2[&amp;#34;preHandle()&amp;#34;]
id4[&amp;#34;postHandler()&amp;#34;]
id6[&amp;#34;afterCompletion()&amp;#34;]
end
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>要實現interceptor有兩種方式&lt;/p>
&lt;ol>
&lt;li>實作HandlerInterceptor&lt;/li>
&lt;li>繼承HandlerInterceptorAdapter&lt;/li>
&lt;/ol>
&lt;p>釋例&lt;/p>
&lt;ul>
&lt;li>自定義攔截器&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">LogInterceptor&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">HandlerInterceptorAdapter&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">preHandle&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpServletRequest&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">HttpServletResponse&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="n">handler&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">long&lt;/span> &lt;span class="n">startTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentTimeMillis&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;\n-------- LogInterception.preHandle --- &amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Request URL: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getRequestURL&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Start Time: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentTimeMillis&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setAttribute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;startTime&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">startTime&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">postHandle&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpServletRequest&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">HttpServletResponse&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="n">handler&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ModelAndView&lt;/span> &lt;span class="n">modelAndView&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;\n-------- LogInterception.postHandle --- &amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Request URL: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getRequestURL&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">afterCompletion&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpServletRequest&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">HttpServletResponse&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="n">handler&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;\n-------- LogInterception.afterCompletion --- &amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kt">long&lt;/span> &lt;span class="n">startTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Long&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getAttribute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;startTime&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kt">long&lt;/span> &lt;span class="n">endTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentTimeMillis&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Request URL: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getRequestURL&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;End Time: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">endTime&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Time Taken: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">endTime&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">startTime&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>註冊攔截器&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">WebConfig&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">WebMvcConfigurer&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">addInterceptors&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">InterceptorRegistry&lt;/span> &lt;span class="n">registry&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">registry&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addInterceptor&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">LogInterceptor&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">registry&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addInterceptor&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">OldLoginInterceptor&lt;/span>&lt;span class="o">()).&lt;/span>&lt;span class="na">addPathPatterns&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/admin/oldLogin&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">registry&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addInterceptor&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">AdminInterceptor&lt;/span>&lt;span class="o">()).&lt;/span>&lt;span class="na">addPathPatterns&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/admin/*&amp;#34;&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">excludePathPatterns&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/admin/oldLogin&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="aspectj-1">AspectJ&lt;/h2>
&lt;p>屬於一種AOP框架&lt;/p>
&lt;ul>
&lt;li>動態代理(Spring5本身已經封裝了)
&lt;ul>
&lt;li>有兩種情況的動態代理
&lt;ul>
&lt;li>
&lt;p>有介面(JDK動態代理)&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">interface&lt;/span> &lt;span class="nc">UserDao&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">login&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">class&lt;/span> &lt;span class="nc">UserDaoImpl&lt;/span> &lt;span class="kd">implements&lt;/span>　&lt;span class="n">UserDao&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">login&lt;/span>&lt;span class="o">(){&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>創建UserDao介面實現類的代理對象，代理對象會有被代理對象的所有方法，並且增強&lt;/p>
&lt;/li>
&lt;li>
&lt;p>無介面(CGLIB動態代理)&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">class&lt;/span> &lt;span class="nc">User&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">add&lt;/span> &lt;span class="o">(){&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">class&lt;/span> &lt;span class="nc">Person&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">User&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="o">(){&lt;/span>
&lt;span class="kd">super&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="aopjdk動態代理">AOP(JDK動態代理)&lt;/h3>
&lt;p>使用JDK的動態代理，要使用Proxy類裡面的方法來創建出代理對象 &lt;code>newProxyInstance(類加載器,增強方法所在的類，這個類實現的介面,實現這個接口(InvocationHandler)&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/Hoxton019030/image/main/data/202209061536485.png"
loading="lazy"
>&lt;/p>
&lt;p>編寫JDK動態代碼&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">UserDao&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">add&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">update&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">UserDaoImpl&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">UserDao&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;add方法執行了&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">update&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">package&lt;/span> &lt;span class="nn">com.example.aop&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.lang.reflect.InvocationHandler&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.lang.reflect.Method&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.lang.reflect.Proxy&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.util.Arrays&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * @author Hoxton
&lt;/span>&lt;span class="cm"> * @version 1.1.0
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">JDKProxy&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Class&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">interfaces&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="n">UserDao&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">};&lt;/span>
&lt;span class="n">UserDaoImpl&lt;/span> &lt;span class="n">userDao&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">UserDaoImpl&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">UserDao&lt;/span> &lt;span class="n">dao&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">UserDao&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">Proxy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newProxyInstance&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">JDKProxy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getClassLoader&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">interfaces&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">UserDaoProxy&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">userDao&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="c1">//此dao已經不是原本的dao，而是新的代理類dao了
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">dao&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">2&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;result = &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//創建代理對象的代碼
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">UserDaoProxy&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">InvocationHandler&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//1. 把創建的是誰的代理對象，把誰傳遞進來
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 有參建構子
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">UserDaoProxy&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Object&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">obj&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//增強的邏輯
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="nf">invoke&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Object&lt;/span> &lt;span class="n">proxy&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Method&lt;/span> &lt;span class="n">method&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">methodArgs&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Throwable&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//方法之前
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;方法之前執行...&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">method&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;傳遞的參數...&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">Arrays&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">methodArgs&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="c1">//被增強的方法執行
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="n">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">method&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">invoke&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">methodArgs&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//方法之後
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;方法之後執行...&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="aop專業術語">AOP專業術語&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>連接點&lt;/p>
&lt;p>一個類裡面中，能被增強的方法就叫連接點，下面這個類就有四個連接點&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/Hoxton019030/image/main/data/202209121200728.png"
loading="lazy"
alt="image-20220912120043665"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">class&lt;/span> &lt;span class="nc">User&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="n">add&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">update&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">select&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">delete&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>切入點&lt;/p>
&lt;p>實際被增強的方法，就叫切入點&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通知(增強)&lt;/p>
&lt;ol>
&lt;li>
&lt;p>實際增強的邏輯部分稱為通知(增強)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通知有多種類型&lt;/p>
&lt;ol>
&lt;li>
&lt;p>前置通知&lt;/p>
&lt;p>在切入點前執行&lt;/p>
&lt;/li>
&lt;li>
&lt;p>後置通知&lt;/p>
&lt;p>在切入點後執行&lt;/p>
&lt;/li>
&lt;li>
&lt;p>環繞通知&lt;/p>
&lt;p>在切入點前後執行&lt;/p>
&lt;/li>
&lt;li>
&lt;p>異常通知&lt;/p>
&lt;p>出現異常時執行&lt;/p>
&lt;/li>
&lt;li>
&lt;p>最終通知&lt;/p>
&lt;p>執行到try&amp;hellip;catch的final時執行&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>切面&lt;/p>
&lt;p>是一個動作&lt;/p>
&lt;ol>
&lt;li>把通知應用到切入點的過程，就叫切面&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h3 id="aop準備">AOP(準備)&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>Spring 框架一般都是基於AspectJ實現的AOP操作&lt;/p>
&lt;ol>
&lt;li>
&lt;p>什麼是AspectJ&lt;/p>
&lt;ul>
&lt;li>AspectJ不是Spring的組成部分，是一個獨立的AOP框架， 一般把AspectJ和Spring框架一起使用，進行AOP操作&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>基於Aspect實現AOP操作&lt;/p>
&lt;ol>
&lt;li>xml配置文件實現&lt;/li>
&lt;li>基於註解方法實現(主要使用)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>再專案裡面引入AOP依賴&lt;/p>
&lt;/li>
&lt;li>
&lt;p>切入點表達式&lt;/p>
&lt;ol>
&lt;li>
&lt;p>切入點表達式的作用: 知道對哪個類的哪個方法進行增強&lt;/p>
&lt;/li>
&lt;li>
&lt;p>語法結構:&lt;/p>
&lt;p>execution( [權限修飾符] [返回類型] [類全路徑] [方法名稱] ( [參數列表] ) )&lt;/p>
&lt;ul>
&lt;li>
&lt;p>權限修飾符: public, private, *(代表不論是public, private 都選)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>返回類型: String, int&lt;/p>
&lt;/li>
&lt;li>
&lt;p>類全路徑: com.hoxton&amp;hellip;&amp;hellip;.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>方法名稱: 就方法名稱&lt;/p>
&lt;/li>
&lt;li>
&lt;p>參數列表: 有哪些參數&lt;/p>
&lt;p>舉例&lt;/p>
&lt;ol>
&lt;li>
&lt;p>對com.hoxton.dao.BookDao類裡面的add方法進行增強&lt;/p>
&lt;ul>
&lt;li>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">execution&lt;/span>&lt;span class="o">(*&lt;/span> &lt;span class="n">com&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hoxton&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">dao&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">BookDao&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(..)&lt;/span> &lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>對com.hoxton.dao.BookDao類的所有方法進行增強&lt;/p>
&lt;ul>
&lt;li>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">execution&lt;/span>&lt;span class="o">(*&lt;/span> &lt;span class="n">com&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hoxton&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">dao&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">BookDao&lt;/span>&lt;span class="o">.*(..))&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>對com.hoxton.dao包裡的所有類，類裡面的髓有方法進行增強&lt;/p>
&lt;ul>
&lt;li>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">excution&lt;/span>&lt;span class="o">(*&lt;/span> &lt;span class="n">com&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hoxton&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">dao&lt;/span>&lt;span class="o">.*.*(..))&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;p>within([package名].* )或( [package名]..*)&lt;/p>
&lt;p>舉例&lt;/p>
&lt;ol>
&lt;li>&lt;/li>
&lt;li>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h3 id="aop操作aspect-j--註解">AOP操作(Aspect J 註解)&lt;/h3>
&lt;ol>
&lt;li>創建類，在類裡面定義方法&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">User&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="o">(){&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;add&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>
&lt;p>創建增強類(編寫增強邏輯)&lt;/p>
&lt;ol>
&lt;li>
&lt;p>在增強類的裡面，創建方法，讓不同方法代表不同通知類型&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">UserProxy&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">before&lt;/span>&lt;span class="o">(){&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;before&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>進行通知的配置&lt;/p>
&lt;ol>
&lt;li>在Spring&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h1 id="log4j-2">Log4j 2&lt;/h1>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">flowchart TD;
8[&amp;#34;ALL(全輸出不留情)&amp;#34;]---&amp;gt;7[&amp;#34;Trace(更細的除錯資訊，通常用來追蹤城市流程的日誌)&amp;#34;]---&amp;gt;6[&amp;#34;DEBUG(除錯資訊的日志)推薦★&amp;#34;]---&amp;gt;5[&amp;#34;INFO(一般資訊的日志)推薦★&amp;#34;]---&amp;gt;4[&amp;#34;WARN(可能導致錯誤的日志)&amp;#34;]---&amp;gt;3[&amp;#34;ERROR(造成應用錯誤停止的日志)&amp;#34;]---&amp;gt;2[&amp;#34;FETAL(造成應用程式停止的日志)&amp;#34;]---&amp;gt;1[&amp;#34;OFF(不輸出任何日志)&amp;#34;]
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="參考">參考&lt;/h1>
&lt;p>&lt;a href="https://www.cnblogs.com/itlihao/p/14329905.html">https://www.cnblogs.com/itlihao/p/14329905.html&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://blog.csdn.net/fly910905/article/details/86537648">https://blog.csdn.net/fly910905/article/details/86537648&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/712557/" target="_blank" rel="noopener"
>SpringBoot攔截器(Interceptor)詳解&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.zendei.com/article/52571.html" target="_blank" rel="noopener"
>Spring Boot使用過濾器和攔截器分別實現REST介面簡易安全認證&lt;/a>&lt;/p>
&lt;blockquote>
&lt;/blockquote></description></item><item><title>Java內的排程器介紹</title><link>https://hoxtonhsu.com/p/java%E5%85%A7%E7%9A%84%E6%8E%92%E7%A8%8B%E5%99%A8%E4%BB%8B%E7%B4%B9/</link><pubDate>Thu, 06 Oct 2022 23:14:21 +0800</pubDate><guid>https://hoxtonhsu.com/p/java%E5%85%A7%E7%9A%84%E6%8E%92%E7%A8%8B%E5%99%A8%E4%BB%8B%E7%B4%B9/</guid><description>&lt;img src="https://i.imgur.com/9or5BzU.png" alt="Featured image of post Java內的排程器介紹" />&lt;h1 id="springboot-scheduling">SpringBoot-Scheduling&lt;/h1>
&lt;p>用來做定期任務的東西，有兩種&lt;/p>
&lt;ul>
&lt;li>Spring schedule：只適合處理簡單的計畫任務，不能處理分散式的任務，當任務太多時，可能出現阻塞、崩潰、延遲啟動等問題&lt;/li>
&lt;li>Quartz：更強大的一個排程器，能夠配置上百甚至上千的事務。&lt;/li>
&lt;/ul>
&lt;h1 id="spring-schedule">Spring Schedule&lt;/h1>
&lt;h2 id="步驟">步驟&lt;/h2>
&lt;ol>
&lt;li>在啟動類上加上@EnableScheduling&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@SpringBootApplication&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="nd">@EnableScheduling&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Application&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">SpringApplication&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">run&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Application&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>在方法上加上@Scheduled&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Component&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Task&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Scheduled&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">fixedDelay&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">10&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">100&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">printLocalTime&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">LocalTime&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">now&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/RJ1HtHT.png"
loading="lazy"
alt="image-20220914144530121"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="nd">@Scheduled&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cron&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;1 * * * * ?&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">zone&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;Asia/Taipei&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">printPer5second&lt;/span>&lt;span class="o">(){&lt;/span>
&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">info&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;cron&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/AATFHO2.png"
loading="lazy"
alt="image-20220914145339544"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Scheduled&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cron&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;0/1 * * * * ?&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">zone&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;Asia/Taipei&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">printPer5second&lt;/span>&lt;span class="o">(){&lt;/span>
&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">info&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;cron&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/Kby8DZf.png"
loading="lazy"
alt="image-20220914145730980"
>&lt;/p>
&lt;h2 id="cron表達式七子表達式">Cron表達式(七子表達式)&lt;/h2>
&lt;p>&lt;a class="link" href="https://cron.qqe2.com/" target="_blank" rel="noopener"
>表達式生成工具&lt;/a>&lt;/p>
&lt;p>Cron語源來自Chronos，是希臘神話中掌管時間的神柯羅諾斯(Chronos)。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>秒&lt;/th>
&lt;th>分&lt;/th>
&lt;th>時&lt;/th>
&lt;th>日&lt;/th>
&lt;th>月&lt;/th>
&lt;th>周&lt;/th>
&lt;th>年(可選)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>*&lt;/td>
&lt;td>*&lt;/td>
&lt;td>*&lt;/td>
&lt;td>*&lt;/td>
&lt;td>?&lt;/td>
&lt;td>?&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>秒：0-59&lt;/li>
&lt;li>分：0-59&lt;/li>
&lt;li>時 ：0-23&lt;/li>
&lt;li>日：1-31&lt;/li>
&lt;li>月：0-11或&amp;quot;JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC&amp;quot;&lt;/li>
&lt;li>周：1-7或SUN, MON, TUE, WED, THU, FRI,SAT&lt;/li>
&lt;li>年&lt;/li>
&lt;/ul>
&lt;p>想像一個時鐘&amp;hellip;&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>當每次秒針指向一秒時&lt;/th>
&lt;th>1 * * * * ?&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>當每次時針指向12時&lt;/td>
&lt;td>* * 12 * * ?&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>每個月 1 號中午 12 點&lt;/td>
&lt;td>0 0 12 1 * ?&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1 月每天中午 12 點，每 5 秒&lt;/td>
&lt;td>0/5 0 12 * 1 ?&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">字元&lt;/th>
&lt;th style="text-align:left">意義&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">&lt;code>*&lt;/code>&lt;/td>
&lt;td style="text-align:left">表達任意值，所有值都可以匹配&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>?&lt;/code>&lt;/td>
&lt;td style="text-align:left">只用在 &lt;code>日&lt;/code> 跟 &lt;code>周&lt;/code> 的值域，有點表達 don’t care 的概念，無所謂，不關心到底是什麼值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>-&lt;/code>&lt;/td>
&lt;td style="text-align:left">指定範圍，前後接數字: 10-12&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>,&lt;/code>&lt;/td>
&lt;td style="text-align:left">指定離散的選項: 1,5,6,8，或者的概念&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>/&lt;/code>&lt;/td>
&lt;td style="text-align:left">指定增量，表達 &lt;code>每&lt;/code> 的概念: 0/5 意旨從 0 開始每 5 單位&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>L&lt;/code>&lt;/td>
&lt;td style="text-align:left">用在 &lt;code>月&lt;/code> 跟 &lt;code>周&lt;/code> 的值域。在月的話表達最後一天，在周的話前面可以加上數字 3L 表示該月最後一個星期二&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>W&lt;/code>&lt;/td>
&lt;td style="text-align:left">用在&lt;code>日&lt;/code>的值域表示距離最近的該月工作日: 15W，距離 15 號最近的工作日，可能往前也可能往後&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>LW&lt;/code>&lt;/td>
&lt;td style="text-align:left">用在&lt;code>日&lt;/code>的值域，表示最後一周的工作日&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>#&lt;/code>&lt;/td>
&lt;td style="text-align:left">用在&lt;code>周&lt;/code>的值域，指定特定周的特定日: “4#2” 表示第二周的星期三&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>C&lt;/code>&lt;/td>
&lt;td style="text-align:left">用在&lt;code>日&lt;/code>跟&lt;code>周&lt;/code>的值域，指某特定個日期的後一天: 在&lt;code>日&lt;/code>中寫 3C 指該月 3 號的後一天，在&lt;code>周&lt;/code>中寫 2C 指該周星期一的後一天&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="quartz">Quartz&lt;/h1>
&lt;p>&lt;img src="https://i.imgur.com/C8FFRz9.png"
loading="lazy"
alt="image-20220916143034403"
>&lt;/p>
&lt;p>是一個開源的任務排程器，幾乎可以整合到任何Java應用程式中。&lt;/p>
&lt;p>它可以用來&lt;/p>
&lt;ul>
&lt;li>安排每個晚上把資料庫內容轉存到檔案&lt;/li>
&lt;li>提供定時提醒服務&lt;/li>
&lt;li>族繁不及備載&amp;hellip;&lt;/li>
&lt;/ul>
&lt;h3 id="底層數據結構--堆">底層數據結構- 堆&lt;/h3>
&lt;h4 id="介紹">介紹&lt;/h4>
&lt;p>堆是一種特殊的樹，滿足下面兩個條件，就是一個&lt;strong>堆&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>堆是一顆完全二元樹&lt;code>完整二元樹：除了最後一層以外，其他層的節點數需要達到最大(1,2,4,8. ..)&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/GYIKgRe.png"
loading="lazy"
alt="image-20220916103657827"
>&lt;/p>
&lt;ol start="2">
&lt;li>每個節點所儲存的值，必須要大於&lt;code>小頂堆&lt;/code>或小於&lt;code>大頂堆&lt;/code>父節點的值&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/t5Aeict.png"
loading="lazy"
alt="image-20220916104946559"
>&lt;/p>
&lt;blockquote>
&lt;p>小頂堆&lt;/p>
&lt;/blockquote>
&lt;p>完整二元樹的一些特性：快速定位父節點&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/F9btok2.png"
loading="lazy"
alt="image-20220916105634080"
>&lt;/p>
&lt;p>&lt;strong>在排程器的框架中，每一個節點就是一個Job，越頻繁的Job會被放置在越上層的節點&lt;/strong>&lt;/p>
&lt;h4 id="如何插入元素">如何插入元素&lt;/h4>
&lt;p>尾插法，在尾部插入一個新的元素，然後上浮，浮到符合定義&lt;/p>
&lt;ol>
&lt;li>除了最後一層以外，其他層的節點數需要達到最大(1,2,4,8. ..)，且最後一層節點都靠左排列&lt;/li>
&lt;li>每個節點所儲存的值，必須要大於&lt;code>小頂堆&lt;/code>或小於&lt;code>大頂堆&lt;/code>父節點的值&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/kGnnrnf.png"
loading="lazy"
alt="image-20220916110137933"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/YjWGVYi.png"
loading="lazy"
alt="image-20220916110150486"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/pqhvAgT.png"
loading="lazy"
alt="image-20220916110656733"
>&lt;/p>
&lt;h4 id="如何刪除元素">如何刪除元素&lt;/h4>
&lt;p>將尾部(最後一個節點)放置到堆頂，然後下沉&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/vM6IFnf.png"
loading="lazy"
alt="image-20220916111249806"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/ltoSIL1.png"
loading="lazy"
alt="image-20220916111306206"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/spOXHoC.png"
loading="lazy"
alt="image-20220916111330270"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/giEhi6Y.png"
loading="lazy"
alt="image-20220916111958376"
>&lt;/p>
&lt;h3 id="時間輪算法time-wheel">時間輪算法(Time Wheel)&lt;/h3>
&lt;p>&lt;img src="https://i.imgur.com/FGlGv1M.png"
loading="lazy"
alt="image-20220916114613849"
>&lt;/p>
&lt;p>再刪除元素的時候都需要下沉，當節點數很多時會造成性能延宕&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/djp3Uq4.png"
loading="lazy"
alt="image-20220916113838923"
>&lt;/p>
&lt;h4 id="round-型的時間輪">round 型的時間輪&lt;/h4>
&lt;p>任務上記錄一個round，遍歷到了就將round減一，為0時取出來執行&lt;/p>
&lt;h4 id="分層時間輪">分層時間輪&lt;/h4>
&lt;p>Cron表達式以及其他排程器所採用的底層架構，分成秒輪、分輪、小時輪、日輪、周輪、月輪、年輪&amp;hellip;，月輪迭代到了，就將任務取出放到天輪中執行&amp;hellip;，以此類推&lt;/p>
&lt;h2 id="cron表達式七子表達式-1">Cron表達式(七子表達式)&lt;/h2>
&lt;p>&lt;a class="link" href="https://cron.qqe2.com/" target="_blank" rel="noopener"
>表達式生成工具&lt;/a>&lt;/p>
&lt;p>Cron語源來自Chronos，是希臘神話中掌管時間的神柯羅諾斯(Chronos)。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>秒&lt;/th>
&lt;th>分&lt;/th>
&lt;th>時&lt;/th>
&lt;th>日&lt;/th>
&lt;th>月&lt;/th>
&lt;th>周&lt;/th>
&lt;th>年(可選)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>*&lt;/td>
&lt;td>*&lt;/td>
&lt;td>*&lt;/td>
&lt;td>*&lt;/td>
&lt;td>?&lt;/td>
&lt;td>?&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>秒：0-59&lt;/li>
&lt;li>分：0-59&lt;/li>
&lt;li>時 ：0-23&lt;/li>
&lt;li>日：1-31&lt;/li>
&lt;li>月：0-11或&amp;quot;JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC&amp;quot;&lt;/li>
&lt;li>周：1-7或SUN, MON, TUE, WED, THU, FRI,SAT&lt;/li>
&lt;li>年&lt;/li>
&lt;/ul>
&lt;p>想像一個時鐘&amp;hellip;&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>當每次秒針指向一秒時&lt;/th>
&lt;th>1 * * * * ?&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>當每次時針指向12時&lt;/td>
&lt;td>* * 12 * * ?&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>每個月 1 號中午 12 點&lt;/td>
&lt;td>0 0 12 1 * ?&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1 月每天中午 12 點，每 5 秒&lt;/td>
&lt;td>0/5 0 12 * 1 ?&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">字元&lt;/th>
&lt;th style="text-align:left">意義&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">&lt;code>*&lt;/code>&lt;/td>
&lt;td style="text-align:left">表達任意值，所有值都可以匹配&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>?&lt;/code>&lt;/td>
&lt;td style="text-align:left">只用在 &lt;code>日&lt;/code> 跟 &lt;code>周&lt;/code> 的值域，有點表達 don’t care 的概念，無所謂，不關心到底是什麼值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>-&lt;/code>&lt;/td>
&lt;td style="text-align:left">指定範圍，前後接數字: 10-12&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>,&lt;/code>&lt;/td>
&lt;td style="text-align:left">指定離散的選項: 1,5,6,8，或者的概念&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>/&lt;/code>&lt;/td>
&lt;td style="text-align:left">指定增量，表達 &lt;code>每&lt;/code> 的概念: 0/5 意旨從 0 開始每 5 單位&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>L&lt;/code>&lt;/td>
&lt;td style="text-align:left">用在 &lt;code>月&lt;/code> 跟 &lt;code>周&lt;/code> 的值域。在月的話表達最後一天，在周的話前面可以加上數字 3L 表示該月最後一個星期二&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>W&lt;/code>&lt;/td>
&lt;td style="text-align:left">用在&lt;code>日&lt;/code>的值域表示距離最近的該月工作日: 15W，距離 15 號最近的工作日，可能往前也可能往後&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>LW&lt;/code>&lt;/td>
&lt;td style="text-align:left">用在&lt;code>日&lt;/code>的值域，表示最後一周的工作日&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>#&lt;/code>&lt;/td>
&lt;td style="text-align:left">用在&lt;code>周&lt;/code>的值域，指定特定周的特定日: “4#2” 表示第二周的星期三&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>C&lt;/code>&lt;/td>
&lt;td style="text-align:left">用在&lt;code>日&lt;/code>跟&lt;code>周&lt;/code>的值域，指某特定個日期的後一天: 在&lt;code>日&lt;/code>中寫 3C 指該月 3 號的後一天，在&lt;code>周&lt;/code>中寫 2C 指該周星期一的後一天&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>​&lt;/p>
&lt;h2 id="重要api及概念">重要API及概念&lt;/h2>
&lt;blockquote>
&lt;p>記得Job類一定要是&lt;strong>public class&lt;/strong>，不然Scheduler會讀不到&lt;/p>
&lt;/blockquote>
&lt;p>釋例一：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Quartz&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">MyJob&lt;/span> &lt;span class="n">myJob&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">MyJob&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">JobDetail&lt;/span> &lt;span class="n">jobDetail&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">JobBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newJob&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MyJob&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withIdentity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;job1&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;group1&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">Trigger&lt;/span> &lt;span class="n">trigger&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">TriggerBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newTrigger&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withIdentity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;trigger1&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;trigger1&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">startNow&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withSchedule&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SimpleScheduleBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">simpleSchedule&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">withIntervalInSeconds&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">repeatForever&lt;/span>&lt;span class="o">())&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Scheduler&lt;/span> &lt;span class="n">scheduler&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">StdSchedulerFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDefaultScheduler&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">scheduler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">scheduleJob&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">jobDetail&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">trigger&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">scheduler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">SchedulerException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RuntimeException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">MyJob&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Job&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">execute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">JobExecutionContext&lt;/span> &lt;span class="n">jobExecutionContext&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">JobExecutionException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;MyJob execute:&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Date&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>釋例二&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">HelloJob&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Scheduler&lt;/span> &lt;span class="n">scheduler&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">StdSchedulerFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDefaultScheduler&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">scheduler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">JobDetail&lt;/span> &lt;span class="n">jobDetail&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">JobBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newJob&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SayHello&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withIdentity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;job1&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;group1&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="c1">//Job1是名字，具有唯一性，group1是這個Job屬於哪一組，同一組的Job可以共享相同的邏輯來處理Job。需要name與Job才可以組成一個JobKey
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">usingJobData&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;username&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;Hoxton&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">usingJobData&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;age&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;20&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withDescription&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;desc-demo&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">SimpleTrigger&lt;/span> &lt;span class="n">trigger&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">TriggerBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newTrigger&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withIdentity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;trigger1&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;group1&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">startNow&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withSchedule&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SimpleScheduleBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">simpleSchedule&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">withIntervalInSeconds&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">repeatForever&lt;/span>&lt;span class="o">())&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">scheduler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">scheduleJob&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">jobDetail&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">trigger&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">scheduler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">// scheduler.shutdown();
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">SchedulerException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RuntimeException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Slf4j&lt;/span>
&lt;span class="nd">@NoArgsConstructor&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">SayHello&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Job&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">execute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">JobExecutionContext&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">JobExecutionException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">JobDetail&lt;/span> &lt;span class="n">jobDetail&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getJobDetail&lt;/span>&lt;span class="o">();&lt;/span>&lt;span class="c1">//從context中獲取屬性
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">JobKey&lt;/span> &lt;span class="n">key&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">jobDetail&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getKey&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">Class&lt;/span>&lt;span class="o">&amp;lt;?&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">Job&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">jobClass&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">jobDetail&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getJobClass&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">description&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">jobDetail&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDescription&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">JobDataMap&lt;/span> &lt;span class="n">jobDataMap&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">jobDetail&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getJobDataMap&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">username&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">jobDataMap&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;username&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">age&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">jobDataMap&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getIntValue&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;age&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">info&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;\nJobKey : {},\n JobClass : {},\n JobDesc : {},\n username : {},\n age : {}&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">jobClass&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">description&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">age&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="scheduler">Scheduler&lt;/h3>
&lt;p>生命週期由ScheduleFactory建立開始，呼叫shutdown方法結束。&lt;/p>
&lt;p>當Schduler建立，任何關於Schduling相關的事情，都由它控制&lt;/p>
&lt;ul>
&lt;li>新增&lt;/li>
&lt;li>刪除&lt;/li>
&lt;li>列出所有Job&lt;/li>
&lt;li>暫停觸發器&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>在Start之前不會做任何事情&lt;/strong>&lt;/p>
&lt;h3 id="job">Job&lt;/h3>
&lt;p>你希望被排程器排程的任務元件介面，定義如何執行，是正在執行的作業例項，一個Job可以建立多個JobDetail，擁有不同的JobDataMap。本身implement了Job類&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">graph TD;
Job ---&amp;gt; JodDetail1 &amp;amp; JodDetail2 &amp;amp; JodDetail3 &amp;amp; JodDetail...
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">SendEmail&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Job&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">execute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">JobExecutionContext&lt;/span> &lt;span class="n">jobExecutionContext&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">JobExecutionException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;SendEmail&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>當Job的觸發器觸發時，排程程式的工作執行將呼叫excute()方法&lt;/li>
&lt;li>該方法接收一個&lt;code>JobExcutionContext&lt;/code>物件，為Job提供了豐富的執行時環境，比如&lt;code>schduler&lt;/code>,&lt;code>trigger&lt;/code>,&lt;code>jobDataMap&lt;/code>,&lt;code>job&lt;/code>,&lt;code>calender&lt;/code>,&lt;code>time&lt;/code>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>何謂Context(上下文)&lt;/p>
&lt;p>可以理解為環境、容器的意思會比上下文更具體一點，它提供了一個程式中全域性的資訊。&lt;/p>
&lt;/blockquote>
&lt;h3 id="jobdetail">JobDetail&lt;/h3>
&lt;p>用於定義Job的各種屬性、各種任務，還可以用來為Job儲存狀態資訊的JobDataMap，是將Job加入scheduler時，所需要創建的一個物件，它包含了各種屬性設置，以及用於存取job實例狀態訊息的JobDataMap，在創建JobDetail時，需要將欲執行的類名傳遞給JobDetail，這樣schedule就知道要執行何種類型的job。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">JobDetail&lt;/span> &lt;span class="n">jobDetail&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">JobBulider&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newJob&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Job&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">bulid&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="jobdatamap">JobDataMap&lt;/h3>
&lt;p>實作Map介面，因此具有Key-Value，儲存可序列化資料，供Job在執行時使用。也可以使用&lt;code>usingJobData(key,value)&lt;/code>在建構JobDetail的時候傳入資料，使用JobDetail.getDataMap()獲取Map。可以再透過jobDataMap取出裡面的數據&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="n">JobDetail&lt;/span> &lt;span class="n">job&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">JobBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newJob&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HelloJob&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withIdentity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;helloJob&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;hello&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="c1">//給job命名並分組
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">usingJobData&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;jobdd&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;hello job&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="c1">//通過JobBuilder的usingJobData方法給JobDataMap中塞入數據
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">HelloJob&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Job&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">execute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">JobExecutionContext&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">JobExecutionException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">err&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getJobDetail&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getKey&lt;/span>&lt;span class="o">());&lt;/span>&lt;span class="c1">// JobDetail的key又他的name和group組成
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">err&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getTrigger&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getKey&lt;/span>&lt;span class="o">());&lt;/span>&lt;span class="c1">// Trigger的key又他的name和group組成
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">err&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getJobDetail&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getJobDataMap&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;jobdd&amp;#34;&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">err&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;hello,quartz&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>會輸出&lt;/p>
&lt;p>`hello.helloJob&lt;/p>
&lt;p>hello.helloTrigger&lt;/p>
&lt;p>hello job&lt;/p>
&lt;p>hello, quartz&lt;/p>
&lt;h3 id="trigger">Trigger&lt;/h3>
&lt;p>觸發任務執行，觸發器可能具有與Job有關的JobDataMap，以便將觸發器觸發的引數傳遞給Job，Quartz本身提供了幾種觸發器&lt;code>SimpleTrigger&lt;/code>和&lt;code>CronTrigger&lt;/code>是最常用到的。&lt;/p>
&lt;h4 id="simpletriger">&lt;strong>SimpleTriger&lt;/strong>&lt;/h4>
&lt;p>用於一次性執行作業或需要在給定的時間觸發一個作業並重複執行N次，且兩次執行時間有Delay。用在具體的時間點，並已指定的間隔時間重複執行若干次，它包含了幾種屬性：&lt;/p>
&lt;ol>
&lt;li>開始時間&lt;/li>
&lt;li>結束時間&lt;/li>
&lt;li>重複次數&lt;/li>
&lt;li>重複間隔&lt;/li>
&lt;/ol>
&lt;p>釋例一：立刻觸發一次，然後停止&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="n">Date&lt;/span> &lt;span class="n">date&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Date&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">Trigger&lt;/span> &lt;span class="n">trigger1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">TriggerBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newTrigger&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withIdentity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;trigger1&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;group1&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">startAt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">date&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>釋例二：指定時間觸發，每隔十秒執行一次，重複10次&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="n">trigger&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">newTrigger&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withIdentity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;trigger3&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;group1&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">startAt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">myTimeToStartFiring&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="c1">// if a start time is not given (if this line were omitted), &amp;#34;now&amp;#34; is implied
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">withSchedule&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">simpleSchedule&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withIntervalInSeconds&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">10&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withRepeatCount&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">10&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="c1">// note that 10 repeats will give a total of 11 firings
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">forJob&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">myJob&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="c1">// identify job with handle to its JobDetail itself
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>釋例三：5分鐘以後開始觸發，僅執行一次&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="n">trigger&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">SimpleTrigger&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">newTrigger&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withIdentity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;trigger5&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;group1&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">startAt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">futureDate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">5&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">IntervalUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MINUTE&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="c1">// use DateBuilder to create a date in the future
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">forJob&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">myJobKey&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="c1">// identify job with its JobKey
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>釋例四：立即觸發，每個5分鐘執行一次，直到22:00：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">trigger&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">newTrigger&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withIdentity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;trigger7&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;group1&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withSchedule&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">simpleSchedule&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withIntervalInMinutes&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">5&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">repeatForever&lt;/span>&lt;span class="o">())&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">endAt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">dateOf&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">22&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">))&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>釋例五：在下一小時整點觸發，每個2小時執行一次，一直重複：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="n">trigger&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">newTrigger&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withIdentity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;trigger8&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="c1">// because group is not specified, &amp;#34;trigger8&amp;#34; will be in the default group
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">startAt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">evenHourDate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="c1">// get the next even-hour (minutes and seconds zero (&amp;#34;00:00&amp;#34;))
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">withSchedule&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">simpleSchedule&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withIntervalInHours&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">2&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">repeatForever&lt;/span>&lt;span class="o">())&lt;/span>
&lt;span class="c1">// note that in this example, &amp;#39;forJob(..)&amp;#39; is not called which is valid
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// if the trigger is passed to the scheduler along with the job
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">scheduler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">scheduleJob&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">trigger&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">job&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="crontrigger">&lt;strong>CronTrigger&lt;/strong>&lt;/h4>
&lt;p>希望以日期作為觸發任務的板機，就用CronTriger，&lt;strong>實務上比較常用這個&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="n">CronTrigger&lt;/span> &lt;span class="n">trigger2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">TriggerBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newTrigger&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withIdentity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;trigger3&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;group1&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withSchedule&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">CronScheduleBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">cronSchedule&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;0/2 * * * * ?&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">package&lt;/span> &lt;span class="nn">com.how2java&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import static&lt;/span> &lt;span class="nn">org.quartz.CronScheduleBuilder.cronSchedule&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import static&lt;/span> &lt;span class="nn">org.quartz.JobBuilder.newJob&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import static&lt;/span> &lt;span class="nn">org.quartz.TriggerBuilder.newTrigger&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import static&lt;/span> &lt;span class="nn">org.quartz.SimpleScheduleBuilder.simpleSchedule&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.util.Date&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.quartz.CronTrigger&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.quartz.DateBuilder&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.quartz.JobDetail&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.quartz.Scheduler&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.quartz.SimpleTrigger&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.quartz.impl.StdSchedulerFactory&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">TestQuartz&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="n">Scheduler&lt;/span> &lt;span class="n">scheduler&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">StdSchedulerFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDefaultScheduler&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">Date&lt;/span> &lt;span class="n">startTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">DateBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">nextGivenSecondDate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">8&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">JobDetail&lt;/span> &lt;span class="n">job&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">newJob&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MailJob&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">withIdentity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;mailJob&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;mailGroup&amp;#34;&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">CronTrigger&lt;/span> &lt;span class="n">trigger&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">newTrigger&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">withIdentity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;trigger1&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;group1&amp;#34;&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">withSchedule&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cronSchedule&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;0/2 * * * * ?&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">// schedule it to run!
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Date&lt;/span> &lt;span class="n">ft&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">scheduler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">scheduleJob&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">job&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">trigger&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;使用的Cron表达式是：&amp;#34;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">trigger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getCronExpression&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="c1">// System.out.printf(&amp;#34;%s 这个任务会在 %s 准时开始运行，累计运行%d次，间隔时间是%d毫秒%n&amp;#34;, job.getKey(), ft.toLocaleString(), trigger.getRepeatCount()+1, trigger.getRepeatInterval());
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="n">scheduler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">//等待200秒，让前面的任务都执行完了之后，再关闭调度器
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sleep&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">200000&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">scheduler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">shutdown&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="jobbulider">JobBulider&lt;/h3>
&lt;p>用來建立&lt;a class="link" href="#JobDetail" >JobDetail&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="n">JobDetail&lt;/span> &lt;span class="n">jobDetail&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">JobBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newJob&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">某個繼承了Job的類&lt;/span>&lt;span class="o">)...&lt;/span>
&lt;span class="n">JobDetail&lt;/span> &lt;span class="n">jobDetail&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">JobBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newJob&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SayHello&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withIdentity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;job1&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;group1&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">usingJobData&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;username&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;Hoxton&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">usingJobData&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;age&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;20&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withDescription&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;desc-demo&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>TriggerBulider&lt;/p>
&lt;p>用於建立&lt;a class="link" href="#Trigger" >Trigger&lt;/a>&lt;/p>
&lt;h3 id="identity">Identity&lt;/h3>
&lt;p>當Job和Trgger在Quartz排程程式中註冊時，會獲得標示鍵，&lt;code>JobKey&lt;/code>和&lt;code>TriggerKey&lt;/code>置入group中，易於組織管理，其中name與group必須&lt;strong>唯一&lt;/strong>&lt;/p>
&lt;h3 id="為何要將job和trigger分開來">為何要將Job和Trigger分開來?&lt;/h3>
&lt;blockquote>
&lt;p>While developing Quartz, we decided that it made sense to create a separation between the schedule and the work to be performed on that schedule. This has (in our opinion) many benefits.&lt;/p>
&lt;p>For example, Jobs can be created and stored in the job scheduler independent of a trigger, and many triggers can be associated with the same job. Another benefit of this loose-coupling is the ability to configure jobs that remain in the scheduler after their associated triggers have expired, so that that it can be rescheduled later, without having to re-define it. It also allows you to modify or replace a trigger without having to re-define its associated job.&lt;/p>
&lt;/blockquote>
&lt;h2 id="job與jobdetail的一些說明">Job與JobDetail的一些說明&lt;/h2>
&lt;ul>
&lt;li>Job是正在執行的作業，JobDetail則是作業的定義&lt;/li>
&lt;li>一個Job可以創建多個JobDetail，擁有不同的JobDataMap&lt;/li>
&lt;/ul>
&lt;p>舉例來說，今天寫了一個定時寄送信件的Job，叫做SendEmailJob，我們希望這個Job可以寄給客戶，然後在cc給你的主管，所以需要創建兩個不同的JobDetail，比如說SendEmailToClient、SendEmailToAdministor，並透過JobDataMap綁定參數傳遞至JobDetail中，這兩個JobDetail擁有各自獨立的JobDataMap，實現起來會更靈活。&lt;/p>
&lt;h1 id="參考">參考&lt;/h1>
&lt;p>&lt;a class="link" href="http://www.quartz-scheduler.org/documentation/quartz-2.3.0/quick-start.html" target="_blank" rel="noopener"
>官方文檔&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://iter01.com/575275.html" target="_blank" rel="noopener"
>任務排程框架Quartz快速入門&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.1ju.org/quartz/index" target="_blank" rel="noopener"
>Quartz教學基礎&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.796t.com/content/1545519797.html" target="_blank" rel="noopener"
>觸發器詳細定義&lt;/a>&lt;/p></description></item></channel></rss>