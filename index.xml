<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hoxton</title><link>https://hoxtonhsu.com/</link><description>Recent content on Hoxton</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Wed, 01 Mar 2023 09:45:17 +0800</lastBuildDate><atom:link href="https://hoxtonhsu.com/index.xml" rel="self" type="application/rss+xml"/><item><title>StoreProcedure的一些筆記</title><link>https://hoxtonhsu.com/p/storeprocedure%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AD%86%E8%A8%98/</link><pubDate>Wed, 01 Mar 2023 09:45:17 +0800</pubDate><guid>https://hoxtonhsu.com/p/storeprocedure%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AD%86%E8%A8%98/</guid><description>&lt;img src="https://i.imgur.com/1BTtOUL.png" alt="Featured image of post StoreProcedure的一些筆記" />&lt;p>&lt;a class="link" href="https://www.youtube.com/watch?v=yLR1w4tZ36I&amp;amp;ab_channel=techTFQ" target="_blank" rel="noopener"
>參考網站&lt;/a>&lt;/p>
&lt;p>&lt;strong>這篇文章是以Postgres SQL的語法為主，其他RDB的語法略有不同&lt;/strong>&lt;/p>
&lt;h1 id="什麼是store-procedure">什麼是Store Procedure&lt;/h1>
&lt;p>存儲過程（Stored Procedure）是一種數據庫對象，它是一個預編譯的SQL代碼塊，可以在數據庫中存儲並重複使用。它通常由一系列SQL語句和編程邏輯組成，可以接受輸入參數、返回輸出參數和結果集。存儲過程通常由數據庫管理員或開發人員編寫和維護，並且可以在數據庫中執行。&lt;/p>
&lt;p>存儲過程有以下幾個優點：&lt;/p>
&lt;ol>
&lt;li>提高了數據庫性能：存儲過程是預編譯的，一旦編譯就會存儲在數據庫中，執行速度快。此外，存儲過程可以減少客戶端與服務器之間的通信，從而降低網絡延遲，提高數據庫性能。&lt;/li>
&lt;li>提高了數據安全性：存儲過程可以在數據庫層面上實現安全控制，可以限制某些用戶或角色的操作權限，從而保證數據的安全性。&lt;/li>
&lt;li>代碼復用：存儲過程可以被多個應用程序或者腳本重複調用，從而實現代碼復用，減少重複編寫代碼的時間和工作量。&lt;/li>
&lt;li>事務處理：存儲過程可以封裝事務處理邏輯，當多個SQL語句需要在一個事務中執行時，可以使用存儲過程將它們封裝在一個事務中，從而保證了數據的一致性和完整性。&lt;/li>
&lt;li>簡化了複雜的操作：存儲過程可以將多個SQL語句組合成一個操作，從而簡化了複雜的操作，使得應用程序更易於開發和維護。&lt;/li>
&lt;/ol>
&lt;p>存儲過程可以實現很多功能，比如：&lt;/p>
&lt;ol>
&lt;li>數據庫的備份和還原&lt;/li>
&lt;li>數據庫的複製和同步&lt;/li>
&lt;li>數據庫的日誌記錄和監控&lt;/li>
&lt;li>數據庫的查詢優化&lt;/li>
&lt;li>數據庫的數據加密和解密&lt;/li>
&lt;li>數據庫的數據清洗和轉換&lt;/li>
&lt;li>數據庫的業務邏輯實現&lt;/li>
&lt;li>數據庫的存儲和檢索過程中的錯誤處理&lt;/li>
&lt;li>數據庫的報表生成和匯出等。&lt;/li>
&lt;/ol>
&lt;h1 id="procedure與function之差異">Procedure與Function之差異&lt;/h1>
&lt;p>&lt;img src="https://i.imgur.com/glkexq1.png"
loading="lazy"
alt="image-20230302110014148"
>&lt;/p>
&lt;p>在PostgreSQL中，function和procedure都是儲存運算邏輯的物件，它們在設計目的和使用方式上略有不同。&lt;/p>
&lt;p>Function主要是用於執行一個特定的計算或邏輯，返回一個單一的值或一個結果集，並且可以在SELECT語句、WHERE語句等中使用。Function可以返回一個或多個結果集，但只能返回一個值作為輸出，因此它被稱為有返回值的Function。&lt;/p>
&lt;p>Procedure主要用於執行一連串的操作，不返回結果集，通常是用來執行複雜的業務邏輯，如事務處理、資料庫管理等。Procedure可以執行INSERT、UPDATE、DELETE等數據操作，但是不能作為SELECT語句的一部分使用。Procedure不返回任何值或結果集，因此它被稱為無返回值的Procedure。&lt;/p>
&lt;p>在設計時，需要根據實際需求選擇使用哪種物件。如果需要執行一個特定的計算或邏輯，並返回一個結果集，則使用Function。如果需要執行一連串的操作並且不需要返回結果集，則使用Procedure。&lt;/p>
&lt;p>&lt;strong>更直接的不同是，Procedure並沒有定義它自身的回傳值，連Returns void都沒有，而Function是有回傳值的，即使是Returns Void也是有回傳值&lt;/strong>&lt;/p>
&lt;h2 id="創建procedure的語法">創建procedure的語法&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">create&lt;/span> &lt;span class="k">or&lt;/span> &lt;span class="k">replace&lt;/span> &lt;span class="k">function&lt;/span> &lt;span class="n">test&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">LANGUAGE&lt;/span> &lt;span class="n">plpgsql&lt;/span>
&lt;span class="k">AS&lt;/span> &lt;span class="err">$$&lt;/span>
&lt;span class="k">BEGIN&lt;/span>
&lt;span class="k">END&lt;/span>
&lt;span class="err">$$&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/SQvfGm9.png"
loading="lazy"
alt="image-20230303104439737"
>&lt;/p>
&lt;p>若加入RETURNS VOID則會回報錯誤&lt;/p>
&lt;h2 id="創建function的語法">創建Function的語法&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">create&lt;/span> &lt;span class="k">or&lt;/span> &lt;span class="k">replace&lt;/span> &lt;span class="k">function&lt;/span> &lt;span class="n">test&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">LANGUAGE&lt;/span> &lt;span class="n">plpgsql&lt;/span>
&lt;span class="k">AS&lt;/span> &lt;span class="err">$$&lt;/span>
&lt;span class="k">BEGIN&lt;/span>
&lt;span class="k">END&lt;/span>
&lt;span class="err">$$&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/dya5pND.png"
loading="lazy"
alt="image-20230303104821763"
>&lt;/p>
&lt;p>若不指定回傳值，則會報錯誤&lt;code>function result type must be specified&lt;/code>&lt;/p>
&lt;h1 id="定界符-delimiter">定界符$$ (delimiter)&lt;/h1>
&lt;p>在SQL中，兩個美元符號（$$）用來定義一個區塊或一個標識符（identifier）。&lt;/p>
&lt;p>例如，可以使用&lt;code>$$&lt;/code>來.定義一個存儲過程或函數的主體。在$$之間的所有內容都被視為存儲過程或函數的主體，可以包含SQL語句、流程控制語句等。&lt;/p>
&lt;p>另外，&lt;code>$$&lt;/code>還可以用來定義一個標識符，例如，可以使用&lt;code>$$&lt;/code>來定義一個變量或一個標識符的名稱。在&lt;code>$$&lt;/code>之間的所有內容都被視為標識符的名稱，可以包含字母、數字和下劃線等字符。使用&lt;code>$$&lt;/code>定義標識符時，可以幫助區分保留字和自定義的標識符，以及避免標識符中包含空格等特殊字符所帶來的問題。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">CREATE&lt;/span> &lt;span class="k">FUNCTION&lt;/span> &lt;span class="n">myfunc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="nb">INT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="nb">INT&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">RETURNS&lt;/span> &lt;span class="nb">INT&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="err">$$&lt;/span>
&lt;span class="k">BEGIN&lt;/span>
&lt;span class="k">RETURN&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">END&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="err">$$&lt;/span> &lt;span class="k">LANGUAGE&lt;/span> &lt;span class="n">plpgsql&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">-- 在這個例子中，$$ 用來定義函數的主體。CREATE FUNCTION 指令創建了一個名為 myfunc 的函數，它接受兩個整數參數 x 和 y，返回它們的和。 RETURN 指令用於返回函數的值。
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">-- 在這裡，$ 用作定界符，它定義了函數的主體。如果不使用定界符，則在函數主體中使用分號 ; 可能會導致錯誤。使用定界符可以幫助區分不同的 SQL 區塊，從而更好地組織和管理 SQL 代碼。
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="使用terminal操作postgres-sql">使用Terminal操作Postgres SQL&lt;/h1>
&lt;p>有兩種方式，一種是用psql的Shell，另一種則是用powershell&lt;/p>
&lt;h2 id="使用psql的shell">使用psql的Shell&lt;/h2>
&lt;p>打開psql&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/nK75Ei4.png"
loading="lazy"
alt="image-20230301141105566"
>&lt;/p>
&lt;p>輸入相應的資訊&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/7xAxqku.png"
loading="lazy"
alt="image-20230301141442266"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/VoFR6LZ.jpg"
loading="lazy"
alt="1677641123421"
>&lt;/p>
&lt;h2 id="使用powershell">使用powerShell&lt;/h2>
&lt;p>首先先下載Postgres SQL，接著在把環境變數加入至電腦中，路徑大概會如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-cmd" data-lang="cmd">C&lt;span class="p">:&lt;/span>&lt;span class="nl">\Program&lt;/span>&lt;span class="c1"> Files\PostgreSQL\14\bin&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/XGVwCjA.png"
loading="lazy"
alt="image-20230301112209470"
>&lt;/p>
&lt;p>即可在Termianl中操作postgres SQL&lt;/p>
&lt;p>如以下指令&lt;img src="https://i.imgur.com/TytSWR7.png"
loading="lazy"
alt="image-20230301151606030"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-cmd" data-lang="cmd">psql -h localhost -p 5432 -U postgres school
## psql -h localhost -p 5432 -U &lt;span class="p">&amp;lt;&lt;/span>your_username&lt;span class="p">&amp;gt;&lt;/span> &amp;lt;your_database&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/O1LOTxQ.png"
loading="lazy"
alt="image-20230301112342437"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/9XwWLMJ.jpg"
loading="lazy"
alt="1677641123421"
>&lt;/p>
&lt;p>(與之對應的Server設定)&lt;/p>
&lt;h2 id="連結成功後的畫面">連結成功後的畫面&lt;/h2>
&lt;p>&lt;img src="https://i.imgur.com/hws6MgV.png"
loading="lazy"
alt="image-20230301114731154"
>&lt;/p>
&lt;p>可以輸入&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-cmd" data-lang="cmd">\dt
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>來查看該database底下的table&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/LrRDSbm.png"
loading="lazy"
alt="image-20230301114853633"
>&lt;/p>
&lt;blockquote>
&lt;p>在 psql 中，&lt;code>\&lt;/code> 符號是一個特殊的字元，稱為 &amp;ldquo;psql 內部命令前綴&amp;rdquo;。當您在 psql 終端機中輸入以 &lt;code>\&lt;/code> 開頭的命令時，psql 將解釋這個命令，並執行對應的操作。&lt;/p>
&lt;p>以下是幾個常用的 psql 內部命令：&lt;/p>
&lt;ul>
&lt;li>&lt;code>\c&lt;/code>: 切換到另一個數據庫&lt;/li>
&lt;li>&lt;code>\dt&lt;/code>: 列出當前數據庫中的所有表格&lt;/li>
&lt;li>&lt;code>\d table_name&lt;/code>: 查看指定表格的結構&lt;/li>
&lt;li>&lt;code>\q&lt;/code>: 退出 psql 終端機&lt;/li>
&lt;li>&lt;code>\! clear&lt;/code>: 清空psql 終端機畫面&lt;/li>
&lt;/ul>
&lt;p>當您想要使用 psql 內部命令時，必須在命令前加上 &lt;code>\&lt;/code> 符號。例如，要列出當前數據庫中的所有表格，您可以輸入 &lt;code>\dt&lt;/code>。&lt;/p>
&lt;p>如果您想要輸入以 &lt;code>\&lt;/code> 開頭的普通文本，而不是 psql 內部命令，則必須在 &lt;code>\&lt;/code> 前面再加上一個 &lt;code>\&lt;/code> 符號。例如，如果您想要在 SQL 陳述句中使用反斜線（&lt;code>\&lt;/code>）字元，則必須將其寫成 &lt;code>\\&lt;/code>。&lt;/p>
&lt;p>請注意，在某些情況下，psql 內部命令前綴 &lt;code>\&lt;/code> 可能會和 SQL 語句的關鍵字混淆。例如，&lt;code>CREATE TABLE&lt;/code> 陳述句中的 &lt;code>TABLE&lt;/code> 關鍵字後面如果不加引號可能會被 psql 認為是一個內部命令。為避免這種情況，建議在使用關鍵字時加上引號，例如 &lt;code>&amp;quot;TABLE&amp;quot;&lt;/code>。\&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/6fu3Mmp.png"
loading="lazy"
alt="image-20230301114853633"
>&lt;/p>
&lt;/blockquote>
&lt;p>基本上這個terminal就是我們的Query Tool，所以是可以在這邊做CRUD的，如下&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/9rB6wxq.png"
loading="lazy"
alt="image-20230301115221834"
>&lt;/p>
&lt;h1 id="常用的psql-指令">常用的psql 指令&lt;/h1>
&lt;ol>
&lt;li>&lt;code>\q&lt;/code> - 退出 &lt;code>psql&lt;/code> 命令行界面。&lt;/li>
&lt;li>&lt;code>\c &amp;lt;database_name&amp;gt;&lt;/code> - 連接到指定的數據庫。&lt;/li>
&lt;li>&lt;code>\dt&lt;/code> - 列出當前數據庫中的所有表格。&lt;/li>
&lt;li>&lt;strong>&lt;code>\d &amp;lt;table_name&amp;gt;&lt;/code> - 列出指定表格的詳細信息，包括列名、類型和約束等。&lt;/strong>&lt;/li>
&lt;li>&lt;code>\du&lt;/code> - 列出所有用戶帳號的詳細信息，包括用戶名、權限和群組等。&lt;/li>
&lt;li>&lt;code>\dp&lt;/code> - 列出所有表格的權限設置。&lt;/li>
&lt;li>&lt;code>\timing&lt;/code> - 啟用或禁用查詢執行時間的顯示。&lt;/li>
&lt;li>&lt;code>\set&lt;/code> - 列出或設置 &lt;code>psql&lt;/code> 的配置選項。&lt;/li>
&lt;li>&lt;code>\i &amp;lt;file_path&amp;gt;&lt;/code> - 從指定的檔案載入 SQL 命令。&lt;/li>
&lt;li>&lt;code>\e&lt;/code> - 打開外部編輯器編輯當前緩衝區中的 SQL 命令。&lt;/li>
&lt;li>&lt;strong>&lt;code>\! clear&lt;/code>: 清空psql 終端機畫面&lt;/strong>&lt;/li>
&lt;li>&lt;code>\dt&lt;/code>: 查看所有表格&lt;/li>
&lt;li>&lt;code>\df&lt;/code>: 查看資料庫中的所有函數以及Stored Procedure&lt;/li>
&lt;li>&lt;code>\ef&lt;/code>: 編輯現有的函數，可能你寫錯了還是啥的 ☆修改完後，存檔退出記事本，進到terminal要加上 &lt;code>\g&lt;/code> 才會把這個修改&lt;code>go&lt;/code>出去，不然你怎麼改都是沒有用ㄉ，血與淚的教訓Q_Q&lt;/li>
&lt;li>&lt;code>\sf&lt;/code>: 查看更詳細的函數內容，s stand for show&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>dt, du, df的d代表Describe的縮寫，用以顯示資料庫的資料&lt;/strong>&lt;/p>
&lt;h1 id="stored-procedure的實戰">Stored Procedure的實戰&lt;/h1>
&lt;p>首先創造表格&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">CREATE&lt;/span> &lt;span class="k">TABLE&lt;/span> &lt;span class="n">users&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="n">id&lt;/span> &lt;span class="nb">SERIAL&lt;/span> &lt;span class="k">PRIMARY&lt;/span> &lt;span class="k">KEY&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">name&lt;/span> &lt;span class="nb">VARCHAR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">NOT&lt;/span> &lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">email&lt;/span> &lt;span class="nb">VARCHAR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">NOT&lt;/span> &lt;span class="k">NULL&lt;/span> &lt;span class="k">UNIQUE&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>插入資料&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">INSERT&lt;/span> &lt;span class="k">INTO&lt;/span> &lt;span class="n">users&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">email&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">VALUES&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;John Doe&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;john.doe@example.com&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Jane Doe&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;jane.doe@example.com&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Bob Smith&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;bob.smith@example.com&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="返回值為空的function">返回值為空的Function&lt;/h2>
&lt;p>先創建一個無關緊要的stored procedure來感受一下它的作用吧，我們創造一個function，用來返回今天的日期，語法如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">CREATE&lt;/span> &lt;span class="k">OR&lt;/span> &lt;span class="k">REPLACE&lt;/span> &lt;span class="k">FUNCTION&lt;/span> &lt;span class="c1">-- 創建stored procedure的起手式。
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">get_current_date&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">-- 函式名稱
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">RETURNS&lt;/span> &lt;span class="nb">DATE&lt;/span> &lt;span class="c1">-- 該函式的返回值，若未指定則為Return Null
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">AS&lt;/span> &lt;span class="c1">-- 用以分明函數聲明與函數體，AS上面的是函數聲明，AS下面的是函數體
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="err">$$&lt;/span> &lt;span class="c1">-- 定界符，參照上方說明
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">BEGIN&lt;/span>
&lt;span class="k">RETURN&lt;/span> &lt;span class="k">CURRENT_DATE&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">-- 函數體
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">END&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="err">$$&lt;/span> &lt;span class="c1">-- 定界符，參照上方說明
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">LANGUAGE&lt;/span> &lt;span class="n">plpgsql&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">-- 不加這個就是默認使用SQL語言，只能使用一些比較簡單的語法，加了這個之後就可以作流程控制、循環、異常處理等等...
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接著呼叫它&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">SELECT&lt;/span> &lt;span class="n">get_current_date&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/qoDZ9PN.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;h2 id="回傳特定資料的function">回傳特定資料的function&lt;/h2>
&lt;p>該function會返回參數值的使用者的相關資訊&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">CREATE&lt;/span> &lt;span class="k">OR&lt;/span> &lt;span class="k">REPLACE&lt;/span> &lt;span class="k">FUNCTION&lt;/span> &lt;span class="n">get_user_info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">user_id&lt;/span> &lt;span class="nb">INTEGER&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">RETURNS&lt;/span> &lt;span class="k">TABLE&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="nb">VARCHAR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">email&lt;/span> &lt;span class="nb">VARCHAR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="k">AS&lt;/span>
&lt;span class="err">$$&lt;/span>
&lt;span class="k">BEGIN&lt;/span>
&lt;span class="k">RETURN&lt;/span> &lt;span class="n">QUERY&lt;/span> &lt;span class="k">SELECT&lt;/span> &lt;span class="n">users&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">users&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">email&lt;/span> &lt;span class="k">FROM&lt;/span> &lt;span class="n">users&lt;/span> &lt;span class="k">WHERE&lt;/span> &lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">user_id&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">END&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="err">$$&lt;/span> &lt;span class="k">LANGUAGE&lt;/span> &lt;span class="n">plpgsql&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/MRdpixs.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;h2 id="更新資料的function">更新資料的function&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">CREATE&lt;/span> &lt;span class="k">OR&lt;/span> &lt;span class="k">REPLACE&lt;/span> &lt;span class="k">FUNCTION&lt;/span> &lt;span class="k">public&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">update_user_info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">user_id&lt;/span> &lt;span class="nb">integer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="nb">character&lt;/span> &lt;span class="nb">varying&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">email&lt;/span> &lt;span class="nb">character&lt;/span> &lt;span class="nb">varying&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">RETURNS&lt;/span> &lt;span class="n">void&lt;/span>
&lt;span class="k">LANGUAGE&lt;/span> &lt;span class="n">plpgsql&lt;/span>
&lt;span class="k">AS&lt;/span> &lt;span class="err">$$&lt;/span>
&lt;span class="k">BEGIN&lt;/span>
&lt;span class="k">UPDATE&lt;/span> &lt;span class="n">users&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">u&lt;/span> &lt;span class="k">SET&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">email&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="mi">3&lt;/span> &lt;span class="k">WHERE&lt;/span> &lt;span class="n">u&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">END&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="err">$$&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="變數宣告">變數宣告&lt;/h2>
&lt;p>&lt;code>:=&lt;/code>來進行變數宣告，&lt;code>=&lt;/code>在postgresSQL比較像是用來比較&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">CREATE&lt;/span> &lt;span class="k">OR&lt;/span> &lt;span class="k">REPLACE&lt;/span> &lt;span class="k">FUNCTION&lt;/span> &lt;span class="n">my_function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">param1&lt;/span> &lt;span class="nb">integer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">param2&lt;/span> &lt;span class="nb">integer&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">RETURNS&lt;/span> &lt;span class="nb">integer&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="err">$$&lt;/span>
&lt;span class="k">DECLARE&lt;/span>
&lt;span class="n">var1&lt;/span> &lt;span class="nb">integer&lt;/span> &lt;span class="p">:&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">var2&lt;/span> &lt;span class="nb">integer&lt;/span> &lt;span class="p">:&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">BEGIN&lt;/span>
&lt;span class="n">var1&lt;/span> &lt;span class="p">:&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">param1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">var2&lt;/span> &lt;span class="p">:&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">param2&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">RETURN&lt;/span> &lt;span class="n">var1&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">var2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">END&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="err">$$&lt;/span> &lt;span class="k">LANGUAGE&lt;/span> &lt;span class="n">plpgsql&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="while-語法">WHILE 語法&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">CREATE&lt;/span> &lt;span class="k">OR&lt;/span> &lt;span class="k">REPLACE&lt;/span> &lt;span class="k">PROCEDURE&lt;/span> &lt;span class="k">public&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">factorial&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">IN&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="nb">INT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">OUT&lt;/span> &lt;span class="k">result&lt;/span> &lt;span class="nb">BIGINT&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">LANGUAGE&lt;/span> &lt;span class="n">plpgsql&lt;/span>
&lt;span class="k">AS&lt;/span> &lt;span class="err">$$&lt;/span>
&lt;span class="k">DECLARE&lt;/span>
&lt;span class="n">i&lt;/span> &lt;span class="nb">INT&lt;/span> &lt;span class="p">:&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">BEGIN&lt;/span>
&lt;span class="k">result&lt;/span> &lt;span class="p">:&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">WHILE&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="n">LOOP&lt;/span>
&lt;span class="k">result&lt;/span> &lt;span class="p">:&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="k">result&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">i&lt;/span> &lt;span class="p">:&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">END&lt;/span> &lt;span class="n">LOOP&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">END&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="err">$$&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="if語法">IF語法&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">CREATE&lt;/span> &lt;span class="k">OR&lt;/span> &lt;span class="k">REPLACE&lt;/span> &lt;span class="k">PROCEDURE&lt;/span> &lt;span class="n">example_if_proc&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="nb">INT&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">AS&lt;/span>
&lt;span class="k">BEGIN&lt;/span>
&lt;span class="k">IF&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="k">THEN&lt;/span>
&lt;span class="n">DBMS_OUTPUT&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">PUT_LINE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;a is negative&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">ELSIF&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="k">THEN&lt;/span>
&lt;span class="n">DBMS_OUTPUT&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">PUT_LINE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;a is zero&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">ELSE&lt;/span>
&lt;span class="n">DBMS_OUTPUT&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">PUT_LINE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;a is positive&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">END&lt;/span> &lt;span class="k">IF&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">END&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="將select出來的值儲存在一變數中">將SELECT出來的值儲存在一變數中&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">CREATE&lt;/span> &lt;span class="k">OR&lt;/span> &lt;span class="k">REPLACE&lt;/span> &lt;span class="k">PROCEDURE&lt;/span> &lt;span class="k">public&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">get_customer_info&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="k">IN&lt;/span> &lt;span class="n">customer_id&lt;/span> &lt;span class="nb">INTEGER&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="k">OUT&lt;/span> &lt;span class="n">customer_name&lt;/span> &lt;span class="nb">VARCHAR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">50&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="k">OUT&lt;/span> &lt;span class="n">customer_email&lt;/span> &lt;span class="nb">VARCHAR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">50&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="k">LANGUAGE&lt;/span> &lt;span class="n">plpgsql&lt;/span>
&lt;span class="k">AS&lt;/span> &lt;span class="err">$$&lt;/span>
&lt;span class="k">BEGIN&lt;/span>
&lt;span class="k">SELECT&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">email&lt;/span> &lt;span class="k">INTO&lt;/span> &lt;span class="n">customer_name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">customer_email&lt;/span>
&lt;span class="k">FROM&lt;/span> &lt;span class="n">customers&lt;/span>
&lt;span class="k">WHERE&lt;/span> &lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">customer_id&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">IF&lt;/span> &lt;span class="k">NOT&lt;/span> &lt;span class="k">FOUND&lt;/span> &lt;span class="k">THEN&lt;/span>
&lt;span class="n">RAISE&lt;/span> &lt;span class="k">EXCEPTION&lt;/span> &lt;span class="s1">&amp;#39;Customer not found&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">END&lt;/span> &lt;span class="k">IF&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">END&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="err">$$&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="將資訊打印出來print">將資訊打印出來(print)&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">CREATE&lt;/span> &lt;span class="k">OR&lt;/span> &lt;span class="k">REPLACE&lt;/span> &lt;span class="k">procedure&lt;/span> &lt;span class="n">sayHello&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">RETURNS&lt;/span> &lt;span class="n">void&lt;/span>
&lt;span class="k">LANGUAGE&lt;/span> &lt;span class="n">plpgsql&lt;/span>
&lt;span class="k">AS&lt;/span> &lt;span class="err">$$&lt;/span>
&lt;span class="k">DECLARE&lt;/span>
&lt;span class="k">BEGIN&lt;/span>
&lt;span class="n">RAISE&lt;/span> &lt;span class="n">NOTICE&lt;/span> &lt;span class="s1">&amp;#39;hello word:&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">END&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="err">$$&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>GitLab-CI/CD筆記</title><link>https://hoxtonhsu.com/p/gitlab-ci/cd%E7%AD%86%E8%A8%98/</link><pubDate>Mon, 06 Feb 2023 19:50:08 +0800</pubDate><guid>https://hoxtonhsu.com/p/gitlab-ci/cd%E7%AD%86%E8%A8%98/</guid><description>&lt;img src="https://i.imgur.com/b9bWXWs.jpg" alt="Featured image of post GitLab-CI/CD筆記" />&lt;p>&lt;a class="link" href="https://youtu.be/-4XT8-znkuc?list=PLBd8JGCAcUAEwyH2kT1wW2BUmcSPQzGcu" target="_blank" rel="noopener"
>參考影片：為你自己學GitLab CICD&lt;/a>&lt;/p>
&lt;h1 id="為何選擇jenkins">為何選擇Jenkins？&lt;/h1>
&lt;p>目前市面上有三種CI/CD的工具，分別是&lt;/p>
&lt;ol>
&lt;li>Github Action&lt;/li>
&lt;li>GitLab CI/CD&lt;/li>
&lt;li>Jenkins&lt;/li>
&lt;/ol>
&lt;p>而他們各自的難易度如下：&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/2Z5xcnD.jpg"
loading="lazy"
alt="image-20230208032100440"
>&lt;/p>
&lt;h2 id="github-action-jenkins-gitlabcicd-三者之比較">Github Action Jenkins GitlabCICD 三者之比較&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Github Action&lt;/th>
&lt;th>GitLab CI/CD&lt;/th>
&lt;th>Jenkins&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>優點&lt;/td>
&lt;td>簡單易用，可以透過組合 Actions 來設定 CI/CD 流程。&lt;br/>集成與 GitHub 相當良好，方便地與其他 GitHub 工具整合。&lt;br/>&lt;/td>
&lt;td>功能齊全，涵蓋了版本控制、需求管理、測試、打包、部署等。&lt;br/>內建了測試覆蓋率分析、版本回溯、網路推送等工具。&lt;br/>支援更多的發佈平臺和語言，可以支援更多不同的開發團隊。&lt;/td>
&lt;td>功能強大，擁有豐富的插件系統，可以滿足多種 CI/CD 需求。&lt;br/>社區活躍，有大量社區插件可以使用。&lt;br/>可以自定義工作流程，靈活應對複雜需求。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>缺點&lt;/td>
&lt;td>設定複雜的流程可能會比較困難。&lt;br/>有些功能，比如說高級的權限管理，可能比較弱。&lt;/td>
&lt;td>較為複雜，可能會花費一些時間來學習和設定。&lt;br/>有些功能，例如高級的安全性，可能會有額外的費用。&lt;/td>
&lt;td>相對較難學習和使用，不如 GitHub Actions 和 GitLab CI/CD 簡單易用。&lt;br/>配置和管理相對複雜，需要一定的技術支持。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>為什麼CI/CD重要，它做了哪些事情？&lt;/p>
&lt;ul>
&lt;li>在還沒有CI/CD的流程之前，部屬一個web大概是這樣&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/Mvw7aN3.png"
loading="lazy"
alt="image-20230208033136666"
>&lt;/p>
&lt;ul>
&lt;li>CI/CD建立完成後，開發人員只需要專注在任務的完成，而不需要做重複的部屬工作&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/I5CQwCE.png"
loading="lazy"
alt="image-20230208033210513"
>&lt;/p>
&lt;h1 id="名詞解析">名詞解析&lt;/h1>
&lt;h2 id="pipeline">Pipeline&lt;/h2>
&lt;p>就是腳本(script)的意思，用來設計CICD的流程，一個常見的pipeline如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># 稱之為階段，可以為每個Job分配階段，常見的比如說有測試階段、打包階段、部屬階段等等，每個job都屬於一個階段&lt;/span>
stages:
- linter
- testing
- building
- deploy
&lt;span class="c1"># 工作流&lt;/span>
workflow:
rules:
- &lt;span class="k">if&lt;/span>: &lt;span class="nv">$CI_COMMIT_BRANCH&lt;/span> &lt;span class="o">==&lt;/span>&lt;span class="s2">&amp;#34;main&amp;#34;&lt;/span> &lt;span class="c1">#若發生什麼事&lt;/span>
when: always &lt;span class="c1">#則做什麼事&lt;/span>
- when: never &lt;span class="c1">#不然則做什麼&lt;/span>
&lt;span class="c1"># 變數，就是那個變數，可以寫在外層的就是全域變數，寫在Job裡面的就是Job變數&lt;/span>
variables:
host_name: &lt;span class="s2">&amp;#34;hoxton&amp;#34;&lt;/span>
&lt;span class="c1"># 稱之為Job&lt;/span>
Helloworld: &lt;span class="c1"># Job名稱&lt;/span>
image: ruby:3.1.2-alpine3.16 &lt;span class="c1">#指定要用什麼image來跑，等同於Executor&lt;/span>
variables: &lt;span class="c1"># Job變數&lt;/span>
my_name: &lt;span class="s2">&amp;#34;hello kitty&amp;#34;&lt;/span>
stage: linter &lt;span class="c1"># 這個Job是什麼階段的&lt;/span>
script: &lt;span class="c1"># 要執行什麼樣的腳本&lt;/span>
- &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;hello world, GitLab! &lt;/span>&lt;span class="nv">$my_name&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
- &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;hello world, GitLab! &lt;/span>&lt;span class="nv">$host_name&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
- chmod +x ./run.sh
- ./run.sh
run_unit_tests: &lt;span class="c1"># Job名稱&lt;/span>
stage: testing &lt;span class="c1"># 這個Job是什麼階段的&lt;/span>
needs: &lt;span class="c1"># 決定Job的順序&lt;/span>
- Helloworld &lt;span class="c1"># 在這些Job完成後才會去做run_unit_tests的Job&lt;/span>
script: &lt;span class="c1"># 要執行什麼樣的腳本&lt;/span>
- &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;執行單元測試&amp;#34;&lt;/span>
before_script: &lt;span class="c1">#在執行腳本之前需要執行什麼腳本&lt;/span>
- &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;安裝套件&amp;#34;&lt;/span>
- &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;設定資料庫連線&amp;#34;&lt;/span>
after_script :#在執行腳本之後需要執行什麼腳本
- &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;刪除不必要的檔案&amp;#34;&lt;/span>
bad_job: &lt;span class="c1"># Job名稱&lt;/span>
stage: testing &lt;span class="c1"># 這個Job是什麼階段的&lt;/span>
script: &lt;span class="c1"># 要執行什麼樣的腳本&lt;/span>
- &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;bad_job&amp;#34;&lt;/span>
build_docker_images: &lt;span class="c1"># Job名稱&lt;/span>
only: &lt;span class="c1"># 指定Job只會在什麼分支執行&lt;/span>
- main
stage: building &lt;span class="c1"># 這個Job是什麼階段的&lt;/span>
script: &lt;span class="c1"># 要執行什麼樣的腳本&lt;/span>
- &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;building docker images&amp;#34;&lt;/span>
deploy_to_production: &lt;span class="c1"># Job名稱&lt;/span>
except: &lt;span class="c1"># 指定Job不在什麼分支執行&lt;/span>
- dev &lt;span class="c1"># 分支名稱&lt;/span>
stage: deploy &lt;span class="c1"># # 這個Job是什麼階段的&lt;/span>
script: &lt;span class="c1"># 要執行什麼樣的腳本&lt;/span>
- &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;deploy to production&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="runner">Runner&lt;/h2>
&lt;p>大概等同於「要用哪台電腦來執行Pipeline」，以下可以證明&lt;/p>
&lt;p>欲執行的script&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">print-location:
tags:
- euno
script:
- &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$HOSTNAME&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/47bZfpT.png"
loading="lazy"
alt="image-20230208114831319"
>&lt;/p>
&lt;p>&lt;strong>若不指定要有用哪台電腦執行，則gitlab會提供，但這時候就是在使用gitlab所提供的服務，免費帳戶每月超過40小時即到達上限，因此需要去註冊一個Runner&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>如何註冊一個Runner&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/TZSQrpa.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/Kumst5b.png"
loading="lazy"
alt="image-20230208113900501"
>&lt;/p>
&lt;h2 id="executor">Executor&lt;/h2>
&lt;p>代表pipeline所運行的環境，可以是shell，也可以是Docker容器，端看目的而定，但千萬要記得，要執行指定的Executor，&lt;strong>也要看自己的電腦或VM有沒有這個環境&lt;/strong>，之前有遇到一個問題是，我在本地起了一個runner，但一直說找不到pwsd的指令，此時要到gitlab-runner安裝的資料夾去調整toml檔案，將shell改成用powershell運行，&lt;strong>因為window下沒有pwsd這個指定&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/z1cqmhL.png"
loading="lazy"
alt="image-20230208115618286"
>&lt;/p>
&lt;h1 id="如何使用gitlab的cicd工具">如何使用GitLab的CI/CD工具&lt;/h1>
&lt;p>在專案底下新增&lt;code>.gitlab-ci.yml&lt;/code>的檔案，裡面的格式長這樣&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/UYbhpbw.png"
loading="lazy"
alt="image-20230205220750491"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="c"># 稱之為狀態&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">stages&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">linter&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">testing&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">building&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">deploy &lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c"># 稱之為Job&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">Helloworld&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">stage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">linter&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">echo &amp;#34;hello world, GitLab!&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">run_unit_tests&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">stage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">testing&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">echo &amp;#34;執行單元測試&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">before_script&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">echo &amp;#34;安裝套件&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">echo &amp;#34;設定資料庫連線&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">after_script&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">echo &amp;#34;刪除不必要的檔案&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">bad_job&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">stage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">testing&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">epaewjdqwe&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">build_docker_images&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">stage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">building&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">echo &amp;#34;building docker images&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">deploy_to_production&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">stage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">deploy&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">echo &amp;#34;deploy to production&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="把image推上gitlab">把Image推上Gitlab&lt;/h1>
&lt;h1 id="問題彙整">問題彙整&lt;/h1>
&lt;h2 id="got-permission-denied-while-trying-to-connect-to-the-docker-daemon-socket-at-unix-">Got permission denied while trying to connect to the Docker daemon socket at unix:/// &amp;hellip;&lt;/h2>
&lt;p>&lt;img src="https://i.imgur.com/qnx1Plu.png"
loading="lazy"
alt="image-20230208005955002"
>&lt;/p>
&lt;p>解決方法：&lt;/p>
&lt;p>在vm中輸入&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">usermod -aG docker gitlab-runner
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&amp;ldquo;usermod -aG docker gitlab-runner&amp;rdquo; 這個指令是用來將 &amp;ldquo;gitlab-runner&amp;rdquo; 用戶加入 &amp;ldquo;docker&amp;rdquo; 群組。 &amp;ldquo;-a&amp;rdquo; 選項用於將用戶附加到指定的群組， &amp;ldquo;-G&amp;rdquo; 選項用於指定群組。&lt;/p>
&lt;p>這通常是為了允許 &amp;ldquo;gitlab-runner&amp;rdquo; 用戶在 GitLab Runner 管理的 CI/CD 流程中執行 Docker 容器。 通過將用戶加入 &amp;ldquo;docker&amp;rdquo; 群組，用戶可以在不需要權限升級的情況下運行 Docker 指令。&lt;/p>
&lt;p>請注意，&amp;ldquo;usermod&amp;rdquo; 指令的確切語法和行為可能因您使用的作業系統而異。 請查閱您的作業系統的文檔以獲取更多信息。&lt;/p>
&lt;h2 id="denied--requested-access-to-the-resource-is-denied">denied : requested access to the resource is denied.&lt;/h2>
&lt;p>八成是你的push沒有寫好，可以參考下面的樣子&lt;/p></description></item><item><title>使用SSH來連動GITSCM</title><link>https://hoxtonhsu.com/p/%E4%BD%BF%E7%94%A8ssh%E4%BE%86%E9%80%A3%E5%8B%95gitscm/</link><pubDate>Sun, 05 Feb 2023 21:06:21 +0800</pubDate><guid>https://hoxtonhsu.com/p/%E4%BD%BF%E7%94%A8ssh%E4%BE%86%E9%80%A3%E5%8B%95gitscm/</guid><description>&lt;img src="https://i.imgur.com/8ocM55M.png " alt="Featured image of post 使用SSH來連動GITSCM" />&lt;h1 id="步驟">步驟&lt;/h1>
&lt;h2 id="產生key的方式">產生key的方式&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">ssh-keygen
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="儲存key的位置">儲存Key的位置&lt;/h2>
&lt;p>&lt;img src="https://i.imgur.com/O7fBG6U.png"
loading="lazy"
alt="image-20230205211256218"
>&lt;/p>
&lt;p>要改就改，不改就是預設的&lt;/p>
&lt;h2 id="是否要針對privatekey設置密碼">是否要針對privateKey設置密碼&lt;/h2>
&lt;p>&lt;img src="https://i.imgur.com/6cq91cE.png"
loading="lazy"
alt="image-20230205211413921"
>&lt;/p>
&lt;p>使用這組Key時需不需要額外使用密碼，不輸入就是空白&lt;/p>
&lt;h2 id="查看產生的key">查看產生的key&lt;/h2>
&lt;p>&lt;img src="https://i.imgur.com/s4Zz9fr.png"
loading="lazy"
alt="image-20230205211703737"
>&lt;/p>
&lt;p>.pub後綴的就代表是pubKey&lt;/p>
&lt;p>輸入&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">cat id_rsa.pub
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>來查看&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/eRFOrX4.png"
loading="lazy"
alt="image-20230205211814078"
>&lt;/p>
&lt;p>此時將這串複製下來，貼到GitHub的SSH Key設定&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/JuU3kev.png"
loading="lazy"
alt="image-20230205213904945"
>&lt;/p>
&lt;p>接著只要上傳是使用SSH方式上傳，就不需要再登入github了&lt;/p></description></item><item><title>Wednesday 星期三與她的暈船夥伴</title><link>https://hoxtonhsu.com/p/wednesday-%E6%98%9F%E6%9C%9F%E4%B8%89%E8%88%87%E5%A5%B9%E7%9A%84%E6%9A%88%E8%88%B9%E5%A4%A5%E4%BC%B4/</link><pubDate>Sun, 29 Jan 2023 17:20:08 +0800</pubDate><guid>https://hoxtonhsu.com/p/wednesday-%E6%98%9F%E6%9C%9F%E4%B8%89%E8%88%87%E5%A5%B9%E7%9A%84%E6%9A%88%E8%88%B9%E5%A4%A5%E4%BC%B4/</guid><description>&lt;img src="https://i.imgur.com/C9FgAaF.jpg" alt="Featured image of post Wednesday 星期三與她的暈船夥伴" />&lt;h1 id="緣起">緣起&lt;/h1>
&lt;p>年假實在太無聊了，有點廢到連書都讀不下去，就打開Netflix想看看有什麼好看的，原本想看初戀First Love的，但無奈我對於愛情類型的東西實在沒什麼太大的興趣，正好看到了wednesday出現在推薦名單上，稍微看了一下預告，覺得Wednesday這種厭世到極限的人設深得我心，再搭配上女配角伊妮形成的反差，兩邊的對比實在太過強烈，讓我忍不住好奇到底這部在演什麼，於是就點進去了。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/nYPidWy.jpg"
loading="lazy"
alt="image-20230129234015442"
>&lt;/p>
&lt;p>先講結論，我覺得整部人設滿分，劇情真的不行，後面劇情感覺沒一個人是用腦袋在做事的，看完只覺得我的智商被狠狠的強暴了一遍。&lt;/p>
&lt;p>前面四集算是蠻多記憶點的，比如說舞會、拉大提琴、雕像爆破等等，對於星期三的角色塑造也算豐滿(就是個怪胎)。但無奈到後面幾集感覺整部劇情的調性就開始脫離了Addams Family的那種黑色幽默。&lt;/p>
&lt;p>首先是第五集，這一集家庭探訪日，校長要求Addams一家去做心理諮商，我本以為可以看到她們一家人「與眾不同」的那面，比如說互相挖苦、愛彼此愛到要殺死對方的那一種關心方式，但沒想到話鋒一轉，她們一家人居然整整齊齊的認真在做一場諮商，當問到Gormoz年輕時是否真的殺過人，Morticia還牙起來，要Wedensday不要再繼續追問下去了。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/zxyMpNT.jpg"
loading="lazy"
alt="VideoScreenshot&amp;ndash;5-10’21”"
>&lt;/p>
&lt;p>當時心裡在想，這家人不是一群outcast嗎？怎麼突然間會這麼嚴肅地在講這件事情？整場諮商下來完全沒有任何Addams Family的感覺，跟一般家庭沒什麼不同的地方。直到後面謎題揭曉時，我還想說這麼嚴肅肯定是有什麼天大的事情所以才不能說，原來就只是爸爸幫媽媽背黑鍋而已，請問這件事情有必要瞞著Wednesday嗎？有必要故弄玄虛嗎？&lt;/p>
&lt;p>緊接著到第六集，莫名其妙的Xavier跟Tyler都對Wednesday暈船，而且暈船的不清，相繼說出什麼「舞會過後，我只想忘掉妳，卻都忘不掉」&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/H9Aab9M.jpg"
loading="lazy"
alt="VideoScreenshot&amp;ndash;6-17’14” (1)"
>「雖然可能是我的錯覺，星期三，但你明明不停對我明示暗示」，我的天，我以為點進來是黑色幽默的懸疑片，沒想到點進來的原來是三角戀修羅場連續劇，再回頭看看前面的劇情，實在不覺得星期三跟這兩人的互動有什麼地方會讓人暈船的，可能這兩人都是易暈體質吧，只能說Wednesday有海王天份，深諳各種小心機吧，有一幕好像是Xavier看到Wednesday跟Tyler去舞會還是啥的，再生悶氣，沒想到Wedensday居然問Xavier到底在不開心什麼，我當時心裡在想「你這不是很懂嗎？海王Wednesday」，只能說男人終究是抵抗不了神祕正妹的邀請，唉。&lt;/p>
&lt;p>到了後面進入主線，Wednesday騙Enid跟Tyler想要出去，結果實際上是去Gates家調查，結果調查不順遭到Hyde的攻擊，結尾時看到Enid生氣的對Wedensday說「你根本不在乎你身邊的人，你只在乎你自己」時，我心裡想說終於啊，有人終於講出實話了，結果下一集Enid又活蹦亂跳的來找Wednesday聊天，不只是這幕，其實之前也有很多類似的劇情&lt;/p>
&lt;p>Wednesday搞了些什麼讓大家很不爽，結果過沒幾集大家又主動來找Wednesday聊天，道歉。奇怪，到底為什麼要跟她道歉啊，難道人長得正就可以這樣子嗎。&lt;/p>
&lt;p>接著劇情在往下走，發現更加弱智，星期三指認Xavier就是兇手，結果實際上抓錯了，我個人認為沒問題，畢竟人總是有出錯的時候，而且確實很多證據都指向Xavier。但當Wednesaday說她抓錯，Tyler才是兇手時，她的快樂夥伴依然是無條件地相信Wednesday，甚至連證據都沒提供，她的快樂夥伴沒有絲毫的懷疑她講得到底是真是假，整個抓捕過程細絲極恐，我甚至覺得，假使Tyler不是兇手，Wednesday說Ajax是兇手，那群快樂夥伴也是會很樂意地把Ajax抓起來上供給Wednesday。也就是說其實星期三的行為根本是村霸的行為吧，說你有罪就有罪，抓犯人不靠腦袋而是靠拳頭，全程硬A，甚至最後抓犯人還是靠幻視才抓到的，0邏輯思考、解謎。&lt;/p>
&lt;p>到最後一集則是弱智情節大集合，知道主謀是Thornhill老師，校長用變形術變成Tyler的樣子去跟Wednesday包圍她，結果校長在Thornhill面前解除變形後，我本以為會有什麼刺激的對決畫面，結果Thornhill只是提起「手中」的針筒，就往校長的「脖子」刺下去，校長就死了，那到底為什麼要變形接近老師啊，不能躲在旁邊聽就好嗎？退一萬步來說，校長你真的不是在演嗎？你身高190，老師身高155，能不能反應一下啊，結果就這樣死了，完全沒有任何推進劇情的作用，校長在不在那個場景對於劇情影響都不大，真的就只是為了過來死而已。&lt;/p>
&lt;p>後來Crackstone復活，我本以為會有什麼超炫的技能，結果完全沒有，戰力值低落到我甚至認為Nevermore學生每個人都衝上去，他就會活活當場被打死在現場，就只有進Nevermore後放個火焰風暴後，接著就拿起法仗當一個進戰法師，跟Wednesday近身平A起來，不知道是不是腦袋還沒熱起來，忘記自己是一個法師，應該拉開距離，或是趁隙放個什麼魔法之類的，最後還被Bianca從後面背刺，當他轉過去打飛Bianca後，接著又被Wednesday背刺，看到這幕的時候我還以為在看周星馳的零零漆大戰金鎗客，這種古靈金怪槍的幽默沒想到也被洋人發揚光大去了。最後Thornhill老師拿了一把槍走出來時，我心裡在想「終於啊！大人，時代變了，該拿槍了」，結果拿槍抖了老半天，講了一堆話就是沒開下去，結果後面被蜜蜂叮的時候才開槍，真的不是當年腦子進水嗎？Crackerstone復活後不就叫你閉嘴，警告你話太多了嗎？結果最後還是沒把他的話聽進去，難怪不成大氣。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/H8Z2aaX.jpg"
loading="lazy"
alt="VideoScreenshot&amp;ndash;8-39’29”"
>&lt;/p>
&lt;p>最後快樂大結局，該發糖的發糖、該狼化的狼化，Xavier繼續暈船Wednesday，結尾還送了台Iphone給Wednesday，看到這幕時，我忽然想起知道為什麼Xavier一開始會懷疑自己被Bianca蠱惑，從劇情表現上看起來他確實是暈到神智不清，我也懷疑他最後真的被星期三蠱惑了，印證了那句「星期三虐我千百遍，我仍待她如初戀」，鋼鐵星期三粉實至名歸。&lt;/p>
&lt;h1 id="結尾">結尾&lt;/h1>
&lt;p>認真回想了一下，整部劇情最大該吐槽的點就是Wednesday身邊的人對她近乎盲目的包容，校長包容她、警長包容她、狼妹包容她、男配也包容她，Wednesday至始至終除了小手外，幾乎沒對任何人道過歉，也沒深刻的反省，但就是所有的人都會莫名其妙的原諒她，毫無邏輯與深度可言。第二季出的話我應該還是會看，畢竟人設實在太香了，希望第二季不要在虎頭蛇尾了。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/L1o4eCd.jpg"
loading="lazy"
alt="VideoScreenshot&amp;ndash;8-44’45”"
>&lt;/p></description></item><item><title>Oracle?SAP?鼎新?淺談這些ERP背後的是什麼-SQL資料庫</title><link>https://hoxtonhsu.com/p/oraclesap%E9%BC%8E%E6%96%B0%E6%B7%BA%E8%AB%87%E9%80%99%E4%BA%9Berp%E8%83%8C%E5%BE%8C%E7%9A%84%E6%98%AF%E4%BB%80%E9%BA%BC-sql%E8%B3%87%E6%96%99%E5%BA%AB/</link><pubDate>Thu, 26 Jan 2023 17:50:33 +0800</pubDate><guid>https://hoxtonhsu.com/p/oraclesap%E9%BC%8E%E6%96%B0%E6%B7%BA%E8%AB%87%E9%80%99%E4%BA%9Berp%E8%83%8C%E5%BE%8C%E7%9A%84%E6%98%AF%E4%BB%80%E9%BA%BC-sql%E8%B3%87%E6%96%99%E5%BA%AB/</guid><description>&lt;img src="https://i.imgur.com/6aiiDXi.png" alt="Featured image of post Oracle?SAP?鼎新?淺談這些ERP背後的是什麼-SQL資料庫" />&lt;h1 id="前言">前言&lt;/h1>
&lt;p>記得在某次外勤的時候，那時候好像是要做稅抽還是要查什麼東西，需要用客戶的電腦SAP裡面查一些資料，可是我按了老半天，一直出現錯誤，迷迷糊糊地從那些文字中拼湊出一些單詞，只記得有什麼SQL Error，當時把這件事情跟客戶的會計反應，他旋即請了工程師過來處理，弄了一下之後跟我說需要明天才會好，要我明天再去撈&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/23Rnl3H.png"
loading="lazy"
alt="image-20230126231514168"
>&lt;/p>
&lt;p>(範例，非當事錯誤)&lt;/p>
&lt;p>後來這幾年工作上常常接觸到資料庫的東西，最近又想起這件事來，也總算知道當時遇到的錯誤是什麼了&lt;code>我猜是IP連不到&lt;/code>。因此繼續趁著年假這個真的不知道做什麼事的時間點來科普一下ERP系統後面的東西，&lt;strong>SQL DataBase是什麼&lt;/strong>？&lt;/p>
&lt;h1 id="什麼是sql">什麼是SQL&lt;/h1>
&lt;p>首先要知道SQL怎麼發音，我都念SQL，但也有些人念SQL，SQL的念法是，&lt;code>C闊(Ess-cue-ell')&lt;/code>。SQL這個詞的由來有人說沒意義，就是叫SQL，也有人認為是有意義的，也就是Structured Query Language(結構化查詢語言)的縮寫。簡而言之SQL就是用來跟資料庫(Database)溝通的一種Syntax(語法)，SQL與資料庫的關係像魔法師與魔法書的關係，魔法師透過詠唱咒語(SQL語法)來使用魔法書(Database)的能力。&lt;/p>
&lt;p>第一次接觸到SQL是在大四大三的時候吧，那時候好像有個系必修是什麼資訊概論類似的課程，老師上課的時候有提到一個東西，他的介面是隻海豚，然後有很多奇怪的按鈕，&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/OCEIz1x.png"
loading="lazy"
alt="image-20230126232635060"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/UNAw0Ua.png"
loading="lazy"
alt="image-20230126232700834"
>&lt;/p>
&lt;p>當時的我完全不知道這些是啥，甚至連SQL是什麼都沒有半點頭緒，那門課我記得我只負責處理一些很瑣碎的事情，其他都靠我同學Carry過的XD。結果沒想到逃的了一時，逃不了一世，現在天天都會看到，感嘆命運多舛啊。&lt;/p>
&lt;p>話說回來，所以什麼是SQL呢？他是用來做什麼的？我們首先先來講一下什麼是&lt;strong>關聯式資料庫&lt;/strong>。大家應該有上過學吧，學校裡，有班級、有學生、有班導，有科任老師，這些東西都是互相有關聯的，比如說一個班導可以有很多學生，但每個學生只能有一個班導，一個科任老師也可以有很多學生，每個學生也可以有很多的科任老師。用來記錄這些資訊的資料庫就是所謂的關聯式資料庫&lt;code>注：有關聯式就會有非關聯式資料庫，但這部分我就不熟了&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/5SQaANf.png"
loading="lazy"
alt="image-20230126235342454"
>&lt;/p>
&lt;p>(注：我事後回來看，我覺得這樣設計有很多問題，其實可以在精簡一點的，大佬就別鞭太大力了）&lt;/p>
&lt;p>畫成關聯圖大概就是長這樣，原諒我畫的真的有點醜，不過大概看的出來它們彼此有哪些關係吧？學生跟班級、導師、科任老師有關聯、班級跟學生還有班導有關聯、班導跟科任老師沒有關聯(其實這邊設計的不太好，會違反資料正規化，但只是示範而已）。SQL Database我們每天都會碰到，比如說你每天上車逼的悠遊卡，你的卡號就被記在政府的悠遊卡SQL Database裡面，只要你遺失後，就會把你的那筆資料拉出來，標注已遺失。或是會計師考試報名時，會給你一組准考證號碼，所以考試院的SQL資料庫裏面，也會有這筆准考證的資料，這筆資料包含你的身分證、考試成績等等，只要涉及資料儲存的部分，其實背後都有資料庫的存在，也包含你的手機裡面的通訊錄等等，裡面都有小型的資料庫在裡面處理你的information。&lt;/p>
&lt;h1 id="sql的實作">SQL的實作&lt;/h1>
&lt;p>多說無益，我們就用線上版的SQL編輯器來看看SQL是怎麼運作的吧，建議這邊點開我上面的HackMd，我有用Gif的方式錄影下來。&lt;/p>
&lt;p>線上的SQL編輯器：https://sqliteonline.com/&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/7VRZOgp.png"
loading="lazy"
alt="image-20230127001046262"
>&lt;/p>
&lt;p>點進去後會看到裡面長這個樣子，時間寶貴，我把左邊的欄位講一下就好，其實左邊就是各是各樣的SQL Database，不同的Database都有一些特性&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/haqbgQm.png"
loading="lazy"
alt="image-20230127001150655"
>&lt;/p>
&lt;ul>
&lt;li>SQLite：輕量化的SQL資料庫，常用於手機端。&lt;/li>
&lt;li>MariaDB：MySQL的作者獨立出來開發的SQL資料庫&lt;/li>
&lt;li>PostgreSQL：也是SQL資料庫&lt;/li>
&lt;li>MSSQL：微軟開發的SQL資料庫，會有微軟的奧援&lt;/li>
&lt;/ul>
&lt;p>當然不只這些，像常聽到的Oracle，不只有做ERP系統，其實還有做SQL資料庫，當然Oracle做的不止這些。話說回來，這些語法都大同小異，但為了方便各位，我們這次就用SQLite做示範，因為這個頁面一點進來就是SQLite了。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/tshXLM8.png"
loading="lazy"
alt="image-20230127001853263"
>&lt;/p>
&lt;p>這個紅色框框的地方就是讓我們打SQL語法的部分，我們先來創一些資料吧！秉持著能交給別人做的事情絕對不自己來的原則，這部分我們請ChatGPT來幫我們就好：）&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/tJsfb2U.png"
loading="lazy"
alt="image-20230127002300239"
>&lt;/p>
&lt;p>ChatGPT產生的語法如上，這邊先講解一下會出現的名詞代表的意思，首先&lt;/p>
&lt;ul>
&lt;li>Table：近似於Excel裡面的活頁表，每個活頁表都拿來描述不同的東西，比如說學生這張Table就是拿來存放跟學生有關的資料，比如說姓名、學號之類的東西。&lt;/li>
&lt;li>DROP：近似於刪除&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">CREATE&lt;/span> &lt;span class="k">TABLE&lt;/span> &lt;span class="n">Student&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="n">Name&lt;/span> &lt;span class="nb">TEXT&lt;/span>&lt;span class="p">,&lt;/span>　
&lt;span class="n">ClassTeacherName&lt;/span> &lt;span class="nb">TEXT&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">StudentID&lt;/span> &lt;span class="nb">INTEGER&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">ClassroomID&lt;/span> &lt;span class="nb">INTEGER&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">Birthdate&lt;/span> &lt;span class="nb">DATE&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">Subjects&lt;/span> &lt;span class="nb">TEXT&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>這樣的語法代表創建一張名為Student的表格，裡面要有&lt;/p>
&lt;ul>
&lt;li>名為Name的欄位，資料型別是文字&lt;/li>
&lt;li>名為ClassTeacherName的欄位，資料型別是文字&lt;/li>
&lt;li>名為StudentID的欄位，資料型別是數字&lt;/li>
&lt;li>名為ClassroomID的欄位，資料型別是數字&lt;/li>
&lt;li>名為Birthdate的欄位，資料型別是DATE(日期，亦即只能存放日期格式的東西)&lt;/li>
&lt;li>名為Subjects的欄位，資料型別是文字&lt;/li>
&lt;/ul>
&lt;p>&lt;code>資料型別代表這個欄位只能存什麼東西，如果資料型別是數字，就代表只能存在羅馬數字，如果輸入 天氣 就會出錯&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="c1">-- 如果已經存在這些表就刪除，確保每次都是產生全新的Table
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">DROP&lt;/span> &lt;span class="k">TABLE&lt;/span> &lt;span class="k">IF&lt;/span> &lt;span class="k">EXISTS&lt;/span> &lt;span class="n">demo&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">DROP&lt;/span> &lt;span class="k">TABLE&lt;/span> &lt;span class="k">IF&lt;/span> &lt;span class="k">EXISTS&lt;/span> &lt;span class="n">Student&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">DROP&lt;/span> &lt;span class="k">TABLE&lt;/span> &lt;span class="k">IF&lt;/span> &lt;span class="k">EXISTS&lt;/span> &lt;span class="n">Teacher&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">DROP&lt;/span> &lt;span class="k">TABLE&lt;/span> &lt;span class="k">IF&lt;/span> &lt;span class="k">EXISTS&lt;/span> &lt;span class="n">Classroom&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">DROP&lt;/span> &lt;span class="k">TABLE&lt;/span> &lt;span class="k">IF&lt;/span> &lt;span class="k">EXISTS&lt;/span> &lt;span class="n">SubjectTeacher&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">-- Create Student table
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">CREATE&lt;/span> &lt;span class="k">TABLE&lt;/span> &lt;span class="n">Student&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="n">Name&lt;/span> &lt;span class="nb">TEXT&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">ClassTeacherName&lt;/span> &lt;span class="nb">TEXT&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">StudentID&lt;/span> &lt;span class="nb">INTEGER&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">ClassroomID&lt;/span> &lt;span class="nb">INTEGER&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">Birthdate&lt;/span> &lt;span class="nb">DATE&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">Subjects&lt;/span> &lt;span class="nb">TEXT&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;span class="c1">-- Create Teacher table
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">CREATE&lt;/span> &lt;span class="k">TABLE&lt;/span> &lt;span class="n">Teacher&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="n">Name&lt;/span> &lt;span class="nb">TEXT&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">TeacherID&lt;/span> &lt;span class="nb">INTEGER&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">ClassroomID&lt;/span> &lt;span class="nb">INTEGER&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;span class="c1">-- Create Classroom table
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">CREATE&lt;/span> &lt;span class="k">TABLE&lt;/span> &lt;span class="n">Classroom&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="n">ClassroomID&lt;/span> &lt;span class="nb">INTEGER&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">ClassID&lt;/span> &lt;span class="nb">INTEGER&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;span class="c1">-- Create SubjectTeacher table
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">CREATE&lt;/span> &lt;span class="k">TABLE&lt;/span> &lt;span class="n">SubjectTeacher&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="n">Name&lt;/span> &lt;span class="nb">TEXT&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">TeacherID&lt;/span> &lt;span class="nb">INTEGER&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">Subject&lt;/span> &lt;span class="nb">TEXT&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/IFDjvKq.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;p>完成後我們可以看到我們的左邊就出現很多的東西，就代表我們成功創建了Table喔！&lt;/p>
&lt;p>但此時Table裡面的東西都是空的，我們試著塞一些資料進去Table裡面吧，這邊再次邀請我們的勞模ChatGPT&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/qa8OxpY.png"
loading="lazy"
alt="image-20230127003349573"
>&lt;/p>
&lt;p>這邊的INSERT其實就是新增資料進去的意思。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="c1">-- Insert data into the Teacher table
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">INSERT&lt;/span> &lt;span class="k">INTO&lt;/span> &lt;span class="n">Teacher&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TeacherID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassroomID&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">VALUES&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;John Smith&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">101&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">INSERT&lt;/span> &lt;span class="k">INTO&lt;/span> &lt;span class="n">Teacher&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TeacherID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassroomID&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">VALUES&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Jane Doe&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">102&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">INSERT&lt;/span> &lt;span class="k">INTO&lt;/span> &lt;span class="n">Teacher&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TeacherID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassroomID&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">VALUES&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Bob Johnson&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">103&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">-- Insert data into the Classroom table
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">INSERT&lt;/span> &lt;span class="k">INTO&lt;/span> &lt;span class="n">Classroom&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ClassroomID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassID&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">VALUES&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">101&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">INSERT&lt;/span> &lt;span class="k">INTO&lt;/span> &lt;span class="n">Classroom&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ClassroomID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassID&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">VALUES&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">102&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">INSERT&lt;/span> &lt;span class="k">INTO&lt;/span> &lt;span class="n">Classroom&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ClassroomID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassID&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">VALUES&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">103&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">-- Insert data into the SubjectTeacher table
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">INSERT&lt;/span> &lt;span class="k">INTO&lt;/span> &lt;span class="n">SubjectTeacher&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TeacherID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Subject&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">VALUES&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;John Smith&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Math&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">INSERT&lt;/span> &lt;span class="k">INTO&lt;/span> &lt;span class="n">SubjectTeacher&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TeacherID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Subject&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">VALUES&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Jane Doe&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Science&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">INSERT&lt;/span> &lt;span class="k">INTO&lt;/span> &lt;span class="n">SubjectTeacher&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TeacherID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Subject&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">VALUES&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Bob Johnson&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;English&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">INSERT&lt;/span> &lt;span class="k">INTO&lt;/span> &lt;span class="n">SubjectTeacher&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TeacherID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Subject&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">VALUES&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Bob Johnson&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;History&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">-- Insert data into the Student table
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">INSERT&lt;/span> &lt;span class="k">INTO&lt;/span> &lt;span class="n">Student&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassTeacherName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">StudentID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassroomID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Birthdate&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Subjects&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">VALUES&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Alice Smith&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;John Smith&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">101&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;2000-01-01&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Math, Science&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">INSERT&lt;/span> &lt;span class="k">INTO&lt;/span> &lt;span class="n">Student&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassTeacherName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">StudentID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassroomID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Birthdate&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Subjects&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">VALUES&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Bob Brown&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;John Smith&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">101&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;2001-01-01&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Math, English&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">INSERT&lt;/span> &lt;span class="k">INTO&lt;/span> &lt;span class="n">Student&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassTeacherName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">StudentID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassroomID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Birthdate&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Subjects&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">VALUES&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Charlie Johnson&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Jane Doe&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">102&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;2002-01-01&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Science, History&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">INSERT&lt;/span> &lt;span class="k">INTO&lt;/span> &lt;span class="n">Student&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassTeacherName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">StudentID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassroomID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Birthdate&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Subjects&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">VALUES&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;David Wilson&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Jane Doe&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">102&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;2003-01-01&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Science, English&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">INSERT&lt;/span> &lt;span class="k">INTO&lt;/span> &lt;span class="n">Student&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassTeacherName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">StudentID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassroomID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Birthdate&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Subjects&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">VALUES&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Eve Davis&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Bob Johnson&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">103&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;2004-01-01&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;English, History&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">INSERT&lt;/span> &lt;span class="k">INTO&lt;/span> &lt;span class="n">Student&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassTeacherName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">StudentID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassroomID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Birthdate&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Subjects&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">VALUES&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Frank Miller&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;John Smith&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">101&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;2005-01-01&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Math&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">INSERT&lt;/span> &lt;span class="k">INTO&lt;/span> &lt;span class="n">Student&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassTeacherName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">StudentID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassroomID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Birthdate&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Subjects&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">VALUES&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Gary Moore&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Jane Doe&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">102&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;2006-01-01&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Science&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">INSERT&lt;/span> &lt;span class="k">INTO&lt;/span> &lt;span class="n">Student&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassTeacherName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">StudentID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassroomID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Birthdate&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Subjects&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">VALUES&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Helen Anderson&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Bob Johnson&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">103&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;2007-01-01&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;English, History&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">INSERT&lt;/span> &lt;span class="k">INTO&lt;/span> &lt;span class="n">Student&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassTeacherName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">StudentID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassroomID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Birthdate&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Subjects&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">VALUES&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Irene Thomas&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;John Smith&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">101&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;2008-01-01&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Math, Science&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">INSERT&lt;/span> &lt;span class="k">INTO&lt;/span> &lt;span class="n">Student&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassTeacherName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">StudentID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ClassroomID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Birthdate&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Subjects&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">VALUES&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;James Hernandez&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Jane Doe&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">102&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;2009-01-01&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Science, English&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/MQUkQKO.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;p>完成後，在Table上面點選右鍵，選擇SELECT即可這張表的所有屬性喔 ！&lt;/p>
&lt;ul>
&lt;li>教室Table&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/GcMuljK.png"
loading="lazy"
alt="image-20230127004124644"
>&lt;/p>
&lt;ul>
&lt;li>學生Table &lt;code>這邊也違反資料庫正規化，一個應該只塞一筆資料的原則，我的subject塞了複數筆資料，但單純Demo而已，有點懶得改了&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/VcUjfIc.png"
loading="lazy"
alt="image-20230127004142876"
>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>科任老師Table&lt;img src="https://i.imgur.com/c4JRzJa.png"
loading="lazy"
alt="image-20230127004158587"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>老師Table&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/K9jpTXv.png"
loading="lazy"
alt="image-20230127004517825"
>&lt;/p>
&lt;h1 id="sql語法的介紹">SQL語法的介紹&lt;/h1>
&lt;p>我們一樣在框框裡面操作&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">SELECT&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="k">FROM&lt;/span> &lt;span class="n">Teacher&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/vUOj64t.png"
loading="lazy"
alt="image-20230127004832304"
>&lt;/p>
&lt;p>這個語法的意思就是 SELECT&lt;code>選擇&lt;/code> *&lt;code>全部欄位&lt;/code> FROM&lt;code>來自&lt;/code> Teacher&lt;code>這張表&lt;/code>，翻成白話文的意思就是，幫我選出Teacher這張表的全部內容，當然我們也可以再複雜一點，比如說&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">SELECT&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="k">FROM&lt;/span> &lt;span class="n">Teacher&lt;/span> &lt;span class="k">WHERE&lt;/span> &lt;span class="n">teacherid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/z9vNNK2.png"
loading="lazy"
alt="image-20230127005357191"
>&lt;/p>
&lt;p>也就是從Teacher這張表裡面選出TeacherId為2的欄位&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">SELECT&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="k">FROM&lt;/span> &lt;span class="n">Student&lt;/span> &lt;span class="k">WHERE&lt;/span> &lt;span class="n">subjects&lt;/span> &lt;span class="k">LIKE&lt;/span> &lt;span class="s1">&amp;#39;%Math%&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/Ea8nwnc.png"
loading="lazy"
alt="image-20230127011847946"
>&lt;/p>
&lt;p>當然我們再複雜一點點，這個語法會找出所有在Student這張Table裡面subjects欄位裡有Math的學生，聽起來有點繞口對吧XD，接著我們就把這些語法組合起來，試著找看看&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">SELECT&lt;/span> &lt;span class="n">Student&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="o">*&lt;/span>
&lt;span class="k">FROM&lt;/span> &lt;span class="n">Student&lt;/span>
&lt;span class="k">JOIN&lt;/span> &lt;span class="n">SubjectTeacher&lt;/span> &lt;span class="k">ON&lt;/span> &lt;span class="n">Student&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ClassTeacherName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SubjectTeacher&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Name&lt;/span>
&lt;span class="k">WHERE&lt;/span> &lt;span class="n">Birthdate&lt;/span> &lt;span class="k">BETWEEN&lt;/span> &lt;span class="s1">&amp;#39;2001-01-01&amp;#39;&lt;/span> &lt;span class="k">AND&lt;/span> &lt;span class="s1">&amp;#39;2005-12-31&amp;#39;&lt;/span> &lt;span class="k">AND&lt;/span> &lt;span class="n">SubjectTeacher&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Subject&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;Math&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/P1RI9MH.png"
loading="lazy"
alt="image-20230127011903188"
>&lt;/p>
&lt;p>我們再複雜一點點點點，我們想找出所有在2001年至2005年出生，並且有修Math的學生，看到這邊這個語法大家是不是有點感覺了，是不是很像我們去撈資料常常用到的，要撈發生在本年度的100018應付帳款全部資料XD。其實背後的SQL語法就像這樣子。&lt;/p>
&lt;p>當然實際上的情況SQL語法還會更複雜一點，因為這些這是關聯式資料庫，彼此間可能可以關聯到很遠很遠的Table，只是為了做科普而已就不弄得那麼複雜了。另外SQL Syntax(語法)也不只SELECT，常見的還有UPDATA, DELETE, CREATE等等，只是這些審計人員一般不會碰到。&lt;/p>
&lt;h1 id="結語">結語&lt;/h1>
&lt;p>其實沒啥想講的，只是覺得很閒而已，想說趁年假時後把想寫的東西寫一寫，順便也當科普一樣，感覺會計這個圈子好像很少人在寫科普或是知識介紹的東西，就花個一兩個小時的時間寫一下，如果對SQL有興趣的話，可以去載來玩看看&lt;/p>
&lt;ul>
&lt;li>MySQL：全英介面，一開始可能不太友好，但網路上資源最多&lt;/li>
&lt;li>MSSQL：微軟的SQL，有中文介面，但網路上資源相對較少，其實SQL的語法都大同小異，但其實還是有一些不同處&lt;/li>
&lt;li>PostgreSQL：通常不會用這個入門，我個人覺得它GUI的介面很爛，我用這個的話通常都是用Terminal&lt;/li>
&lt;li>SQLite：不太推薦，因為這算是輕量化版的，有很多資料型別是特規的。&lt;/li>
&lt;/ul>
&lt;p>我文章常提到的資料庫正規化介紹如下&lt;/p>
&lt;p>&lt;a href="https://ithelp.ithome.com.tw/articles/10229472">https://ithelp.ithome.com.tw/articles/10229472&lt;/a>&lt;/p>
&lt;p>忙季加油！債見&lt;/p></description></item><item><title>淺談一些實用的快捷鍵</title><link>https://hoxtonhsu.com/p/%E6%B7%BA%E8%AB%87%E4%B8%80%E4%BA%9B%E5%AF%A6%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%8D%B5/</link><pubDate>Thu, 26 Jan 2023 00:31:43 +0800</pubDate><guid>https://hoxtonhsu.com/p/%E6%B7%BA%E8%AB%87%E4%B8%80%E4%BA%9B%E5%AF%A6%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%8D%B5/</guid><description>&lt;img src="https://i.imgur.com/Ln2xqzT.png" alt="Featured image of post 淺談一些實用的快捷鍵" />&lt;p>想講一些實用的，但卻很少人知道的一些電腦使用的功能，知道這些對做底稿、翻憑證不會有太大的幫助，但會用的話我個人覺得可以節省很多時間，供大家參考。&lt;/p>
&lt;h1 id="快速關機">快速關機&lt;/h1>
&lt;p>window+D：回到桌面&lt;/p>
&lt;p>在桌面Alt+F4即可跳出關機選項&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/A0TkM9G.png"
loading="lazy"
alt="image-20230126004515683"
>&lt;/p>
&lt;p>記得當初在外勤的時候，只要組長說撤的時候我就會用最快的速度關機XD，那時候同事都問我怎麼用的，這就是訣竅，當然也可以選擇重新啟動或休眠，看自己喜好決定。&lt;/p>
&lt;h1 id="截圖">截圖&lt;/h1>
&lt;p>window+shift+s&lt;/p>
&lt;p>這個應該最基本，在Window10以上的系統可以透過這個shortcut來打開截圖視窗，就拿來貼圖片給組長，跟組長說我哪邊不會QQ&lt;/p>
&lt;h1 id="快速打開excel-word-記事本-小畫家計算機">快速打開Excel, Word, 記事本, 小畫家,計算機&amp;hellip;&lt;/h1>
&lt;p>Window+R：跳出執行選項&lt;/p>
&lt;p>在裡面輸入以下的內容已打開不同的Application&lt;/p>
&lt;p>mspaint：打開小畫家&lt;/p>
&lt;p>notepad：記事本&lt;/p>
&lt;p>winword：word&lt;/p>
&lt;p>excel：excel&lt;/p>
&lt;p>計算機：calc&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/BQZCVyH.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;h1 id="快速打開工作列的應用程式">快速打開工作列的應用程式&lt;/h1>
&lt;p>window+1&lt;/p>
&lt;p>可以打開工作列的第一個應用&lt;/p>
&lt;p>window+2&lt;/p>
&lt;p>可以打開工作列的第二個應用，以此類推&amp;hellip;&lt;/p>
&lt;p>這個指令我大部分都是用來開Chrome，或是Excel之類的東西&lt;/p>
&lt;h1 id="瀏覽器快速選擇搜尋列">瀏覽器快速選擇搜尋列&lt;/h1>
&lt;p>打開Chrorm後，打alt+D就可以定位到搜尋列，並且在這邊按Ctrl+1,2,3&amp;hellip;即可切換至不同的頁面，通常是我拿來打混摸魚的時候用的，Ctrl+T則可以打開新的分頁，所以兩個和再一起就是，開啟一個新分頁並搜尋，如果旁邊有人過來就立刻Ctrl+w關閉當前頁面，避免摸魚被抓包。&lt;/p></description></item><item><title>如何製作會計的電子筆記？Markdown的介紹</title><link>https://hoxtonhsu.com/p/%E5%A6%82%E4%BD%95%E8%A3%BD%E4%BD%9C%E6%9C%83%E8%A8%88%E7%9A%84%E9%9B%BB%E5%AD%90%E7%AD%86%E8%A8%98markdown%E7%9A%84%E4%BB%8B%E7%B4%B9/</link><pubDate>Sun, 22 Jan 2023 23:15:25 +0800</pubDate><guid>https://hoxtonhsu.com/p/%E5%A6%82%E4%BD%95%E8%A3%BD%E4%BD%9C%E6%9C%83%E8%A8%88%E7%9A%84%E9%9B%BB%E5%AD%90%E7%AD%86%E8%A8%98markdown%E7%9A%84%E4%BB%8B%E7%B4%B9/</guid><description>&lt;img src="https://i.imgur.com/c968Ywa.png" alt="Featured image of post 如何製作會計的電子筆記？Markdown的介紹" />&lt;h1 id="前言">前言&lt;/h1>
&lt;p>年假回老家實在是太無聊了，想把這幾年學到的東西分享一下，希望可以幫助一些莘莘學子，能用更有效率的方式來整理筆記。&lt;/p>
&lt;p>記得大二或是大三的時候很沉迷於作筆記這件事情，最喜歡做的事情，就是用一兩個下午把那個禮拜所上的成會或是中會整理成筆記，以利後面的複習。不得不說當時這樣做的回饋還不錯，當時中會跟成會的成績都還算不錯。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/CFebBUe.png"
loading="lazy"
alt="image-20230122232625364"
>&lt;/p>
&lt;p>（當時很認真的筆記）&lt;/p>
&lt;h1 id="紙本筆記的缺點">紙本筆記的缺點&lt;/h1>
&lt;p>這樣的筆記在當時應付期中考期末考還行，因為這些筆記可能都是一兩個月寫的，都還算有印象，但是當我準備研究所的時候就發現幾個問題了，首先&lt;/p>
&lt;ol>
&lt;li>難以搜尋：面對海量的資料，我很難在第一時間找到我需要的資訊，比如說我想要找一個利息資本化的定義，以及它的細項，我除非前一陣子剛寫，或是我版面真的寫得很好，不然我不能第一時間的找到我想要的資訊。比如說稅法的部分就分成很多塊，比如說遺產稅贈與稅等等的，數量真的太多，且稅率也類似，常常找不到自己想要的地方。&lt;/li>
&lt;li>難以擴充：紙質的筆記一旦寫下去之後就難以修改，無法滿足我越來越多的知識積累，比如說大家都知道的金融資產那一個章節，可能光一個範例就可以寫個2,30個也不為過，每個範例可能都有一些細節要抄進筆記裡面，這樣日積月累下去，那一頁的筆記越記越多、越寫越亂不易閱讀。&lt;/li>
&lt;li>耗時：耗時是最大的問題，一頁的筆記我可能需要寫個半小時，雖然說寫的當下其實就記得很清楚了，但是卻非常的消耗時間，往往做完這些筆記我的假日就這樣沒了，實在是不太行，且手寫筆記非常吃手寫的品質，如果心一旦亂起來，亂寫一通，那這筆記基本上閱讀不能，只是寫給當時的自己看的，不利日後準備研究所或是會計師考試。&lt;/li>
&lt;/ol>
&lt;p>雖然1、2的問題都可以透過Ipad的手寫筆記來解決一些問題，但最大的問題就是第3點，當時有嘗試過很多方式，比如說用excel來記筆記(但儲存格不方便修改與擴充)，或是用word來寫，但word真的非常不適合拿來寫筆記，首先，work本身是不支援你打出類似分錄格式的東西的，就算可以，那個代價我記得也很大，其次，光是格式的部分可能就要設定個老半天，再加上在寫筆記的途中還需要移動滑鼠去調整現在想要的是&lt;/p>
&lt;ol>
&lt;li>&lt;/li>
&lt;/ol>
&lt;ol start="2">
&lt;li>&lt;/li>
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>或是&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;p>這樣的格式真的有點打斷思緒。&lt;/p>
&lt;p>因此我的需求是這樣&lt;/p>
&lt;ol>
&lt;li>方便撰寫，希望不需要去切什麼格式&lt;/li>
&lt;li>支援圖片上傳，可以讓我傳圖片上去，可能有些範例或是老師在黑板上畫的東西，需要做成筆記來看&lt;/li>
&lt;li>要可以讓我打類似分錄的東西&lt;/li>
&lt;/ol>
&lt;p>後來出社會工作後，接觸到Markdown這個東西真的驚為天人，並且是有一點相見恨晚，如果在學期間知道這個東西的話做筆記應該會更高效快速一點。首先先來介紹一下Markdown是什麼吧&lt;/p>
&lt;h1 id="markdown介紹">Markdown介紹&lt;/h1>
&lt;p>Markdown 是目前非常普遍用來撰寫文檔的語言，一開始的目標就是使用「易讀易寫的純文字格式編寫文件」，此初衷讓使用者可以專注在文字的本身，而不需要透過其它工具來切換格式。以 Word 撰寫文檔來說，就必須透過上方的工具列來切換&lt;strong>標題、列表、粗體、斜體&lt;/strong>等等；而 Markdown 並沒有這樣的工具列，完全都是&lt;strong>使用標示符號來完成這些需求&lt;/strong>。&lt;/p>
&lt;p>Markdown是一種輕量級標記式語言，創始人為約翰·格魯伯。它允許人們使用易讀易寫的純文字格式編寫文件&lt;/p>
&lt;p>由於Markdown的輕量化、易讀易寫特性，並且對於圖片，圖表、數學式都有支援，目前許多網站都廣泛使用Markdown來撰寫說明文件或是用於論壇上發表訊息。如GitHub、Reddit、Discord、Diaspora、Stack Exchange、OpenStreetMap 、SourceForge、簡書等，甚至還能被用來撰寫電子書。&lt;/p>
&lt;p>參考自維基百科以及https://www.casper.tw/development/2019/11/23/ten-mins-learn-markdown/&lt;/p>
&lt;p>先來看看如果我把會計的筆記轉成Markdown的話看起來會是怎麼樣吧，因為Dcard不支援markdown，可以點這邊預覽看看&lt;/p>
&lt;p>&lt;a href="https://hackmd.io/@Celeast/ryyXXyosi">https://hackmd.io/@Celeast/ryyXXyosi&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/NFRD8Ko.png"
loading="lazy"
alt="image-20230123005704082"
>&lt;/p>
&lt;h1 id="第七章-彈性預算直接成本與管理會計">第七章 彈性預算、直接成本與管理會計&lt;/h1>
&lt;p>本章學習重點&lt;/p>
&lt;ol>
&lt;li>了解各差異的差異&lt;/li>
&lt;li>基於差異分析所做的決策判斷&lt;/li>
&lt;/ol>
&lt;p>名詞定義&lt;/p>
&lt;ul>
&lt;li>靜態預算(Static Budget)：在預算期間開始時，&lt;strong>基於預計產出水準所做的預算&lt;/strong>所做的預算&lt;/li>
&lt;li>靜態預算差異：在靜態預算中，實際結果與預期數之間的差異&lt;/li>
&lt;li>彈性預算(Flexible Budget)：預算期間內按&lt;strong>實際產出&lt;/strong>水準計算出預算收入與預算成本之預算&lt;/li>
&lt;/ul>
&lt;p>．&lt;/p>
&lt;p>．&lt;/p>
&lt;p>．&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">flowchart LR
B[實際投入數量x實際價格] &amp;lt;--價格差異--&amp;gt; 實際投入數量x預算價格 &amp;lt;--效率差異--&amp;gt; C[實際產出下所允許之預算投入x預算價格]
B &amp;lt;--彈性預算差異--&amp;gt;C
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>變動&lt;/th>
&lt;th>歸納&lt;/th>
&lt;th>評論&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>固定制造成本可以做為存貨成本嗎?&lt;/td>
&lt;td>不可&lt;/td>
&lt;td>可以&lt;/td>
&lt;td>基本問題&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>有生產數量差異嗎?&lt;/td>
&lt;td>沒有&lt;/td>
&lt;td>有&lt;/td>
&lt;td>對基準產能水準的選擇，只在歸納成本法下影響營業利益的衡量&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>分錄&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>原料 10,000&lt;/p>
&lt;p>​ 應付帳款 10,000&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>在製品 30,000&lt;/p>
&lt;p>製造費用 1,000&lt;/p>
&lt;p>​ 原料 31,000&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>產成品 50,000&lt;/p>
&lt;p>​ 在製品 50,000&lt;/p>
&lt;/blockquote>
&lt;p>課堂範例：&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/bhWOaT5.png"
loading="lazy"
alt="image-20230123000736761"
>&lt;/p>
&lt;h1 id="ｍarkdown語法介紹">Ｍarkdown語法介紹&lt;/h1>
&lt;p>上面是我把我的會計筆記轉成Markdown格式，可以看到Markdown支援了幾點&lt;/p>
&lt;ol>
&lt;li>列表式的清單&lt;/li>
&lt;li>用來舉例的黑點&lt;/li>
&lt;li>重點的醒目提示&lt;/li>
&lt;li>分層式的標題，標出章節重點&lt;/li>
&lt;li>支援表格(注：markdown的表格語法非常反智，通常我都是用快捷鍵生成)&lt;/li>
&lt;li>支援流程圖的繪製&lt;/li>
&lt;li>支援數學式(這邊沒有示範到，不過Markdown是有支援高等數學的運算式的)&lt;/li>
&lt;li>支援圖片上傳，可以讓我把版書或是題目直接貼上去&lt;/li>
&lt;/ol>
&lt;p>接下來帶大家認識一下Markdown的一些語法&lt;/p>
&lt;p>首先是標題的語法，輸入#再加上一個空格會產生標題，就像現在這樣&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/xzUg32o.png"
loading="lazy"
alt="image-20230123001409936"
>&lt;/p>
&lt;p>在文字前加上1. 2. 3. 則會變成列表&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/xbpaCZs.png"
loading="lazy"
alt="image-20230123001454121"
>&lt;/p>
&lt;p>文字之間加上**則可重點醒目&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/vceq8VB.png"
loading="lazy"
alt="image-20230123001905373"
>&lt;/p>
&lt;p>在文字前加上+則會變成黑點&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/RrdcAai.png"
loading="lazy"
alt="image-20230123001516022"
>&lt;/p>
&lt;p>在文字前加上&amp;gt;則可做為補充說明，我就是用這個語法來寫分錄的&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/xaq48Ty.png"
loading="lazy"
alt="image-20230123001618553"
>&lt;/p>
&lt;p>顯示圖片的語法則是這樣&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/Yg0rfCW.png"
loading="lazy"
alt="image-20230123001709056"
>&lt;/p>
&lt;p>裡面的內容填上自己的圖片連結就可以了，如何把圖片上傳上去我後面會說。&lt;/p>
&lt;p>Markdown的語法還有很多很多，不只有我上面提到的這些，有興趣的同學可以參考這邊&lt;/p>
&lt;p>&lt;a href="https://www.casper.tw/development/2019/11/23/ten-mins-learn-markdown/">https://www.casper.tw/development/2019/11/23/ten-mins-learn-markdown/&lt;/a>&lt;/p>
&lt;h1 id="我該怎麼寫markdown呢">我該怎麼寫Markdown呢？&lt;/h1>
&lt;p>markdown是工程師蠻常會接觸到一個標籤式語言，如果你開心的話用記事本也是可以寫Markdown的喔，但是效果會不太好閱讀而已，目前markdown我自己認為比較常見的有幾種&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Vscode&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/zCtwWvH.png"
loading="lazy"
alt="image-20230123002813123"
>&lt;/p>
&lt;p>這是我最初拿來寫markdown的工具，但它本身不是專門拿來寫markdown的，不支援一些熱鍵以及圖片上傳，後面就被我拋棄了&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/To64OPG.png"
loading="lazy"
alt="image-20230123003226114"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>HackMd&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/XQD4g2U.png"
loading="lazy"
alt="image-20230123010834897"
>&lt;/p>
&lt;p>HackMd是一個網頁版的markdown編輯器，簡單來講就是你寫上去後，東西就是直接存在雲端，且圖片複製貼上就會自動幫你上傳到網路上了，非常的便捷以及快速，好像是台灣人開發的，最重要的是它免費，也是最常見的方式。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/yPY9NIk.png"
loading="lazy"
alt="image-20230123003322000"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Typora&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/AJVAHof.png"
loading="lazy"
alt="image-20230123003346195"
>&lt;/p>
&lt;p>這是我目前主力所使用的Markdown編輯器，跟HackMd最大的不同就是它是一個所見及所得的編輯器，上述兩款其實都是把畫面分成兩邊，左邊是Markdown語法，右邊則是渲染後的結果，而typora則是在你輸入完後直接幫你渲染好，也就是&lt;strong>所寫及所見&lt;/strong>，是它最大的特色。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/04NdYQW.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;p>但相比之下它就有幾個缺點&lt;/p>
&lt;ol>
&lt;li>要錢，最直觀的問題就是它是一個付費的程式，屬於買斷制一次500，支援三台設備同時使用&lt;/li>
&lt;li>本身不支援圖片上傳，想要用它來做圖片上傳需要懂一些控制台指令以及Json格式的&lt;/li>
&lt;li>本身的檔案都在local端，需要自己手動丟上雲端(我個人是丟到github上面，然後用bat檔自動上傳)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>還可以提供一點，我會把一些真的沒辦法用文字或是Markdown語法表示的東西寫在平板的GoodNote上面，在把連結分享出來，然後截圖下來貼上去，看起來就像這樣&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/SdiDiSv.png"
loading="lazy"
alt="image-20230123004611873"
>&lt;/p>
&lt;h1 id="結語">結語&lt;/h1>
&lt;p>當然還有不只這些，我沒記錯的話Notion本身也有支援(但我不熟)以及obsidian也是一個寫Markdown的工具，我之所以會選Typora只是因為我喜歡有更大的空間，不喜歡畫面被分成左右兩邊而已。&lt;/p>
&lt;p>作筆記的方法有很多，不做的、用紙寫的、用平板寫的，都可以，沒有誰優誰劣，Markdown也有它的限制在，比如說它就&lt;strong>不能寫資產負債表、也不能寫T字帳&lt;/strong>，沒有一個方法是最佳解的，只要找到自己喜歡的方式都可以，這篇文章只是拋磚引玉，希望提供自己的一些想法供大家參考，也歡迎各位一起討論，祝大家新年快樂，忙季加油！&lt;/p></description></item><item><title>Docker_Desktop_Starting問題解決</title><link>https://hoxtonhsu.com/p/docker_desktop_starting%E5%95%8F%E9%A1%8C%E8%A7%A3%E6%B1%BA/</link><pubDate>Sat, 21 Jan 2023 00:52:36 +0800</pubDate><guid>https://hoxtonhsu.com/p/docker_desktop_starting%E5%95%8F%E9%A1%8C%E8%A7%A3%E6%B1%BA/</guid><description>&lt;img src="https://i.imgur.com/xgUpP8O.png)" alt="Featured image of post Docker_Desktop_Starting問題解決" />&lt;p>最近在新電腦上安裝了Docker結果發現一直卡在這個畫面&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/cw9mdiw.png"
loading="lazy"
alt="image-20230121005427135"
>&lt;/p>
&lt;p>後來研究了一下發現應該是wsl沒有裝好的原因，後來安裝好之後，在把Window Update要我Update的東西全部更新一次，就可以執行成功了，推測應該是window版本沒更新，導致不支援wsl的關係。&lt;/p></description></item><item><title>Docker學習筆記</title><link>https://hoxtonhsu.com/p/docker%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/</link><pubDate>Wed, 18 Jan 2023 21:47:50 +0800</pubDate><guid>https://hoxtonhsu.com/p/docker%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/</guid><description>&lt;img src="https://i.imgur.com/JdDwgHn.png " alt="Featured image of post Docker學習筆記" />&lt;h1 id="名詞解釋">名詞解釋&lt;/h1>
&lt;h2 id="container">Container&lt;/h2>
&lt;p>Docker Container 是一種軟體容器，它可以在其中運行應用程式和其他服務。它使用操作系統級別的虛擬化，可以在單一的物理主機上運行多個容器，並且每個容器都有自己的運行環境和資源。&lt;/p>
&lt;p>Docker Container 是一種軟體容器，它可以在其中運行應用程式和其他服務。容器具有輕量級、可移植性和隔離性等特點。容器是通過在操作系統內核中運行的容器引擎來實現的。&lt;/p>
&lt;p>Docker容器主要是使用了Linux 的 Namespaces 和 Control groups（cgroups） 技術來實現隔離，這兩種技術可以將一個實體主機上的資源限制給每個容器，而容器內部則是共用一個kernel，因此容器比虛擬機器輕量且速度較快。&lt;/p>
&lt;p>Docker容器是基於鏡像(Image)來建立與運行的，一個鏡像可以是一個基礎鏡像或是由其他鏡像所建立而來。當執行docker run 指令時，會從鏡像建立一個容器，並在容器內執行指定的應用程式或服務。&lt;/p>
&lt;p>不僅如此，Docker容器還支援網路、儲存卷的映射，使得容器可以與外部通訊，也可以存取本地端的資料。&lt;/p>
&lt;p>透過Docker容器,我們可以將應用程式、服務和其所需的環境打包在一起，並且可以在不同的環境中運行，提高了應用程式的可移植性和彈性。&lt;/p>
&lt;h2 id="image">Image&lt;/h2>
&lt;p>Docker Image 是 Docker 容器的基礎，它是一個只讀的模板，包含了容器運行所需的所有檔案、設定和程式。當執行 &lt;code>docker run&lt;/code> 指令時，Docker 會從 Image 建立一個新的容器並在其中執行指定的應用程式或服務。&lt;/p>
&lt;p>Docker Image 可以通過構建或下載的方式創建，構建的方式可以使用 Dockerfile 來描述如何構建一個 Image。而下載的方式則可以從 Docker Hub 或其他的 registry 下載。&lt;/p>
&lt;h2 id="volume">Volume&lt;/h2>
&lt;p>Docker Volume 是 Docker 的一種功能，用於管理容器中的數據。容器本身是輕量級的，數據是不能永久存在的，而 Volume 則是可以永久存在的。&lt;/p>
&lt;p>Docker Volume 可以被掛載到容器上，並且可以在容器內部存儲數據。當容器停止運行或者被刪除時，Volume 中的數據仍然可以保留下來。這樣就可以在重啟容器或建立新容器時，繼續使用之前存儲的數據。&lt;/p>
&lt;p>並且Volume裡面的資料是可以和Host分享的，兩邊的資料呈現鏡像的雙向對應，在Host新增的東西會在Container出現，Container新增的資料也會在Host裡面出現&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/pw664cD.png"
loading="lazy"
alt="image-20230121163302976"
>&lt;/p>
&lt;h1 id="常用指令">常用指令&lt;/h1>
&lt;h2 id="搜尋image">搜尋Image&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker search postgres
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/D4Bl6SJ.png"
loading="lazy"
alt="image-20230124042123305"
>&lt;/p>
&lt;h2 id="查看目前的image">查看目前的image&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker image ls
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>或是&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker images
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="執行docker-image">執行docker image&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker run &lt;span class="o">[&lt;/span>imageName&lt;span class="o">][&lt;/span>:tag&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/s140pSv.png"
loading="lazy"
alt="image-20230121123518172"
>&lt;/p>
&lt;p>後面的:latest是版本號，可加可不加，沒加的話預設就是latest&lt;/p>
&lt;h2 id="刪除images">刪除images&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker rmi &lt;span class="o">[&lt;/span>imageId&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="在detached-mode下執行">在Detached mode下執行&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker run -d nginx
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>所謂的Detached mode亦即&lt;strong>啟動後會不會占用你的terminal&lt;/strong>，可以看一下下面的git，可以比較兩者間的差異&lt;/p>
&lt;ul>
&lt;li>沒有-d&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/ehYrPax.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;ul>
&lt;li>有-d&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/kRVrhXQ.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;h2 id="打包成docker-image">打包成docker image&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker build -t drink-more-water:latest .
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>-t 是 tag的縮寫，hello-docker是這個tag的名稱，.代表dockerfile在當前的目錄下，如果Dockerfile不在當前目錄，則這邊要改變。latest則是版本號，可加可不加，不加的話預設是latest&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/c5XdkHr.png"
loading="lazy"
alt="image-20230118215347469"
>&lt;/p>
&lt;h2 id="查看目前運行的container">查看目前運行的Container&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker ps
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>ps是process status的意思&lt;/code>&lt;/p>
&lt;p>或是&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker container ls
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>​ &lt;img src="https://i.imgur.com/WCJdgXl.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;h2 id="查看目前運作中running的container">查看目前運作中(running)的Container&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker ps
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/C1jS3jN.png"
loading="lazy"
alt="image-20230118222647084"
>&lt;/p>
&lt;p>或是&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker ps -a
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>查看底下全部的Container不論啟動與否&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/sIt29w1.png"
loading="lazy"
alt="image-20230118222751647"
>&lt;/p>
&lt;h2 id="進入container與之互動">進入Container與之互動&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sh" data-lang="sh">docker &lt;span class="nb">exec&lt;/span> -it &lt;span class="o">[&lt;/span>ConatinerId&lt;span class="o">]]&lt;/span> bash
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>bash有可能沒有，有可能是sh，要自己到/bin裡面看&lt;/p>
&lt;h2 id="停止container">停止Container&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker stop &lt;span class="o">[&lt;/span>ContainerId&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/dziz1MR.png"
loading="lazy"
alt="image-20230121125714796"
>&lt;/p>
&lt;p>​&lt;/p>
&lt;p>啟動停止的Container&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker start &lt;span class="o">[&lt;/span>ContainerId&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="刪除container">刪除Container&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker rm &lt;span class="o">[&lt;/span>ContainerId&lt;span class="o">]&lt;/span>or&lt;span class="o">[&lt;/span>NAMEs&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/RrMc8BN.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;p>也可以輸入很多個Id，一次刪個爽&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/rL9pJaN.png"
loading="lazy"
alt="image-20230121155539947"
>&lt;/p>
&lt;p>還有更猛的&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docekr rm -f &lt;span class="k">$(&lt;/span>docker ps -aq&lt;span class="k">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>直接用參數的方式全刪。&lt;/p>
&lt;h2 id="暴露port">暴露port&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker run -p 5432:5432 posgres
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>前面的5432是你自定義的localhost:5432，而後面的5432則是容器裡面的port號&lt;/p>
&lt;h2 id="暴露已經runningstopping-的container的port">暴露已經Running,Stopping 的Container的Port&lt;/h2>
&lt;p>沒有這個方法，只有&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker run postgres
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>的這個時候你才可以把port暴露出來&lt;/p>
&lt;h2 id="一次性查看container的log紀錄">一次性查看Container的Log紀錄&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker logs &lt;span class="o">[&lt;/span>ContainerId&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/ux9s2GH.png"
loading="lazy"
alt="image-20230124052203569"
>&lt;/p>
&lt;p>這條指令只會顯示過去的紀錄，後續的logs不會更新&lt;/p>
&lt;h2 id="持續查看container的log紀錄">持續查看Container的Log紀錄&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker logs -f &lt;span class="o">[&lt;/span>ContainerId&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>這條不只會顯示過去的，還會動態更新現在的log&lt;/p>
&lt;h2 id="執行docker-compose">執行Docker-compose&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker compose up -d
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>-d 代表是否背景執行，不佔用terminal&lt;/p>
&lt;h2 id="停止並刪除docker-compose的container">停止並刪除Docker-compose的Container&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker compose down
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="在docker啟動ubuntu">在Docker啟動Ubuntu&lt;/h1>
&lt;ol>
&lt;li>
&lt;p>下載 ubuntu 的image&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker pull ubuntu
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>或是可以&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker run ubuntu
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>就會自動從docker hub載下來了，但這樣只是把ubuntu的image拉到我們的docker裡面，它本身是沒有啟動的&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/MMDiSRt.png"
loading="lazy"
alt="image-20230118222929032"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在docker中運行ubuntu&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker run -it ubuntu
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/IMZCVGx.gif"
loading="lazy"
alt=" "
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用apt(advanced package tool)安裝nano(Linux text editor)&lt;/p>
&lt;p>用apt載任何東西前都建議先update&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">apt update
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">apt install nano
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;h1 id="exposing-port">Exposing Port&lt;/h1>
&lt;p>輸入&lt;code>docker ps&lt;/code>可以看到以下資訊&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/jkFwePC.png"
loading="lazy"
alt="image-20230121144512601"
>&lt;/p>
&lt;p>其中的PORTS 80/tcp的意思，容器對外公開的網路端口是 80/tcp，表示這個容器對外公開的網路端口是80，並且是基於TCP協議的。這意味著當外部網路瀏覽器連接到&lt;a class="link" href="http://xn--localhosthttp-cs9z//" target="_blank" rel="noopener"
>http://localhost或http://&lt;/a>&lt;IP address>時，將會連接到容器內部的 Nginx Web 伺服器。想要讓容器的端口對外開放，就需要exposing它，否則直接打localhost:80是沒有用的。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/ZD37kgp.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;p>我們可以使用以下的方式將8080 連接到80/TCP&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/6NmgZGj.png"
loading="lazy"
alt="image-20230121144820173"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker run -d -p 8080:80 nginx
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中的8080:80的意思是指將主機的 8080 端口映射到容器的 80 端口。也就是說，當外部網路瀏覽器連接到 &lt;a class="link" href="http://localhost:8080/" target="_blank" rel="noopener"
>http://localhost:8080&lt;/a> 時，將會連接到容器內部的 Nginx Web 伺服器。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/uv9msjJ.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/qRzMKUP.png"
loading="lazy"
alt="image-20230121152744371"
>&lt;/p>
&lt;p>你也可以不只Exposing一個Port，可以Exposing多個port給80&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/udQnP6Q.png"
loading="lazy"
alt="image-20230121153052811"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker run -d -p 8080:80 -p 3000:80 nginx
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/RAElKnV.png"
loading="lazy"
alt="image-20230121153324975"
>&lt;/p>
&lt;h1 id="container的管理">Container的管理&lt;/h1>
&lt;p>當我們啟動、並Stop一個Container，實際上如果依照我們剛剛的作法，我們是不斷的創造新的Container，輸入docker ps -a 即可看到目前存在的Container(不論running or Stopping)，或是在Desktop docker裡面也都可以看到&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/y6X5rl3.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/myW3tLy.png"
loading="lazy"
alt="image-20230121154505315"
>&lt;/p>
&lt;p>我們可以透過&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker rm &lt;span class="o">[&lt;/span>ContainerId&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>來真正意義上的移除Container，而不是停止它&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/RrMc8BN.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;p>&lt;code>可以使用docker ps -aq ，這個指令只會秀出ContainerId，可以刪更爽，直接複製貼上就好&lt;/code>&lt;/p>
&lt;p>還有更爽的方式，用$(docker ps -aq)的方式 傳遞參數&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/6awXQYd.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;h1 id="為container命名">為Container命名&lt;/h1>
&lt;p>建議命名一下，比較好找，只支援英文，不支援中文&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker run --name hoxtonPractice -d -p 8080:80 nginx
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/ibwUXZi.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/ivVF2QW.png"
loading="lazy"
alt="image-20230121161417305"
>&lt;/p>
&lt;h1 id="volume的使用">Volume的使用&lt;/h1>
&lt;p>讓資訊可以在host與Container共享的一個功能&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/gFztGx2.png"
loading="lazy"
alt="image-20230121171102777"
>&lt;/p>
&lt;p>範例：&lt;/p>
&lt;p>首先在桌面上創建一個名為website的資料夾，裡面有個index.html，內容如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>hello docker and volume&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/E9IOBy2.png"
loading="lazy"
alt="image-20230121172021418"
>&lt;/p>
&lt;p>接著將terminal切至/website底下，然後輸入&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker run --name website -v &lt;span class="si">${&lt;/span>&lt;span class="nv">PWD&lt;/span>&lt;span class="si">}&lt;/span>:/usr/share/nginx/html:ro -d -p 8080:80 nginx
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>-v是 Docker 中的 volume 指令，它用於將主機上的目錄或檔案掛載到容器中。配合後面的${PWD}:/usr/share/nginx/html，意思就是將當前目錄的內容掛載(Mount)到容器中的 /usr/share/nginx/html 目錄下。這樣設定後，當主機上的目錄內容變更時，容器中的 /usr/share/nginx/html 目錄內的內容也會隨之更新。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>:ro 是指將主機上的目錄或檔案掛載到容器中的目錄或檔案，並設定為只讀模式。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>​ 這意味著在容器中將無法寫入或修改掛載的目錄或檔案，只能讀取。這可以避免對主機上的檔案造成損壞或不 必要的變更。&lt;/p>
&lt;ul>
&lt;li>/usr/share/nginx/html 是 Nginx 預設的網站根目錄。&lt;/li>
&lt;/ul>
&lt;p>結果如下：&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/JWE1ngP.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;p>也因為Volume是鏡像對應，因此修改host的檔案，container的內容物也會同步更新&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/xr4Ps97.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;p>我們可以用以下的指令來訪問看看Nginx的檔案&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker &lt;span class="nb">exec&lt;/span> -it website bash
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>docker exec 是 Docker 的命令行工具，用於在運行中的容器內執行命令。&lt;/li>
&lt;li>-it 這兩個選項表示要互動式地執行命令，並且讓輸入和輸出保持連接。&lt;/li>
&lt;li>website 是容器的名稱或 ID。&lt;/li>
&lt;li>bash 是要在容器內執行的命令，這裡是啟動 Bash shell。也可以改成ls，就變成ls了，玩法很多，自行摸索&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/vfD46ft.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;p>在Nginx裡面新增檔案，移除檔案，會發現host的資料夾檔案也同步更新&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/CxISdYl.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;h2 id="不同的container使用相同的volume">不同的Container使用相同的Volume&lt;/h2>
&lt;p>&lt;img src="https://i.imgur.com/sF6Jpws.png"
loading="lazy"
alt="image-20230122000944184"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/M0VVEdM.png"
loading="lazy"
alt="image-20230122000515311"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker run --name website-copy --volumes-from website -d -p 8081:80 nginx
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&amp;ndash;volumes-from [ContainerName]：將這次要啟動的Container使用和website一樣的Volume&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/138uiD1.png"
loading="lazy"
alt="image-20230122000709771"
>&lt;/p>
&lt;h1 id="dockerfile">Dockerfile&lt;/h1>
&lt;p>Dockerfile是一個文本文件，它包含了創建Docker image所需的指令。這些指令可以包括例如：&lt;/p>
&lt;ul>
&lt;li>從哪個基礎鏡像建立新鏡像&lt;/li>
&lt;li>安裝需要的軟體&lt;/li>
&lt;li>設置環境變量&lt;/li>
&lt;li>添加應用程序文件&lt;/li>
&lt;li>定義容器啟動時執行的命令&lt;/li>
&lt;/ul>
&lt;p>透過Dockerfile, 可以自動化的建立一個環境，方便在不同的環境上部署，使用者可以更方便的管理環境，以及減少部署錯誤的機會。&lt;/p>
&lt;p>例如，如果你有一個Java應用程序需要在多個不同的服務器上運行，你可以使用Dockerfile創建一個包含Java執行時環境的镜像，然後在每個服務器上執行這個镜像，這樣就能保證每個服務器上都有相同的環境。&lt;/p>
&lt;p>試著把剛剛寫的volume打包成一個image，首先在/website的資料夾裡面新增一個名稱一定要是dockerfile的檔案&lt;/p>
&lt;p>裡面的檔案結構長的像這樣子&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span class="k">FROM&lt;/span>&lt;span class="s"> nginx:latest&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">ADD&lt;/span> . /usr/share/nginx/html&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>FROM：指定了基礎Image是nginx，後面的latest是指版本號。Dockerfile中必須要有FROM指令，它是一切的根本，它指定了基礎Image環境。舉例來說，這邊指定用最新版的nginx，那麼我們的鏡像會基於這個最新版的nginx環境運行&lt;/li>
&lt;li>ADD：將本地目錄中的文件複製到鏡像中的指定目錄。在這個例子中是將本地目錄中的所有文件複製到鏡像中的/usr/share/nginx/html目錄。它的功能跟COPY有點像，但是COPY用法比較單純，只能複製本地文件和目錄到鏡像中，而ADD指令還可以解壓縮tar文件並將其中的文件複製到鏡像中。&lt;/li>
&lt;/ul>
&lt;p>​ 值得注意的是&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span class="k">ADD&lt;/span> . /usr/share/nginx/html&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>這行指的是，將當前目錄的所有東西(以一個.表示)加入至Container中的/usr/share/nginx/html目錄中。在這個例子中就是將&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/xhF8sgi.png"
loading="lazy"
alt="image-20230122005758339"
>&lt;/p>
&lt;p>這些東西ADD進/usr/share/nginx/html裡面。&lt;/p>
&lt;p>當Dockerfile寫好後，要開始bulid它，步驟如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">docker build -t website:latest .&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>這個命令是在使用 Docker 建立一個新的鏡像檔，並標記為 &amp;ldquo;website:latest&amp;rdquo;。 &amp;ldquo;.&amp;rdquo; 表示當前目錄下的 Dockerfile 檔案將會被用來建立映像檔。這個命令將會建立一個名為 &amp;ldquo;website&amp;rdquo; 並且標記為 &amp;ldquo;latest&amp;rdquo; 的鏡像檔。&lt;/li>
&lt;/ul>
&lt;p>Build完後就會出現一個image了，輸入&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker images
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>就可以查看目前擁有的images&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/fjUHVh9.png"
loading="lazy"
alt="image-20230122023400655"
>&lt;/p>
&lt;p>並且可以這個image可以運行我們剛剛對index的設定，輸入&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker run --name website -p 8080:80 -d website:latest
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意：這邊不需要再為website設置volume，因為我們已經將需要的東西打包進image裡面了。&lt;/p>
&lt;p>輸入完後，在URL的地方輸入localhost:8080就可以看到我們剛剛設置的東西了。&lt;/p>
&lt;p>gif如下&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/XvOfKcm.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;p>​&lt;/p>
&lt;h1 id="實際演練-nodejs">實際演練 NodeJs&lt;/h1>
&lt;h2 id="前置作業">前置作業&lt;/h2>
&lt;p>安裝Node.js，這邊安裝為了快速，就直接用Choco來裝了，Choco的安裝如下&lt;/p>
&lt;ol>
&lt;li>
&lt;p>在Terminal中輸入，記得要以系統管理員身分輸入&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">Set-ExecutionPolicy Bypass -Scope Process -Force&lt;span class="p">;&lt;/span> &lt;span class="o">[&lt;/span>System.Net.ServicePointManager&lt;span class="o">]&lt;/span>::SecurityProtocol &lt;span class="o">=&lt;/span> &lt;span class="o">[&lt;/span>System.Net.ServicePointManager&lt;span class="o">]&lt;/span>::SecurityProtocol -bor 3072&lt;span class="p">;&lt;/span> iex &lt;span class="o">((&lt;/span>New-Object System.Net.WebClient&lt;span class="o">)&lt;/span>.DownloadString&lt;span class="o">(&lt;/span>&lt;span class="s1">&amp;#39;https://community.chocolatey.org/install.ps1&amp;#39;&lt;/span>&lt;span class="o">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>安裝完後安裝nodeJs&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">choco install nodejs
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>安裝完後隨便創一個資料夾，這邊命名叫做user-service-api&lt;/p>
&lt;/li>
&lt;li>
&lt;p>切換到該資料夾底下，並且npm init它&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">npm init
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>接著安裝express&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">npm install --save express
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>用好後檔案結構長這樣&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/UfcpwaY.png"
loading="lazy"
alt="image-20230122032825912"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在該目錄底下新增一個index.js的檔案，內容如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kr">const&lt;/span> &lt;span class="nx">express&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;express&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">app&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">express&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">port&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3000&lt;/span>
&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">json&lt;/span>&lt;span class="p">([{&lt;/span>
&lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Bod&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">email&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;bob@gmail.com&amp;#39;&lt;/span>
&lt;span class="p">}])&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">listen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">port&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`Example app listening on port &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">port&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>使用nodejs運行&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">node index.js
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>成功後進入localhost:3000即可看到下列畫面&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/dRynWn4.png"
loading="lazy"
alt="image-20230122033843917"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>如此一來前置作業就完成了&lt;/p>
&lt;h2 id="製作dockerfile">製作DockerFile&lt;/h2>
&lt;p>在目錄底下新增dockerfile，內容如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span class="k">FROM&lt;/span>&lt;span class="s"> node:latest&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">WORKDIR&lt;/span>&lt;span class="s"> /app&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">ADD&lt;/span> . .&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> npm install&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">CMD&lt;/span> node index.js&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>WORKDIR：若Container有/app這個資料夾，則使用它，若沒有，則創造它。&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>ADD . .： 将当前目录中的文件复制到镜像中的 /app 目录。&lt;/li>
&lt;li>RUN npm install： 在鏡像中运行 npm install 命令，安装应用程序所需的依赖项。&lt;/li>
&lt;li>CMD node index.js：设置镜像启动时运行的命令，这里是运行 node index.js。&lt;/li>
&lt;/ul>
&lt;p>為什麼要分成RUN跟CMD呢？有幾個原因，首先RUN跟CMD的用途本身就不一樣，RUN主要是在創建image中執行命令，並將結果保存在image中，它主要用來安裝依賴、配置應用程式或其他操作。則是用來說明Image創建完成後要執行的動作。&lt;strong>簡而言之，RUN是在創建Image中過程所執行的，而CMD則是在Image創建完成後所執行的&lt;/strong>。&lt;/p>
&lt;p>並且，一個DockerFile可以有很多RUN指令，但只能有一個CMD指令，因為Container只能運行一個CMD指令&lt;/p>
&lt;h2 id="使用image">使用Image&lt;/h2>
&lt;p>接著創建鏡像&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker build --tag user-service-api:latest .
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>創建完之後啟動鏡像&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker run --name user-api -d -p 8080:3000 user-service-api:latest
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>這邊的&lt;code>8080:3000&lt;/code>是指，將我們容器裡面原本配置的3000端口暴露出來，以8080來接收。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/VSKx5y3.png"
loading="lazy"
alt="image-20230122041621171"
>&lt;/p>
&lt;p>因為3000是指在Container裡面的端口，host想要讀到它，必須將Container的端口暴露出來。因此localhost:3000會找不到東西，只有打localhost:8080才會有我們要的內容&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/vUVU65T.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;h2 id="dockerignore">DockerIgnore&lt;/h2>
&lt;p>做完上面這些操作後，我們的檔案結構長這樣&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/zx4lldH.png"
loading="lazy"
alt="image-20230122042649897"
>&lt;/p>
&lt;p>然後我們的Dockerfile長這樣&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span class="k">FROM&lt;/span>&lt;span class="s"> node:latest&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">WORKDIR&lt;/span>&lt;span class="s"> /app&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">ADD&lt;/span> . .&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> npm install&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">CMD&lt;/span> node index.js&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>比較之後發現一件事情，RUN npm install會創建node_modules資料夾，但我們在ADD時已經把node_modules加入進去，等於說我們&lt;strong>重複創建&lt;/strong>了兩次node_modules，這種情況就類似gitIgnore，需要排除掉重複的資料夾&lt;/p>
&lt;p>dockerIgnore的寫法&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">node_modules&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>dockerfile&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>.git&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/cw6wiqo.png"
loading="lazy"
alt="image-20230122043320515"
>&lt;/p>
&lt;p>這樣就可以把這些檔案排除在外了&lt;/p>
&lt;h1 id="caching--layers">Caching &amp;amp; Layers&lt;/h1>
&lt;p>DockerFile裡面的每一個CML都是一個Layer，每個Layer都用來Caching`&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span class="k">FROM&lt;/span>&lt;span class="s"> node:latest&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">WORKDIR&lt;/span>&lt;span class="s"> /app&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">ADD&lt;/span> . .&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> npm install&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">CMD&lt;/span> node index.js&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/qOnozTP.png"
loading="lazy"
alt="image-20230124033035860"
>&lt;/p>
&lt;p>可以看到這邊的Step1, Step2都對應著CML的指令&amp;hellip;&lt;/p>
&lt;p>而Cache的點就在於，其實除了ADD . . 以外(原始碼每次打包時都會有更動)，其實WORKDIR, RUN npm install這些指令其實都是重複的，我們每次打包都需要再重複執行一次，這樣很沒**效率 **&lt;/p>
&lt;p>於是Dokcer就會把這些重複的事情Caching起來，只要沒有改變就不會重複再做，就會看到上面的Using Cache了&lt;/p>
&lt;h1 id="alpine">ALPINE&lt;/h1>
&lt;p>&lt;code>翻譯的意思是高山&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/lHZT25E.png"
loading="lazy"
alt="image-20230124040633982"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/vROHoya.png"
loading="lazy"
alt="image-20230124040527548"
>&lt;/p>
&lt;p>我剛剛打包的Image檔案已經快逼近一個G了，很明顯我們其實不需要那麼多的東西，Alpine版本的就是一個非常小的鏡像。&lt;/p>
&lt;h2 id="實際安裝alpine">實際安裝ALPINE&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker pull node:lts-alpine
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/sOvYX9X.png"
loading="lazy"
alt="image-20230124041533774"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/WiRUr17.png"
loading="lazy"
alt="image-20230124041614756"
>&lt;/p>
&lt;p>兩者的Size差了快十倍&lt;/p>
&lt;h1 id="docker-compose-將後端與資料庫一起包一包">Docker Compose 將後端與資料庫一起包一包&lt;/h1>
&lt;p>一個Project不可能只由一個後端組成，肯定是要由後端、前端、以及資料庫三者組合，甚至更甚者可能會有10,20個的部件需要去組合，那麼一個一個run container這件事情就變得相當缺乏效率。為了處理這件事情，於是有了&lt;strong>Docker-Compose&lt;/strong>的概念出現。&lt;/p>
&lt;p>Docker-Compose大概就像這樣，&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;3.7&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">services&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">db&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">container_name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">postgres-for-dockerpractice&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">postgres&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">POSTGRES_PASSWORD&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">root&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">POSTGRES_USER&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">root&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">POSTGRES_DB&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">root&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">./pgdata:/var/lib/postgresql/data&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s1">&amp;#39;5432:5432&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">backend&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">container_name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">backend-for-dockerpractice&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">shop&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">depends_on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">db&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s1">&amp;#39;8080:8080&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>和dockerfile一樣存在於專案根目錄中&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/UpKhAur.png"
loading="lazy"
alt="image-20230130235149649"
>&lt;/p>
&lt;p>他類似於一個&lt;strong>配置檔&lt;/strong>，用以告訴Docker要啟動哪些Container，以及它們之間的交互關係，以上面的Docker-compose.yml來說明&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;3.7&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">//要使用的dokcer-compose版本，有分很多版，比如說1.0,2.0，但目前主流是3.0，所以照著寫就好&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">services&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">//每一個起起來的Container有一個特殊的名字，叫做service，這個yaml檔就有兩個service，分別叫db跟backend&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">db&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">//可自定義的service名稱，高興叫啥就叫啥，但這個名字會與你在application.properties裡描述的名稱有對應關係，可以看看下面的附圖，第四行的url:jdbc:postgresql://db:5432/shop，其中的db就是service的名稱&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">container_name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">postgres-for-dockerpractice //自定義的名稱，想叫啥就叫啥，這名稱會是你的Container名稱&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">postgres //要使用哪個image作為基底&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">POSTGRES_PASSWORD&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">45002502&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">POSTGRES_USER&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">postgres&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">POSTGRES_DB&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">shop&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">./pgdata:/var/lib/postgresql/data&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s1">&amp;#39;5432:5432&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">//要暴露出來的端口&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">backend&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">//可自定義的service名稱，高興叫啥就叫啥，但這個名字會與你在application.properties裡描述的名稱有對應關係。&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">container_name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">backend-for-dockerpractice //自定義的名稱，想叫啥就叫啥，這名稱會是你的Container名稱&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">shop //要使用哪個image作為基底，這個是我自己docker build -t shop:latest . 所創建出來的image&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">depends_on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">db //這意味著，你這邊的service會等到db這個service完成後才會進行部屬。&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s1">&amp;#39;8080:8080&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">// 暴露出來的端口&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/AMN0bz6.png"
loading="lazy"
alt="image-20230130235821812"
>&lt;/p>
&lt;p>▲第四行的db與services的名稱有對應。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/ksv3RFX.png"
loading="lazy"
alt="image-20230131000230558"
>&lt;/p>
&lt;p>▲上述的docker-compose啟動後顯示的樣子。&lt;/p>
&lt;p>常用的指令&lt;/p>
&lt;p>啟動當前目錄的docker-compose&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker compose up
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>關閉當前目錄的docker-compose&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker compose down
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>你知道嗎?現在Github上也可以使用Vscode喔！</title><link>https://hoxtonhsu.com/p/%E4%BD%A0%E7%9F%A5%E9%81%93%E5%97%8E%E7%8F%BE%E5%9C%A8github%E4%B8%8A%E4%B9%9F%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8vscode%E5%96%94/</link><pubDate>Wed, 11 Jan 2023 23:27:27 +0800</pubDate><guid>https://hoxtonhsu.com/p/%E4%BD%A0%E7%9F%A5%E9%81%93%E5%97%8E%E7%8F%BE%E5%9C%A8github%E4%B8%8A%E4%B9%9F%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8vscode%E5%96%94/</guid><description>&lt;img src="https://i.imgur.com/Gckim1N.png" alt="Featured image of post 你知道嗎?現在Github上也可以使用Vscode喔！" />&lt;p>前陣子在網路上找看看有沒有什麼實用的Git指令，無意間看到這個功能。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/NltXKuw.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;p>只要在Github的頁面按下 &amp;gt; ，就可以開啟網頁版的Vscode囉，不過有個小缺點就是，Vscode開啟時介面語言是依據你瀏覽器的語言所決定，所以如果想要使用英文版的Vscode就要把Chrome的語言設定成英文喔。&lt;/p>
&lt;p>這樣開啟後最直觀的好處就是可以直接在Github上以Vscode編輯程式碼，做快速的修改，瀏覽起來也比較快，不然原本網頁在看的話速度非常的慢！並且也可以在上面做衝突的處理。&lt;/p></description></item><item><title>實用的Git指令</title><link>https://hoxtonhsu.com/p/%E5%AF%A6%E7%94%A8%E7%9A%84git%E6%8C%87%E4%BB%A4/</link><pubDate>Fri, 06 Jan 2023 14:15:51 +0800</pubDate><guid>https://hoxtonhsu.com/p/%E5%AF%A6%E7%94%A8%E7%9A%84git%E6%8C%87%E4%BB%A4/</guid><description>&lt;img src="https://i.imgur.com/nCGDuUc.png " alt="Featured image of post 實用的Git指令" />&lt;h1 id="前言">前言&lt;/h1>
&lt;p>整理一下工作上有用過，並覺得實用、比較少人提過的一些Git指令。&lt;/p>
&lt;h1 id="git指令">Git指令&lt;/h1>
&lt;ol>
&lt;li>退回到上一個Commit，數字可以更改，1就是上一次，改成三的話就是三次前的Commit&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">git checkout HEAD~1
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/MNnAwmx.gif"
loading="lazy"
alt="demo2"
>&lt;/p>
&lt;ol start="2">
&lt;li>退回上一次的Commit，重複輸入的話會往復循環&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">git checkout -
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/GpQAK2L.gif"
loading="lazy"
alt="demo2"
>&lt;/p>
&lt;ol start="3">
&lt;li>將本次修改合併至上次Commit，如果有漏掉的提交會常用這個指令&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">git commit --amend --no-edit
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Java中的throw,throws,try...catch，受檢例外與非受檢例外</title><link>https://hoxtonhsu.com/p/java%E4%B8%AD%E7%9A%84throwthrowstry...catch%E5%8F%97%E6%AA%A2%E4%BE%8B%E5%A4%96%E8%88%87%E9%9D%9E%E5%8F%97%E6%AA%A2%E4%BE%8B%E5%A4%96/</link><pubDate>Tue, 27 Dec 2022 15:12:58 +0800</pubDate><guid>https://hoxtonhsu.com/p/java%E4%B8%AD%E7%9A%84throwthrowstry...catch%E5%8F%97%E6%AA%A2%E4%BE%8B%E5%A4%96%E8%88%87%E9%9D%9E%E5%8F%97%E6%AA%A2%E4%BE%8B%E5%A4%96/</guid><description>&lt;img src="https://i.imgur.com/dwbYvaF.png" alt="Featured image of post Java中的throw,throws,try...catch，受檢例外與非受檢例外" />&lt;h1 id="開頭">開頭&lt;/h1>
&lt;p>Java中的例外分為受檢例外與非受檢例外(RuntimeExcetption)兩大類，可以先看到這張圖。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/apUx0mu.png"
loading="lazy"
alt="image-20221227160151705"
>&lt;/p>
&lt;p>所謂的&lt;strong>非受檢例外就是指繼承了RuntimeException的Exception&lt;/strong>，這類的Exception發生，而非受檢例外就是指沒有繼承RuntimeException的Exception。可以看下列的圖片&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/FdZYptn.png"
loading="lazy"
alt="image-20221227161807341"
>&lt;/p>
&lt;h1 id="何謂受檢例外與非受檢例外">何謂受檢例外與非受檢例外&lt;/h1>
&lt;p>受檢例外之所以叫受檢例外，就在於這些例外是工程師必須明確檢查並處理的例外，例如讀取檔案時發生的FileNotFoundException，這類的Exception，JVM沒有辦法進行處理，因此需要工程師去做處理。而RumtimeException則是指那些工程師不需要去明確處理的Exception，比如說NullPointerException, ArrayIndexOutOfBoundsException，這類的例外都是繼承自RuntimeException，可以由JVM進行處理，當然要處理也是可以的，比如說這樣&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/9drhRUY.png"
loading="lazy"
alt="image-20221227164624742"
>&lt;/p>
&lt;p>(可以看到左邊第13行的方法，沒有被try..catch包住也沒事，因為該方法拋出的例外是NumberFormatException，這個例外繼承了RuntimeException，因此不用try&amp;hellip;catch處理也沒關係，JVM會自動幫我們處理，如果要放到try&amp;hellip;catch的話，則是在catch段裡去catch NumberFormatException)&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/xsozyoG.png"
loading="lazy"
alt="image-20221227164726651"
>&lt;/p>
&lt;p>將方法放入try&amp;hellip;catch之後，因為catch是抓RuntimeException，所以被抓到後會print出catch error。&lt;/p>
&lt;p>另外比較實務上的說法即是，受檢例外(checked Exception)是可被修復的例外，可以試看看retry，而不可修復的例外就是非受檢例外(RunTimeException)，這種時候就代表程式出了問題，有bug，需要工程師下來進行處理，把問題處理掉&lt;/p>
&lt;p>來源：&lt;a class="link" href="https://medium.com/kuma%E8%80%81%E5%B8%AB%E7%9A%84%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E6%95%99%E5%AE%A4/2021-it-%E9%90%B5%E4%BA%BA-day-09-%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6%E8%88%87%E4%BE%8B%E5%A4%96%E8%99%95%E7%90%86-f571f577f72" target="_blank" rel="noopener"
>2021 IT 鐵人 Day 09 單元測試與例外處理&lt;/a>&lt;/p>
&lt;p>那如果一個method會拋出受檢例外，而在該method中又沒有做處理，則會需要呼叫它的那一個method進行處理。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/mLLBczf.png"
loading="lazy"
alt="image-20221227165544804"
>&lt;/p>
&lt;p>右邊的方法實際上不會拋出IOException，所以會顯示為灰色的，這邊只是作為Demo先寫上去。可以看到畫面左邊的地方，此時IDE跟我們報錯，說這個方法會拋出一個IOException，要我們進行處理，&lt;strong>因為IOException是一個受檢例外&lt;/strong>，JVM本身沒有能力可以進行處理。&lt;/p>
&lt;p>大概先這樣，其他想到後補。&lt;/p></description></item><item><title>Jenkins筆記</title><link>https://hoxtonhsu.com/p/jenkins%E7%AD%86%E8%A8%98/</link><pubDate>Sun, 25 Dec 2022 01:22:09 +0800</pubDate><guid>https://hoxtonhsu.com/p/jenkins%E7%AD%86%E8%A8%98/</guid><description>&lt;img src="https://i.imgur.com/3VUgy0E.png" alt="Featured image of post Jenkins筆記" />&lt;h1 id="在docker安裝jenkins">在Docker安裝Jenkins&lt;/h1>
&lt;p>強烈建議初次學習時先不要使用docker安裝，要看什麼東西都不方便，還是用WAR啟動比較好&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">docker run --restart&lt;span class="o">=&lt;/span>always -d -v c:/jenkins:/var/jenkins_home -p 9070:8080 -p 50000:50000 --name jenkins jenkins/jenkins:lts
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>密碼會顯示在logs紀錄裡面，輸入&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">docker logs -f [ContainerId]
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>來查看&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/CGgyuYw.png"
loading="lazy"
alt="image-20230131112905119"
>&lt;/p>
&lt;h1 id="進入jenkins">進入Jenkins&lt;/h1>
&lt;p>訪問http://localhost:9070/&lt;/p>
&lt;p>github的webhook是什麼意思&lt;/p>
&lt;p>GitHub Webhooks 是一种让其他网站或服务在 GitHub 上的特定事件发生时得到通知的功能。当你在 GitHub 上执行一些特定操作时，例如推送代码、打开 Pull Request，GitHub 就会发送一个 HTTP POST 请求到你指定的 URL，以告知其他网站或服务。这样，其他网站或服务就可以基于这些通知触发自己的行为，例如自动化构建、部署等。&lt;/p></description></item><item><title>淺談測試驅動開發</title><link>https://hoxtonhsu.com/p/%E6%B7%BA%E8%AB%87%E6%B8%AC%E8%A9%A6%E9%A9%85%E5%8B%95%E9%96%8B%E7%99%BC/</link><pubDate>Sun, 04 Dec 2022 22:22:06 +0800</pubDate><guid>https://hoxtonhsu.com/p/%E6%B7%BA%E8%AB%87%E6%B8%AC%E8%A9%A6%E9%A9%85%E5%8B%95%E9%96%8B%E7%99%BC/</guid><description>&lt;img src="https://i.imgur.com/2xteh3C.png" alt="Featured image of post 淺談測試驅動開發" />&lt;h1 id="序言">序言&lt;/h1>
&lt;p>參考資料：&lt;/p>
&lt;p>&lt;a class="link" href="https://youtu.be/t4D6GW2c8G8?list=LL" target="_blank" rel="noopener"
>Agile Hsinchu 2022.11 - 〈你就是不寫測試，才會沒時間〉線上導讀&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://youtu.be/wTpsxjP0t7M" target="_blank" rel="noopener"
>測試有時間再寫？你就是不寫才會沒時間！&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://ithelp.ithome.com.tw/users/20107429/ironman/3897" target="_blank" rel="noopener"
>你就是都不寫測試才會沒時間：Kuma 的 30 天 Unit Test 手把手教學，從理論到實戰 （Java 篇）&lt;/a>&lt;/p>
&lt;p>TDD(Test-Driven Development)是一個軟體開發的模式，它的概念很簡單，就是&lt;strong>先寫測試在寫程式&lt;/strong>，&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/LgOetJJ.png"
loading="lazy"
alt="image-20221205004202805"
>&lt;/p>
&lt;p>這樣的事情會讓我們覺得不可思議，因為我們一直以來寫程式的方式都是先寫程式，而測試則是有時間才再補的東西。那改成先寫測試會有什麼好處呢？這部分我們等等再來談，我們先討論TDD最核心的部分—&lt;strong>單元測試(Unit Test)&lt;/strong>。&lt;/p>
&lt;h1 id="單元測試在tdd的作用是什麼">單元測試在TDD的作用是什麼&lt;/h1>
&lt;p>​ 一開始在認識單元測試的時候，許多人的想法都會認為說，單元測試可以避免Bug，可以提升程式碼的品質。確實這些都是Unit Test的好處，但卻不是最核心的關鍵，單元測試最重要的點在於幫助我們&lt;strong>重構現有的程式架構&lt;/strong>。&lt;/p>
&lt;p>​ 我們在經手一個項目的時候，第二個月的理解一定會比第一個月的理解更深，第三個月的理解也一定會比第二個月的理解更加深刻，可能三個月前所使用的架構，在三個月後，隨著業務規模的擴展、需求的增加，而需要去新增新的程式，或是改變原有的設計，因而漸漸不敷使用，在這樣的情形下，若沒有單元測試的保護支持我們重構，讓我們確保每一步的Design都沒有破壞原有程式的設計，工程師會變得去害怕修改舊有的程式碼，因而導致不敷使用的架構繼續生長下去。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/RUQ0j6E.png"
loading="lazy"
alt="image-20221205010938974"
>&lt;/p>
&lt;p>(▲ 程式能跑，但還能在更好）&lt;/p>
&lt;p>​ 如果只是這樣子還沒什麼問題，畢竟就只是把東西一個接著一個地疊上去，頂多就是不好維護而已。但實際上的開發中，是很常出現改Ａ壞Ｂ這種情況的，在沒有單元測試的保護下，工程師在開發中是不會知道自己更新的這段程式碼會對某些程式造成影響，往往要等到合併後才能出現問題，所以會出現一種情況就是前期開發的都很順利，而越到後面Dead Line，效率就越發下降，&lt;strong>因為工程師在開發的當下不知道自己新增的功能到底會不會對別人造成影響&lt;/strong>。而有了測試的保護，我們可以在寫程式的時候就知道現在程式的運行狀況，今天這樣子的修改會不會導致其他程式跑不起來，如果跑不起來那單元測試就不會過，這樣的回饋是&lt;strong>立即性&lt;/strong>的回應，而不需要等到合併後大家才知道。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/4EMwAcp.png"
loading="lazy"
alt="image-20221205010534318"
>&lt;/p>
&lt;p>(▲ 隨著開發時間的增加，TDD的優勢會更凸顯出來）&lt;/p>
&lt;h1 id="agile與tdd">Agile與TDD&lt;/h1>
&lt;blockquote>
&lt;p>講到Agile就會講到瀑布式開發(WaterFall)，但你知道嗎？其實從來都沒有瀑布式開發這種事情喔。&lt;/p>
&lt;/blockquote>
&lt;p>瀑布式開發是來自於Winston Royce在1970所提出的論文Managing the Development of Larger Software Systems被提出，但事實上這個開發模式在這篇論文的下一行就被Winston Royce否決了。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/6dBbaHc.png"
loading="lazy"
alt="image-20221205012708984"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/61MwhoA.png"
loading="lazy"
alt="image-20221205012720794"
>&lt;/p>
&lt;blockquote>
&lt;p>I believe in this concept, but the implementation described above is risky and inivites failure. The problem is illustrated in Figure 4 .&lt;/p>
&lt;p>我相信這個概念，但照著這上面的流程做的話是高風險且易導致錯誤的，原因就如第四張圖所示&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://i.imgur.com/73usP4Z.png"
loading="lazy"
alt="image-20221205012847815"
>&lt;/p>
&lt;p>​ (▲Figure 4)&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>The testing phase which occurs at the end of the development cycle&lt;/strong> is the first event for which timing, stotage, input/output transfers, etc, are experienced as distinguished from analyzed. These phenomena are not precisely analyzable. There phenomena are not precisely analyzable. They are not the solutions or the satndard partial differential quations of mathematical physics for instatnce. Yet if there phenomena fail to satisfy the various external constraints, then invariablt a major redesign is required . A simple octal patch or redo of some isolated code will not fix there kinds of difficulties. The required design changes are likely to be so disruptive that the software requiremnets upon which the design is based and which provides the rationale for everything are violated. &lt;strong>Either the requirements must be modified, or a substantial change in the design is required.&lt;/strong> &lt;strong>In effect the development process has returned to the origin and one can expect up to a 100-percent overrun in schedule and/or costs&lt;/strong>&lt;/p>
&lt;p>在開發流程的最後一個階段-測試，第一個遇到的事情就是時序、儲存，輸出輸入，這些現象情況無法準確的分析，這些不像數學物理的解答，或是標準偏微方程，然而，如果存在不能滿足各種外部約束的現象，則不可避免地需要進行重大的重新設計，一個簡單的八進制補丁或一些孤立代碼的重做不會解決這些困難，所需的設計更改可能會造成破壞，以至於違反了設計所基於的以及為所有事情提供基本原理的軟件要求。 要么必須修改要求，要么需要對設計進行實質性更改。 實際上，開發過程已經回到原點，預計進度和/或成本會超支 100%。&lt;/p>
&lt;/blockquote>
&lt;p>Winston Royce在瀑布模型提出的當下其實就否認了它的意義，但後續被一些人拿來當作開發的窠臼，也導致了這種開發模式往往會在完工時出現重大的危害。Winston Royce認為，&lt;strong>在最後的測試階段是充滿著未知與不確定性&lt;/strong>，到最後會反覆著在&lt;strong>測試、程式修改、確認需求&lt;/strong>這三個階段來回擺盪，這樣三個階段的來回擺盪是不是有點似曾相似呢？沒錯，就是TDD的概念&lt;/p>
&lt;h1 id="什麼是tdd">什麼是TDD&lt;/h1>
&lt;p>&lt;img src="https://i.imgur.com/Iwmr8mT.png"
loading="lazy"
alt="image-20221207000519492"
>&lt;/p>
&lt;p>TDD&lt;strong>是一個開發模式&lt;/strong>而不是測試模式，TDD的測試模式是由&lt;/p>
&lt;ul>
&lt;li>寫一個會錯的測試&lt;/li>
&lt;li>寫一個剛好會過的程式&lt;/li>
&lt;li>重構&lt;/li>
&lt;/ul>
&lt;p>​ 這三者循環，對應Winston Royce對瀑布模型提出的弊端，也就是&lt;strong>測試、修改程式、確認需求&lt;/strong>，也因此TDD是一個可以讓&lt;strong>問題早期浮上水面的開發方式&lt;/strong>，為什麼？因為這樣的開發方式要求我們對業務邏輯的需求有充分的了解，這樣我們才可以寫測試，一旦需求明確了，那麼寫出程式就只是時間的問題了。&lt;/p>
&lt;p>​ 另一方面，也是因為TDD的開發模式，我們每一個Code都有單元測試的保護，我們可以&lt;strong>隨時重構&lt;/strong>我們的程式碼而毋須擔心程式被我們改錯，是的，沒錯，TDD的一個核心概念就在於&lt;strong>任何時候都可以重構我們的程式碼&lt;/strong>，因為人對於系統的了解，會隨著開發時間的增加而了解的越深刻，半年前的Code到了現在可能越看越不順眼，另一方面，隨著業務規模的提升，我們早期的設計可能也會越不敷使用，若沒有單元測試的保護，我們重構的成本會隨著產品的規模的提升而提升，而發展到一定規模的情況下，&lt;strong>重構變成遙不可及的夢想&lt;/strong>。&lt;/p>
&lt;p>​ 也是因為有單元測試的保護，我們才可以&lt;strong>真正的去設計我們的程式&lt;/strong>，常見的S.O.L.I.D，以及23種設計模式的使用，如何根據不同的情境套用不同的設計模式，這就是工程師有價值的地方，可以說單元測試的撰寫完整了整個物件導向的程式設計。&lt;/p></description></item><item><title>如何將Junit的測試粒度控制在最小單元</title><link>https://hoxtonhsu.com/p/%E5%A6%82%E4%BD%95%E5%B0%87junit%E7%9A%84%E6%B8%AC%E8%A9%A6%E7%B2%92%E5%BA%A6%E6%8E%A7%E5%88%B6%E5%9C%A8%E6%9C%80%E5%B0%8F%E5%96%AE%E5%85%83/</link><pubDate>Wed, 30 Nov 2022 13:30:27 +0800</pubDate><guid>https://hoxtonhsu.com/p/%E5%A6%82%E4%BD%95%E5%B0%87junit%E7%9A%84%E6%B8%AC%E8%A9%A6%E7%B2%92%E5%BA%A6%E6%8E%A7%E5%88%B6%E5%9C%A8%E6%9C%80%E5%B0%8F%E5%96%AE%E5%85%83/</guid><description>&lt;img src="https://i.imgur.com/4qePz5L.png " alt="Featured image of post 如何將Junit的測試粒度控制在最小單元" />&lt;p>在Junit5中，有對一些Junit的測試的註解進行調整&lt;/p>
&lt;p>比如說&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Junit4&lt;/th>
&lt;th>Junit5&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>測試用框架的選擇&lt;/td>
&lt;td>@RunWith(MockitoJUnitRunner.class)&lt;/td>
&lt;td>@ExtendWith(MockitoExtension.class)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>當測試會使用到SprintBoot框架時，應該要使用@ExtendWith(SpringExtension.class)，@MockBean來調用&lt;/p>
&lt;p>若測試不想涉及SprintBoot的時候@ExtendWith(MockitoExtension.class)，以及@Mock, @InjectMocks，並且使用MockMvcBuilders.standaloneSetup來設置獨立測試，以下是Code的示範&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.junit.jupiter.api.BeforeEach&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.junit.jupiter.api.extension.ExtendWith&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.mockito.InjectMocks&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.mockito.Mock&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.mockito.junit.jupiter.MockitoExtension&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.test.web.servlet.MockMvc&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.test.web.servlet.setup.MockMvcBuilders&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * @author Hoxton on 2022/11/30
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@ExtendWith&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MockitoExtension&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">UserControllerTest&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Mock&lt;/span> &lt;span class="c1">//Controller調用的Service
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">UserService&lt;/span> &lt;span class="n">userService&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@InjectMocks&lt;/span> &lt;span class="c1">//要測試的Cotroller
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">UserController&lt;/span> &lt;span class="n">userController&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">MockMvc&lt;/span> &lt;span class="n">mockMvc&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">//模擬Mvc
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="nd">@BeforeEach&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">setMockMvc&lt;/span>&lt;span class="o">(){&lt;/span>
&lt;span class="n">MockMvcBuilders&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">standaloneSetup&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">userController&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Test&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">testMethod_situation_returnWhat&lt;/span>&lt;span class="o">(){&lt;/span>
&lt;span class="n">given&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">someObject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">someMethod&lt;/span>&lt;span class="o">()).&lt;/span>&lt;span class="na">willReturn&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;someting&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// ... 設置
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="n">MockHttpServletResponse&lt;/span> &lt;span class="n">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mvc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">perform&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;someUrl&amp;#34;&lt;/span>&lt;span class="o">)).&lt;/span>&lt;span class="na">andReturn&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getResponse&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">assertThat&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;something&amp;#34;&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">isEqualTo&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;thatThing&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>IDEA的介紹</title><link>https://hoxtonhsu.com/p/idea%E7%9A%84%E4%BB%8B%E7%B4%B9/</link><pubDate>Thu, 10 Nov 2022 23:52:33 +0800</pubDate><guid>https://hoxtonhsu.com/p/idea%E7%9A%84%E4%BB%8B%E7%B4%B9/</guid><description>&lt;img src="https://i.imgur.com/zyn4XVp.png" alt="Featured image of post IDEA的介紹" />&lt;p>最近業配公司，讓公司老闆買了IDEA讓我們後端工程師來使用，因此技術分享做了一次IDEA的主題，在這邊把技術分享的一些內容做成文章，分享一下&lt;/p>
&lt;h2 id="推薦的plugin">推薦的Plugin&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Plugin名稱&lt;/th>
&lt;th>截圖&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>One Dark Theme&lt;br />&lt;img src="https://i.imgur.com/RDwmNyk.png"
loading="lazy"
alt="image-20221109011709066"
>佈景主題&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/rokbaGu.png"
loading="lazy"
alt="image-20221109011724288"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;br />&lt;img src="https://i.imgur.com/DXd3gwi.png"
loading="lazy"
alt="image-20221109011844072"
>按鍵提示&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/tHGPxbO.gif"
loading="lazy"
alt="ShortCutHit"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Rainbow Brackets&lt;br />&lt;img src="https://i.imgur.com/U1YiDG0.png"
loading="lazy"
alt="image-20221109012245196"
>&lt;br />括弧顏色顯示&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/hX6ghuf.png"
loading="lazy"
alt="image-20221109012300415"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Nyan Progress Bar&lt;img src="https://i.imgur.com/puz6Ast.png"
loading="lazy"
alt="image-20221109012330374"
>&lt;br />讀取條改變&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/DwOQ9TA.gif"
loading="lazy"
alt="bar"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>WakaTime&lt;br />&lt;img src="https://i.imgur.com/6O8LC4R.png"
loading="lazy"
alt="image-20221109102735841"
>&lt;br />工作的紀錄&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/ZRNZg1L.png"
loading="lazy"
alt="image-20221109102655685"
>&lt;br />&lt;img src="https://i.imgur.com/IxXMFOb.png"
loading="lazy"
alt="image-20221109102855824"
>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="要改的設定">要改的設定&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Code Completion&lt;br /> Alt+.&lt;br />&lt;br /> &lt;img src="https://i.imgur.com/DNzcjhh.png"
loading="lazy"
alt="image-20221109012657212"
>&lt;/th>
&lt;th>&lt;img src="https://i.imgur.com/QDvdM96.gif"
loading="lazy"
alt="code"
>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Second Basic &lt;br />Alt+/&lt;br />&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/1nIbigD.gif"
loading="lazy"
alt="comple"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Type-Match-Completion&lt;br />Alt+;&lt;br />&lt;img src="https://i.imgur.com/RRbt5Rs.png"
loading="lazy"
alt="image-20221109125316338"
>&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/yL0OS2f.gif"
loading="lazy"
alt="demo"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Run F10&lt;br />&lt;img src="https://i.imgur.com/GRWVIQD.png"
loading="lazy"
alt="image-20221109013451000"
>&lt;/td>
&lt;td>就Run&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Terminal Alt+`&lt;br />&lt;img src="https://i.imgur.com/mULyQep.png"
loading="lazy"
alt="image-20221109013544910"
> | &lt;img src="https://i.imgur.com/xpIwXjH.gif"
loading="lazy"
> |&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>更改Terminal Bash CMD or Window terminal&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/pfBEHEU.png"
loading="lazy"
alt="image-20221109013734173"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>更改TODO 模板&lt;br />&lt;img src="https://i.imgur.com/fxIxqq0.png"
loading="lazy"
alt="image-20221109013905433"
>&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/omEwjLh.gif"
loading="lazy"
alt="demo"
>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="實用的快捷鍵">&lt;strong>實用的快捷鍵&lt;/strong>&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>功能&lt;/strong>&lt;/th>
&lt;th>&lt;strong>預覽&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>sout,souv&lt;br />快速印出&lt;/strong>&lt;/td>
&lt;td>&lt;strong>&lt;img src="https://i.imgur.com/PtTc6IK.gif"
loading="lazy"
alt="demo"
>&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>搜尋 &lt;br />Shift+shift&lt;/strong>&lt;/td>
&lt;td>&lt;strong>&lt;img src="https://i.imgur.com/VeRXfgk.gif"
loading="lazy"
alt="search2"
>&lt;br />快速列出所有可能，快速定位&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>切換分頁&lt;br /> Ctrl+E&lt;/strong>&lt;/td>
&lt;td>&lt;strong>&lt;img src="https://i.imgur.com/T48Dr58.gif"
loading="lazy"
alt="switch2"
>&lt;br />預設快捷鍵，會列出最近開啟的分頁&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>選擇檔案&lt;br /> Alt+F1然後按1&lt;br />若不想選擇按Esc退回Editor&lt;/strong>&lt;/td>
&lt;td>&lt;strong>&lt;img src="https://i.imgur.com/o7J2P5D.gif"
loading="lazy"
alt="demo"
>&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>快速選取區塊&lt;br />Ctrl+W&lt;/strong>&lt;/td>
&lt;td>&lt;strong>&lt;img src="https://i.imgur.com/sP0SaBd.gif"
loading="lazy"
alt="selectWord"
>&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>快速選取方法&lt;br />Alt+↑&lt;/strong>&lt;/td>
&lt;td>&lt;strong>&lt;img src="https://i.imgur.com/4WVURXZ.gif"
loading="lazy"
alt="SelectMethod"
>&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>查看根源&lt;br />Ctrl+B&lt;/strong>&lt;/td>
&lt;td>&lt;strong>&lt;img src="https://i.imgur.com/rZoSSTU.gif"
loading="lazy"
alt="demo"
>&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>快速定位錯誤&lt;br />F2&lt;/strong>&lt;/td>
&lt;td>&lt;strong>&lt;img src="https://hoxtonhsu.com/C:%5cUsers%5cHoxton%5cDesktop%5cgif%5cdemo.gif"
loading="lazy"
alt="demo"
>&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>查看變數提示&lt;br />Ctrl+P&lt;/strong>&lt;/td>
&lt;td>&lt;strong>&lt;img src="https://i.imgur.com/yqKVxk3.gif"
loading="lazy"
alt="demo"
>&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>修改&lt;br />Shift+F6&lt;/strong>&lt;/td>
&lt;td>&lt;strong>&lt;img src="https://i.imgur.com/q83spMr.gif"
loading="lazy"
alt="demo"
>&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>內建GitBlame功能&lt;br />對行數右鍵選擇gitBlame&lt;/strong>&lt;/td>
&lt;td>&lt;strong>&lt;img src="https://i.imgur.com/kvtETsi.gif"
loading="lazy"
alt="GitBlame"
>&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>萬能鍵Context Action&lt;br />&lt;br />引入變數、錯誤修正&amp;hellip;&lt;/strong>&lt;/td>
&lt;td>&lt;strong>&lt;img src="https://i.imgur.com/DfhLgtn.gif"
loading="lazy"
alt="demo"
>&lt;/strong>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>IntelliJ與Eclipse的比較</title><link>https://hoxtonhsu.com/p/intellij%E8%88%87eclipse%E7%9A%84%E6%AF%94%E8%BC%83/</link><pubDate>Sun, 23 Oct 2022 20:40:49 +0800</pubDate><guid>https://hoxtonhsu.com/p/intellij%E8%88%87eclipse%E7%9A%84%E6%AF%94%E8%BC%83/</guid><description>&lt;img src="https://i.imgur.com/Fx9nanx.png" alt="Featured image of post IntelliJ與Eclipse的比較" />&lt;h2 id="推薦的plugin">推薦的Plugin&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Plugin名稱&lt;/th>
&lt;th>截圖&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>One Dark Theme&lt;br />&lt;img src="https://i.imgur.com/RDwmNyk.png"
loading="lazy"
alt="image-20221109011709066"
>佈景主題&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/rokbaGu.png"
loading="lazy"
alt="image-20221109011724288"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;br />&lt;img src="https://i.imgur.com/DXd3gwi.png"
loading="lazy"
alt="image-20221109011844072"
>按鍵提示&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/tHGPxbO.gif"
loading="lazy"
alt="ShortCutHit"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Rainbow Brackets&lt;br />&lt;img src="https://i.imgur.com/U1YiDG0.png"
loading="lazy"
alt="image-20221109012245196"
>&lt;br />括弧顏色顯示&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/hX6ghuf.png"
loading="lazy"
alt="image-20221109012300415"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Nyan Progress Bar&lt;img src="https://i.imgur.com/puz6Ast.png"
loading="lazy"
alt="image-20221109012330374"
>&lt;br />讀取條改變&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/DwOQ9TA.gif"
loading="lazy"
alt="bar"
>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="要改的設定">要改的設定&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Code Completion Alt+.&lt;br />&lt;br /> &lt;img src="https://i.imgur.com/wI4OJLb.png"
loading="lazy"
alt="image-20221109012657212"
>&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/QDvdM96.gif"
loading="lazy"
alt="code"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Second Basic Alt+/&lt;br /> &lt;img src="https://i.imgur.com/UQP8q4F.png"
loading="lazy"
alt="image-20221109013135689"
>&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/1nIbigD.gif"
loading="lazy"
alt="comple"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Run F10&lt;br />&lt;img src="https://i.imgur.com/GRWVIQD.png"
loading="lazy"
alt="image-20221109013451000"
>&lt;/td>
&lt;td>就Run&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Terminal Alt+`&lt;br />&lt;img src="https://i.imgur.com/mULyQep.png"
loading="lazy"
alt="image-20221109013544910"
> | &lt;img src="https://i.imgur.com/xpIwXjH.gif"
loading="lazy"
> |&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>更改Terminal Bash CMD or Window terminal&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/pfBEHEU.png"
loading="lazy"
alt="image-20221109013734173"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>更改TODO 模板&lt;br />&lt;img src="https://i.imgur.com/fxIxqq0.png"
loading="lazy"
alt="image-20221109013905433"
>&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/omEwjLh.gif"
loading="lazy"
alt="demo"
>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="實用的快捷鍵">實用的快捷鍵&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>功能&lt;/th>
&lt;th>預覽&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>搜尋 &lt;br />Shift+shift&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/VeRXfgk.gif"
loading="lazy"
alt="search2"
>&lt;br />快速列出所有可能，快速定位&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>切換分頁&lt;br /> Ctrl+E&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/T48Dr58.gif"
loading="lazy"
alt="switch2"
>&lt;br />預設快捷鍵，會列出最近開啟的分頁&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>選擇檔案&lt;br /> Alt+F1然後按1&lt;br />若不想選擇按Esc退回Editor&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/o7J2P5D.gif"
loading="lazy"
alt="demo"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>快速選取區塊&lt;br />Ctrl+W&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/sP0SaBd.gif"
loading="lazy"
alt="selectWord"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>快速選取方法&lt;br />Alt+↑&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/4WVURXZ.gif"
loading="lazy"
alt="SelectMethod"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>內建GitBlame功能&lt;br />對行數右鍵選擇gitBlame&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/kvtETsi.gif"
loading="lazy"
alt="GitBlame"
>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>CLion的MutilMain</title><link>https://hoxtonhsu.com/p/clion%E7%9A%84mutilmain/</link><pubDate>Mon, 17 Oct 2022 18:09:43 +0800</pubDate><guid>https://hoxtonhsu.com/p/clion%E7%9A%84mutilmain/</guid><description>&lt;img src="https://i.imgur.com/aGwtINt.png" alt="Featured image of post CLion的MutilMain" />&lt;p>最近在研究C++，但發現我的CLion不知道為什麼只能有一個Main方法，後來網路上查了一下之後發現好像是因為CMake的關係。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/F5hZpXH.png"
loading="lazy"
alt="image-20221017181210022"
>&lt;/p>
&lt;blockquote>
&lt;p>錯誤訊息&lt;/p>
&lt;/blockquote>
&lt;p>後來研究了一下，發現只要在Project底下的CMakeList.txt加上這段就可以了&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">file (GLOB files *.cpp)
foreach (file ${files})
string(REGEX REPLACE &amp;#34;.+/(.+)\\..*&amp;#34; &amp;#34;\\1&amp;#34; exe ${file})
add_executable (${exe} ${file})
message (\ \ \ \ --\ src/${exe}.cpp\ will\ be\ compiled\ to\ bin/${exe})
endforeach ()
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/qKhhlaq.png"
loading="lazy"
alt="image-20221017181342487"
>&lt;/p>
&lt;blockquote>
&lt;p>完整的圖片如上&lt;/p>
&lt;/blockquote>
&lt;p>加入之後記得要Reload CMake Project&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/DrQHwR8.png"
loading="lazy"
alt="image-20221017181404785"
>&lt;/p></description></item><item><title>如何使用Hugo在Github上架設靜態網頁完整教學</title><link>https://hoxtonhsu.com/p/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hugo%E5%9C%A8github%E4%B8%8A%E6%9E%B6%E8%A8%AD%E9%9D%9C%E6%85%8B%E7%B6%B2%E9%A0%81%E5%AE%8C%E6%95%B4%E6%95%99%E5%AD%B8/</link><pubDate>Sat, 08 Oct 2022 12:04:44 +0800</pubDate><guid>https://hoxtonhsu.com/p/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hugo%E5%9C%A8github%E4%B8%8A%E6%9E%B6%E8%A8%AD%E9%9D%9C%E6%85%8B%E7%B6%B2%E9%A0%81%E5%AE%8C%E6%95%B4%E6%95%99%E5%AD%B8/</guid><description>&lt;img src="https://i.imgur.com/WSwohcu.png " alt="Featured image of post 如何使用Hugo在Github上架設靜態網頁完整教學" />&lt;h1 id="前言">前言&lt;/h1>
&lt;p>一直以來都把GitHub當成自己的筆記本在用，上傳了很多筆記，但最近心血來潮想把這些東西整理起來。最原先的想法是上傳到Medium，但發現Medium居然不支援Markdown的語法，索性放棄，後來某天看到之前高中同學有在用github.io的方式寫blog，於是也稍微研究了一下，原先以為可能一兩天就處理好，但最後發現弄了也快一個禮拜，於是想把這些坑記錄下來。&lt;/p>
&lt;h2 id="創建github-repository">創建GitHub Repository&lt;/h2>
&lt;h3 id="submodule是什麼">submodule是什麼?&lt;/h3>
&lt;h2 id="從hugo上下載自己想要的主題thmem">從Hugo上下載自己想要的主題(thmem)&lt;/h2>
&lt;h3 id="如何在本機預覽hugo頁面">如何在本機預覽Hugo頁面&lt;/h3>
&lt;h3 id="如何新增文章">如何新增文章&lt;/h3>
&lt;h3 id="hugo的檔案結構介紹">hugo的檔案結構介紹&lt;/h3>
&lt;h3 id="如何配置自己想要的模板configtoml">如何配置自己想要的模板(config.toml)&lt;/h3>
&lt;h4 id="關於baseurl的細節">關於baseURL的細節&lt;/h4>
&lt;h3 id="如何自定義文章模板">如何自定義文章模板&lt;/h3>
&lt;h2 id="如何將自己的網站上傳到github上面">如何將自己的網站上傳到GitHub上面&lt;/h2>
&lt;h3 id="如何push上去">如何push上去&lt;/h3>
&lt;h3 id="在其他台電腦要怎麼clone下來">在其他台電腦要怎麼clone下來&lt;/h3>
&lt;h2 id="如何建立留言功能">如何建立留言功能&lt;/h2>
&lt;h3 id="gittalk">GitTalk&lt;/h3>
&lt;h2 id="如何購買自己的dns">如何購買自己的DNS&lt;/h2>
&lt;h3 id="google-domain">Google Domain&lt;/h3></description></item><item><title>十大經典魔獸小遊戲地圖</title><link>https://hoxtonhsu.com/p/%E5%8D%81%E5%A4%A7%E7%B6%93%E5%85%B8%E9%AD%94%E7%8D%B8%E5%B0%8F%E9%81%8A%E6%88%B2%E5%9C%B0%E5%9C%96/</link><pubDate>Sat, 08 Oct 2022 03:13:34 +0800</pubDate><guid>https://hoxtonhsu.com/p/%E5%8D%81%E5%A4%A7%E7%B6%93%E5%85%B8%E9%AD%94%E7%8D%B8%E5%B0%8F%E9%81%8A%E6%88%B2%E5%9C%B0%E5%9C%96/</guid><description>&lt;img src="https://i.imgur.com/RALUdJZ.png " alt="Featured image of post 十大經典魔獸小遊戲地圖" />&lt;h1 id="前言">前言&lt;/h1>
&lt;p>&lt;img src="https://i.imgur.com/3iTZrU2.jpg"
loading="lazy"
alt="image-20221008031758424"
>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>蓋塔生兵&lt;/p>
&lt;p>用蓋塔生兵這個詞彙有點不太準確，比較正確的說法是自動產兵型遊戲，這種類型的地圖一開始會給你一塊地，然後這塊地會隨著時間自動產兵，比如說兩秒產一隻士兵這樣，並且能用殺敵獲得的黃金來升級自己的士兵，不論是單純的加血加甲，或是升級成更高單位的士兵，而這類遊戲最大的樂趣就在於取消了部隊上限，能夠像是全面戰爭那樣，操控50~100多隻的士兵上場殺敵，代表的遊戲類型有：城堡大戰、刺蛇大戰，前者是玩家們分成兩個陣營，有點類似現在的DOTA，有路線有野怪，也有系統自動產生的兵線。後者則是最原汁原味的玩法，有些地圖會是刺蛇或是小狗，看地圖而定。 　　這個類型的遊戲不算熱門，但是非常好消磨時間，單機的情形下最後造出一堆高階兵種，比如說寒霜翼龍或是狼騎兵輾壓戰場，看著所有士兵車過去的感覺特別爽。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/FF0mN8m.jpg"
loading="lazy"
alt="img"
>&lt;/p>
&lt;ol start="2">
&lt;li>
&lt;p>鬼抓人（吸血鬼復蘇、巨魔與精靈）&lt;/p>
&lt;p>　　用鬼抓人這個詞彙也不太準確，正確來說比較接近現在的非對稱式生存遊戲。遊戲的玩法是有數名玩家擔任農民，少數玩家扮成鬼，一開始農民先行動，在地圖上找尋合適的地點，開始建立城牆、防衛塔、瞭望塔之類的防禦型設施，防範鬼的入侵。而鬼的玩法則是進攻人類的住所，扛著防衛塔的傷害努力打破城牆，進去殺死人類。以上是比較基本的規則，但隨著遊戲的更新也會增加越來越多功能，比如說鬼也能遠距離攻擊，隔著城牆殺死農民，或是農民死掉後會變成鬼，增加玩家留存率，代表的遊戲有：鬼抓人、樹人與炎魔、巨魔與精靈，這三者都各有特色，但後兩者我忘記具體有什麼差別。這種類型的遊戲也出現過很多變體，比如說貓抓老鼠之類的，但已經是比較後期的事情了。 　　這應該是我第一次接觸到的魔獸爭霸小遊戲地圖吧，也是我認為最經典的，放到現在看也不過時，非對稱式的遊戲方式與生存、建造的融合，讓這類型的遊戲一直都有人在開發，有件有趣的事情是，當時我記得我可能小二小三吧，那時候在網咖裡面加進去一個房間，地圖就叫做性愛鬼抓人，結果進遊戲之後發現只要有人被抓，畫面就會變成無碼色情圖，然後還會有超大聲的淫叫聲，當時的我也不知道那到底是什麼，玩了一下之後就跳出去了。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/I5hIsbF.jpg"
loading="lazy"
alt="image-20221008031942558"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>金字塔大逃亡&lt;/p>
&lt;p>　　個人不知道這是不是台灣人做的地圖，但是應該算是目前還會被提到的魔獸小遊戲吧，知名實況主紹安就是在實況上玩這款遊戲的魔改版《性愛金字塔》，而被圖奇永Ban，從 此之後只要有實況主被ban臺就會被稱作「進金字塔」。 　金字塔大逃亡本身是一個小遊戲總集，遊戲的主線就是玩家進場後可以從約30幾種小遊戲裡面選擇約8~10種小遊戲，全部完成後就可以通關這個金字塔。而這些小遊戲包刮但不限於 殺敵生存-玩家們重生在一個小競技場裡，會有各個波次的敵人依序產生，目標就 是活到最後。 機智問答-有點像是視力測驗的小遊戲，畫面上會有各種不同顏色的怪物數隻，隨機地走動 ，當時間結束後，會問你說「請問橘色的食屍鬼有幾隻?」「藍色的鬼魂有幾隻?」。 計步遊戲-一開始玩家會出現在一個類似棋盤的地圖上，接著會有一位系統npc在棋盤式的地圖上位移，而玩家的目標就是記住它是怎麼走的，必須要讓自己的步伐和npc吻合，不然就輸了 　　這遊戲我玩了很多次，但沒有一次有過關的。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/1BBZTYS.jpg"
loading="lazy"
alt="img"
>&lt;/p>
&lt;ol start="4">
&lt;li>
&lt;p>跳跳球&lt;/p>
&lt;p>　　「手殘復健專用」。遊戲的視角從魔獸的3D視角變成垂直90度的視角，畫面上看起來就是一款2D遊戲，實際遊玩方式很接近現在的CELESTE，都是在2D的地圖上用跳躍、蹬牆跳 之類的方式到達指定的地點。 　雖然說這遊戲的玩法看起來不是特別有創意，但它是一款多人類型的地圖，遊戲裡面死掉後除了等全滅之後的復活外，還可以讓隊友碰觸到你的屍體來復活，我覺得這一點是很有創意的一點，但不知道為什麼沒看到有遊戲發行商做過類似的獨立小品。跳跳球的難體現在三點上，1.遊戲後期會有那種只要沒跳掉，就不會再出現的平台，除非等到所有人重生。2.遊戲會隨著時間，操作越來越延遲。3.手殘&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/FmYq3uE.jpg"
loading="lazy"
alt="img"
>&lt;/p>
&lt;ol start="5">
&lt;li>
&lt;p>大屌大戰&lt;/p>
&lt;p>　　這款我很確定是臺灣玩家的地圖，因為從隊伍選擇裡面就可以看出作者的惡趣味， 藍方「來自東方的大屌」紅方「來自西方的洋屌」。而遊戲方式則是所有人重生在一個 開闊的鬥技場，對戰方式則是以指向技的方式丟擲槌子（遊戲裡叫大屌），如果累積足夠的經驗還可以放大招，丟出一個更巨大的槌子（遊戲裡叫笑傲飛屌）。遊戲裡面也可以購買各種不同的技能，比如說跳斬、大絕之類的，也有現在流行的「配件改變技能」系統，可以購買各種道具，讓自己的大屌解鎖不同的功能，比如說爆炸屌、時空屌、激流屌之類的技能。時不時出現在場上的隨機效果也會令人會心一笑，比如說中樂透（獲得大筆金錢）、動物園動物逃竄（地圖上出現許多動物經過，會有傷害）或是撿到鋼彈（遊戲裡面會有一台鋼彈讓你操作），我覺得最好笑的應該就是固樂沙敏，這個效果觸發後，會有一名玩家跑速變快，而背景音樂也會改成固樂沙敏的廣告「ㄎㄨˊ落，爬起來」。 　　當初在高中的時候邀身邊的同學一起玩，討論的內容都是「今天要不要玩大屌大戰」「我的屌超準」「我才不要玩，每次都被你的大屌噴死」之類的對話，不知道當時身邊的女同學都在想些什麼呢。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/i8V6Bug.jpg"
loading="lazy"
alt="img"
>&lt;/p>
&lt;ol start="6">
&lt;li>
&lt;p>神奇寶貝防衛戰&lt;/p>
&lt;p>　　這應該這幾年大家最熟悉的遊戲，Dota自走棋、LoL自走棋、爐石戰場之類的遊戲，都 是源自這款遊戲(應該啦，我也不確定)，遊戲方式就是從許多神奇寶貝裡面選出幾種，然後它們就會自動打怪，我們要做的事情就是升級神奇寶貝、選擇神奇寶貝而已，遊戲裡面的許多神奇寶貝都有獨立建模，印象最深的大概就是鯉魚王吧，因為它每個階段後面都是鯉魚王LV0(警告，這個單位很廢)鯉魚王LV30(警告，這個單位仍然很廢)，直到將它升級成暴鯉龍之後才不會顯示後面的詞綴，強度也是正常的。 　　神奇寶貝防衛戰當時還很簡陋，大概就像我上面介紹的那樣子，並且在加入一些屬性相剋的系統，後代的一些遊戲比如說爐石會有搭配系統，而神奇寶貝防衛戰就我所知應該是沒有的，使得遊戲一開始很新鮮，但玩久之後就缺乏深度，但是真的很好玩，我記得當初我有個朋友看到名稱叫做「神奇寶貝防衛戰」還萬般排斥，但玩了之後卻直喊真香。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/MH1qTgN.jpg"
loading="lazy"
alt="img"
>&lt;/p>
&lt;ol start="7">
&lt;li>
&lt;p>越獄&lt;/p>
&lt;p>　　這個遊戲其實算是鬼抓人的變體，但它改了太多的東西。遊戲方式是分成警察組 （兩人）與小偷組（八人），在一個城鎮裡面警察抓小偷，警察一開始擁有遠高小偷的火力，而小偷則是要在整個城市中逃竄，努力壯大自己，比如說去遠方的島嶼學習仙人術，或是進到城鎮底層變成血高傷痛的狂人最後攻進警察總部裡面殺死警察。遊戲裡面的地圖真的做的很棒，公園區、銀行區、森林區、市集區，比較常見的開局就是所有人進場分成搶劫組與修練組，搶劫組一開場就先去搶銀行，然後把金錢分給修練組的玩家，修練組的玩家在趕緊花錢購買裝備、拜師學藝，後面在反殺警察。而我最常的玩法就是偷偷地躲進森林區，利用物件把自己卡進森林裡面，在裡面蓋一個小型市集，當仲介商，負責造錢給其他玩家或是幫忙買東西。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/LolsGrV.jpg"
loading="lazy"
alt="img"
>&lt;/p>
&lt;ol start="8">
&lt;li>水之TD、守城遊戲&lt;/li>
&lt;/ol>
&lt;p>　　TD遊戲自從魔獸三沒落後，好長一段時間都沒有什麼類似的遊戲，雖然市場上陸陸續續都有在更新類似的遊戲，但總給人不溫不火的感覺。但在當時，TD類型的遊戲可謂是魔獸的大宗，舉凡元素TD、守望女神TD、害人守塔之類的TD遊戲佔據了小遊戲圖的半邊天。這類型的遊戲就是在固定的路線上製作防禦設施，目標就是在敵軍抵達終點前消滅它們。 　　而其中我最喜歡的TD守城就是水之TD，單純就只是這款特別簡單而已，而且操作也不複雜，而有其中一小關，我不確定是不是第64關，敵方是一群坦克，每次玩到這關的時候我都會在語音裡面大喊天安門事件。 　　守城遊戲則是占據了魔獸小遊戲圖的另外半邊天，這種遊戲類型會讓玩家扮演一名英雄，可能是魔獸爭霸裡面的，或者是某些動漫作品裡面，接著敵方會依照波次派遣軍隊過來攻擊我們的主堡，而我們的目標就是守住，地圖上會有商店、野怪、練功區之類的地方，讓玩家可以快速升級刷錢代表類型有：火影忍者的羈絆、神之墓地、守護女神之類的。 　　說起來好笑，這類型遊戲我覺得最大的樂趣就是無腦，遊戲裡面的角色初期大概就可以學一堆技能，舉凡分身術、劍刃風暴、大玉螺旋丸之類的大範圍高傷害技能，且攻速都快的離譜，每隻角色看起來都像本多開大一樣，所以常常看到自己的角色在練功場刷怪，只要怪一重生就立刻被秒掉，頗有現在免洗手遊的味道在裡面。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/lLmXYGc.jpg"
loading="lazy"
alt="img"
>&lt;/p>
&lt;ol start="9">
&lt;li>
&lt;p>術士大戰&lt;/p>
&lt;p>​ 這應該是這個表單裡面最冷門的一款吧，因為這款出的時候差不多2012，當時GGC的魔 獸房已經不用黃金會員就能擠進去了，玩魔獸的人銳減，使得這款遊戲並沒有獲得太多人的注意。遊戲玩法講簡單一點就是推人出去，地圖會越來越小，只要被推出去就會扣血，而玩家可以用許多技能讓攻擊對手，比如說火球術，被丟中就會後退，或是滾石術，擲出一個巨大的滾石，被擊中後就會被滾石的模組推著往外滾，也有一些技能比如說鎖鏈，可以勾住敵人並且扣血，或是勾住場上的物件讓自己勾回場上，而我發明的一種方式就是用滾石術配上鎖鏈，這樣子敵人一方面被滾石往外推，另一方面又被鎖鏈牽扯住受到持續傷害，四字「高手境界」。 　　而遊戲裡面還有更多更多的技能與道具可以使用，只可惜玩的人並不多而已。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/alyoxTr.jpg"
loading="lazy"
alt="img"
>&lt;/p>
&lt;ol start="10">
&lt;li>
&lt;p>侏儸紀公園&lt;/p>
&lt;p>　　這張地圖也是我之所以想寫這篇文章的原因，這張圖我認為是小遊戲之王也不為過。遊戲方式是一群人降落在一個叢林裡，然後找尋一個適合自己的地方，築起電網、電牆，蓋起機槍哨塔之類的防禦設施，然後發展各種學院，比如說物理學院、機械學院、生物學院之類的，升級成激光哨塔、火箭炮塔、核子電牆之類的，甚至還能養恐龍，或是學習武術技巧與成年雷克斯暴龍PK。我會覺得這張地圖很好玩的原因，是因為這不像是鬼抓人那種類型遊戲，會給妳很多看起來就很適合蓋的地點，在侏儸紀公園裡面，很多時候你蓋的地方可能只有幾棵樹木當成天然屏障，很容易就會有小恐龍穿進縫隙進到你的家園，或是大型恐龍倒地後會使得樹木倒塌，門戶洞開。且遊戲裡面的氛圍營造的很好，大型恐龍在附近的時候會聽到許多恐龍的低吼聲，靠近的時候整個畫面會震動，我記得我小時候玩的時候覺得超恐怖的。而遊戲發展到後期，救援直升機就會抵達叢林，這時候我們就需要用我們之前研究的科技，比如說車輛或是機械部隊，殺出一條血路，搭上直昇機逃離這個侏儸紀公園。 　　綜合來說，侏儸紀公園是一張結合了生存、發展、營造、合作、探索的超強遊戲，簡陋的畫面仍然無法遮掩它極佳的遊戲性，缺點也是有的，首先成長期實在太久，雖然遊戲的時間可以選擇要30、60還是90分鐘，但過低的遊戲時數基本上沒辦法撐過最後一波的恐龍大進攻，使得玩家通常都是選擇60分鐘為一局，且遊戲裡面的物理學院實在太強，各種高科技設施和防禦工程，使得其他學院的技術就有點娛樂性質，但整體來說絕對是魔獸爭霸小遊戲的王者當之無愧。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/mh13cQV.jpg"
loading="lazy"
alt="img"
>&lt;/p>
&lt;ol start="11">
&lt;li>
&lt;p>東京甩狗&lt;/p>
&lt;p>​ 太多人說要加東京甩狗了，趁有空的時候打一打。東京甩狗這遊戲有點複雜，其實很像團康遊戲的氣球爆在誰手上。地圖是一個空曠的場地，約有八名玩家，會有其中一名玩家持有球，而地圖上會有一隻「狗」去抓拿球的人，被追到就死了。 而這遊戲叫做東京甩狗的原因就是因為狗的運動方式不是直線，而是有點像甩尾一樣的方式靠近持球者，持球者「甩狗」的時間越久，則接下來把球丟給下一個人的時候，狗的速度就會變超快的衝向下一個人，而且背景也會有龜派氣功的集氣聲，配合上背景音樂的Linkin park -faint ，讓場面充滿緊張刺激的氣氛！&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h1 id="後語">後語：&lt;/h1>
&lt;p>這十大遊戲是我心目中的排名，不一定符合大多數人的看法 　　大概兩年前自走棋剛出來暴紅的時候讓我蠻震驚的，因為我好像十幾年前就玩過類 似的遊戲，當時就覺得怎麼一群人還在玩我小時候玩的遊戲還不亦樂乎？後來回顧了一下許多魔獸爭霸的小遊戲，其實都頗具潛力，比如說跳跳球就可以做成像Fall guys的同樂遊戲，越獄改一改其實也是另一種型態的非對稱競技、蓋塔生兵其實也可以做成像是全戰那種類型的RTS、侏儸紀公園如果用現在的技術重製的話應該也能掀起一波恐龍生存熱潮? 全部看完下來其實還有很多遊戲想要列上去，比如說臺灣人自己開發的EoU(End of Upotia)，也算大作，只可惜最後沒在更新，當時我還有記下我的登入碼。還有各種動漫人物大亂鬥、藍綠大戰、小兵的故事、卡牌大戰、勾肥大戰、亡者之夜、狼與羊、還有最白癡的誰是智障、強者大戰、海綿寶寶溜冰、歐洲大戰、坦克大戰、東京甩狗、神鬼戰士、你畫我猜、達爾文進化島、船難求生、森林大逃亡之類的，每款遊戲放到現在都是遊戲性很高的作品，當初淬鍊重生出來時，我以為會再掀起一波魔獸熱潮，結果淬鍊重生整個大爆死，最後不了了知。 想來寫一下這篇文章，原本是預計做成影片的形式的，但無奈很多地圖我都 已經找不到載點，BattleNet上面也都沒有活人、GGC老早也把連機房停掉了，現在要連的話好像也只能透過中國的平台連，無奈我有點懶得去理解要怎麼註冊，也怕註冊後根本沒人玩這些小遊戲，後來前陣子PTT開放註冊，就決定還是用寫文章的方式紀念一下這個陪伴 我國高中生活的遊戲。&lt;/p></description></item><item><title>Bioshock3心得</title><link>https://hoxtonhsu.com/p/bioshock3%E5%BF%83%E5%BE%97/</link><pubDate>Sat, 08 Oct 2022 03:02:43 +0800</pubDate><guid>https://hoxtonhsu.com/p/bioshock3%E5%BF%83%E5%BE%97/</guid><description>&lt;img src="https://i.imgur.com/h13vjaO.png" alt="Featured image of post Bioshock3心得" />&lt;h1 id="無雷心得">無雷心得： 　&lt;/h1>
&lt;p>2013年的作品了，最近特價才把它買回來玩，如果要講無雷心得的話，我會建議遊戲直接開最低難度就好，然後留聲機(遊戲裡面的文本訊息)多收集，沒有字幕，但是點進去會有逐字稿，強烈建議看一下，不要像我一樣什麼都沒看，會有蠻多地方不太清楚的，無雷心得我就講到這邊，因為這遊戲的劇情只要稍微提一下就會有暴雷的成分，遊戲時長約為10小時，算是很短了，推薦嗎？推薦，因為超多人都說劇情很神，300元當作看一場電影也不虧，適合你周末時買來玩。&lt;/p>
&lt;h1 id="有雷心得">有雷心得：&lt;/h1>
&lt;p>​ 其實原本是想打魂類遊戲心得的，但寫一寫發現怎麼寫都不喜歡，就決定來寫生化奇兵無限的心得，我劇情放在最後講，先講遊戲性的部分。 　&lt;/p>
&lt;p>生化奇兵的遊戲性如果要我給個分數的話，我應該會給40~50分吧，不及格的原因是因爲我在玩的時候沒有一瞬間是覺得戰鬥是有趣的，會覺得不好玩的原因有以下幾點&lt;/p>
&lt;ol>
&lt;li>
&lt;p>遊戲能攜帶的槍枝種類只有兩種&lt;/p>
&lt;p>雖然說大部分的FPS遊戲，能攜帶兩種槍枝算是基本設定，但由於我全程都是以最高難度的過程中，把子彈打空是家常便飯的事情，但遊戲裡面的特殊單位，比如說機甲華盛頓、大猩猩機器人等等，沒什麼難的，就只是血特別多，雖然說機甲華盛頓背後好像有啥弱點可以打的，但敵方目標全程都是鎖定在玩家身上，能繞背的場景真的太少，有時候打一打就沒子彈了，就必須得全場一直撿子彈，但這遊戲也沒有現在遊戲常見的滑鏟或是奔跑等要素，總是會覺得移動起來不夠俐落，很容易就變成靶子被敵人亂槍掃射，這也是為什麼 我會建議遊戲用簡單模式玩就好，痛苦太多，收穫太少，能簡單大家都不想複雜。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>遊戲的魔法都沒啥用&lt;/p>
&lt;p>我不確定這是不是我個人的感覺，但我感覺這遊戲的魔法有用的真的沒幾個，我最常用的應該就是把敵人吹起來的，還有把敵人吹走的，剩下什麼控制心靈、火球術之類的，在魔力條有限的情形下，不如控場住對面然後瞄頭射擊來的更有效率，魔法這個系統，以我自己的觀點來看，雖然沒有到「刪了也沒差」的程度，但確實沒有給我帶來太多顯著性的幫助，我期望的魔法，雖不像Dishonored那樣無所不行，但至少應該也要做到像隻狼的忍具那樣，不用不會怎樣，但用了會很不一樣，有看過人家抱怨，說是這代把魔法系統閹割掉太多，前幾代魔法很有用之類的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>遊戲的敵方設計不夠有趣&lt;/p>
&lt;p>我破完這遊戲大概快兩個月了，我憑印象想到的敵人，就是普通士兵、機甲華盛頓、猩猩機器人，這三個的差別就是，會開槍；會開槍然後血很厚；會開槍然後血很厚還會衝過來扁你，其實差別並不大，所以我在玩高難度的時候腦袋基本上是放空狀態的，我不太需要知道我眼前的敵人有什麼弱點，或是要怎麼應對，我需要的就是不停開槍而已，講白話一點就是，我在打我的，敵人在打他的，我跟敵人沒有什麼太多互動的機會，我會希望我跟敵人之間更有互動，比如說可以打掉華盛頓的手臂，它的槍砲會掉落，然後會轉身去撿，我可以順便射背後，諸如此類的設計，讓戰鬥過程有點動腦的感覺。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>　　另外我常常在心得裡面看到有人說，伊莉莎白是他所見過，最栩栩如生的同伴，說她不止會丟補丟槍丟丟銅仔，還會針對場景中的物品互動。有可能是因為我玩的是最高難度，因此伊莉莎白大部分對我的幫助都還好，沒有真正意義上的幫助到我，更多時候她就開場丟了一個補之後就躲在掩體後面，然後掛機看我輸出。我會更希望伊莉莎白能做一些更積極性的行為，讓我感覺到她有在跟我冒險的感覺，說白了一點就是希望她可以像龍族教義的pawn一樣，能輸出能壓制能開戰，或者是像COD一樣會跟著玩家一起站在前線，我「個人」會更喜歡伊莉莎白一點，當然也許伊莉莎白不敢弄髒自己的雙手，只敢把子彈丟給布克叫他開槍，降低自己的罪惡感。&lt;/p>
&lt;p>　　最後要講的是劇情，我就先講了，我不太滿意，這原因可能有兩個，一個是因為我懶，遊戲裡面，不能說有大量的，但確實是有一定數量的留聲機散落在地圖各處，這些留聲機有的重要，有的又不太重要，在播放的時候也沒中文字幕，只能點進去留聲機裡面才能看到 歷史文本，我「個人」，再次強調我「個人」不太喜歡這種把劇情放進收集要素裡面的系統，因為這種系統一來是很麻煩，沒有提示我又要去找，又可能是反過來，我根本不知道有這個留聲機的存在，變成我每次撿到的留聲機都是隨緣的，他們可能是對於某個歷史事件、或是某個人物的介紹，但因為我漏掉了某個留聲機，我就不能知道這件事情、這個人到底從頭到尾發生了什麼事，比如說遊戲裡面的兄妹的背景故事有很大一部分就是藏在留聲機裡面，也是留聲機揭露出了他們不是兄妹，而是兩個平行時空的同一個人，只是性別不同罷了。&lt;/p>
&lt;p>　　有些人可能會很喜歡這種自己收集物品來拼湊故事的敘事方式，但我真的很抱歉我不是那麼優秀的人類，我會更希望隨著劇情，他會把那些文本直接丟給我。&lt;/p>
&lt;p>　　接下來要講結局，誠如我上面說的，我對於劇情，其實應該是說結局不太滿意，我會講一下我認為的好結局（魔女之家以及我個人認為的伏筆應該要怎麼樣會比較好（屍人莊殺人事件），如果有人沒有玩過魔女之家、沒有看過屍人莊殺人事件的朋友也可以先迴避一下。&lt;/p>
&lt;p>　　平心而論，生化奇兵３的前面鋪成是很好的，至少它解釋了伊莉莎白的能力起源，以及布克夢中的神祕敲門客時，我確實是有感覺到一點東西的，然後當最後伊莉莎白的限制器被解除，剎那間她超脫世界上所有一切，僅用轉瞬之間就洞悉了宇宙的光陰，過去發生的 ，現在存在的，未來注定的一切，全知全能的伊莉莎白。她帶著布克走進了燈塔，然後燈塔裡有更多的布克與伊莉莎白交錯來回走在不同的燈塔裡，「所有的一切都在不停地發生，但每次都會有些許不同」，伊莉莎白帶著布克回顧了故事開始的源頭．．．當布克了解一切後，要求伊莉莎白讓他殺死康斯姆托克，終結這一切，伊莉莎白眼裡閃過一絲猶豫，但最後還是打開了一扇新的大門，回到布克接受洗禮的那一天，布克不解，轉過身後發現有無數個伊莉莎白站在背後「所有的一切都在不停地發生，但每次都有些許的不同，現在的你，當時拒絕了洗禮，選擇背負自己的罪生活下去。但另一個時空的你，選擇忘記這一切，以康斯姆托克之名重生」，接著伊莉莎白們抓住了布克，在初始洗禮池之處淹死了布克，接著就結局。&lt;/p>
&lt;p>　　我會不滿這個結局的原因是因為，這個結局太快了，幾乎是在講完布克就是康斯姆托克，如果能帶一些畫面，說明康斯姆托克就是布克的一些伏筆會更好。比如說魔女之家的真結局，雖然不是100%相似，但都是在結局最後有一個大爆點，而這個大爆點可以貫穿整個遊戲，解釋所有的一切，當薇奧拉轉頭踢了魔女一腳，並說出「你煩不煩阿，這副身體已 經是我的了」的瞬間，在配合上後面的對白「雖然換了身體，但這棟房子還是知道誰才是真正的主人」，剎那間玩家就會回憶起所有在房子裡看見的「身體轉移祕法」「毒啞人的方法」到底是做什麼用的。但生化奇兵3的結局我並沒有這樣的感覺，遊戲過程中，我感覺不太到康斯姆托克與布克的關聯性在哪裡，他們語氣不同，外貌也不相似，也沒有一些共有的小習慣之類的，換言之，康斯姆托克跟布克的關聯性根本不高，這也有可能是因為遊戲中時不時在暗示你康斯姆托克不僅僅是康斯姆托克，比如說他預言了偽牧羊人、知道伊莉莎白的指頭，使得玩家很容易對他的背景有些預設立場，就有點像是看魔術時，大家的焦點都會注意在那杯被魔術師蓋起來的杯子一樣。我認為的一個好的伏筆，是屍人庄殺人事件，在故事的開頭主角戲水時把身上帶著的懷錶放在涼亭處，並要同學看好它，這件事情就只是一個很日常的描寫而已，但在故事的最後，在抓殺人嫌犯時，大家的報時都是1點32分、2點57分這樣精準的時間時，只有男主是說1點半左右，原因無它，因為旅館房間的時鐘都是電子式的，而當時男主根本不在房間裡，只能透過指針式的懷表查看時間，才會說出1點半這個模糊的答案。&lt;/p>
&lt;p>　　以上的內容濃縮起來就是，康斯姆托克的身份的伏筆不太好，結局也太快進結局，沒有適當的鋪陳告訴玩家為什麼康斯姆托克要是，且必須是布克。&lt;/p>
&lt;p>　 回顧整個遊戲，其實最讓我覺得很棒的伏筆是遊戲一開始進入哥倫比亞時，兄妹倆人 會要你猜人頭還是字，當你做出選擇後，哥哥會拿出一個早已畫上許多記號的記分板再加上新的一筆，但當你破完後再回頭看這段，會發現那些計分板上的痕跡，就是許多平行世界的布克都曾經猜過硬幣，都曾經在這計分板上畫上過一筆。 　　&lt;/p>
&lt;p>最後講一下結論，心得這種東西因人而異，我講的也只是我的看法而已，大家生長環境的解讀有出入是很正常的事情，我知道很多人都說生化奇兵3的劇情很神之類的，但我玩過之後真的覺得還好，我盡量把我覺得不滿意的地方寫出來，讓大家知道我不滿意的地方 在哪裡，僅代表個人意見而已。很多人覺得很爛的FF15我卻覺得結局很不錯，大家狂推的槍彈辯駁2我也覺得真的很神，綜上所述，如果還是有人對我有意見的話，我只想說「很抱歉，我就是爛，玩魔物獵人、惡魔獵人這種不用動腦的遊戲就好，不應該玩這種劇情遊戲」&lt;/p></description></item><item><title>TYPORA 如何上傳圖片(教學 使用Github , imagur作為圖片空間)</title><link>https://hoxtonhsu.com/p/typora-%E5%A6%82%E4%BD%95%E4%B8%8A%E5%82%B3%E5%9C%96%E7%89%87%E6%95%99%E5%AD%B8-%E4%BD%BF%E7%94%A8github-imagur%E4%BD%9C%E7%82%BA%E5%9C%96%E7%89%87%E7%A9%BA%E9%96%93/</link><pubDate>Sat, 08 Oct 2022 01:02:04 +0800</pubDate><guid>https://hoxtonhsu.com/p/typora-%E5%A6%82%E4%BD%95%E4%B8%8A%E5%82%B3%E5%9C%96%E7%89%87%E6%95%99%E5%AD%B8-%E4%BD%BF%E7%94%A8github-imagur%E4%BD%9C%E7%82%BA%E5%9C%96%E7%89%87%E7%A9%BA%E9%96%93/</guid><description>&lt;img src="https://i.imgur.com/W6FAkN1.png" alt="Featured image of post TYPORA 如何上傳圖片(教學 使用Github , imagur作為圖片空間)" />&lt;p>最近領到薪水後買了TYPORA後，想找如何上傳圖片的教學，發現網路上的教學蠻少的，台灣好像只有一篇，還是For mac的教學，剩下的都是中國的教學，但他們用的圖床，台灣也很多不能用，後來研究了幾天終於搞懂，所以決定寫一篇看看&lt;/p>
&lt;p>圖片空間有Github跟imgur，就看你想要用哪個就用哪個吧，其實沒差太多，但imgur會稍微簡單一點點點點點點，以下是步驟&lt;/p>
&lt;h2 id="開始">開始&lt;/h2>
&lt;ul>
&lt;li>先去安裝node.js，因為會需要裡面的npm&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/&lt;/a>&lt;/p>
&lt;p>安裝好可以用系統管理員身分打開cmd，並輸入&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">node
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>如果有成功安裝的話應該會顯示&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/0*TJh1mXLciPRITGML.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>接著安裝picGo-core&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">npm install picgo -g
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/0*OURwrokLcSXsKhh7.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>說出現錯誤，要我們執行&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">npm audit fix -force
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/0*iJyRBtSoBBDDWCiL.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>執行完之後就安裝好了，接著輸入&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">picgo
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>來確認是否有安裝成功，有時候可能會出現&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">檔案未經數位簽署這個指令碼將不會在系統上執行
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>之類之類的句子，這時候可以輸入&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">Set-ExecutionPolicy RemoteSigned
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>來允許執行，這時候在輸入picgo應該就可以看到這樣子的畫面了&lt;/p>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/0*5z4fiwasXjd5owxU.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>到這一步本地端的設定已經完成80%了，接下來就是要選擇要使用哪種圖片空間&lt;/p>
&lt;h2 id="github">Github&lt;/h2>
&lt;ul>
&lt;li>首先先到Github創建一個&lt;strong>公開&lt;/strong>的Repository，名字隨意就好&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/0*Qtv_aOAy_jvvJmxS.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;ul>
&lt;li>接著把這個Repository的URL複製下來&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">https://github.com/Hoxton019030/Typora
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>右上角個人頭像點開，選擇Settings&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/0*IvpN0zdI8lH7ArDz.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;ul>
&lt;li>左側選項最下面有一個Developer settings&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/0*I0XbiRgEZbAqSl1P.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;ul>
&lt;li>選擇Personal access tokens&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/0*av4YXNmNeXapHaSQ.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;ul>
&lt;li>選擇 Generate new token&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/0*f4CIbfps52_y13UM.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;ul>
&lt;li>輸入這個token的名稱，隨便取就好，Expiration看個人喜好，我很懶，所以我選擇永久，下面的select scopes勾選repo&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/0*OdCzsVJiqnSncFsR.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;ul>
&lt;li>接著會產生一組ghp開頭的token，這組序號&lt;strong>只會在這裡以明碼出現一次，接下來永遠都不會再以明碼的方式呈現&lt;/strong>所以請好好記起來&lt;/li>
&lt;li>然後到Typora的偏好設定裡打開&lt;code>開啟設定檔&lt;/code>，通常會是用一個文本編輯器打開，通常都是vscode啦&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/0*TfGA65bOI7NQlTdO.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;ul>
&lt;li>接著把這串東西複製貼上去&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">{
&amp;#34;picBed&amp;#34;: {
&amp;#34;current&amp;#34;: &amp;#34;github&amp;#34;,
&amp;#34;uploader&amp;#34;: &amp;#34;github&amp;#34;,
&amp;#34;github&amp;#34;: {
&amp;#34;repo&amp;#34;: &amp;#34;Hoxton019030/Typora&amp;#34;, //這串對應的是使用者名稱+Repo名稱，改成自己的
&amp;#34;token&amp;#34;: &amp;#34;ghp_xxxxxxxxxxxxxxxxxxxx&amp;#34;, //這邊把剛剛產生的token貼上去
&amp;#34;path&amp;#34;: &amp;#34;data/&amp;#34;, //圖片要上傳到哪個資料夾，可以先不用設定，
&amp;#34;customUrl&amp;#34;: &amp;#34;https://raw.githubusercontent.com/Hoxton019030/Typora/main&amp;#34;, //把Hoxton019030/Typora改成你自己的repo
&amp;#34;branch&amp;#34;: &amp;#34;main&amp;#34; //應該也不用動
}
},
&amp;#34;picgoPlugins&amp;#34;: {}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>完成之後應該長這個樣子，接著按存檔&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/0*Jv9sK10wHg0dKTgj.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;ul>
&lt;li>接著回到設定，試著按看看測試圖片上傳&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/0*aBg4zeoUl5MUkCUB.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>如果成功的話就會出現這樣的畫面&lt;/p>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/0*jWdQ9Nc1dfG2Ju4g.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>就代表你成功了！&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>如果你在按一次測試圖片上傳，由於上傳的圖片檔名一模一樣，會報錯，這樣是正常現象，請不要驚慌&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/0*W658xLMijQPg2W5M.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;h2 id="imgur">imgur&lt;/h2>
&lt;ul>
&lt;li>首先先辦帳號&lt;/li>
&lt;li>&lt;a href="https://api.imgur.com/oauth2/addclient">https://api.imgur.com/oauth2/addclient&lt;/a> 點擊這個網址&lt;/li>
&lt;li>老樣子，名字隨意取就好，然後Authorization type選擇第二個&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/1*X8N6pfp6RBxMrFUQ-7DMhg.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;ul>
&lt;li>接著會跳出畫面，會告訴你你的Client ID是什麼，請複製下來&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/0*BXo0QET3625yCZb3.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;ul>
&lt;li>接著到偏好設定裡面打開開啟設定檔，通常會用vscode開啟&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/0*wcsfPRq4DONBo8WE.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;ul>
&lt;li>接著把這段複製貼上上去&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">{
&amp;#34;picBed&amp;#34;: {
&amp;#34;current&amp;#34;: &amp;#34;imgur&amp;#34;,
&amp;#34;uploader&amp;#34;: &amp;#34;imgur&amp;#34;,
&amp;#34;imgur&amp;#34;:{
&amp;#34;clientId&amp;#34;: &amp;#34;XXXXXXXXXXX&amp;#34;
}
},
&amp;#34;picgoPlugins&amp;#34;: {}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>貼上去之後應該會長這個樣子&lt;/p>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/0*w6neiFt-pF_F7Xi5.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;ul>
&lt;li>然後存檔之後，回到偏好設定，按「測試圖片上傳」&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/0*zVjvGlhqINfbk757.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/0*J3wT0Gdta9xwlTpd.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>跳出這個就代表成功上傳了！&lt;/p>
&lt;h2 id="小結">小結&lt;/h2>
&lt;p>這樣子只要在typora裡面貼上圖片，typora就會自動幫我們上傳圖片到圖片空間了。&lt;/p></description></item><item><title>從入職到離職，事務所的日子之《該進事務所嗎？》</title><link>https://hoxtonhsu.com/p/%E5%BE%9E%E5%85%A5%E8%81%B7%E5%88%B0%E9%9B%A2%E8%81%B7%E4%BA%8B%E5%8B%99%E6%89%80%E7%9A%84%E6%97%A5%E5%AD%90%E4%B9%8B%E8%A9%B2%E9%80%B2%E4%BA%8B%E5%8B%99%E6%89%80%E5%97%8E/</link><pubDate>Sat, 08 Oct 2022 00:36:13 +0800</pubDate><guid>https://hoxtonhsu.com/p/%E5%BE%9E%E5%85%A5%E8%81%B7%E5%88%B0%E9%9B%A2%E8%81%B7%E4%BA%8B%E5%8B%99%E6%89%80%E7%9A%84%E6%97%A5%E5%AD%90%E4%B9%8B%E8%A9%B2%E9%80%B2%E4%BA%8B%E5%8B%99%E6%89%80%E5%97%8E/</guid><description>&lt;img src="https://i.imgur.com/aHMlhAm.png" alt="Featured image of post 從入職到離職，事務所的日子之《該進事務所嗎？》" />&lt;p>​ &lt;strong>到底要不要進事務所？&lt;/strong>&lt;/p>
&lt;p>我想一開始就給出解答&lt;/p>
&lt;p>&lt;strong>如果不知道做什麼就進事務所吧！&lt;/strong>&lt;/p>
&lt;p>​ 如果是會計系的學生，在大學期間一定有想過自己到底要不要進入所謂的四大（勤業、資誠、安侯、安永），我在大學的時候對於這個問題倒是沒太多想法，只覺得進入四大事務所好像很威風，出入信義區，西裝革履的樣子，名稱也是國際上有名公司，怎麼想都覺得很穩，能出什麼問題？&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/b0yPTz9.png"
loading="lazy"
alt="image-20221008012440851"
>&lt;/p>
&lt;p>當然實際進去之後我就後悔了，發現這樣的生活根本不是自己想要的，索性的待到一月，把年終獎金還有到職獎金，以及政府的青年就業補助的錢領一領之後，就趕緊跑回高雄準備轉換跑道，做什麼都行，但這輩子絕對不會在做會計了。&lt;/p>
&lt;p>但離職過後也快一年，轉換工作也算成功，但持續的一直有在Follow會計這個圈子，所以想說來分享一下自己的一些想法，希望可以幫助到一些會計系的學生。&lt;/p>
&lt;hr>
&lt;p>一份工作一定是有好有壞的，事務所的工作則是將好與壞的那非常極端，這篇文章先來講「我」覺得事務所好的地方，下一篇文章再來講我為什麼離職。&lt;/p>
&lt;ol>
&lt;li>
&lt;h2 id="事務所的名聲">事務所的名聲&lt;/h2>
&lt;/li>
&lt;/ol>
&lt;p>事務所的名聲是我在離職之後最直接的感受，在自我介紹或是之後轉換跑道的面試，第一個被問的問題都是&lt;/p>
&lt;p>「你之前在資誠耶，很好的一間公司？怎麼會想要離職轉換跑道呢？」&lt;/p>
&lt;p>誠然四大在會計系學生的眼中已經是臭到不能再臭的公司，但出了事務所之後，只要待的公司不是太鳥的那種，基本上四大的經歷即使不到亮眼，但也絕對不會是一個看不上眼的經歷。&lt;/p>
&lt;ol start="2">
&lt;li>
&lt;h2 id="事務所是一家很大的公司">事務所是一家很大的公司&lt;/h2>
&lt;/li>
&lt;/ol>
&lt;p>在離職之後第二個很深的感受是，四大確實是一間很大的公司，在信義區的精華地段裡有很多層樓的辦公室，有包場的尾牙，會請藝人來唱歌，還有很完善的公司分工制度。我現在的公司就是一家在中山區普通商辦大樓裡面的辦公室，員工數大概也就十來人左右，也沒什麼完整的分工制度，有時候感覺一個人要身兼多職。&lt;/p>
&lt;p>而且我相信很多人離職之後，第二家公司的規模都不會再有四大那樣的規模，所以我覺得可以來四大體驗看看一家員工數破千的公司感覺是怎麼樣的。&lt;/p>
&lt;ol start="3">
&lt;li>
&lt;h2 id="事務所的工作強度">事務所的工作強度&lt;/h2>
&lt;/li>
&lt;/ol>
&lt;p>這點其實很諷刺，我之前在的組別是最近很夯的資誠A11 AKA 獨立所疊字組。說實話當時也沒覺得什麼地不地獄的，當你看同事在加班，組長在加班，經理們也在加班，其實當下也會覺得沒什麼，反正大家就一起加班，有時候晚上六點多，同事們相約訂餐的畫面總讓我想起國小在讀安親班的感覺。&lt;/p>
&lt;p>我在事務所的上班的大概就是9月入職然後到1月初離職，唯一接觸到的忙季大概就是十月，那時候星期一到五大概都是9點10點那邊回家，差不多有三天是待到11點才走（11點就可以走是因為資誠是在國貿大樓，國貿大樓11點就要關門，所以才有機會回家Q_Q），星期六大概是10點11點進所內，然後可能晚上8、9點離開，至於星期天我是沒進過所內，快樂的小確幸～&lt;/p>
&lt;p>在這樣中強度的加班強度下，我離職之後，不管待哪家公司我都覺得好爽，這可能也是事務所很諷刺的一個好處吧，畢竟從四大出來的，每個都是見過地獄的人，到哪裡都像是天堂一樣。&lt;/p>
&lt;hr>
&lt;p>哈哈，可能真的太久沒寫文章了，感覺原本腦中有很多想法，突然要寫就寫不出什麼東西來，自己寫完再回頭來看自己列的這幾點，發現真的是蠻無聊的幾個點，也不構成什麼吸引力，但要問我後悔進入事務所嗎？其實還蠻慶幸我有進入事務所的，因為世界上真的找不太到比那更爛的工作了，我也是在那段期間真的很想離職，有這樣的念頭之後才知道自己到底想做的是什麼，這可能就是所謂的「在極大的痛苦中感覺精神甦醒吧」，總之我想說的是，不管你是台政北或是私科會計，不知道做啥就是選事務所，進去之後就會知道原來有這麼爛的工作，就會強迫自己去想自己到底要做什麼，如果做得下去那也很好，事務所的履歷還是有一點點用的（但我都建議最好是待到組長會比較有用一點）。&lt;/p>
&lt;p>接下來下一篇文章會聊聊我為什麼從事務所離職，應該蠻多可以談的～&lt;/p></description></item><item><title>基礎AOP介紹-Filter Interceptor AspectJ</title><link>https://hoxtonhsu.com/p/%E5%9F%BA%E7%A4%8Eaop%E4%BB%8B%E7%B4%B9-filter-interceptor-aspectj/</link><pubDate>Fri, 07 Oct 2022 22:41:52 +0800</pubDate><guid>https://hoxtonhsu.com/p/%E5%9F%BA%E7%A4%8Eaop%E4%BB%8B%E7%B4%B9-filter-interceptor-aspectj/</guid><description>&lt;img src="https://i.imgur.com/B7GhSw1.png" alt="Featured image of post 基礎AOP介紹-Filter Interceptor AspectJ" />&lt;h1 id="目錄">目錄&lt;/h1>
&lt;ul>
&lt;li>&lt;a class="link" href="#Filter%28%e9%81%8e%e6%bf%be%e5%99%a8%29Interceptor%28%e6%94%94%e6%88%aa%e5%99%a8%29AOP%28%e5%89%96%e9%9d%a2%e5%b0%8e%e5%90%91%e7%a8%8b%e5%bc%8f%e8%a8%ad%e8%a8%88%29%e4%b9%8b%e5%b7%ae%e7%95%b0" >Filter(過濾器)Interceptor(攔截器)AOP(剖面導向程式設計)之差異&lt;/a>
&lt;ul>
&lt;li>&lt;a class="link" href="#Filter" >Filter &lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#Interceptor" >Interceptor&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#AspectJ" >AspectJ&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="aspectj">AspectJ&lt;/h1>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">graph TD;
AOP ---&amp;gt; SpringAop &amp;amp; AspectJ
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="aop-概念">AOP (概念)&lt;/h2>
&lt;p>面向切面編程，利用AOP可以對業務邏輯的各個部分進行隔離，使得業務邏輯各部分之間的耦合度降低，提高程式的可重用性，同時提高開發的效率&lt;/p>
&lt;p>不修改原始碼，從而擴充新功能&lt;/p>
&lt;h1 id="filter過濾器interceptor攔截器aspectjaop之差異">Filter(過濾器)Interceptor(攔截器)AspectJ(AOP)之差異&lt;/h1>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">flowchart LR;
1((使用者))--發送請求
--&amp;gt;Filter\n+統一設置編碼\n+過濾敏感字\n+登入驗證\n+URL級別的訪問權限控制\n+數據壓縮
--&amp;gt;dispatcher
--&amp;gt;Interceptor\n+權限驗證\n+登入驗證\n+性能檢測
--&amp;gt;AOP\n+日誌紀錄
--&amp;gt;2(Controller)
-1[粗糙]--能處理request的精細程度----&amp;gt;-2[細緻]
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/6rnsYg4.png"
loading="lazy"
alt="image-20220913095403747"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/vO1K7ew.png"
loading="lazy"
alt="image-20220912164304013"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/jQ4pF5v.png"
loading="lazy"
alt="image-20220913100841950"
>&lt;/p>
&lt;h2 id="filter">Filter&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">
flowchart LR;
1[瀏覽器]---&amp;gt;2{過濾器}---&amp;gt;3[Web資源]
3[Web資源]--&amp;gt;2{過濾器}--&amp;gt;1[瀏覽器]
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在HttpServletRequest到達Servlet之前，過濾、處理一些資訊，本身依賴Sevlet容器，不能獲取SpringBean的一些資訊，它是&lt;code>javax.servlet.FilterChain&lt;/code>的項目，&lt;strong>不是Springboot&lt;/strong>&lt;/p>
&lt;p>可以做什麼&lt;/p>
&lt;ul>
&lt;li>修改Request, Response&lt;/li>
&lt;li>防止xss(Cross-Site-SCripting跨網站指令碼)攻擊&lt;/li>
&lt;li>包裝二進制流&lt;/li>
&lt;/ul>
&lt;h4 id="自定義filter">自定義Filter&lt;/h4>
&lt;ul>
&lt;li>以註解方式製作Filter&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="cm">/**
&lt;/span>&lt;span class="cm">* 網路上教學蠻多都是implenments filter，但我建議extend GenericFilterBean
&lt;/span>&lt;span class="cm">* 會比較方便一點，省去implenments init(), distory()的麻煩
&lt;/span>&lt;span class="cm">*/&lt;/span>
&lt;span class="nd">@Slf4j&lt;/span>
&lt;span class="nd">@Component&lt;/span>
&lt;span class="nd">@WebFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">filterName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;f1&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">urlPatterns&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="s">&amp;#34;*.html&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="s">&amp;#34;*.jsp&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="s">&amp;#34;/&amp;#34;&lt;/span>&lt;span class="o">})&lt;/span> &lt;span class="c1">//filterName就只是一個名稱可以，隨意就好，urlPattern是用來指定哪些url要經過這個過濾器
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">HiFilter&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">GenericFilterBean&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">doFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ServletRequest&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ServletResponse&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">FilterChain&lt;/span> &lt;span class="n">chain&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">IOException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ServletException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">info&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Hello Hoxton&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">chain&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">doFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">response&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//代表這個Filter已經作用完畢，可以把request,response交給下一個Filter了
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/R9tNv8y.png"
loading="lazy"
alt="image-20220912151657403"
>&lt;/p>
&lt;p>結果如上&lt;/p>
&lt;ul>
&lt;li>以Java配置方式製作Filter&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Slf4j&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm">* 網路上教學蠻多都是implenments filter，但我建議extend GenericFilterBean
&lt;/span>&lt;span class="cm">* 會比較方便一點，省去implenments init(), distory()的麻煩
&lt;/span>&lt;span class="cm">*/&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">HiFilter&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">GenericFilterBean&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">doFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ServletRequest&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ServletResponse&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">FilterChain&lt;/span> &lt;span class="n">chain&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">IOException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ServletException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">info&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Hello Hoxton&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">chain&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">doFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">response&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//代表這個Filter已經作用完畢，可以把request,response交給下一個Filter了
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">FilterConfig&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">FilterRegistrationBean&lt;/span> &lt;span class="nf">heFilterRegistration&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">FilterRegistrationBean&lt;/span> &lt;span class="n">registration&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">FilterRegistrationBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">HiFilter&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">registration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addUrlPatterns&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/*&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//配置相關的路徑
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">registration&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>一些其他的config設置，僅供參考，與上面釋例無關&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">FilterConfig&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//test
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">FilterRegistrationBean&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Filter&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">logProcessTimeFilter&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">FilterRegistrationBean&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Filter&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">bean&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">FilterRegistrationBean&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="n">bean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">LogProcessTimeFilter&lt;/span>&lt;span class="o">());&lt;/span> &lt;span class="c1">//設定想要使用哪一個Filter
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">bean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addUrlPatterns&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/*&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//設置哪些url會觸發Filter，設置成/* 就代表全部都會吃到，/user/*就代表/user開頭的都會吃到
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">bean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;logProcessTimeFilter&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//設置要叫什麼名字
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">bean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setOrder&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//設定過濾器的執行順序
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">bean&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">FilterRegistrationBean&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Filter&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">logApiFilter&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">FilterRegistrationBean&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Filter&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">bean&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">FilterRegistrationBean&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="n">bean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">LogApiFilter&lt;/span>&lt;span class="o">());&lt;/span> &lt;span class="c1">//設定想要使用哪一個Filter
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">bean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addUrlPatterns&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/*&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//設置哪些url會觸發Filter，設置成/* 就代表全部都會吃到，/user/*就代表/user開頭的都會吃到
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">bean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;logApiFilter&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//設置要叫什麼名字
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">bean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setOrder&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//設定過濾器的執行順序
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">bean&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">FilterRegistrationBean&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Filter&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">printResponseRequestFilter&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">FilterRegistrationBean&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Filter&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">bean&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">FilterRegistrationBean&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="n">bean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">PrintResponseRequest&lt;/span>&lt;span class="o">());&lt;/span> &lt;span class="c1">//設定想要使用哪一個Filter
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">bean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addUrlPatterns&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/*&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//設置哪些url會觸發Filter，設置成/* 就代表全部都會吃到，/user/*就代表/user開頭的都會吃到
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">bean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;printResponseRequestFilter&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//設置要叫什麼名字
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">bean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setOrder&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">2&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//設定過濾器的執行順序
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">bean&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/blockquote>
&lt;p>SpringBoot本身也提供了許多不同的Filter供使用，參考如下&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/nKZ6Hy1.png"
loading="lazy"
alt="image-20220912153023872"
>&lt;/p>
&lt;p>常用的有以下幾個&lt;/p>
&lt;ul>
&lt;li>CharacterEncodingFilter(用於處理編碼問題)&lt;/li>
&lt;li>HiddenHttpMethodFilter(隱藏Http函數)&lt;/li>
&lt;li>HttpPutFormContentFilter(form表單處理)&lt;/li>
&lt;li>RequesrtContextFilter(請求上下文)&lt;/li>
&lt;/ul>
&lt;p>其他資訊可以詳閱&lt;a class="link" href="https://blog.csdn.net/qyp1314/article/details/42023725" target="_blank" rel="noopener"
>Spring MVC中各个filter的用法&lt;/a>&lt;/p>
&lt;p>其中以&lt;strong>OncePerRequestFilter&lt;/strong>最常被使用，這個Filter會去&lt;strong>過濾每一個Request請求，且不會重複執行&lt;/strong>，且這個Filter有一個doFilterInternal()的方法，供我們撰寫Filter邏輯&lt;code>因doFilter()的方法已在OncePerRequestFilter裡面實現了&lt;/code>，可以用來做Jwtoken的登入驗證，程式如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Component&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">JwtAuthenticationFilter&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">OncePerRequestFilter&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">JwtService&lt;/span> &lt;span class="n">jwtService&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">UserDetailsService&lt;/span> &lt;span class="n">userDetailsService&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">//注入JwtService UserDetailsService，分別用來解析Token與查詢使用者詳情
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">doFilterInternal&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpServletRequest&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">HttpServletResponse&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">FilterChain&lt;/span> &lt;span class="n">filterChain&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">ServletException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">IOException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">authHeader&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getHeader&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpHeaders&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">AUTHORIZATION&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">authHeader&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">accessToken&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">authHeader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">replace&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Bearer &amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//從請求標頭中取得Authorization欄位中的值
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">claims&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">jwtService&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">parseToken&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">accessToken&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//擷取出後面的JWT字串，接著解析它
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">username&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">claims&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;username&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//從claims物件中取得username欄位的值
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">UserDetails&lt;/span> &lt;span class="n">userDetails&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">userDetailsService&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">loadUserByUsername&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//並透過userDetailService查詢使用者詳情。這也代表JWT的內容(payload)必須包含username這個欄位
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//在filter中查詢使用者的目的，是為了將該次請求所代表的驗證後資料(Authentication)帶進security中的Context。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//Context是一種較抽象的概念，可以想像成該次請求的身分狀態
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="n">Authentication&lt;/span> &lt;span class="n">authentication&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">UsernamePasswordAuthenticationToken&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">userDetails&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">userDetails&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getAuthorities&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="c1">//為了將這個請求的使用者身分告訴伺服器，我們建立UsernamePasswordAuthenticationToken的物件，其中第三個參數放GrantedAuthority的List， 作為API的授權檢查
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//第一個參數(principal)傳入使用者詳請(UserDetails)。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 而第二個參數是credential，通常是密碼，但不傳入也無訪
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//經由傳入principal，我們得以在業務邏輯中從Context輕易獲取使用者身分的資料
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">SecurityContextHolder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getContext&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">setAuthentication&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">authentication&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">filterChain&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">doFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>配置完後再將這個Filter加入Security的過濾鍊&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@EnableWebSecurity&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">SecurityConfig&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">WebSecurityConfigurerAdapter&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">UserDetailsService&lt;/span> &lt;span class="n">userDetailsService&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">JwtAuthenticationFilter&lt;/span> &lt;span class="n">jwtAuthenticationFilter&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 協助帳號密碼認證的東西
&lt;/span>&lt;span class="cm"> * @return
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">AuthenticationManager&lt;/span> &lt;span class="nf">authenticationManagerBean&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kd">super&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">authenticationManagerBean&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//加入Security的過濾鍊
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">protected&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">configure&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpSecurity&lt;/span> &lt;span class="n">http&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">http&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">authorizeHttpRequests&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">antMatchers&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpMethod&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">GET&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;/users/**&amp;#34;&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">hasAuthority&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MemberAuthority&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">SYSTEM_ADMIN&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">name&lt;/span>&lt;span class="o">())&lt;/span>
&lt;span class="c1">// .antMatchers(HttpMethod.GET,&amp;#34;/h2/**&amp;#34;).hasAuthority(MemberAuthority.SYSTEM_ADMIN.name())
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">antMatchers&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpMethod&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">GET&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="s">&amp;#34;/login/**&amp;#34;&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">permitAll&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="c1">// .antMatchers(HttpMethod.POST,&amp;#34;login&amp;#34;).permitAll()
&lt;/span>&lt;span class="c1">// .antMatchers(HttpMethod.POST, &amp;#34;/users&amp;#34;).permitAll()
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">anyRequest&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">permitAll&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">and&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">addFilterBefore&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">jwtAuthenticationFilter&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">UsernamePasswordAuthenticationFilter&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="c1">//於UsernamePasswordAuthenticationFilter進行認證
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">sessionManagement&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">sessionCreationPolicy&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SessionCreationPolicy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">STATELESS&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">and&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">csrf&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">disable&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">formLogin&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">http&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">headers&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">frameOptions&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">disable&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">//讓spring Security可以和h2建立連線
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * @param auth 配置全局驗證資訊，如Authentication Provider,UserDetailService等等資訊，
&lt;/span>&lt;span class="cm"> * authenticationManager會接收到UsernamePasswordAuthenticationToken傳入的資料後
&lt;/span>&lt;span class="cm"> * 調用SecurityConfig中所配置的userDetailsService,passwordEncoder來協助驗證
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * @throws Exception
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">configure&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">AuthenticationManagerBuilder&lt;/span> &lt;span class="n">auth&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">auth&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">userDetailsService&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">userDetailsService&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">passwordEncoder&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">BCryptPasswordEncoder&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>一些Code的示範&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">LogProcessTimeFilter&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">OncePerRequestFilter&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * @param request 請求
&lt;/span>&lt;span class="cm"> * @param response 回應
&lt;/span>&lt;span class="cm"> * @param filterChain 過濾鏈 會將現有的filter給串聯起來，當請求進入後端，需要依序經過它們才會達到Controller，相對的，當回應離開Controller，則是按照相反的方向經過那些Filter
&lt;/span>&lt;span class="cm"> * @throws ServletException
&lt;/span>&lt;span class="cm"> * @throws IOException
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">doFilterInternal&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpServletRequest&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">HttpServletResponse&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">FilterChain&lt;/span> &lt;span class="n">filterChain&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">ServletException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">IOException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">long&lt;/span> &lt;span class="n">startTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentTimeMillis&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">filterChain&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">doFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//doFilter:相當於將請求送至Controller。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">endTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentTimeMillis&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="kt">long&lt;/span> &lt;span class="n">processTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">endTime&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">startTime&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;processTime = &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">processTime&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Controller收到的請求主體(RequestBody)和回應主體(ResponseBody)
&lt;/span>&lt;span class="cm"> * 分別由HttpServletRequest與HttpServletResponse的InputStream、OutputStream轉化而來，
&lt;/span>&lt;span class="cm"> * 但資料流只能讀取一次，如果在Filter層就被讀掉，可能會導致後面都收不到資料
&lt;/span>&lt;span class="cm"> * 為了保留主體中的資料，我們將請求主體與回應主體包裝成ContentCachingResponseWrapper ContentCachingRequestWrapper
&lt;/span>&lt;span class="cm"> * 再如同往常傳入FilterChain
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * 這兩個Wrapper的特色是會在內部備份一個ByteArrayOutputStream，我們只要呼叫這兩個Wrapper的
&lt;/span>&lt;span class="cm"> * getContentAsByteArray就可以無限制地取得主體內容
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">PrintResponseRequest&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">OncePerRequestFilter&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">doFilterInternal&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpServletRequest&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">HttpServletResponse&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">FilterChain&lt;/span> &lt;span class="n">filterChain&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">ServletException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">IOException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ContentCachingRequestWrapper&lt;/span> &lt;span class="n">requestWrapper&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ContentCachingRequestWrapper&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">ContentCachingResponseWrapper&lt;/span> &lt;span class="n">responseWrapper&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ContentCachingResponseWrapper&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">response&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">filterChain&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">doFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">requestWrapper&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">responseWrapper&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// logApi(request, response);
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">logBody&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">requestWrapper&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">responseWrapper&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">responseWrapper&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">copyBodyToResponse&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">logApi&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpServletRequest&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">HttpServletResponse&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">ServletException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">IOException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">httpStatus&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getStatus&lt;/span>&lt;span class="o">();&lt;/span> &lt;span class="c1">//200,403,404之類的
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">httpMethod&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getMethod&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">uri&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getRequestURI&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">params&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getQueryString&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">params&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">uri&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="s">&amp;#34;?&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">params&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">join&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">valueOf&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">httpStatus&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="n">httpMethod&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">uri&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">logBody&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ContentCachingRequestWrapper&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ContentCachingResponseWrapper&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">requestBody&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getContent&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getContentAsByteArray&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Request: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">requestBody&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">responseBody&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getContent&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getContentAsByteArray&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Response: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">responseBody&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * @param content
&lt;/span>&lt;span class="cm"> * @return 返回JSON字串
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">getContent&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">byte&lt;/span> &lt;span class="o">[]&lt;/span> &lt;span class="n">content&lt;/span>&lt;span class="o">){&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">body&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">content&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">body&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">replaceAll&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;[\n\t]&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//去除換行\n與定位符號\t
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="interceptor">Interceptor&lt;/h2>
&lt;p>本身是AOP的一種應用，其實攔截器跟過濾器是可以互相替換的，功能其實差不多，只是&lt;strong>攔截器可以在請求到達Controller或是回應回傳出Contrller時進行攔截&lt;/strong>，攔截成功時可以實做一些自定義的業務邏輯進行修改，且Interceptor是Springboot下的一個功能&lt;code>org.springframework.web.servlet.HandlerInterceptor&lt;/code>&lt;/p>
&lt;p>可以用來&lt;/p>
&lt;ul>
&lt;li>性能監控：紀錄請求的處理時間，比如說請求處理太久（超過500毫秒）&lt;/li>
&lt;li>登入檢測&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/1qACg6a.png"
loading="lazy"
alt="image-20220912164539364"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">graph LR;
request--&amp;gt;id1
id1--&amp;gt;id2--&amp;gt;id4--&amp;gt;id3--&amp;gt;id6--&amp;gt;id5
subgraph 攔截器1
direction TB
id1[&amp;#34;preHandle()&amp;#34;]
id3[&amp;#34;postHandler()&amp;#34;]
id5[&amp;#34;afterCompletion()&amp;#34;]
end
subgraph 攔截器2
direction TB
id2[&amp;#34;preHandle()&amp;#34;]
id4[&amp;#34;postHandler()&amp;#34;]
id6[&amp;#34;afterCompletion()&amp;#34;]
end
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>要實現interceptor有兩種方式&lt;/p>
&lt;ol>
&lt;li>實作HandlerInterceptor&lt;/li>
&lt;li>繼承HandlerInterceptorAdapter&lt;/li>
&lt;/ol>
&lt;p>釋例&lt;/p>
&lt;ul>
&lt;li>自定義攔截器&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">LogInterceptor&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">HandlerInterceptorAdapter&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">preHandle&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpServletRequest&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">HttpServletResponse&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="n">handler&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">long&lt;/span> &lt;span class="n">startTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentTimeMillis&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;\n-------- LogInterception.preHandle --- &amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Request URL: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getRequestURL&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Start Time: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentTimeMillis&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setAttribute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;startTime&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">startTime&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">postHandle&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpServletRequest&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">HttpServletResponse&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="n">handler&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ModelAndView&lt;/span> &lt;span class="n">modelAndView&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;\n-------- LogInterception.postHandle --- &amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Request URL: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getRequestURL&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">afterCompletion&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpServletRequest&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">HttpServletResponse&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="n">handler&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;\n-------- LogInterception.afterCompletion --- &amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kt">long&lt;/span> &lt;span class="n">startTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Long&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getAttribute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;startTime&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kt">long&lt;/span> &lt;span class="n">endTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentTimeMillis&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Request URL: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getRequestURL&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;End Time: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">endTime&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Time Taken: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">endTime&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">startTime&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>註冊攔截器&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">WebConfig&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">WebMvcConfigurer&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">addInterceptors&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">InterceptorRegistry&lt;/span> &lt;span class="n">registry&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">registry&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addInterceptor&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">LogInterceptor&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">registry&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addInterceptor&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">OldLoginInterceptor&lt;/span>&lt;span class="o">()).&lt;/span>&lt;span class="na">addPathPatterns&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/admin/oldLogin&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">registry&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addInterceptor&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">AdminInterceptor&lt;/span>&lt;span class="o">()).&lt;/span>&lt;span class="na">addPathPatterns&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/admin/*&amp;#34;&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">excludePathPatterns&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/admin/oldLogin&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="aspectj-1">AspectJ&lt;/h2>
&lt;p>屬於一種AOP框架&lt;/p>
&lt;ul>
&lt;li>動態代理(Spring5本身已經封裝了)
&lt;ul>
&lt;li>有兩種情況的動態代理
&lt;ul>
&lt;li>
&lt;p>有介面(JDK動態代理)&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">interface&lt;/span> &lt;span class="nc">UserDao&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">login&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">class&lt;/span> &lt;span class="nc">UserDaoImpl&lt;/span> &lt;span class="kd">implements&lt;/span>　&lt;span class="n">UserDao&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">login&lt;/span>&lt;span class="o">(){&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>創建UserDao介面實現類的代理對象，代理對象會有被代理對象的所有方法，並且增強&lt;/p>
&lt;/li>
&lt;li>
&lt;p>無介面(CGLIB動態代理)&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">class&lt;/span> &lt;span class="nc">User&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">add&lt;/span> &lt;span class="o">(){&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">class&lt;/span> &lt;span class="nc">Person&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">User&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="o">(){&lt;/span>
&lt;span class="kd">super&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="aopjdk動態代理">AOP(JDK動態代理)&lt;/h3>
&lt;p>使用JDK的動態代理，要使用Proxy類裡面的方法來創建出代理對象 &lt;code>newProxyInstance(類加載器,增強方法所在的類，這個類實現的介面,實現這個接口(InvocationHandler)&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/Hoxton019030/image/main/data/202209061536485.png"
loading="lazy"
>&lt;/p>
&lt;p>編寫JDK動態代碼&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">UserDao&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">add&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">update&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">UserDaoImpl&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">UserDao&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;add方法執行了&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">update&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">package&lt;/span> &lt;span class="nn">com.example.aop&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.lang.reflect.InvocationHandler&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.lang.reflect.Method&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.lang.reflect.Proxy&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.util.Arrays&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * @author Hoxton
&lt;/span>&lt;span class="cm"> * @version 1.1.0
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">JDKProxy&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Class&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">interfaces&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="n">UserDao&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">};&lt;/span>
&lt;span class="n">UserDaoImpl&lt;/span> &lt;span class="n">userDao&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">UserDaoImpl&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">UserDao&lt;/span> &lt;span class="n">dao&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">UserDao&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">Proxy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newProxyInstance&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">JDKProxy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getClassLoader&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">interfaces&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">UserDaoProxy&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">userDao&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="c1">//此dao已經不是原本的dao，而是新的代理類dao了
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">dao&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">2&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;result = &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//創建代理對象的代碼
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">UserDaoProxy&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">InvocationHandler&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//1. 把創建的是誰的代理對象，把誰傳遞進來
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 有參建構子
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">UserDaoProxy&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Object&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">obj&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//增強的邏輯
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="nf">invoke&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Object&lt;/span> &lt;span class="n">proxy&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Method&lt;/span> &lt;span class="n">method&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">methodArgs&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Throwable&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//方法之前
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;方法之前執行...&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">method&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;傳遞的參數...&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">Arrays&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">methodArgs&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="c1">//被增強的方法執行
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="n">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">method&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">invoke&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">methodArgs&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//方法之後
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;方法之後執行...&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="aop專業術語">AOP專業術語&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>連接點&lt;/p>
&lt;p>一個類裡面中，能被增強的方法就叫連接點，下面這個類就有四個連接點&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/Hoxton019030/image/main/data/202209121200728.png"
loading="lazy"
alt="image-20220912120043665"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">class&lt;/span> &lt;span class="nc">User&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="n">add&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">update&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">select&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">delete&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>切入點&lt;/p>
&lt;p>實際被增強的方法，就叫切入點&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通知(增強)&lt;/p>
&lt;ol>
&lt;li>
&lt;p>實際增強的邏輯部分稱為通知(增強)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通知有多種類型&lt;/p>
&lt;ol>
&lt;li>
&lt;p>前置通知&lt;/p>
&lt;p>在切入點前執行&lt;/p>
&lt;/li>
&lt;li>
&lt;p>後置通知&lt;/p>
&lt;p>在切入點後執行&lt;/p>
&lt;/li>
&lt;li>
&lt;p>環繞通知&lt;/p>
&lt;p>在切入點前後執行&lt;/p>
&lt;/li>
&lt;li>
&lt;p>異常通知&lt;/p>
&lt;p>出現異常時執行&lt;/p>
&lt;/li>
&lt;li>
&lt;p>最終通知&lt;/p>
&lt;p>執行到try&amp;hellip;catch的final時執行&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>切面&lt;/p>
&lt;p>是一個動作&lt;/p>
&lt;ol>
&lt;li>把通知應用到切入點的過程，就叫切面&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h3 id="aop準備">AOP(準備)&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>Spring 框架一般都是基於AspectJ實現的AOP操作&lt;/p>
&lt;ol>
&lt;li>
&lt;p>什麼是AspectJ&lt;/p>
&lt;ul>
&lt;li>AspectJ不是Spring的組成部分，是一個獨立的AOP框架， 一般把AspectJ和Spring框架一起使用，進行AOP操作&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>基於Aspect實現AOP操作&lt;/p>
&lt;ol>
&lt;li>xml配置文件實現&lt;/li>
&lt;li>基於註解方法實現(主要使用)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>再專案裡面引入AOP依賴&lt;/p>
&lt;/li>
&lt;li>
&lt;p>切入點表達式&lt;/p>
&lt;ol>
&lt;li>
&lt;p>切入點表達式的作用: 知道對哪個類的哪個方法進行增強&lt;/p>
&lt;/li>
&lt;li>
&lt;p>語法結構:&lt;/p>
&lt;p>execution( [權限修飾符] [返回類型] [類全路徑] [方法名稱] ( [參數列表] ) )&lt;/p>
&lt;ul>
&lt;li>
&lt;p>權限修飾符: public, private, *(代表不論是public, private 都選)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>返回類型: String, int&lt;/p>
&lt;/li>
&lt;li>
&lt;p>類全路徑: com.hoxton&amp;hellip;&amp;hellip;.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>方法名稱: 就方法名稱&lt;/p>
&lt;/li>
&lt;li>
&lt;p>參數列表: 有哪些參數&lt;/p>
&lt;p>舉例&lt;/p>
&lt;ol>
&lt;li>
&lt;p>對com.hoxton.dao.BookDao類裡面的add方法進行增強&lt;/p>
&lt;ul>
&lt;li>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">execution&lt;/span>&lt;span class="o">(*&lt;/span> &lt;span class="n">com&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hoxton&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">dao&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">BookDao&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(..)&lt;/span> &lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>對com.hoxton.dao.BookDao類的所有方法進行增強&lt;/p>
&lt;ul>
&lt;li>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">execution&lt;/span>&lt;span class="o">(*&lt;/span> &lt;span class="n">com&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hoxton&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">dao&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">BookDao&lt;/span>&lt;span class="o">.*(..))&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>對com.hoxton.dao包裡的所有類，類裡面的髓有方法進行增強&lt;/p>
&lt;ul>
&lt;li>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">excution&lt;/span>&lt;span class="o">(*&lt;/span> &lt;span class="n">com&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hoxton&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">dao&lt;/span>&lt;span class="o">.*.*(..))&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;p>within([package名].* )或( [package名]..*)&lt;/p>
&lt;p>舉例&lt;/p>
&lt;ol>
&lt;li>&lt;/li>
&lt;li>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h3 id="aop操作aspect-j--註解">AOP操作(Aspect J 註解)&lt;/h3>
&lt;ol>
&lt;li>創建類，在類裡面定義方法&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">User&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="o">(){&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;add&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>
&lt;p>創建增強類(編寫增強邏輯)&lt;/p>
&lt;ol>
&lt;li>
&lt;p>在增強類的裡面，創建方法，讓不同方法代表不同通知類型&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">UserProxy&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">before&lt;/span>&lt;span class="o">(){&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;before&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>進行通知的配置&lt;/p>
&lt;ol>
&lt;li>在Spring&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h1 id="log4j-2">Log4j 2&lt;/h1>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">flowchart TD;
8[&amp;#34;ALL(全輸出不留情)&amp;#34;]---&amp;gt;7[&amp;#34;Trace(更細的除錯資訊，通常用來追蹤城市流程的日誌)&amp;#34;]---&amp;gt;6[&amp;#34;DEBUG(除錯資訊的日志)推薦★&amp;#34;]---&amp;gt;5[&amp;#34;INFO(一般資訊的日志)推薦★&amp;#34;]---&amp;gt;4[&amp;#34;WARN(可能導致錯誤的日志)&amp;#34;]---&amp;gt;3[&amp;#34;ERROR(造成應用錯誤停止的日志)&amp;#34;]---&amp;gt;2[&amp;#34;FETAL(造成應用程式停止的日志)&amp;#34;]---&amp;gt;1[&amp;#34;OFF(不輸出任何日志)&amp;#34;]
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="參考">參考&lt;/h1>
&lt;p>&lt;a href="https://www.cnblogs.com/itlihao/p/14329905.html">https://www.cnblogs.com/itlihao/p/14329905.html&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://blog.csdn.net/fly910905/article/details/86537648">https://blog.csdn.net/fly910905/article/details/86537648&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/712557/" target="_blank" rel="noopener"
>SpringBoot攔截器(Interceptor)詳解&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.zendei.com/article/52571.html" target="_blank" rel="noopener"
>Spring Boot使用過濾器和攔截器分別實現REST介面簡易安全認證&lt;/a>&lt;/p>
&lt;blockquote>
&lt;/blockquote></description></item><item><title>死亡擱淺心得，前面無雷，後面有雷</title><link>https://hoxtonhsu.com/p/%E6%AD%BB%E4%BA%A1%E6%93%B1%E6%B7%BA%E5%BF%83%E5%BE%97%E5%89%8D%E9%9D%A2%E7%84%A1%E9%9B%B7%E5%BE%8C%E9%9D%A2%E6%9C%89%E9%9B%B7/</link><pubDate>Fri, 07 Oct 2022 02:44:36 +0800</pubDate><guid>https://hoxtonhsu.com/p/%E6%AD%BB%E4%BA%A1%E6%93%B1%E6%B7%BA%E5%BF%83%E5%BE%97%E5%89%8D%E9%9D%A2%E7%84%A1%E9%9B%B7%E5%BE%8C%E9%9D%A2%E6%9C%89%E9%9B%B7/</guid><description>&lt;img src="https://i.imgur.com/mg2syAL.jpg" alt="Featured image of post 死亡擱淺心得，前面無雷，後面有雷" />&lt;p>​ 如果你是好奇死亡擱淺這款遊戲到底好不好玩，擔心對不到電波，怕買了浪費錢的人可以聽看看我的想法&amp;ndash;「我覺得很難歸納出哪種類型的人會喜歡死亡擱淺」 我只能說，會比較推薦給至少能撥出個1、2小時玩遊戲的人才會比較適合玩。&lt;/p>
&lt;p>無雷心得：&lt;/p>
&lt;p>　　我本身不是小島秀夫的粉絲，他的作品我也只玩過幻痛而已，而且 我覺得幻痛超級無聊，遊戲評分鼓勵你不殺，所以你很多裝備是不能用 的，而且地圖設計也稱不上有趣，荒漠和草原的地形空蕩到很空虛，不太能理解 為什麼硬要做成開放地圖，A任務做完要到B任務就只能自己過去、或是叫直升機等等的。看完了儀式之人的影片後也沒有覺得躍躍欲試的感覺，玩了20個小時後真的撐不下去就 不玩了，所以我在買死亡擱淺前其實猶豫很久，因為我知道我可能會Get不到遊戲有趣的點? 後來還是抱持著是驢是馬遛看看的心情買了下去。&lt;/p>
&lt;p>　　純論遊戲心得，並且在不暴雷太多重要劇情的情形下，死亡擱淺最大的樂趣在於遊戲一開始剝奪你很多東西，初期會要求你背著大重量的貨物到有一段距離的地方，然後這路上可能有懸崖、陡坡之類的地形阻隔著你，所以初期會對於這些事情覺得很毛躁、等到遊戲中期，開始出現很多東西能輔助你送貨，能裝載更多重量的、加速的，會讓你覺得所有的一切不再那麼痛苦，而後期當你解鎖所有設施、道具之後，你會開始愛上送貨這件事情，我覺得這點蠻神奇的，因為在往常的遊戲裡面跑腿送貨是最無聊的環節，你會用快速旅行直接省略掉這個過程，但在死亡擱淺裡你會體認到，所有的一切都是自己努力而來的，是自己讓這件事情變得輕鬆，變得平易近人，就好比學習一項事物，從排斥到接受，再到學以致用，漸漸地愛上一件事情。&lt;/p>
&lt;p>​ 我記得有一個晚上我就上線，也沒推任何主線劇情，就很單純的從A點接單送到B點，再從B點接單送到C點，然後再從C點接單送到B點這樣往復巡還，聽起來很無聊，但我當時送完貨物跑出結算畫面，看到滿滿的SSS時，真的覺得送貨使我快樂。&lt;/p>
&lt;p>　　另一點我覺得有趣的是遊戲裡面的線上模式，會讓你的地圖裡出現其他玩家的建物，比如說休息站、涼亭之類的，或者是其他玩家的登山索、樓梯，這點不是死亡擱淺原創，但在這遊戲裡面卻是我最喜歡的一點，在爬山的時候爬著其他玩家的梯子，然後在山頂看到其他玩家撒尿的蘑菇叢、然後在拉著其他玩家的纜繩下山，雖然你無法看到那些玩家的身影，但它們在你的世界留下的足跡卻令他們的形象具體而鮮明，在你在河流底部發現散落的貨品、峽谷下方報廢的摩托車，宛若有一段故事被濃縮成一個小小的物品，而這個小小的物品又經由你的發現而解壓縮成一段送貨之旅，死亡擱淺大部分的遊戲時間都是獨自一人的，但這種設計讓這個世界不在那麼冰冷，而多了些許溫度。&lt;/p>
&lt;p>　　最後是這個遊戲的氛圍，死亡擱在某些地形出現的時候（比如說高山、平原、裂谷）會撥放一些很空靈感的歌，配合上游戲的畫面、眼前的景象，山姆苗小的身影形成強烈的對比，耳中響起的和聲與山姆亦步亦趨的步伐，行走在一望無際的大草原，所有的一切都是空的，但心中卻被滿滿的感動填滿著。&lt;/p>
&lt;p>　　死亡擱淺到底適合什麼樣的人，我覺得只有自己玩了才能知道，他就是一款這麼特別的遊戲，看起來很無聊，但玩起來卻比想像中的有趣。&lt;/p>
&lt;p>有雷心得：&lt;/p>
&lt;p>　　其實玩完之後，我原本是很期待劇情而對遊戲性無感，但玩完後我卻相反過來 ，因為我劇情看不太懂，但遊戲性卻是出乎我意料之外的好。遊戲到尾聲之前我是都看得懂的，大概就是我們要去救艾米莉，但有個叫希格斯的人百般阻饒，然後頑人藏著什麼秘密。但當艾米莉出來之後我就完全看不懂了，我只能理解到一個艾米莉在冥灘、另一個在總統府當總統，但不能理解為什麼她要希格斯又要山姆，也不能理解她是不是好人，因為從結尾畫面上看來，艾米莉是想要毀掉世界的，但當山姆放下槍後她卻又抱著山姆說了一段我不明所以的台詞：&lt;/p>
&lt;p>「我做過無數個夢，我不知道該相信哪一個，所以我才決定跟你和其他人分享我的夢境，但是為了讓點連成一條線，讓一切都弄清楚，你們需要看得更透徹。你們需要時間。時間對我沒有任何意義，我不是一條線，我是單獨存在的點&amp;hellip;(省略)&amp;hellip;你(山姆)找到了共通的線，把所有點串在一起，而且你用唯一可能的方式做到了，也就是努力活好每一天，謝謝你山姆。」 　　&lt;/p>
&lt;p>​ 這邊我看不懂的原因，是因為不能理解為什麼山姆努力活好每一天就能把所有點串成一條線，也不能理解為什麼山姆把所有的點連城線之後就可以進行大滅絕，我聽得出來翻譯的字幕和語音是對的上的，沒有亂翻，但就是不知道到底發生了什麼事情，後來上網看之後發現日文版的意思比較直觀，比如說有一段我也看不太懂，但日文版就比較清楚 (中文版)艾米莉：&lt;/p>
&lt;p>「我是滅絕體，讓我們的種族滅絕是我們的命運，但在那一刻你也成為這個命運的一部分，你變成了回歸者，DOOMS將我們的惡夢擴散到了全世界」 (日文版)艾米莉：「我是滅絕體，為了將我們的種族引往滅絕才誕生的，當時你也成為了我的一部分，你成為了回歸者，而共享我滅絕夢能力的DOOMS能力者也誕生了」&lt;/p>
&lt;p>　　所以我後面的劇情是破完之後再去找解析影片才知道到底如何，可能是我資質駑鈍，真的看不懂遊戲最後的劇情吧，要看人家解析才看的懂，如果有人要留言說是我自己理解力有問題，他都看得懂的話，那我想跟你說聲抱歉，我是低能兒，我不配玩這個遊戲，發這篇文章真的是很對不起PTT對不起我的爸爸媽媽，生了一個連遊戲劇情都看不懂的小孩。&lt;/p>
&lt;p>　　原本還想打更多的，但發現該講的都講完，最後一點雞蛋挑骨頭的大概就是地圖可以再大一點點之類的，很多人說撐過第三章就會好玩，但我是到爬雪山的時候才覺得好玩，因為雪山就開始能針對地形攻略，而且你攻略的越透徹，爬起來就越輕鬆，所以我當初在爬的時候就帶了一堆建材，瘋狂蓋纜車，建材一沒就立刻搭纜車回家拿，這樣把雪山道路牽起來，最後結尾的時候我就是一路從雪山搭車搭到基地，連對話都還沒跑完就到家了。&lt;/p>
&lt;p>　　結尾就是，如果死亡擱淺有出2，我會買，有朋友要我推薦遊戲，我也會推薦死亡擱淺給他們，畢竟這應該是市面上唯一一款用3A規模製作的獨立遊戲風格的大作了。&lt;/p></description></item><item><title>黑暗靈魂1心得</title><link>https://hoxtonhsu.com/p/%E9%BB%91%E6%9A%97%E9%9D%88%E9%AD%821%E5%BF%83%E5%BE%97/</link><pubDate>Thu, 06 Oct 2022 23:16:34 +0800</pubDate><guid>https://hoxtonhsu.com/p/%E9%BB%91%E6%9A%97%E9%9D%88%E9%AD%821%E5%BF%83%E5%BE%97/</guid><description>&lt;img src="https://i.imgur.com/jQx4JF5.png" alt="Featured image of post 黑暗靈魂1心得" />&lt;p>如果你沒有看過黑暗靈魂1代的任何影片，比如說boss介紹、地圖跑法之類的&lt;/p>
&lt;p>也沒有玩過魂3，那我會覺得黑暗靈魂1代很值得玩
但如果你已經看過很多實況主玩過黑暗靈魂，知道怎麼從傳火祭祀場走到灰燼湖
知道怎麼走到不死鎮底層&amp;hellip;諸如此類的事情，那我會建議你不要玩黑魂
因為黑魂1真正有趣的是地圖探索，如果你地圖都知道怎麼跑
那我不建議你玩魂1&lt;/p>
&lt;hr>
&lt;p>我先從抱怨的地方開始好了，我以下的抱怨都是針對黑暗靈魂1
大部分我抱怨的事情都在魂3有改善了&lt;/p>
&lt;p>1.打Boss的跑屍路程&lt;/p>
&lt;p>　　魂1裡面有些boss的跑屍路程我覺得是設計的不錯的，比如說守鐘的石像鬼、翁斯坦與?
摩等等，這種路程落在30秒內，路上的阻礙不會嚴重到殺死你的，我覺得是個合格的跑屍流程，這種長度可以在每次跑屍的路上，想看看上次犯的錯要如何修正、哪些招該怎麼閃之類的。但有些boss的跑屍流程我就覺得有點誇張了，比如說墓王尼特、烏薪王葛溫、
混沌的溫床這類型的，跑屍流程大於30秒，路上又不是說特別好跑，比如說初始火爐卡在橋上的黑騎士，或是溫床路上的楔型石惡魔、墓王尼特要先跑過一堆有的沒的的區域才能進霧門，使得我後期越玩越煩躁，前面剛開始打的時候都覺得還好，越到後面的王跑屍過程就越長。&lt;/p>
&lt;p>2.篝火的傳送點太少&lt;/p>
&lt;p>　　魂1的篝火每個篝火都能主動傳送，但不是每個篝火都能接受傳送，比如病村的底部下?
道的傳點就不能傳過去，只能選擇從蜘蛛女那邊過去，偏偏病村跑圖又不是件很有趣的
事情，會減弱我中途想要回去探索的慾望&lt;/p>
&lt;p>3.靈活度&lt;/p>
&lt;p>　　魂1的翻滾只能朝前後左右方向滾，所幸魂1大部分的boss都不太需要斜方移動，但操作
來就是卡卡的，而且負重要低於25%才能讓翻滾動畫像魂3那樣絲滑流暢，所以我幾乎都是裸體在玩的。&lt;/p>
&lt;p>　　至於魂1的優點，我想先老實說，因為我已經知道大家說黑魂1的地圖設計很神，所以在
的時候已經有主觀認知了，所以在玩的時候沒有真的很驚艷的感覺，不死鎮的電梯下來到祭祀場、病村接飛龍之谷接小隆德接祭祀場，這些我都覺得是很棒的設計，但沒有那種大腦震撼的感覺。當初我在玩空洞騎士的時候，還不知道空洞騎士的地圖探索也做得很強，當我偶然間從心血來潮，不選擇搭車，而是在繼續往右走，走到王國邊界時，真的覺得這遊戲的地圖設計真的太強了，所有的一切都環環相扣。但在魂1裡面我沒有感受到這種
感覺過，唯一一個比較接近的應該就是灰燼湖，我很後悔我是從攻略影片上面得知這個地點，我想如果我是自己偶然間走進樹洞，偶然間撞進幻影牆，順著路一路走，最後進入
灰燼湖，踏上古龍之道的話，我想我對魂1的地圖評價應該會更高，但真的很可惜，我透過Youtube、Twitch等等渠道，已經大略的知道魂1的地圖，所以我對於地圖的感受都已經是二手的，就像張愛玲說的「我們對於生活的體驗往往是第二輪的」，自然而然也沒有那麼感動了。&lt;/p>
&lt;p>　　但魂1還是有些地點是我覺得很有趣的，比如說賽恩古城、地下墓地。古城被譽為賽恩
快樂城、極限體能王，裡面的道路錯綜複雜、又有許多陷阱、埋伏、但實際在跑圖的時候，能感受到這個古城非常用心，怪物的配置、陷阱的位置都有給玩家對應的空間。地下墓地則是讓我體驗了一次神鬼傳奇的感覺，身後有無數隻骷髏士兵永無止盡的追著自己，而自己就要在這種情況下找到篝火，在這一區域每次找到篝火都會讓我有種鬆了口氣的感覺。&lt;/p>
&lt;hr>
&lt;p>文章差不多就打到這邊了，就像我一開始說的，如果你沒玩過魂3、也不知道魂1的地圖長啥樣，想體驗看看什麼叫地圖設計，那魂1可以嘗試看看，但如果你玩過魂3、或是知道魂1?
那我就覺得魂1不太適合玩了，畢竟也是十年前的作品有些地方都顯得有點過時，建議看看影片、看看實況補完就好，以我自己實際下去玩的感受，我覺得痛苦太多，收穫太少，有趣的點都因為預先知情而被淡化、無趣的點則因為玩過魂3而被無限放大，以上這些都是?
個人意見，如果版上有黑暗靈魂一代粉絲，我就在這邊說聲抱歉了。&lt;/p></description></item><item><title>Java內的排程器介紹</title><link>https://hoxtonhsu.com/p/java%E5%85%A7%E7%9A%84%E6%8E%92%E7%A8%8B%E5%99%A8%E4%BB%8B%E7%B4%B9/</link><pubDate>Thu, 06 Oct 2022 23:14:21 +0800</pubDate><guid>https://hoxtonhsu.com/p/java%E5%85%A7%E7%9A%84%E6%8E%92%E7%A8%8B%E5%99%A8%E4%BB%8B%E7%B4%B9/</guid><description>&lt;img src="https://i.imgur.com/9or5BzU.png" alt="Featured image of post Java內的排程器介紹" />&lt;h1 id="springboot-scheduling">SpringBoot-Scheduling&lt;/h1>
&lt;p>用來做定期任務的東西，有兩種&lt;/p>
&lt;ul>
&lt;li>Spring schedule：只適合處理簡單的計畫任務，不能處理分散式的任務，當任務太多時，可能出現阻塞、崩潰、延遲啟動等問題&lt;/li>
&lt;li>Quartz：更強大的一個排程器，能夠配置上百甚至上千的事務。&lt;/li>
&lt;/ul>
&lt;h1 id="spring-schedule">Spring Schedule&lt;/h1>
&lt;h2 id="步驟">步驟&lt;/h2>
&lt;ol>
&lt;li>在啟動類上加上@EnableScheduling&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@SpringBootApplication&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="nd">@EnableScheduling&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Application&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">SpringApplication&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">run&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Application&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>在方法上加上@Scheduled&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Component&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Task&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Scheduled&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">fixedDelay&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">10&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">100&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">printLocalTime&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">LocalTime&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">now&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/RJ1HtHT.png"
loading="lazy"
alt="image-20220914144530121"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="nd">@Scheduled&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cron&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;1 * * * * ?&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">zone&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;Asia/Taipei&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">printPer5second&lt;/span>&lt;span class="o">(){&lt;/span>
&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">info&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;cron&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/AATFHO2.png"
loading="lazy"
alt="image-20220914145339544"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Scheduled&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cron&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;0/1 * * * * ?&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">zone&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;Asia/Taipei&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">printPer5second&lt;/span>&lt;span class="o">(){&lt;/span>
&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">info&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;cron&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/Kby8DZf.png"
loading="lazy"
alt="image-20220914145730980"
>&lt;/p>
&lt;h2 id="cron表達式七子表達式">Cron表達式(七子表達式)&lt;/h2>
&lt;p>&lt;a class="link" href="https://cron.qqe2.com/" target="_blank" rel="noopener"
>表達式生成工具&lt;/a>&lt;/p>
&lt;p>Cron語源來自Chronos，是希臘神話中掌管時間的神柯羅諾斯(Chronos)。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>秒&lt;/th>
&lt;th>分&lt;/th>
&lt;th>時&lt;/th>
&lt;th>日&lt;/th>
&lt;th>月&lt;/th>
&lt;th>周&lt;/th>
&lt;th>年(可選)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>*&lt;/td>
&lt;td>*&lt;/td>
&lt;td>*&lt;/td>
&lt;td>*&lt;/td>
&lt;td>?&lt;/td>
&lt;td>?&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>秒：0-59&lt;/li>
&lt;li>分：0-59&lt;/li>
&lt;li>時 ：0-23&lt;/li>
&lt;li>日：1-31&lt;/li>
&lt;li>月：0-11或&amp;quot;JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC&amp;quot;&lt;/li>
&lt;li>周：1-7或SUN, MON, TUE, WED, THU, FRI,SAT&lt;/li>
&lt;li>年&lt;/li>
&lt;/ul>
&lt;p>想像一個時鐘&amp;hellip;&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>當每次秒針指向一秒時&lt;/th>
&lt;th>1 * * * * ?&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>當每次時針指向12時&lt;/td>
&lt;td>* * 12 * * ?&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>每個月 1 號中午 12 點&lt;/td>
&lt;td>0 0 12 1 * ?&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1 月每天中午 12 點，每 5 秒&lt;/td>
&lt;td>0/5 0 12 * 1 ?&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">字元&lt;/th>
&lt;th style="text-align:left">意義&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">&lt;code>*&lt;/code>&lt;/td>
&lt;td style="text-align:left">表達任意值，所有值都可以匹配&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>?&lt;/code>&lt;/td>
&lt;td style="text-align:left">只用在 &lt;code>日&lt;/code> 跟 &lt;code>周&lt;/code> 的值域，有點表達 don’t care 的概念，無所謂，不關心到底是什麼值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>-&lt;/code>&lt;/td>
&lt;td style="text-align:left">指定範圍，前後接數字: 10-12&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>,&lt;/code>&lt;/td>
&lt;td style="text-align:left">指定離散的選項: 1,5,6,8，或者的概念&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>/&lt;/code>&lt;/td>
&lt;td style="text-align:left">指定增量，表達 &lt;code>每&lt;/code> 的概念: 0/5 意旨從 0 開始每 5 單位&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>L&lt;/code>&lt;/td>
&lt;td style="text-align:left">用在 &lt;code>月&lt;/code> 跟 &lt;code>周&lt;/code> 的值域。在月的話表達最後一天，在周的話前面可以加上數字 3L 表示該月最後一個星期二&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>W&lt;/code>&lt;/td>
&lt;td style="text-align:left">用在&lt;code>日&lt;/code>的值域表示距離最近的該月工作日: 15W，距離 15 號最近的工作日，可能往前也可能往後&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>LW&lt;/code>&lt;/td>
&lt;td style="text-align:left">用在&lt;code>日&lt;/code>的值域，表示最後一周的工作日&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>#&lt;/code>&lt;/td>
&lt;td style="text-align:left">用在&lt;code>周&lt;/code>的值域，指定特定周的特定日: “4#2” 表示第二周的星期三&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>C&lt;/code>&lt;/td>
&lt;td style="text-align:left">用在&lt;code>日&lt;/code>跟&lt;code>周&lt;/code>的值域，指某特定個日期的後一天: 在&lt;code>日&lt;/code>中寫 3C 指該月 3 號的後一天，在&lt;code>周&lt;/code>中寫 2C 指該周星期一的後一天&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="quartz">Quartz&lt;/h1>
&lt;p>&lt;img src="https://i.imgur.com/C8FFRz9.png"
loading="lazy"
alt="image-20220916143034403"
>&lt;/p>
&lt;p>是一個開源的任務排程器，幾乎可以整合到任何Java應用程式中。&lt;/p>
&lt;p>它可以用來&lt;/p>
&lt;ul>
&lt;li>安排每個晚上把資料庫內容轉存到檔案&lt;/li>
&lt;li>提供定時提醒服務&lt;/li>
&lt;li>族繁不及備載&amp;hellip;&lt;/li>
&lt;/ul>
&lt;h3 id="底層數據結構--堆">底層數據結構- 堆&lt;/h3>
&lt;h4 id="介紹">介紹&lt;/h4>
&lt;p>堆是一種特殊的樹，滿足下面兩個條件，就是一個&lt;strong>堆&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>堆是一顆完全二元樹&lt;code>完整二元樹：除了最後一層以外，其他層的節點數需要達到最大(1,2,4,8. ..)&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/GYIKgRe.png"
loading="lazy"
alt="image-20220916103657827"
>&lt;/p>
&lt;ol start="2">
&lt;li>每個節點所儲存的值，必須要大於&lt;code>小頂堆&lt;/code>或小於&lt;code>大頂堆&lt;/code>父節點的值&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/t5Aeict.png"
loading="lazy"
alt="image-20220916104946559"
>&lt;/p>
&lt;blockquote>
&lt;p>小頂堆&lt;/p>
&lt;/blockquote>
&lt;p>完整二元樹的一些特性：快速定位父節點&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/F9btok2.png"
loading="lazy"
alt="image-20220916105634080"
>&lt;/p>
&lt;p>&lt;strong>在排程器的框架中，每一個節點就是一個Job，越頻繁的Job會被放置在越上層的節點&lt;/strong>&lt;/p>
&lt;h4 id="如何插入元素">如何插入元素&lt;/h4>
&lt;p>尾插法，在尾部插入一個新的元素，然後上浮，浮到符合定義&lt;/p>
&lt;ol>
&lt;li>除了最後一層以外，其他層的節點數需要達到最大(1,2,4,8. ..)，且最後一層節點都靠左排列&lt;/li>
&lt;li>每個節點所儲存的值，必須要大於&lt;code>小頂堆&lt;/code>或小於&lt;code>大頂堆&lt;/code>父節點的值&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/kGnnrnf.png"
loading="lazy"
alt="image-20220916110137933"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/YjWGVYi.png"
loading="lazy"
alt="image-20220916110150486"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/pqhvAgT.png"
loading="lazy"
alt="image-20220916110656733"
>&lt;/p>
&lt;h4 id="如何刪除元素">如何刪除元素&lt;/h4>
&lt;p>將尾部(最後一個節點)放置到堆頂，然後下沉&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/vM6IFnf.png"
loading="lazy"
alt="image-20220916111249806"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/ltoSIL1.png"
loading="lazy"
alt="image-20220916111306206"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/spOXHoC.png"
loading="lazy"
alt="image-20220916111330270"
>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/giEhi6Y.png"
loading="lazy"
alt="image-20220916111958376"
>&lt;/p>
&lt;h3 id="時間輪算法time-wheel">時間輪算法(Time Wheel)&lt;/h3>
&lt;p>&lt;img src="https://i.imgur.com/FGlGv1M.png"
loading="lazy"
alt="image-20220916114613849"
>&lt;/p>
&lt;p>再刪除元素的時候都需要下沉，當節點數很多時會造成性能延宕&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/djp3Uq4.png"
loading="lazy"
alt="image-20220916113838923"
>&lt;/p>
&lt;h4 id="round-型的時間輪">round 型的時間輪&lt;/h4>
&lt;p>任務上記錄一個round，遍歷到了就將round減一，為0時取出來執行&lt;/p>
&lt;h4 id="分層時間輪">分層時間輪&lt;/h4>
&lt;p>Cron表達式以及其他排程器所採用的底層架構，分成秒輪、分輪、小時輪、日輪、周輪、月輪、年輪&amp;hellip;，月輪迭代到了，就將任務取出放到天輪中執行&amp;hellip;，以此類推&lt;/p>
&lt;h2 id="cron表達式七子表達式-1">Cron表達式(七子表達式)&lt;/h2>
&lt;p>&lt;a class="link" href="https://cron.qqe2.com/" target="_blank" rel="noopener"
>表達式生成工具&lt;/a>&lt;/p>
&lt;p>Cron語源來自Chronos，是希臘神話中掌管時間的神柯羅諾斯(Chronos)。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>秒&lt;/th>
&lt;th>分&lt;/th>
&lt;th>時&lt;/th>
&lt;th>日&lt;/th>
&lt;th>月&lt;/th>
&lt;th>周&lt;/th>
&lt;th>年(可選)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>*&lt;/td>
&lt;td>*&lt;/td>
&lt;td>*&lt;/td>
&lt;td>*&lt;/td>
&lt;td>?&lt;/td>
&lt;td>?&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>秒：0-59&lt;/li>
&lt;li>分：0-59&lt;/li>
&lt;li>時 ：0-23&lt;/li>
&lt;li>日：1-31&lt;/li>
&lt;li>月：0-11或&amp;quot;JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC&amp;quot;&lt;/li>
&lt;li>周：1-7或SUN, MON, TUE, WED, THU, FRI,SAT&lt;/li>
&lt;li>年&lt;/li>
&lt;/ul>
&lt;p>想像一個時鐘&amp;hellip;&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>當每次秒針指向一秒時&lt;/th>
&lt;th>1 * * * * ?&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>當每次時針指向12時&lt;/td>
&lt;td>* * 12 * * ?&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>每個月 1 號中午 12 點&lt;/td>
&lt;td>0 0 12 1 * ?&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1 月每天中午 12 點，每 5 秒&lt;/td>
&lt;td>0/5 0 12 * 1 ?&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">字元&lt;/th>
&lt;th style="text-align:left">意義&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">&lt;code>*&lt;/code>&lt;/td>
&lt;td style="text-align:left">表達任意值，所有值都可以匹配&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>?&lt;/code>&lt;/td>
&lt;td style="text-align:left">只用在 &lt;code>日&lt;/code> 跟 &lt;code>周&lt;/code> 的值域，有點表達 don’t care 的概念，無所謂，不關心到底是什麼值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>-&lt;/code>&lt;/td>
&lt;td style="text-align:left">指定範圍，前後接數字: 10-12&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>,&lt;/code>&lt;/td>
&lt;td style="text-align:left">指定離散的選項: 1,5,6,8，或者的概念&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>/&lt;/code>&lt;/td>
&lt;td style="text-align:left">指定增量，表達 &lt;code>每&lt;/code> 的概念: 0/5 意旨從 0 開始每 5 單位&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>L&lt;/code>&lt;/td>
&lt;td style="text-align:left">用在 &lt;code>月&lt;/code> 跟 &lt;code>周&lt;/code> 的值域。在月的話表達最後一天，在周的話前面可以加上數字 3L 表示該月最後一個星期二&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>W&lt;/code>&lt;/td>
&lt;td style="text-align:left">用在&lt;code>日&lt;/code>的值域表示距離最近的該月工作日: 15W，距離 15 號最近的工作日，可能往前也可能往後&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>LW&lt;/code>&lt;/td>
&lt;td style="text-align:left">用在&lt;code>日&lt;/code>的值域，表示最後一周的工作日&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>#&lt;/code>&lt;/td>
&lt;td style="text-align:left">用在&lt;code>周&lt;/code>的值域，指定特定周的特定日: “4#2” 表示第二周的星期三&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>C&lt;/code>&lt;/td>
&lt;td style="text-align:left">用在&lt;code>日&lt;/code>跟&lt;code>周&lt;/code>的值域，指某特定個日期的後一天: 在&lt;code>日&lt;/code>中寫 3C 指該月 3 號的後一天，在&lt;code>周&lt;/code>中寫 2C 指該周星期一的後一天&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>​&lt;/p>
&lt;h2 id="重要api及概念">重要API及概念&lt;/h2>
&lt;blockquote>
&lt;p>記得Job類一定要是&lt;strong>public class&lt;/strong>，不然Scheduler會讀不到&lt;/p>
&lt;/blockquote>
&lt;p>釋例一：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Quartz&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">MyJob&lt;/span> &lt;span class="n">myJob&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">MyJob&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">JobDetail&lt;/span> &lt;span class="n">jobDetail&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">JobBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newJob&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MyJob&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withIdentity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;job1&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;group1&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">Trigger&lt;/span> &lt;span class="n">trigger&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">TriggerBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newTrigger&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withIdentity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;trigger1&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;trigger1&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">startNow&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withSchedule&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SimpleScheduleBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">simpleSchedule&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">withIntervalInSeconds&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">repeatForever&lt;/span>&lt;span class="o">())&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Scheduler&lt;/span> &lt;span class="n">scheduler&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">StdSchedulerFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDefaultScheduler&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">scheduler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">scheduleJob&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">jobDetail&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">trigger&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">scheduler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">SchedulerException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RuntimeException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">MyJob&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Job&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">execute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">JobExecutionContext&lt;/span> &lt;span class="n">jobExecutionContext&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">JobExecutionException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;MyJob execute:&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Date&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>釋例二&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">HelloJob&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Scheduler&lt;/span> &lt;span class="n">scheduler&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">StdSchedulerFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDefaultScheduler&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">scheduler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">JobDetail&lt;/span> &lt;span class="n">jobDetail&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">JobBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newJob&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SayHello&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withIdentity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;job1&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;group1&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="c1">//Job1是名字，具有唯一性，group1是這個Job屬於哪一組，同一組的Job可以共享相同的邏輯來處理Job。需要name與Job才可以組成一個JobKey
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">usingJobData&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;username&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;Hoxton&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">usingJobData&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;age&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;20&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withDescription&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;desc-demo&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">SimpleTrigger&lt;/span> &lt;span class="n">trigger&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">TriggerBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newTrigger&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withIdentity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;trigger1&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;group1&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">startNow&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withSchedule&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SimpleScheduleBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">simpleSchedule&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">withIntervalInSeconds&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">repeatForever&lt;/span>&lt;span class="o">())&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">scheduler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">scheduleJob&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">jobDetail&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">trigger&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">scheduler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">// scheduler.shutdown();
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">SchedulerException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RuntimeException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Slf4j&lt;/span>
&lt;span class="nd">@NoArgsConstructor&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">SayHello&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Job&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">execute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">JobExecutionContext&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">JobExecutionException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">JobDetail&lt;/span> &lt;span class="n">jobDetail&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getJobDetail&lt;/span>&lt;span class="o">();&lt;/span>&lt;span class="c1">//從context中獲取屬性
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">JobKey&lt;/span> &lt;span class="n">key&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">jobDetail&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getKey&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">Class&lt;/span>&lt;span class="o">&amp;lt;?&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">Job&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">jobClass&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">jobDetail&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getJobClass&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">description&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">jobDetail&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDescription&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">JobDataMap&lt;/span> &lt;span class="n">jobDataMap&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">jobDetail&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getJobDataMap&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">username&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">jobDataMap&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;username&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">age&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">jobDataMap&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getIntValue&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;age&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">info&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;\nJobKey : {},\n JobClass : {},\n JobDesc : {},\n username : {},\n age : {}&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">jobClass&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">description&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">age&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="scheduler">Scheduler&lt;/h3>
&lt;p>生命週期由ScheduleFactory建立開始，呼叫shutdown方法結束。&lt;/p>
&lt;p>當Schduler建立，任何關於Schduling相關的事情，都由它控制&lt;/p>
&lt;ul>
&lt;li>新增&lt;/li>
&lt;li>刪除&lt;/li>
&lt;li>列出所有Job&lt;/li>
&lt;li>暫停觸發器&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>在Start之前不會做任何事情&lt;/strong>&lt;/p>
&lt;h3 id="job">Job&lt;/h3>
&lt;p>你希望被排程器排程的任務元件介面，定義如何執行，是正在執行的作業例項，一個Job可以建立多個JobDetail，擁有不同的JobDataMap。本身implement了Job類&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">graph TD;
Job ---&amp;gt; JodDetail1 &amp;amp; JodDetail2 &amp;amp; JodDetail3 &amp;amp; JodDetail...
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">SendEmail&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Job&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">execute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">JobExecutionContext&lt;/span> &lt;span class="n">jobExecutionContext&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">JobExecutionException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;SendEmail&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>當Job的觸發器觸發時，排程程式的工作執行將呼叫excute()方法&lt;/li>
&lt;li>該方法接收一個&lt;code>JobExcutionContext&lt;/code>物件，為Job提供了豐富的執行時環境，比如&lt;code>schduler&lt;/code>,&lt;code>trigger&lt;/code>,&lt;code>jobDataMap&lt;/code>,&lt;code>job&lt;/code>,&lt;code>calender&lt;/code>,&lt;code>time&lt;/code>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>何謂Context(上下文)&lt;/p>
&lt;p>可以理解為環境、容器的意思會比上下文更具體一點，它提供了一個程式中全域性的資訊。&lt;/p>
&lt;/blockquote>
&lt;h3 id="jobdetail">JobDetail&lt;/h3>
&lt;p>用於定義Job的各種屬性、各種任務，還可以用來為Job儲存狀態資訊的JobDataMap，是將Job加入scheduler時，所需要創建的一個物件，它包含了各種屬性設置，以及用於存取job實例狀態訊息的JobDataMap，在創建JobDetail時，需要將欲執行的類名傳遞給JobDetail，這樣schedule就知道要執行何種類型的job。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">JobDetail&lt;/span> &lt;span class="n">jobDetail&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">JobBulider&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newJob&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Job&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">bulid&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="jobdatamap">JobDataMap&lt;/h3>
&lt;p>實作Map介面，因此具有Key-Value，儲存可序列化資料，供Job在執行時使用。也可以使用&lt;code>usingJobData(key,value)&lt;/code>在建構JobDetail的時候傳入資料，使用JobDetail.getDataMap()獲取Map。可以再透過jobDataMap取出裡面的數據&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="n">JobDetail&lt;/span> &lt;span class="n">job&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">JobBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newJob&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HelloJob&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withIdentity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;helloJob&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;hello&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="c1">//給job命名並分組
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">usingJobData&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;jobdd&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;hello job&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="c1">//通過JobBuilder的usingJobData方法給JobDataMap中塞入數據
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">HelloJob&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Job&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">execute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">JobExecutionContext&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">JobExecutionException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">err&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getJobDetail&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getKey&lt;/span>&lt;span class="o">());&lt;/span>&lt;span class="c1">// JobDetail的key又他的name和group組成
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">err&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getTrigger&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getKey&lt;/span>&lt;span class="o">());&lt;/span>&lt;span class="c1">// Trigger的key又他的name和group組成
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">err&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getJobDetail&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getJobDataMap&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;jobdd&amp;#34;&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">err&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;hello,quartz&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>會輸出&lt;/p>
&lt;p>`hello.helloJob&lt;/p>
&lt;p>hello.helloTrigger&lt;/p>
&lt;p>hello job&lt;/p>
&lt;p>hello, quartz&lt;/p>
&lt;h3 id="trigger">Trigger&lt;/h3>
&lt;p>觸發任務執行，觸發器可能具有與Job有關的JobDataMap，以便將觸發器觸發的引數傳遞給Job，Quartz本身提供了幾種觸發器&lt;code>SimpleTrigger&lt;/code>和&lt;code>CronTrigger&lt;/code>是最常用到的。&lt;/p>
&lt;h4 id="simpletriger">&lt;strong>SimpleTriger&lt;/strong>&lt;/h4>
&lt;p>用於一次性執行作業或需要在給定的時間觸發一個作業並重複執行N次，且兩次執行時間有Delay。用在具體的時間點，並已指定的間隔時間重複執行若干次，它包含了幾種屬性：&lt;/p>
&lt;ol>
&lt;li>開始時間&lt;/li>
&lt;li>結束時間&lt;/li>
&lt;li>重複次數&lt;/li>
&lt;li>重複間隔&lt;/li>
&lt;/ol>
&lt;p>釋例一：立刻觸發一次，然後停止&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="n">Date&lt;/span> &lt;span class="n">date&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Date&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">Trigger&lt;/span> &lt;span class="n">trigger1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">TriggerBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newTrigger&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withIdentity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;trigger1&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;group1&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">startAt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">date&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>釋例二：指定時間觸發，每隔十秒執行一次，重複10次&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="n">trigger&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">newTrigger&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withIdentity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;trigger3&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;group1&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">startAt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">myTimeToStartFiring&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="c1">// if a start time is not given (if this line were omitted), &amp;#34;now&amp;#34; is implied
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">withSchedule&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">simpleSchedule&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withIntervalInSeconds&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">10&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withRepeatCount&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">10&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="c1">// note that 10 repeats will give a total of 11 firings
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">forJob&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">myJob&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="c1">// identify job with handle to its JobDetail itself
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>釋例三：5分鐘以後開始觸發，僅執行一次&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="n">trigger&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">SimpleTrigger&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">newTrigger&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withIdentity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;trigger5&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;group1&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">startAt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">futureDate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">5&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">IntervalUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MINUTE&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="c1">// use DateBuilder to create a date in the future
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">forJob&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">myJobKey&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="c1">// identify job with its JobKey
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>釋例四：立即觸發，每個5分鐘執行一次，直到22:00：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">trigger&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">newTrigger&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withIdentity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;trigger7&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;group1&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withSchedule&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">simpleSchedule&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withIntervalInMinutes&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">5&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">repeatForever&lt;/span>&lt;span class="o">())&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">endAt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">dateOf&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">22&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">))&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>釋例五：在下一小時整點觸發，每個2小時執行一次，一直重複：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="n">trigger&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">newTrigger&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withIdentity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;trigger8&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="c1">// because group is not specified, &amp;#34;trigger8&amp;#34; will be in the default group
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">startAt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">evenHourDate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="c1">// get the next even-hour (minutes and seconds zero (&amp;#34;00:00&amp;#34;))
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">withSchedule&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">simpleSchedule&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withIntervalInHours&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">2&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">repeatForever&lt;/span>&lt;span class="o">())&lt;/span>
&lt;span class="c1">// note that in this example, &amp;#39;forJob(..)&amp;#39; is not called which is valid
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// if the trigger is passed to the scheduler along with the job
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">scheduler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">scheduleJob&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">trigger&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">job&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="crontrigger">&lt;strong>CronTrigger&lt;/strong>&lt;/h4>
&lt;p>希望以日期作為觸發任務的板機，就用CronTriger，&lt;strong>實務上比較常用這個&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="n">CronTrigger&lt;/span> &lt;span class="n">trigger2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">TriggerBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newTrigger&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withIdentity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;trigger3&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;group1&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withSchedule&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">CronScheduleBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">cronSchedule&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;0/2 * * * * ?&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">package&lt;/span> &lt;span class="nn">com.how2java&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import static&lt;/span> &lt;span class="nn">org.quartz.CronScheduleBuilder.cronSchedule&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import static&lt;/span> &lt;span class="nn">org.quartz.JobBuilder.newJob&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import static&lt;/span> &lt;span class="nn">org.quartz.TriggerBuilder.newTrigger&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import static&lt;/span> &lt;span class="nn">org.quartz.SimpleScheduleBuilder.simpleSchedule&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.util.Date&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.quartz.CronTrigger&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.quartz.DateBuilder&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.quartz.JobDetail&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.quartz.Scheduler&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.quartz.SimpleTrigger&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.quartz.impl.StdSchedulerFactory&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">TestQuartz&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="n">Scheduler&lt;/span> &lt;span class="n">scheduler&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">StdSchedulerFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDefaultScheduler&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">Date&lt;/span> &lt;span class="n">startTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">DateBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">nextGivenSecondDate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">8&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">JobDetail&lt;/span> &lt;span class="n">job&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">newJob&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MailJob&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">withIdentity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;mailJob&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;mailGroup&amp;#34;&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">CronTrigger&lt;/span> &lt;span class="n">trigger&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">newTrigger&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">withIdentity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;trigger1&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;group1&amp;#34;&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">withSchedule&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cronSchedule&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;0/2 * * * * ?&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">// schedule it to run!
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Date&lt;/span> &lt;span class="n">ft&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">scheduler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">scheduleJob&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">job&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">trigger&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;使用的Cron表达式是：&amp;#34;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">trigger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getCronExpression&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="c1">// System.out.printf(&amp;#34;%s 这个任务会在 %s 准时开始运行，累计运行%d次，间隔时间是%d毫秒%n&amp;#34;, job.getKey(), ft.toLocaleString(), trigger.getRepeatCount()+1, trigger.getRepeatInterval());
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="n">scheduler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">//等待200秒，让前面的任务都执行完了之后，再关闭调度器
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sleep&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">200000&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">scheduler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">shutdown&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="jobbulider">JobBulider&lt;/h3>
&lt;p>用來建立&lt;a class="link" href="#JobDetail" >JobDetail&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="n">JobDetail&lt;/span> &lt;span class="n">jobDetail&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">JobBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newJob&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">某個繼承了Job的類&lt;/span>&lt;span class="o">)...&lt;/span>
&lt;span class="n">JobDetail&lt;/span> &lt;span class="n">jobDetail&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">JobBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newJob&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SayHello&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withIdentity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;job1&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;group1&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">usingJobData&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;username&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;Hoxton&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">usingJobData&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;age&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;20&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">withDescription&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;desc-demo&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>TriggerBulider&lt;/p>
&lt;p>用於建立&lt;a class="link" href="#Trigger" >Trigger&lt;/a>&lt;/p>
&lt;h3 id="identity">Identity&lt;/h3>
&lt;p>當Job和Trgger在Quartz排程程式中註冊時，會獲得標示鍵，&lt;code>JobKey&lt;/code>和&lt;code>TriggerKey&lt;/code>置入group中，易於組織管理，其中name與group必須&lt;strong>唯一&lt;/strong>&lt;/p>
&lt;h3 id="為何要將job和trigger分開來">為何要將Job和Trigger分開來?&lt;/h3>
&lt;blockquote>
&lt;p>While developing Quartz, we decided that it made sense to create a separation between the schedule and the work to be performed on that schedule. This has (in our opinion) many benefits.&lt;/p>
&lt;p>For example, Jobs can be created and stored in the job scheduler independent of a trigger, and many triggers can be associated with the same job. Another benefit of this loose-coupling is the ability to configure jobs that remain in the scheduler after their associated triggers have expired, so that that it can be rescheduled later, without having to re-define it. It also allows you to modify or replace a trigger without having to re-define its associated job.&lt;/p>
&lt;/blockquote>
&lt;h2 id="job與jobdetail的一些說明">Job與JobDetail的一些說明&lt;/h2>
&lt;ul>
&lt;li>Job是正在執行的作業，JobDetail則是作業的定義&lt;/li>
&lt;li>一個Job可以創建多個JobDetail，擁有不同的JobDataMap&lt;/li>
&lt;/ul>
&lt;p>舉例來說，今天寫了一個定時寄送信件的Job，叫做SendEmailJob，我們希望這個Job可以寄給客戶，然後在cc給你的主管，所以需要創建兩個不同的JobDetail，比如說SendEmailToClient、SendEmailToAdministor，並透過JobDataMap綁定參數傳遞至JobDetail中，這兩個JobDetail擁有各自獨立的JobDataMap，實現起來會更靈活。&lt;/p>
&lt;h1 id="參考">參考&lt;/h1>
&lt;p>&lt;a class="link" href="http://www.quartz-scheduler.org/documentation/quartz-2.3.0/quick-start.html" target="_blank" rel="noopener"
>官方文檔&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://iter01.com/575275.html" target="_blank" rel="noopener"
>任務排程框架Quartz快速入門&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.1ju.org/quartz/index" target="_blank" rel="noopener"
>Quartz教學基礎&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.796t.com/content/1545519797.html" target="_blank" rel="noopener"
>觸發器詳細定義&lt;/a>&lt;/p></description></item><item><title>Archives</title><link>https://hoxtonhsu.com/archives/</link><pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate><guid>https://hoxtonhsu.com/archives/</guid><description/></item><item><title>Search</title><link>https://hoxtonhsu.com/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hoxtonhsu.com/search/</guid><description/></item></channel></rss>