<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Git on Hoxton</title><link>https://hoxtonhsu.com/tags/git/</link><description>Recent content in Git on Hoxton</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Sun, 16 Apr 2023 17:30:28 +0800</lastBuildDate><atom:link href="https://hoxtonhsu.com/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>Cherry Pick的一點研究</title><link>https://hoxtonhsu.com/p/cherry-pick%E7%9A%84%E4%B8%80%E9%BB%9E%E7%A0%94%E7%A9%B6/</link><pubDate>Sun, 16 Apr 2023 17:30:28 +0800</pubDate><guid>https://hoxtonhsu.com/p/cherry-pick%E7%9A%84%E4%B8%80%E9%BB%9E%E7%A0%94%E7%A9%B6/</guid><description>&lt;img src="https://i.imgur.com/n1qX6TQ.gif" alt="Featured image of post Cherry Pick的一點研究" />&lt;p>利用一個下午，把對Cherry Pick的一些問題整理成一篇文章，並且這個指令常常與Rebase, Merge兩者來對比，目前感覺如下&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>指令&lt;/th>
&lt;th>merge&lt;/th>
&lt;th>rebase&lt;/th>
&lt;th>cherry pick&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>何時使用&lt;/td>
&lt;td>將一條分支合進另一條分支中&lt;/td>
&lt;td>將當前分支與目標分支結合，並以目標分支為底(base)重新出發&lt;/td>
&lt;td>只想要某個分支的某些commit，不希望把整個分支搬過來&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>指令&lt;/td>
&lt;td>git merge salve&lt;/td>
&lt;td>git rebase main&lt;/td>
&lt;td>git cherry-pick c4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>圖示&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/4HirU62.gif"
loading="lazy"
alt="demo"
>&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/ZLDp19Y.gif"
loading="lazy"
alt="demo"
>&lt;/td>
&lt;td>&lt;img src="https://i.imgur.com/hYLq4Fc.gif"
loading="lazy"
alt="demo"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>優點&lt;/td>
&lt;td>簡單易操作&lt;/td>
&lt;td>不產生多餘commit 與分支線&lt;/td>
&lt;td>不會更動到Commit的歷史順序，&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>缺點&lt;/td>
&lt;td>會產生額外的分支合成線&lt;/td>
&lt;td>不可以在共用分支上使用，否則將打斷commit順序&lt;/td>
&lt;td>若cherry pick commit過多，易產生重複的commit紀錄&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="預覽">預覽&lt;/h1>
&lt;p>這是一個SpringBoot專案，Main分支目前長這樣，並且還有兩個協作者，分別是Hoxton跟Dallas&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/fU4UxrO.png"
loading="lazy"
alt="image-20230416174208891"
>&lt;/p>
&lt;p>SourceTree如下&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/dFK8O3Z.png"
loading="lazy"
alt="image-20230416174431279"
>&lt;/p>
&lt;p>Hoxton這個有四個Commit&lt;/p>
&lt;p>依序如下&lt;/p>
&lt;ol>
&lt;li>創建MemberDao　f198&lt;/li>
&lt;li>創建MemberService 185a&lt;/li>
&lt;li>創建MemberController 310a&lt;/li>
&lt;li>為MemberController新增一個方法 99b2&lt;/li>
&lt;li>刪除MemberController fd8b&lt;/li>
&lt;/ol>
&lt;p>Dallas這個分支有兩個Commit&lt;/p>
&lt;ol>
&lt;li>創建LoginContorller 7eb2&lt;/li>
&lt;li>為LogingController新增一個方法 e92a&lt;/li>
&lt;/ol>
&lt;p>Main這個分支有一個Commit&lt;/p>
&lt;ol>
&lt;li>創建README fce6&lt;/li>
&lt;/ol>
&lt;p>接下來在不同情境下，使用Cherry Pick，看看會有什麼結果與問題&lt;/p>
&lt;h1 id="實際演練">實際演練&lt;/h1>
&lt;h2 id="main需要hoxton的進度其中有包含main上未有的檔案99b2">Main需要hoxton的進度，其中有包含Main上未有的檔案(99b2)&lt;/h2>
&lt;p>&lt;img src="https://i.imgur.com/FiXE5kh.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;p>結果：&lt;/p>
&lt;p>發生衝突，因Main上沒有MemberController。&lt;span style='color:yellow'>雖然最新的Commit 只有對MemberController更新，沒有創建MemberController的部分，但因為要Cherry Pick的關係，所以還是會把MemberController創建起來，&lt;/span>至於Service、Dao則不會帶過來，因為那是屬於別的Commit的，因此最終是長這樣，&lt;span style='color:lightgreen'>綠色部分是新增的部分&lt;/span>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/OFdw53w.png"
loading="lazy"
alt="image-20230417001936376"
>&lt;/p>
&lt;blockquote>
&lt;p>hoxton-310a 創建Member Controller&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://i.imgur.com/lbKRTTw.png"
loading="lazy"
alt="image-20230416180321809"
>&lt;/p>
&lt;blockquote>
&lt;p>hoxton-99b2 在Member Controller新增方法&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://i.imgur.com/qAWo1AT.png"
loading="lazy"
alt="image-20230416180301204"
>&lt;/p>
&lt;h2 id="main只需要hoxton的幾個進度其中的commit並非連續310a-f198">Main只需要Hoxton的幾個進度，其中的commit並非連續(310a, f198)&lt;/h2>
&lt;p>&lt;img src="https://i.imgur.com/tEj7v8u.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;p>結果：&lt;/p>
&lt;p>將MemberController與Dao創建進來，其中不包含Dao，因為Cherry-pick的部分不包含，注意到的是，因為Cherry pick時我們的指令是這樣&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">git cherry-pick 310a f198
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;span style='color:yellow'>因此Commit 的順序調換了，變成先Controller在Dao&lt;/span>&lt;/p>
&lt;p>檔案長這樣&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/zFZG77L.png"
loading="lazy"
alt="image-20230417002958197"
>&lt;/p>
&lt;h2 id="main只需要hoxton的幾個進度其中的commit並非連續f198-310a">Main只需要Hoxton的幾個進度，其中的commit並非連續(f198, 310a)&lt;/h2>
&lt;p>&lt;img src="https://i.imgur.com/CAHlXtn.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;p>結果：&lt;/p>
&lt;p>將MemberController與Dao創建進來，其中不包含Service，因為Cherry-pick的部分不包含，注意到的是，因為我們Cherry Pick的指令如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">git cherry-pick f198 310a
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;span style='color:yellow'>因此Commit 順序與hoxton上分支的順序一樣&lt;/span>&lt;/p>
&lt;p>檔案長這樣&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/XAk8wDk.png"
loading="lazy"
alt="image-20230417003029528"
>&lt;/p>
&lt;h2 id="cherry-pick一個只有刪除檔案的commit是否能成功">Cherry-pick一個只有刪除檔案的commit，是否能成功&lt;/h2>
&lt;p>fd8b這個Commit是將MemberController刪掉，在Main上cherry Pick後會發生什麼事情呢?&lt;/p>
&lt;p>結果&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/8eCzAem.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;p>結果：&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/dshKQgP.png"
loading="lazy"
alt="image-20230417003832083"
>&lt;/p>
&lt;p>顯示&lt;/p>
&lt;blockquote>
&lt;p>Bad revision&lt;/p>
&lt;/blockquote>
&lt;p>直接不讓cherry-pick，&lt;span style='color:yellow'>我猜多半是因為這個Commit只有包含刪除，因此沒辦法pick&lt;/span>&lt;/p>
&lt;h2 id="cherry-pick一個範圍的commit最終的結果呈現如何">Cherry-pick一個範圍的commit，最終的結果呈現如何?&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash"> git cherry-pick f198 .. fd8b
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/odBYOhx.gif"
loading="lazy"
alt="demo"
>&lt;/p>
&lt;p>結果：&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/Bjhzwru.png"
loading="lazy"
alt="image-20230416184130708"
>&lt;/p>
&lt;h2 id="假設現在dallas需要hoxton的commit它合進去main後會長什麼樣子呢">假設現在Dallas需要Hoxton的Commit，它合進去Main後會長什麼樣子呢?&lt;/h2>
&lt;p>如果兩邊合進Main之後會長怎麼樣呢？會不會兩邊都有重複的Commit導致畫面很亂呢?&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/jTslNLf.png"
loading="lazy"
alt="image-20230416190945774"
>&lt;/p>
&lt;p>結果：&lt;/p>
&lt;p>會，合進去後會有許多重複的commit，因為Cherry pick過去後，雖然看起來一樣，但它們的Hash Code已經有所不同，因此會有重複的情形發生&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/3K4v8s3.png"
loading="lazy"
alt="image-20230416191527528"
>&lt;/p></description></item><item><title>Git在第一次使用的credentialhelperselector該怎麼設定呢</title><link>https://hoxtonhsu.com/p/git%E5%9C%A8%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8%E7%9A%84credentialhelperselector%E8%A9%B2%E6%80%8E%E9%BA%BC%E8%A8%AD%E5%AE%9A%E5%91%A2/</link><pubDate>Wed, 08 Mar 2023 20:48:18 +0800</pubDate><guid>https://hoxtonhsu.com/p/git%E5%9C%A8%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8%E7%9A%84credentialhelperselector%E8%A9%B2%E6%80%8E%E9%BA%BC%E8%A8%AD%E5%AE%9A%E5%91%A2/</guid><description>&lt;img src="https://i.imgur.com/PFJUZO4.png" alt="Featured image of post Git在第一次使用的credentialhelperselector該怎麼設定呢" />&lt;h1 id="前言">前言&lt;/h1>
&lt;p>每次在新電腦上使用Git的時候都會跳這個東西出來，但一直不知道這是啥，這次來研究一下&lt;/p>
&lt;h1 id="總結">總結&lt;/h1>
&lt;p>這東西其實是因為如果要推東西上去或是拉Private專案下來的話，會需要做認證(Credential)的部分，而這個視窗其實就是在問你，你所提供的這些登入資訊想存在哪邊?&lt;/p>
&lt;p>會建議就用預設的&lt;code>manager-core&lt;/code>就好，如果想存在磁碟中的話就選&lt;code>store&lt;/code>，如果想存在Cache就選&lt;code>cache&lt;/code>
這樣就可以囉&lt;/p>
&lt;p>如果已經存了，那可以輸入以下的指令來調整&lt;/p>
&lt;ul>
&lt;li>查看目前的credential.helper 是什麼&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">git config credential.helper
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>將credential.helper 的設定改掉&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">git config --global credential.helper manager-core
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>設定帳號密碼&lt;/li>
&lt;/ul>
&lt;p>由於自2021年後，GitHub不在提供使用帳號密碼的認證方式，要使用Token進行認證，帳號輸入自己的Github帳號，而密碼則是輸入自己的Token，這樣就設定成功囉！&lt;/p></description></item><item><title>實用的Git指令</title><link>https://hoxtonhsu.com/p/%E5%AF%A6%E7%94%A8%E7%9A%84git%E6%8C%87%E4%BB%A4/</link><pubDate>Fri, 06 Jan 2023 14:15:51 +0800</pubDate><guid>https://hoxtonhsu.com/p/%E5%AF%A6%E7%94%A8%E7%9A%84git%E6%8C%87%E4%BB%A4/</guid><description>&lt;img src="https://i.imgur.com/nCGDuUc.png " alt="Featured image of post 實用的Git指令" />&lt;h1 id="前言">前言&lt;/h1>
&lt;p>整理一下工作上有用過，並覺得實用、比較少人提過的一些Git指令。&lt;/p>
&lt;h1 id="git指令">Git指令&lt;/h1>
&lt;ol>
&lt;li>退回到上一個Commit，數字可以更改，1就是上一次，改成三的話就是三次前的Commit&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">git checkout HEAD~1
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/MNnAwmx.gif"
loading="lazy"
alt="demo2"
>&lt;/p>
&lt;ol start="2">
&lt;li>退回上一次的Commit，重複輸入的話會往復循環&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">git checkout -
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/GpQAK2L.gif"
loading="lazy"
alt="demo2"
>&lt;/p>
&lt;ol start="3">
&lt;li>將本次修改合併至上次Commit，如果有漏掉的提交會常用這個指令&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">git commit --amend --no-edit
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item></channel></rss>